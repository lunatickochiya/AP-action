From 3b2ca8f7cdc54d3efd9bcf68db2ce07af020686a Mon Sep 17 00:00:00 2001
From: lunatickochiya <125438787@qq.com>
Date: Sat, 30 Mar 2024 07:41:11 +0800
Subject: [PATCH 5/5] firewall:add fullcone

---
 package/network/config/firewall/Makefile      |  4 +-
 .../config/firewall/files/firewall.config     |  1 +
 .../001-firewall3-fix-locking-issue.patch     | 38 +++++++++++
 .../firewall/patches/100-fullconenat.patch    | 63 +++++++++++++++++++
 .../patches/101-bcm-fullconenat.patch         | 60 ++++++++++++++++++
 5 files changed, 164 insertions(+), 2 deletions(-)
 create mode 100644 package/network/config/firewall/patches/001-firewall3-fix-locking-issue.patch
 create mode 100644 package/network/config/firewall/patches/100-fullconenat.patch
 create mode 100644 package/network/config/firewall/patches/101-bcm-fullconenat.patch

diff --git a/package/network/config/firewall/Makefile b/package/network/config/firewall/Makefile
index 9ae7c06573..d7470f23b3 100644
--- a/package/network/config/firewall/Makefile
+++ b/package/network/config/firewall/Makefile
@@ -9,7 +9,7 @@
 include $(TOPDIR)/rules.mk
 
 PKG_NAME:=firewall
-PKG_RELEASE:=1.1
+PKG_RELEASE:=2
 
 PKG_SOURCE_PROTO:=git
 PKG_SOURCE_URL=$(PROJECT_GIT)/project/firewall3.git
@@ -28,7 +28,7 @@ define Package/firewall
   SECTION:=net
   CATEGORY:=Base system
   TITLE:=OpenWrt C Firewall
-  DEPENDS:=+libubox +libubus +libuci +libip4tc +IPV6:libip6tc +libxtables +kmod-ipt-core +kmod-ipt-conntrack +IPV6:kmod-nf-conntrack6 +kmod-ipt-nat
+  DEPENDS:=+libubox +libubus +libuci +libip4tc +IPV6:libip6tc +libxtables +kmod-ipt-core +kmod-ipt-conntrack +IPV6:kmod-nf-conntrack6 +kmod-ipt-nat +iptables-mod-fullconenat
 endef
 
 define Package/firewall/description
diff --git a/package/network/config/firewall/files/firewall.config b/package/network/config/firewall/files/firewall.config
index 61cfe665e4..4002020f2a 100644
--- a/package/network/config/firewall/files/firewall.config
+++ b/package/network/config/firewall/files/firewall.config
@@ -3,6 +3,7 @@ config defaults
 	option input		ACCEPT
 	option output		ACCEPT
 	option forward		REJECT
+	option fullcone	0
 # Uncomment this line to disable ipv6 rules
 #	option disable_ipv6	1
 
diff --git a/package/network/config/firewall/patches/001-firewall3-fix-locking-issue.patch b/package/network/config/firewall/patches/001-firewall3-fix-locking-issue.patch
new file mode 100644
index 0000000000..8657b5c710
--- /dev/null
+++ b/package/network/config/firewall/patches/001-firewall3-fix-locking-issue.patch
@@ -0,0 +1,38 @@
+From df1306a96127e91ff2d513a0a67345baaf61d113 Mon Sep 17 00:00:00 2001
+From: Florian Eckert <fe@dev.tdt.de>
+Date: Fri, 19 Nov 2021 09:51:02 +0100
+Subject: [PATCH] firewall3: fix locking issue
+
+By calling the command 'fw3 reload' several times at the same time, I
+noticed that the locking was not working properly. It happened from time
+to time that some firewall rules were present twice in the system!
+
+By removing the 'unlink' systemcall, this error no longer occurred on my
+systems.
+
+Since fw3 does not run as a service, it makes no sense to delete this
+lock file every time a filehandler is no longer open on this lock file,
+because fw3 binary is not running.
+
+If fw3 does run as a service then we can remove this lock file on
+service stop. But this is not the case for fw3.
+
+Signed-off-by: Florian Eckert <fe@dev.tdt.de>
+---
+ utils.c | 1 -
+ 1 file changed, 1 deletion(-)
+
+diff --git a/utils.c b/utils.c
+index 17d5bf9..92e966c 100644
+--- a/utils.c
++++ b/utils.c
+@@ -397,7 +397,6 @@ fw3_unlock_path(int *fd, const char *lockpath)
+ 		warn("Cannot release exclusive lock: %s", strerror(errno));
+ 
+ 	close(*fd);
+-	unlink(FW3_LOCKFILE);
+ 
+ 	*fd = -1;
+ }
+-- 
+2.30.2
diff --git a/package/network/config/firewall/patches/100-fullconenat.patch b/package/network/config/firewall/patches/100-fullconenat.patch
new file mode 100644
index 0000000000..d69e7129ec
--- /dev/null
+++ b/package/network/config/firewall/patches/100-fullconenat.patch
@@ -0,0 +1,63 @@
+index 85a3750..9fac9b1 100644
+--- a/defaults.c
++++ b/defaults.c
+@@ -46,7 +46,9 @@ const struct fw3_option fw3_flag_opts[] = {
+ 	FW3_OPT("synflood_protect",    bool,     defaults, syn_flood),
+ 	FW3_OPT("synflood_rate",       limit,    defaults, syn_flood_rate),
+ 	FW3_OPT("synflood_burst",      int,      defaults, syn_flood_rate.burst),
+-
++	
++	FW3_OPT("fullcone",           bool,     defaults, fullcone),
++	
+ 	FW3_OPT("tcp_syncookies",      bool,     defaults, tcp_syncookies),
+ 	FW3_OPT("tcp_ecn",             int,      defaults, tcp_ecn),
+ 	FW3_OPT("tcp_window_scaling",  bool,     defaults, tcp_window_scaling),
+diff --git a/options.h b/options.h
+index 6edd174..c02eb97 100644
+--- a/options.h
++++ b/options.h
+@@ -267,6 +267,7 @@ struct fw3_defaults
+ 	bool drop_invalid;
+ 
+ 	bool syn_flood;
++	bool fullcone;
+ 	struct fw3_limit syn_flood_rate;
+ 
+ 	bool tcp_syncookies;
+diff --git a/zones.c b/zones.c
+index 2aa7473..57eead0 100644
+--- a/zones.c
++++ b/zones.c
+@@ -627,6 +627,7 @@ print_zone_rule(struct fw3_ipt_handle *h
+ 	struct fw3_address *msrc;
+ 	struct fw3_address *mdest;
+ 	struct fw3_ipt_rule *r;
++	struct fw3_defaults *defs = &state->defaults;
+ 
+ 	if (!fw3_is_family(zone, handle->family))
+ 		return;
+@@ -712,8 +713,22 @@ print_zone_rule(struct fw3_ipt_handle *h
+ 				{
+ 					r = fw3_ipt_rule_new(handle);
+ 					fw3_ipt_rule_src_dest(r, msrc, mdest);
+-					fw3_ipt_rule_target(r, "MASQUERADE");
+-					fw3_ipt_rule_append(r, "zone_%s_postrouting", zone->name);
++					/*FIXME: Workaround for FULLCONE-NAT*/
++					if(defs->fullcone)
++					{
++						warn("%s will enable FULLCONE-NAT", zone->name);
++						fw3_ipt_rule_target(r, "FULLCONENAT");
++						fw3_ipt_rule_append(r, "zone_%s_postrouting", zone->name);
++						r = fw3_ipt_rule_new(handle);
++						fw3_ipt_rule_src_dest(r, msrc, mdest);
++						fw3_ipt_rule_target(r, "FULLCONENAT");
++						fw3_ipt_rule_append(r, "zone_%s_prerouting", zone->name);
++					}
++					else
++					{
++						fw3_ipt_rule_target(r, "MASQUERADE");
++						fw3_ipt_rule_append(r, "zone_%s_postrouting", zone->name);
++					}
+ 				}
+ 			}
+ 		}
diff --git a/package/network/config/firewall/patches/101-bcm-fullconenat.patch b/package/network/config/firewall/patches/101-bcm-fullconenat.patch
new file mode 100644
index 0000000000..9cea4a57bf
--- /dev/null
+++ b/package/network/config/firewall/patches/101-bcm-fullconenat.patch
@@ -0,0 +1,60 @@
+--- a/defaults.c
++++ b/defaults.c
+@@ -49,7 +49,7 @@ const struct fw3_option fw3_flag_opts[]
+ 	FW3_OPT("synflood_rate",       limit,    defaults, syn_flood_rate),
+ 	FW3_OPT("synflood_burst",      int,      defaults, syn_flood_rate.burst),
+ 	
+-	FW3_OPT("fullcone",           bool,     defaults, fullcone),
++	FW3_OPT("fullcone",           int,     defaults, fullcone),
+ 	
+ 	FW3_OPT("tcp_syncookies",      bool,     defaults, tcp_syncookies),
+ 	FW3_OPT("tcp_ecn",             int,      defaults, tcp_ecn),
+--- a/options.h
++++ b/options.h
+@@ -98,6 +98,13 @@ enum fw3_reject_code
+ 	__FW3_REJECT_CODE_MAX
+ };
+ 
++enum fullcone_code
++{
++	FULLCONE_DISABLED = 0,
++	FULLCONE_CHION = 1,
++	FULLCONE_BCM = 2,
++};
++
+ extern const char *fw3_flag_names[__FW3_FLAG_MAX];
+ 
+ 
+@@ -297,7 +304,7 @@ struct fw3_defaults
+ 	enum fw3_reject_code any_reject_code;
+ 
+ 	bool syn_flood;
+-	bool fullcone;
++	int fullcone;
+ 	struct fw3_limit syn_flood_rate;
+ 
+ 	bool tcp_syncookies;
+--- a/zones.c
++++ b/zones.c
+@@ -757,7 +757,7 @@ print_zone_rule(struct fw3_ipt_handle *h
+ 					r = fw3_ipt_rule_new(handle);
+ 					fw3_ipt_rule_src_dest(r, msrc, mdest);
+ 					/*FIXME: Workaround for FULLCONE-NAT*/
+-					if(defs->fullcone)
++					if(defs->fullcone == FULLCONE_CHION)
+ 					{
+ 						warn("%s will enable FULLCONE-NAT", zone->name);
+ 						fw3_ipt_rule_target(r, "FULLCONENAT");
+@@ -767,6 +767,12 @@ print_zone_rule(struct fw3_ipt_handle *h
+ 						fw3_ipt_rule_target(r, "FULLCONENAT");
+ 						fw3_ipt_rule_append(r, "zone_%s_prerouting", zone->name);
+ 					}
++					else if (defs->fullcone == FULLCONE_BCM)
++					{
++						fw3_ipt_rule_target(r, "MASQUERADE");
++						fw3_ipt_rule_extra(r, "--mode fullcone");
++						fw3_ipt_rule_append(r, "zone_%s_postrouting", zone->name);
++					}
+ 					else
+ 					{
+ 						fw3_ipt_rule_target(r, "MASQUERADE");
-- 
2.34.1

