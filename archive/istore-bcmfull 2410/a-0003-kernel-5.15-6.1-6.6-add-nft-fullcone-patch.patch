From 2dc83babfca542861e9935067c84a7aa36ed5466 Mon Sep 17 00:00:00 2001
From: lunatickochiya <125438787@qq.com>
Date: Fri, 25 Apr 2025 20:28:41 +0800
Subject: [PATCH 3/8] kernel:5.15 6.1 6.6 :add:nft fullcone patch

---
 .../983-add-bcm-fullconenat-to-nft.patch      | 82 +++++++++++++++++++
 .../983-add-bcm-fullconenat-to-nft.patch      | 82 +++++++++++++++++++
 .../983-add-bcm-fullconenat-to-nft.patch      | 82 +++++++++++++++++++
 3 files changed, 246 insertions(+)
 create mode 100644 target/linux/generic/hack-5.15/983-add-bcm-fullconenat-to-nft.patch
 create mode 100644 target/linux/generic/hack-6.1/983-add-bcm-fullconenat-to-nft.patch
 create mode 100644 target/linux/generic/hack-6.6/983-add-bcm-fullconenat-to-nft.patch

diff --git a/target/linux/generic/hack-5.15/983-add-bcm-fullconenat-to-nft.patch b/target/linux/generic/hack-5.15/983-add-bcm-fullconenat-to-nft.patch
new file mode 100644
index 0000000000..51f14a965e
--- /dev/null
+++ b/target/linux/generic/hack-5.15/983-add-bcm-fullconenat-to-nft.patch
@@ -0,0 +1,82 @@
+From b622de2fa2cded9eeadc0dfba1c44df82465420b Mon Sep 17 00:00:00 2001
+From: jjm2473 <jjm2473@gmail.com>
+Date: Fri, 3 Jan 2025 14:03:22 +0800
+Subject: [PATCH] netfilter: nft_masq: supports brcm fullcone flag
+
+---
+ include/uapi/linux/netfilter/nf_tables.h |  2 ++
+ net/netfilter/nft_masq.c                 | 11 +++++++++++
+ 2 files changed, 13 insertions(+)
+
+diff --git a/include/uapi/linux/netfilter/nf_tables.h b/include/uapi/linux/netfilter/nf_tables.h
+index 9c29015d0..d6f6f086a 100644
+--- a/include/uapi/linux/netfilter/nf_tables.h
++++ b/include/uapi/linux/netfilter/nf_tables.h
+@@ -1477,12 +1477,14 @@ enum nft_tproxy_attributes {
+  * @NFTA_MASQ_FLAGS: NAT flags (see NF_NAT_RANGE_* in linux/netfilter/nf_nat.h) (NLA_U32)
+  * @NFTA_MASQ_REG_PROTO_MIN: source register of proto range start (NLA_U32: nft_registers)
+  * @NFTA_MASQ_REG_PROTO_MAX: source register of proto range end (NLA_U32: nft_registers)
++ * @NFTA_MASQ_REG_FULLCONE: fullcone NAT (NLA_U8)
+  */
+ enum nft_masq_attributes {
+ 	NFTA_MASQ_UNSPEC,
+ 	NFTA_MASQ_FLAGS,
+ 	NFTA_MASQ_REG_PROTO_MIN,
+ 	NFTA_MASQ_REG_PROTO_MAX,
++	NFTA_MASQ_REG_FULLCONE,
+ 	__NFTA_MASQ_MAX
+ };
+ #define NFTA_MASQ_MAX		(__NFTA_MASQ_MAX - 1)
+diff --git a/net/netfilter/nft_masq.c b/net/netfilter/nft_masq.c
+index 8a14aaca9..9c97a990a 100644
+--- a/net/netfilter/nft_masq.c
++++ b/net/netfilter/nft_masq.c
+@@ -17,6 +17,7 @@ struct nft_masq {
+ 	u32			flags;
+ 	u8			sreg_proto_min;
+ 	u8			sreg_proto_max;
++	bool		fullcone;
+ };
+ 
+ static const struct nla_policy nft_masq_policy[NFTA_MASQ_MAX + 1] = {
+@@ -24,6 +25,7 @@ static const struct nla_policy nft_masq_policy[NFTA_MASQ_MAX + 1] = {
+ 		NLA_POLICY_MASK(NLA_BE32, NF_NAT_RANGE_MASK),
+ 	[NFTA_MASQ_REG_PROTO_MIN]	= { .type = NLA_U32 },
+ 	[NFTA_MASQ_REG_PROTO_MAX]	= { .type = NLA_U32 },
++	[NFTA_MASQ_REG_FULLCONE]	= { .type = NLA_U8 },
+ };
+ 
+ static int nft_masq_validate(const struct nft_ctx *ctx,
+@@ -51,6 +53,9 @@ static int nft_masq_init(const struct nft_ctx *ctx,
+ 	if (tb[NFTA_MASQ_FLAGS])
+ 		priv->flags = ntohl(nla_get_be32(tb[NFTA_MASQ_FLAGS]));
+ 
++	if (tb[NFTA_MASQ_REG_FULLCONE])
++		priv->fullcone = nla_get_u8(tb[NFTA_MASQ_REG_FULLCONE]);
++
+ 	if (tb[NFTA_MASQ_REG_PROTO_MIN]) {
+ 		err = nft_parse_register_load(tb[NFTA_MASQ_REG_PROTO_MIN],
+ 					      &priv->sreg_proto_min, plen);
+@@ -80,6 +85,9 @@ static int nft_masq_dump(struct sk_buff *skb,
+ 	    nla_put_be32(skb, NFTA_MASQ_FLAGS, htonl(priv->flags)))
+ 		goto nla_put_failure;
+ 
++	if (priv->fullcone && nla_put_u8(skb, NFTA_MASQ_REG_FULLCONE, 1))
++		goto nla_put_failure;
++
+ 	if (priv->sreg_proto_min) {
+ 		if (nft_dump_register(skb, NFTA_MASQ_REG_PROTO_MIN,
+ 				      priv->sreg_proto_min) ||
+@@ -112,6 +120,9 @@ static void nft_masq_eval(const struct nft_expr *expr,
+ 
+ 	switch (nft_pf(pkt)) {
+ 	case NFPROTO_IPV4:
++		if (priv->fullcone) {
++			range.min_addr.ip = 1;
++		}
+ 		regs->verdict.code = nf_nat_masquerade_ipv4(pkt->skb,
+ 							    nft_hook(pkt),
+ 							    &range,
+-- 
+2.46.0
+
diff --git a/target/linux/generic/hack-6.1/983-add-bcm-fullconenat-to-nft.patch b/target/linux/generic/hack-6.1/983-add-bcm-fullconenat-to-nft.patch
new file mode 100644
index 0000000000..51f14a965e
--- /dev/null
+++ b/target/linux/generic/hack-6.1/983-add-bcm-fullconenat-to-nft.patch
@@ -0,0 +1,82 @@
+From b622de2fa2cded9eeadc0dfba1c44df82465420b Mon Sep 17 00:00:00 2001
+From: jjm2473 <jjm2473@gmail.com>
+Date: Fri, 3 Jan 2025 14:03:22 +0800
+Subject: [PATCH] netfilter: nft_masq: supports brcm fullcone flag
+
+---
+ include/uapi/linux/netfilter/nf_tables.h |  2 ++
+ net/netfilter/nft_masq.c                 | 11 +++++++++++
+ 2 files changed, 13 insertions(+)
+
+diff --git a/include/uapi/linux/netfilter/nf_tables.h b/include/uapi/linux/netfilter/nf_tables.h
+index 9c29015d0..d6f6f086a 100644
+--- a/include/uapi/linux/netfilter/nf_tables.h
++++ b/include/uapi/linux/netfilter/nf_tables.h
+@@ -1477,12 +1477,14 @@ enum nft_tproxy_attributes {
+  * @NFTA_MASQ_FLAGS: NAT flags (see NF_NAT_RANGE_* in linux/netfilter/nf_nat.h) (NLA_U32)
+  * @NFTA_MASQ_REG_PROTO_MIN: source register of proto range start (NLA_U32: nft_registers)
+  * @NFTA_MASQ_REG_PROTO_MAX: source register of proto range end (NLA_U32: nft_registers)
++ * @NFTA_MASQ_REG_FULLCONE: fullcone NAT (NLA_U8)
+  */
+ enum nft_masq_attributes {
+ 	NFTA_MASQ_UNSPEC,
+ 	NFTA_MASQ_FLAGS,
+ 	NFTA_MASQ_REG_PROTO_MIN,
+ 	NFTA_MASQ_REG_PROTO_MAX,
++	NFTA_MASQ_REG_FULLCONE,
+ 	__NFTA_MASQ_MAX
+ };
+ #define NFTA_MASQ_MAX		(__NFTA_MASQ_MAX - 1)
+diff --git a/net/netfilter/nft_masq.c b/net/netfilter/nft_masq.c
+index 8a14aaca9..9c97a990a 100644
+--- a/net/netfilter/nft_masq.c
++++ b/net/netfilter/nft_masq.c
+@@ -17,6 +17,7 @@ struct nft_masq {
+ 	u32			flags;
+ 	u8			sreg_proto_min;
+ 	u8			sreg_proto_max;
++	bool		fullcone;
+ };
+ 
+ static const struct nla_policy nft_masq_policy[NFTA_MASQ_MAX + 1] = {
+@@ -24,6 +25,7 @@ static const struct nla_policy nft_masq_policy[NFTA_MASQ_MAX + 1] = {
+ 		NLA_POLICY_MASK(NLA_BE32, NF_NAT_RANGE_MASK),
+ 	[NFTA_MASQ_REG_PROTO_MIN]	= { .type = NLA_U32 },
+ 	[NFTA_MASQ_REG_PROTO_MAX]	= { .type = NLA_U32 },
++	[NFTA_MASQ_REG_FULLCONE]	= { .type = NLA_U8 },
+ };
+ 
+ static int nft_masq_validate(const struct nft_ctx *ctx,
+@@ -51,6 +53,9 @@ static int nft_masq_init(const struct nft_ctx *ctx,
+ 	if (tb[NFTA_MASQ_FLAGS])
+ 		priv->flags = ntohl(nla_get_be32(tb[NFTA_MASQ_FLAGS]));
+ 
++	if (tb[NFTA_MASQ_REG_FULLCONE])
++		priv->fullcone = nla_get_u8(tb[NFTA_MASQ_REG_FULLCONE]);
++
+ 	if (tb[NFTA_MASQ_REG_PROTO_MIN]) {
+ 		err = nft_parse_register_load(tb[NFTA_MASQ_REG_PROTO_MIN],
+ 					      &priv->sreg_proto_min, plen);
+@@ -80,6 +85,9 @@ static int nft_masq_dump(struct sk_buff *skb,
+ 	    nla_put_be32(skb, NFTA_MASQ_FLAGS, htonl(priv->flags)))
+ 		goto nla_put_failure;
+ 
++	if (priv->fullcone && nla_put_u8(skb, NFTA_MASQ_REG_FULLCONE, 1))
++		goto nla_put_failure;
++
+ 	if (priv->sreg_proto_min) {
+ 		if (nft_dump_register(skb, NFTA_MASQ_REG_PROTO_MIN,
+ 				      priv->sreg_proto_min) ||
+@@ -112,6 +120,9 @@ static void nft_masq_eval(const struct nft_expr *expr,
+ 
+ 	switch (nft_pf(pkt)) {
+ 	case NFPROTO_IPV4:
++		if (priv->fullcone) {
++			range.min_addr.ip = 1;
++		}
+ 		regs->verdict.code = nf_nat_masquerade_ipv4(pkt->skb,
+ 							    nft_hook(pkt),
+ 							    &range,
+-- 
+2.46.0
+
diff --git a/target/linux/generic/hack-6.6/983-add-bcm-fullconenat-to-nft.patch b/target/linux/generic/hack-6.6/983-add-bcm-fullconenat-to-nft.patch
new file mode 100644
index 0000000000..51f14a965e
--- /dev/null
+++ b/target/linux/generic/hack-6.6/983-add-bcm-fullconenat-to-nft.patch
@@ -0,0 +1,82 @@
+From b622de2fa2cded9eeadc0dfba1c44df82465420b Mon Sep 17 00:00:00 2001
+From: jjm2473 <jjm2473@gmail.com>
+Date: Fri, 3 Jan 2025 14:03:22 +0800
+Subject: [PATCH] netfilter: nft_masq: supports brcm fullcone flag
+
+---
+ include/uapi/linux/netfilter/nf_tables.h |  2 ++
+ net/netfilter/nft_masq.c                 | 11 +++++++++++
+ 2 files changed, 13 insertions(+)
+
+diff --git a/include/uapi/linux/netfilter/nf_tables.h b/include/uapi/linux/netfilter/nf_tables.h
+index 9c29015d0..d6f6f086a 100644
+--- a/include/uapi/linux/netfilter/nf_tables.h
++++ b/include/uapi/linux/netfilter/nf_tables.h
+@@ -1477,12 +1477,14 @@ enum nft_tproxy_attributes {
+  * @NFTA_MASQ_FLAGS: NAT flags (see NF_NAT_RANGE_* in linux/netfilter/nf_nat.h) (NLA_U32)
+  * @NFTA_MASQ_REG_PROTO_MIN: source register of proto range start (NLA_U32: nft_registers)
+  * @NFTA_MASQ_REG_PROTO_MAX: source register of proto range end (NLA_U32: nft_registers)
++ * @NFTA_MASQ_REG_FULLCONE: fullcone NAT (NLA_U8)
+  */
+ enum nft_masq_attributes {
+ 	NFTA_MASQ_UNSPEC,
+ 	NFTA_MASQ_FLAGS,
+ 	NFTA_MASQ_REG_PROTO_MIN,
+ 	NFTA_MASQ_REG_PROTO_MAX,
++	NFTA_MASQ_REG_FULLCONE,
+ 	__NFTA_MASQ_MAX
+ };
+ #define NFTA_MASQ_MAX		(__NFTA_MASQ_MAX - 1)
+diff --git a/net/netfilter/nft_masq.c b/net/netfilter/nft_masq.c
+index 8a14aaca9..9c97a990a 100644
+--- a/net/netfilter/nft_masq.c
++++ b/net/netfilter/nft_masq.c
+@@ -17,6 +17,7 @@ struct nft_masq {
+ 	u32			flags;
+ 	u8			sreg_proto_min;
+ 	u8			sreg_proto_max;
++	bool		fullcone;
+ };
+ 
+ static const struct nla_policy nft_masq_policy[NFTA_MASQ_MAX + 1] = {
+@@ -24,6 +25,7 @@ static const struct nla_policy nft_masq_policy[NFTA_MASQ_MAX + 1] = {
+ 		NLA_POLICY_MASK(NLA_BE32, NF_NAT_RANGE_MASK),
+ 	[NFTA_MASQ_REG_PROTO_MIN]	= { .type = NLA_U32 },
+ 	[NFTA_MASQ_REG_PROTO_MAX]	= { .type = NLA_U32 },
++	[NFTA_MASQ_REG_FULLCONE]	= { .type = NLA_U8 },
+ };
+ 
+ static int nft_masq_validate(const struct nft_ctx *ctx,
+@@ -51,6 +53,9 @@ static int nft_masq_init(const struct nft_ctx *ctx,
+ 	if (tb[NFTA_MASQ_FLAGS])
+ 		priv->flags = ntohl(nla_get_be32(tb[NFTA_MASQ_FLAGS]));
+ 
++	if (tb[NFTA_MASQ_REG_FULLCONE])
++		priv->fullcone = nla_get_u8(tb[NFTA_MASQ_REG_FULLCONE]);
++
+ 	if (tb[NFTA_MASQ_REG_PROTO_MIN]) {
+ 		err = nft_parse_register_load(tb[NFTA_MASQ_REG_PROTO_MIN],
+ 					      &priv->sreg_proto_min, plen);
+@@ -80,6 +85,9 @@ static int nft_masq_dump(struct sk_buff *skb,
+ 	    nla_put_be32(skb, NFTA_MASQ_FLAGS, htonl(priv->flags)))
+ 		goto nla_put_failure;
+ 
++	if (priv->fullcone && nla_put_u8(skb, NFTA_MASQ_REG_FULLCONE, 1))
++		goto nla_put_failure;
++
+ 	if (priv->sreg_proto_min) {
+ 		if (nft_dump_register(skb, NFTA_MASQ_REG_PROTO_MIN,
+ 				      priv->sreg_proto_min) ||
+@@ -112,6 +120,9 @@ static void nft_masq_eval(const struct nft_expr *expr,
+ 
+ 	switch (nft_pf(pkt)) {
+ 	case NFPROTO_IPV4:
++		if (priv->fullcone) {
++			range.min_addr.ip = 1;
++		}
+ 		regs->verdict.code = nf_nat_masquerade_ipv4(pkt->skb,
+ 							    nft_hook(pkt),
+ 							    &range,
+-- 
+2.46.0
+
-- 
2.43.0

