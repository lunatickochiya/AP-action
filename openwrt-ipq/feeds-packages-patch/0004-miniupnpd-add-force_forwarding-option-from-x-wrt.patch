From aa07acf177aae9238eb9412bfe1e031433e07231 Mon Sep 17 00:00:00 2001
From: Tianling Shen <cnsztl@immortalwrt.org>
Date: Mon, 24 Mar 2025 21:04:06 +0800
Subject: [PATCH] miniupnpd: add force_forwarding option from x-wrt

You should **really** get rid of this old and insecure implementation.

Signed-off-by: Tianling Shen <cnsztl@immortalwrt.org>
(cherry picked from commit 1d848b57ec42e219c2fd7f80d18ce39e08f473f7)
---
 net/miniupnpd/Makefile                        |   2 +-
 net/miniupnpd/files/miniupnpd.init            |   4 +-
 net/miniupnpd/files/upnpd.config              |   3 +-
 ...pd-format-xml-to-make-some-app-happy.patch | 608 ++++++++++++++++++
 ...901-options-force_forwarding-support.patch | 184 ++++++
 5 files changed, 798 insertions(+), 3 deletions(-)
 create mode 100644 net/miniupnpd/patches/900-miniupnpd-format-xml-to-make-some-app-happy.patch
 create mode 100644 net/miniupnpd/patches/901-options-force_forwarding-support.patch

diff --git a/net/miniupnpd/patches/900-miniupnpd-format-xml-to-make-some-app-happy.patch b/net/miniupnpd/patches/900-miniupnpd-format-xml-to-make-some-app-happy.patch
new file mode 100644
index 0000000000..08b728da30
--- /dev/null
+++ b/net/miniupnpd/patches/900-miniupnpd-format-xml-to-make-some-app-happy.patch
@@ -0,0 +1,608 @@
+From 7651a23732d234f97137ca160a0c157eaed43ae8 Mon Sep 17 00:00:00 2001
+From: Chen Minqiang <ptpt52@gmail.com>
+Date: Wed, 29 Sep 2021 22:29:53 +0800
+Subject: [PATCH] miniupnpd: format xml to make some app happy
+
+Server-U
+
+Signed-off-by: Chen Minqiang <ptpt52@gmail.com>
+---
+ upnpdescgen.c |   6 +
+ upnpsoap.c    | 302 ++++++++++++++++++++--------------------
+ 2 files changed, 157 insertions(+), 151 deletions(-)
+
+--- a/upnpdescgen.c
++++ b/upnpdescgen.c
+@@ -947,6 +947,8 @@ genXML(char * str, int * len, int * tmpl
+ 				str = strcat_char(str, len, tmplen, '<');
+ 				str = strcat_str(str, len, tmplen, eltname);
+ 				str = strcat_char(str, len, tmplen, '>');
++				str = strcat_char(str, len, tmplen, '\r');
++				str = strcat_char(str, len, tmplen, '\n');
+ 			}
+ #ifdef IGD_V2
+ unstack:
+@@ -967,6 +969,8 @@ unstack:
+ 					for(c = *s; c > ' '; c = *(++s))
+ 						str = strcat_char(str, len, tmplen, c);
+ 					str = strcat_char(str, len, tmplen, '>');
++					str = strcat_char(str, len, tmplen, '\r');
++					str = strcat_char(str, len, tmplen, '\n');
+ 					top--;
+ 				}
+ 				else
+@@ -996,6 +1000,8 @@ unstack:
+ 				str = strcat_str(str, len, tmplen, configid_str);
+ 			}
+ 			str = strcat_char(str, len, tmplen, '>');
++			str = strcat_char(str, len, tmplen, '\r');
++			str = strcat_char(str, len, tmplen, '\n');
+ 			i = k & 0xffff;
+ 			j = i + (k >> 16);
+ 			if(top < (GENXML_STACK_SIZE - 1)) {
+--- a/upnpsoap.c
++++ b/upnpsoap.c
+@@ -52,11 +52,11 @@ BuildSendAndCloseSoapResp(struct upnphtt
+ 	static const char beforebody[] =
+ 		"<?xml version=\"1.0\"?>\r\n"
+ 		"<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" "
+-		"s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">"
+-		"<s:Body>";
++		"s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\r\n"
++		"<s:Body>\r\n";
+ 
+ 	static const char afterbody[] =
+-		"</s:Body>"
++		"</s:Body>\r\n"
+ 		"</s:Envelope>\r\n";
+ 
+ 	int r = BuildHeader_upnphttp(h, 200, "OK",  sizeof(beforebody) - 1
+@@ -84,17 +84,17 @@ GetConnectionTypeInfo(struct upnphttp *
+ #if 0
+ 	static const char resp[] =
+ 		"<u:GetConnectionTypeInfoResponse "
+-		"xmlns:u=\"" SERVICE_TYPE_WANIPC "\">"
+-		"<NewConnectionType>IP_Routed</NewConnectionType>"
+-		"<NewPossibleConnectionTypes>IP_Routed</NewPossibleConnectionTypes>"
+-		"</u:GetConnectionTypeInfoResponse>";
++		"xmlns:u=\"" SERVICE_TYPE_WANIPC "\">\r\n"
++		"<NewConnectionType>IP_Routed</NewConnectionType>\r\n"
++		"<NewPossibleConnectionTypes>IP_Routed</NewPossibleConnectionTypes>\r\n"
++		"</u:GetConnectionTypeInfoResponse>\r\n";
+ #endif
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"<NewConnectionType>IP_Routed</NewConnectionType>"
+-		"<NewPossibleConnectionTypes>IP_Routed</NewPossibleConnectionTypes>"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"<NewConnectionType>IP_Routed</NewConnectionType>\r\n"
++		"<NewPossibleConnectionTypes>IP_Routed</NewPossibleConnectionTypes>\r\n"
++		"</u:%sResponse>\r\n";
+ 	char body[512];
+ 	int bodylen;
+ 
+@@ -113,9 +113,9 @@ GetTotalBytesSent(struct upnphttp * h, c
+ 
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"<NewTotalBytesSent>%lu</NewTotalBytesSent>"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"<NewTotalBytesSent>%lu</NewTotalBytesSent>\r\n"
++		"</u:%sResponse>\r\n";
+ 
+ 	char body[512];
+ 	int bodylen;
+@@ -139,9 +139,9 @@ GetTotalBytesReceived(struct upnphttp *
+ 
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"<NewTotalBytesReceived>%lu</NewTotalBytesReceived>"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"<NewTotalBytesReceived>%lu</NewTotalBytesReceived>\r\n"
++		"</u:%sResponse>\r\n";
+ 
+ 	char body[512];
+ 	int bodylen;
+@@ -170,9 +170,9 @@ GetTotalPacketsSent(struct upnphttp * h,
+ 
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"<NewTotalPacketsSent>%lu</NewTotalPacketsSent>"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"<NewTotalPacketsSent>%lu</NewTotalPacketsSent>\r\n"
++		"</u:%sResponse>\r\n";
+ 
+ 	char body[512];
+ 	int bodylen;
+@@ -196,9 +196,9 @@ GetTotalPacketsReceived(struct upnphttp
+ 
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"<NewTotalPacketsReceived>%lu</NewTotalPacketsReceived>"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"<NewTotalPacketsReceived>%lu</NewTotalPacketsReceived>\r\n"
++		"</u:%sResponse>\r\n";
+ 
+ 	char body[512];
+ 	int bodylen;
+@@ -222,12 +222,12 @@ GetCommonLinkProperties(struct upnphttp
+ 	 * DSL, POTS (plain old Telephone service), Cable, Ethernet */
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"<NewWANAccessType>%s</NewWANAccessType>"
+-		"<NewLayer1UpstreamMaxBitRate>%lu</NewLayer1UpstreamMaxBitRate>"
+-		"<NewLayer1DownstreamMaxBitRate>%lu</NewLayer1DownstreamMaxBitRate>"
+-		"<NewPhysicalLinkStatus>%s</NewPhysicalLinkStatus>"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"<NewWANAccessType>%s</NewWANAccessType>\r\n"
++		"<NewLayer1UpstreamMaxBitRate>%lu</NewLayer1UpstreamMaxBitRate>\r\n"
++		"<NewLayer1DownstreamMaxBitRate>%lu</NewLayer1DownstreamMaxBitRate>\r\n"
++		"<NewPhysicalLinkStatus>%s</NewPhysicalLinkStatus>\r\n"
++		"</u:%sResponse>\r\n";
+ 
+ 	char body[2048];
+ 	int bodylen;
+@@ -261,11 +261,11 @@ GetStatusInfo(struct upnphttp * h, const
+ {
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"<NewConnectionStatus>%s</NewConnectionStatus>"
+-		"<NewLastConnectionError>ERROR_NONE</NewLastConnectionError>"
+-		"<NewUptime>%ld</NewUptime>"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"<NewConnectionStatus>%s</NewConnectionStatus>\r\n"
++		"<NewLastConnectionError>ERROR_NONE</NewLastConnectionError>\r\n"
++		"<NewUptime>%ld</NewUptime>\r\n"
++		"</u:%sResponse>\r\n";
+ 
+ 	char body[512];
+ 	int bodylen;
+@@ -289,18 +289,18 @@ GetNATRSIPStatus(struct upnphttp * h, co
+ #if 0
+ 	static const char resp[] =
+ 		"<u:GetNATRSIPStatusResponse "
+-		"xmlns:u=\"" SERVICE_TYPE_WANIPC "\">"
+-		"<NewRSIPAvailable>0</NewRSIPAvailable>"
+-		"<NewNATEnabled>1</NewNATEnabled>"
+-		"</u:GetNATRSIPStatusResponse>";
++		"xmlns:u=\"" SERVICE_TYPE_WANIPC "\">\r\n"
++		"<NewRSIPAvailable>0</NewRSIPAvailable>\r\n"
++		"<NewNATEnabled>1</NewNATEnabled>\r\n"
++		"</u:GetNATRSIPStatusResponse>\r\n";
+ 	UNUSED(action);
+ #endif
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"<NewRSIPAvailable>0</NewRSIPAvailable>"
+-		"<NewNATEnabled>1</NewNATEnabled>"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"<NewRSIPAvailable>0</NewRSIPAvailable>\r\n"
++		"<NewNATEnabled>1</NewNATEnabled>\r\n"
++		"</u:%sResponse>\r\n";
+ 	char body[512];
+ 	int bodylen;
+ 	/* 2.2.9. RSIPAvailable
+@@ -322,9 +322,9 @@ GetExternalIPAddress(struct upnphttp * h
+ {
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"<NewExternalIPAddress>%s</NewExternalIPAddress>"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"<NewExternalIPAddress>%s</NewExternalIPAddress>\r\n"
++		"</u:%sResponse>\r\n";
+ 
+ 	char body[512];
+ 	int bodylen;
+@@ -390,10 +390,10 @@ AddPortMapping(struct upnphttp * h, cons
+ 
+ 	/*static const char resp[] =
+ 		"<u:AddPortMappingResponse "
+-		"xmlns:u=\"" SERVICE_TYPE_WANIPC "\"/>";*/
++		"xmlns:u=\"" SERVICE_TYPE_WANIPC "\"/>\r\n";*/
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\"/>";
++		"xmlns:u=\"%s\"/>\r\n";
+ 
+ 	char body[512];
+ 	int bodylen;
+@@ -587,9 +587,9 @@ AddAnyPortMapping(struct upnphttp * h, c
+ 	int r;
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"<NewReservedPort>%hu</NewReservedPort>"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"<NewReservedPort>%hu</NewReservedPort>\r\n"
++		"</u:%sResponse>\r\n";
+ 
+ 	char body[512];
+ 	int bodylen;
+@@ -753,13 +753,13 @@ GetSpecificPortMappingEntry(struct upnph
+ 
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"<NewInternalPort>%u</NewInternalPort>"
+-		"<NewInternalClient>%s</NewInternalClient>"
+-		"<NewEnabled>1</NewEnabled>"
+-		"<NewPortMappingDescription>%s</NewPortMappingDescription>"
+-		"<NewLeaseDuration>%u</NewLeaseDuration>"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"<NewInternalPort>%u</NewInternalPort>\r\n"
++		"<NewInternalClient>%s</NewInternalClient>\r\n"
++		"<NewEnabled>1</NewEnabled>\r\n"
++		"<NewPortMappingDescription>%s</NewPortMappingDescription>\r\n"
++		"<NewLeaseDuration>%u</NewLeaseDuration>\r\n"
++		"</u:%sResponse>\r\n";
+ 
+ 	char body[1024];
+ 	int bodylen;
+@@ -841,12 +841,12 @@ DeletePortMapping(struct upnphttp * h, c
+ 
+ 	/*static const char resp[] =
+ 		"<u:DeletePortMappingResponse "
+-		"xmlns:u=\"" SERVICE_TYPE_WANIPC "\">"
+-		"</u:DeletePortMappingResponse>";*/
++		"xmlns:u=\"" SERVICE_TYPE_WANIPC "\">\r\n"
++		"</u:DeletePortMappingResponse>\r\n";*/
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"</u:%sResponse>\r\n";
+ 
+ 	char body[512];
+ 	int bodylen;
+@@ -951,12 +951,12 @@ DeletePortMappingRange(struct upnphttp *
+ 	int r = -1;
+ 	/*static const char resp[] =
+ 		"<u:DeletePortMappingRangeResponse "
+-		"xmlns:u=\"" SERVICE_TYPE_WANIPC "\">"
+-		"</u:DeletePortMappingRangeResponse>";*/
++		"xmlns:u=\"" SERVICE_TYPE_WANIPC "\">\r\n"
++		"</u:DeletePortMappingRangeResponse>\r\n";*/
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"</u:%sResponse>\r\n";
+ 	char body[512];
+ 	int bodylen;
+ 	struct NameValueParserData data;
+@@ -1027,16 +1027,16 @@ GetGenericPortMappingEntry(struct upnpht
+ 
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"<NewRemoteHost>%s</NewRemoteHost>"
+-		"<NewExternalPort>%u</NewExternalPort>"
+-		"<NewProtocol>%s</NewProtocol>"
+-		"<NewInternalPort>%u</NewInternalPort>"
+-		"<NewInternalClient>%s</NewInternalClient>"
+-		"<NewEnabled>1</NewEnabled>"
+-		"<NewPortMappingDescription>%s</NewPortMappingDescription>"
+-		"<NewLeaseDuration>%u</NewLeaseDuration>"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"<NewRemoteHost>%s</NewRemoteHost>\r\n"
++		"<NewExternalPort>%u</NewExternalPort>\r\n"
++		"<NewProtocol>%s</NewProtocol>\r\n"
++		"<NewInternalPort>%u</NewInternalPort>\r\n"
++		"<NewInternalClient>%s</NewInternalClient>\r\n"
++		"<NewEnabled>1</NewEnabled>\r\n"
++		"<NewPortMappingDescription>%s</NewPortMappingDescription>\r\n"
++		"<NewLeaseDuration>%u</NewLeaseDuration>\r\n"
++		"</u:%sResponse>\r\n";
+ 
+ 	long int index = 0;
+ 	unsigned short eport, iport;
+@@ -1107,31 +1107,31 @@ GetListOfPortMappings(struct upnphttp *
+ {
+ 	static const char resp_start[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
++		"xmlns:u=\"%s\">\r\n"
+ 		"<NewPortListing><![CDATA[";
+ 	static const char resp_end[] =
+-		"]]></NewPortListing>"
+-		"</u:%sResponse>";
++		"]]></NewPortListing>\r\n"
++		"</u:%sResponse>\r\n";
+ 
+ 	static const char list_start[] =
+ 		"<p:PortMappingList xmlns:p=\"urn:schemas-upnp-org:gw:WANIPConnection\""
+ 		" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\""
+ 		" xsi:schemaLocation=\"urn:schemas-upnp-org:gw:WANIPConnection"
+-		" http://www.upnp.org/schemas/gw/WANIPConnection-v2.xsd\">";
++		" http://www.upnp.org/schemas/gw/WANIPConnection-v2.xsd\">\r\n";
+ 	static const char list_end[] =
+-		"</p:PortMappingList>";
++		"</p:PortMappingList>\r\n";
+ 
+ 	static const char entry[] =
+-		"<p:PortMappingEntry>"
+-		"<p:NewRemoteHost>%s</p:NewRemoteHost>"
+-		"<p:NewExternalPort>%hu</p:NewExternalPort>"
+-		"<p:NewProtocol>%s</p:NewProtocol>"
+-		"<p:NewInternalPort>%hu</p:NewInternalPort>"
+-		"<p:NewInternalClient>%s</p:NewInternalClient>"
+-		"<p:NewEnabled>1</p:NewEnabled>"
+-		"<p:NewDescription>%s</p:NewDescription>"
+-		"<p:NewLeaseTime>%u</p:NewLeaseTime>"
+-		"</p:PortMappingEntry>";
++		"<p:PortMappingEntry>\r\n"
++		"<p:NewRemoteHost>%s</p:NewRemoteHost>\r\n"
++		"<p:NewExternalPort>%hu</p:NewExternalPort>\r\n"
++		"<p:NewProtocol>%s</p:NewProtocol>\r\n"
++		"<p:NewInternalPort>%hu</p:NewInternalPort>\r\n"
++		"<p:NewInternalClient>%s</p:NewInternalClient>\r\n"
++		"<p:NewEnabled>1</p:NewEnabled>\r\n"
++		"<p:NewDescription>%s</p:NewDescription>\r\n"
++		"<p:NewLeaseTime>%u</p:NewLeaseTime>\r\n"
++		"</p:PortMappingEntry>\r\n";
+ 
+ 	char * body;
+ 	size_t bodyalloc;
+@@ -1286,12 +1286,12 @@ SetDefaultConnectionService(struct upnph
+ {
+ 	/*static const char resp[] =
+ 		"<u:SetDefaultConnectionServiceResponse "
+-		"xmlns:u=\"urn:schemas-upnp-org:service:Layer3Forwarding:1\">"
+-		"</u:SetDefaultConnectionServiceResponse>";*/
++		"xmlns:u=\"urn:schemas-upnp-org:service:Layer3Forwarding:1\">\r\n"
++		"</u:SetDefaultConnectionServiceResponse>\r\n";*/
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"</u:%sResponse>\r\n";
+ 	char body[512];
+ 	int bodylen;
+ 	struct NameValueParserData data;
+@@ -1329,14 +1329,14 @@ GetDefaultConnectionService(struct upnph
+ {
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
++		"xmlns:u=\"%s\">\r\n"
+ #ifdef IGD_V2
+ 		"<NewDefaultConnectionService>%s:WANConnectionDevice:2,"
+ #else
+ 		"<NewDefaultConnectionService>%s:WANConnectionDevice:1,"
+ #endif
+-		SERVICE_ID_WANIPC "</NewDefaultConnectionService>"
+-		"</u:%sResponse>";
++		SERVICE_ID_WANIPC "</NewDefaultConnectionService>\r\n"
++		"</u:%sResponse>\r\n";
+ 	/* example from UPnP_IGD_Layer3Forwarding 1.0.pdf :
+ 	 * uuid:44f5824f-c57d-418c-a131-f22b34e14111:WANConnectionDevice:1,
+ 	 * urn:upnp-org:serviceId:WANPPPConn1 */
+@@ -1407,9 +1407,9 @@ QueryStateVariable(struct upnphttp * h,
+ {
+ 	static const char resp[] =
+         "<u:%sResponse "
+-        "xmlns:u=\"%s\">"
+-		"<return>%s</return>"
+-        "</u:%sResponse>";
++        "xmlns:u=\"%s\">\r\n"
++		"<return>%s</return>\r\n"
++        "</u:%sResponse>\r\n";
+ 
+ 	char body[512];
+ 	int bodylen;
+@@ -1479,10 +1479,10 @@ GetFirewallStatus(struct upnphttp * h, c
+ {
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"<FirewallEnabled>%d</FirewallEnabled>"
+-		"<InboundPinholeAllowed>%d</InboundPinholeAllowed>"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"<FirewallEnabled>%d</FirewallEnabled>\r\n"
++		"<InboundPinholeAllowed>%d</InboundPinholeAllowed>\r\n"
++		"</u:%sResponse>\r\n";
+ 
+ 	char body[512];
+ 	int bodylen;
+@@ -1673,9 +1673,9 @@ AddPinhole(struct upnphttp * h, const ch
+ 	int r;
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"<UniqueID>%d</UniqueID>"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"<UniqueID>%d</UniqueID>\r\n"
++		"</u:%sResponse>\r\n";
+ 	char body[512];
+ 	int bodylen;
+ 	struct NameValueParserData data;
+@@ -1849,13 +1849,13 @@ UpdatePinhole(struct upnphttp * h, const
+ #if 0
+ 	static const char resp[] =
+ 		"<u:UpdatePinholeResponse "
+-		"xmlns:u=\"urn:schemas-upnp-org:service:WANIPv6FirewallControl:1\">"
+-		"</u:UpdatePinholeResponse>";
++		"xmlns:u=\"urn:schemas-upnp-org:service:WANIPv6FirewallControl:1\">\r\n"
++		"</u:UpdatePinholeResponse>\r\n";
+ #endif
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"</u:%sResponse>\r\n";
+ 	char body[512];
+ 	int bodylen;
+ 	struct NameValueParserData data;
+@@ -1927,9 +1927,9 @@ GetOutboundPinholeTimeout(struct upnphtt
+ 
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"<OutboundPinholeTimeout>%d</OutboundPinholeTimeout>"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"<OutboundPinholeTimeout>%d</OutboundPinholeTimeout>\r\n"
++		"</u:%sResponse>\r\n";
+ 
+ 	char body[512];
+ 	int bodylen;
+@@ -1992,13 +1992,13 @@ DeletePinhole(struct upnphttp * h, const
+ #if 0
+ 	static const char resp[] =
+ 		"<u:DeletePinholeResponse "
+-		"xmlns:u=\"urn:schemas-upnp-org:service:WANIPv6FirewallControl:1\">"
+-		"</u:DeletePinholeResponse>";
++		"xmlns:u=\"urn:schemas-upnp-org:service:WANIPv6FirewallControl:1\">\r\n"
++		"</u:DeletePinholeResponse>\r\n";
+ #endif
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"</u:%sResponse>\r\n";
+ 	char body[512];
+ 	int bodylen;
+ 
+@@ -2067,9 +2067,9 @@ CheckPinholeWorking(struct upnphttp * h,
+ {
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"<IsWorking>%d</IsWorking>"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"<IsWorking>%d</IsWorking>\r\n"
++		"</u:%sResponse>\r\n";
+ 	char body[512];
+ 	int bodylen;
+ 	int r;
+@@ -2127,9 +2127,9 @@ GetPinholePackets(struct upnphttp * h, c
+ {
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"<PinholePackets>%u</PinholePackets>"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"<PinholePackets>%u</PinholePackets>\r\n"
++		"</u:%sResponse>\r\n";
+ 	char body[512];
+ 	int bodylen;
+ 	struct NameValueParserData data;
+@@ -2188,9 +2188,9 @@ SendSetupMessage(struct upnphttp * h, co
+ {
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"<OutMessage>%s</OutMessage>"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"<OutMessage>%s</OutMessage>\r\n"
++		"</u:%sResponse>\r\n";
+ 	char body[1024];
+ 	int bodylen;
+ 	struct NameValueParserData data;
+@@ -2229,9 +2229,9 @@ GetSupportedProtocols(struct upnphttp *
+ {
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"<ProtocolList><![CDATA[%s]]></ProtocolList>"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"<ProtocolList><![CDATA[%s]]></ProtocolList>\r\n"
++		"</u:%sResponse>\r\n";
+ 	char body[1024];
+ 	int bodylen;
+ 	const char * ProtocolList =
+@@ -2239,10 +2239,10 @@ GetSupportedProtocols(struct upnphttp *
+ 		"<SupportedProtocols xmlns=\"urn:schemas-upnp-org:gw:DeviceProtection\""
+ 		" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\""
+ 		" xsi:schemaLocation=\"urn:schemas-upnp-org:gw:DeviceProtection"
+-		" http://www.upnp.org/schemas/gw/DeviceProtection-v1.xsd\">"
+-		"<Introduction><Name>WPS</Name></Introduction>"
+-		"<Login><Name>PKCS5</Name></Login>"
+-		"</SupportedProtocols>";
++		" http://www.upnp.org/schemas/gw/DeviceProtection-v1.xsd\">\r\n"
++		"<Introduction><Name>WPS</Name></Introduction>\r\n"
++		"<Login><Name>PKCS5</Name></Login>\r\n"
++		"</SupportedProtocols>\r\n";
+ 
+ 	bodylen = snprintf(body, sizeof(body), resp,
+ 	                   action, ns/*"urn:schemas-upnp-org:service:DeviceProtection:1"*/,
+@@ -2255,9 +2255,9 @@ GetAssignedRoles(struct upnphttp * h, co
+ {
+ 	static const char resp[] =
+ 		"<u:%sResponse "
+-		"xmlns:u=\"%s\">"
+-		"<RoleList>%s</RoleList>"
+-		"</u:%sResponse>";
++		"xmlns:u=\"%s\">\r\n"
++		"<RoleList>%s</RoleList>\r\n"
++		"</u:%sResponse>\r\n";
+ 	char body[1024];
+ 	int bodylen;
+ 	const char * RoleList = "Public"; /* list of roles separated by spaces */
+@@ -2411,20 +2411,20 @@ SoapError(struct upnphttp * h, int errCo
+ 	static const char resp[] =
+ 		"<s:Envelope "
+ 		"xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" "
+-		"s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">"
+-		"<s:Body>"
+-		"<s:Fault>"
+-		"<faultcode>s:Client</faultcode>"
+-		"<faultstring>UPnPError</faultstring>"
+-		"<detail>"
+-		"<UPnPError xmlns=\"urn:schemas-upnp-org:control-1-0\">"
+-		"<errorCode>%d</errorCode>"
+-		"<errorDescription>%s</errorDescription>"
+-		"</UPnPError>"
+-		"</detail>"
+-		"</s:Fault>"
+-		"</s:Body>"
+-		"</s:Envelope>";
++		"s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\r\n"
++		"<s:Body>\r\n"
++		"<s:Fault>\r\n"
++		"<faultcode>s:Client</faultcode>\r\n"
++		"<faultstring>UPnPError</faultstring>\r\n"
++		"<detail>\r\n"
++		"<UPnPError xmlns=\"urn:schemas-upnp-org:control-1-0\">\r\n"
++		"<errorCode>%d</errorCode>\r\n"
++		"<errorDescription>%s</errorDescription>\r\n"
++		"</UPnPError>\r\n"
++		"</detail>\r\n"
++		"</s:Fault>\r\n"
++		"</s:Body>\r\n"
++		"</s:Envelope>\r\n";
+ 
+ 	char body[2048];
+ 	int bodylen;
diff --git a/net/miniupnpd/patches/901-options-force_forwarding-support.patch b/net/miniupnpd/patches/901-options-force_forwarding-support.patch
new file mode 100644
index 0000000000..7a27a16cdf
--- /dev/null
+++ b/net/miniupnpd/patches/901-options-force_forwarding-support.patch
@@ -0,0 +1,184 @@
+From 449e688b189b9f7ded36d733e0fcde374e42557e Mon Sep 17 00:00:00 2001
+From: Chen Minqiang <ptpt52@gmail.com>
+Date: Sun, 5 Jul 2020 10:42:52 +0800
+Subject: [PATCH] options: force_forwarding support
+
+This make the port forwarding force to work even
+when the router is behind NAT
+
+Signed-off-by: Chen Minqiang <ptpt52@gmail.com>
+---
+ miniupnpd.c      | 12 ++++++++----
+ miniupnpd.conf   |  2 ++
+ natpmp.c         |  2 +-
+ options.c        |  1 +
+ options.h        |  1 +
+ testgetifaddr.c  |  2 ++
+ testportinuse.c  |  2 ++
+ upnpdescgen.c    |  2 +-
+ upnpglobalvars.h |  2 ++
+ upnpredirect.c   |  2 +-
+ upnpsoap.c       |  6 +++++-
+ 11 files changed, 26 insertions(+), 8 deletions(-)
+
+--- a/miniupnpd.c
++++ b/miniupnpd.c
+@@ -1018,7 +1018,7 @@ parselanaddr(struct lan_addr_s * lan_add
+ 				INIT_PRINT_ERR("Error parsing address : %s\n", lan_addr->ext_ip_str);
+ 				return -1;
+ 			}
+-			if(addr_is_reserved(&lan_addr->ext_ip_addr)) {
++			if(addr_is_reserved(&lan_addr->ext_ip_addr) && !GETFLAG(FORCEFORWARDINGMASK)) {
+ 				/* error */
+ 				INIT_PRINT_ERR("Error: option ext_ip address contains reserved / private address : %s\n", lan_addr->ext_ip_str);
+ 				return -1;
+@@ -1260,6 +1260,10 @@ init(int argc, char * * argv, struct run
+ 			case UPNPEXT_IP:
+ 				use_ext_ip_addr = ary_options[i].value;
+ 				break;
++			case UPNP_FORCE_FORWARDING:
++				if(strcmp(ary_options[i].value, "yes") == 0)
++					SETFLAG(FORCEFORWARDINGMASK);
++				break;
+ 			case UPNPEXT_PERFORM_STUN:
+ 				if(strcmp(ary_options[i].value, "yes") == 0)
+ 					SETFLAG(PERFORMSTUNMASK);
+@@ -1867,7 +1871,7 @@ init(int argc, char * * argv, struct run
+ 			INIT_PRINT_ERR("Error: option ext_ip contains invalid address %s\n", use_ext_ip_addr);
+ 			return 1;
+ 		}
+-		if (addr_is_reserved(&addr)) {
++		if (addr_is_reserved(&addr) && !GETFLAG(FORCEFORWARDINGMASK)) {
+ 			INIT_PRINT_ERR("Error: option ext_ip contains reserved / private address %s, not public routable\n", use_ext_ip_addr);
+ 			return 1;
+ 		}
+@@ -2315,7 +2319,7 @@ main(int argc, char * * argv)
+ 		if (getifaddr(ext_if_name, if_addr, INET_ADDRSTRLEN, &addr, NULL) < 0) {
+ 			syslog(LOG_WARNING, "Cannot get IP address for ext interface %s. Network is down", ext_if_name);
+ 			disable_port_forwarding = 1;
+-		} else if (addr_is_reserved(&addr)) {
++		} else if (addr_is_reserved(&addr) && !GETFLAG(FORCEFORWARDINGMASK)) {
+ 			syslog(LOG_INFO, "Reserved / private IP address %s on ext interface %s: Port forwarding is impossible", if_addr, ext_if_name);
+ 			syslog(LOG_INFO, "You are probably behind NAT, enable option ext_perform_stun=yes to detect public IP address");
+ 			syslog(LOG_INFO, "Or use ext_ip= / -o option to declare public IP address");
+@@ -2628,7 +2632,7 @@ main(int argc, char * * argv)
+ 					syslog(LOG_WARNING, "Cannot get IP address for ext interface %s. Network is down", ext_if_name);
+ 					disable_port_forwarding = 1;
+ 				} else {
+-					int reserved = addr_is_reserved(&addr);
++					int reserved = addr_is_reserved(&addr) && !GETFLAG(FORCEFORWARDINGMASK);
+ 					if (!disable_port_forwarding && reserved) {
+ 						syslog(LOG_INFO, "Reserved / private IP address %s on ext interface %s: Port forwarding is impossible", if_addr, ext_if_name);
+ 						syslog(LOG_INFO, "You are probably behind NAT, enable option ext_perform_stun=yes to detect public IP address");
+--- a/miniupnpd.conf
++++ b/miniupnpd.conf
+@@ -18,6 +18,8 @@
+ # the public IP address.
+ #ext_ip=
+ 
++#force forwarding enable for upnp: default is no
++#force_forwarding=yes
+ # The WAN interface must have a public IP address. Otherwise it is behind NAT
+ # and port forwarding is impossible. In some cases WAN interface can be
+ # behind unrestricted full-cone NAT 1:1 when all incoming traffic is NAT-ed and
+--- a/natpmp.c
++++ b/natpmp.c
+@@ -109,7 +109,7 @@ static void FillPublicAddressResponse(un
+ 			syslog(LOG_ERR, "Failed to get IP for interface %s", ext_if_name);
+ 			resp[3] = 3;	/* Network Failure (e.g. NAT box itself
+ 			                 * has not obtained a DHCP lease) */
+-		} else if (addr_is_reserved(&addr)) {
++		} else if (addr_is_reserved(&addr) && !GETFLAG(FORCEFORWARDINGMASK)) {
+ 			resp[3] = 3;	/* Network Failure, box has not obtained
+ 			                   public IP address */
+ 		} else {
+--- a/options.c
++++ b/options.c
+@@ -35,6 +35,7 @@ static const struct {
+ 	{ UPNPEXT_IFNAME6, "ext_ifname6" },
+ #endif
+ 	{ UPNPEXT_IP,	"ext_ip" },
++	{ UPNP_FORCE_FORWARDING, "force_forwarding" },
+ 	{ UPNPEXT_PERFORM_STUN, "ext_perform_stun" },
+ 	{ UPNPEXT_STUN_HOST, "ext_stun_host" },
+ 	{ UPNPEXT_STUN_PORT, "ext_stun_port" },
+--- a/options.h
++++ b/options.h
+@@ -21,6 +21,7 @@ enum upnpconfigoptions {
+ 	UPNPEXT_IFNAME6,		/* ext_ifname6 */
+ #endif
+ 	UPNPEXT_IP,				/* ext_ip */
++	UPNP_FORCE_FORWARDING, /* force forwarding enable for upnp */
+ 	UPNPEXT_PERFORM_STUN,		/* ext_perform_stun */
+ 	UPNPEXT_STUN_HOST,		/* ext_stun_host */
+ 	UPNPEXT_STUN_PORT,		/* ext_stun_port */
+--- a/testgetifaddr.c
++++ b/testgetifaddr.c
+@@ -13,6 +13,8 @@
+ #include "config.h"
+ #include "getifaddr.h"
+ 
++int runtime_flags = 0;
++
+ #if defined(__sun)
+ /* solaris 10 does not define LOG_PERROR */
+ #define LOG_PERROR 0
+--- a/testportinuse.c
++++ b/testportinuse.c
+@@ -14,6 +14,8 @@
+ #include "config.h"
+ #include "portinuse.h"
+ 
++int runtime_flags = 0;
++
+ int main(int argc, char * * argv)
+ {
+ #ifndef CHECK_PORTINUSE
+--- a/upnpdescgen.c
++++ b/upnpdescgen.c
+@@ -1322,7 +1322,7 @@ genEventVars(int * len, const struct ser
+ 				else {
+ 					struct in_addr addr;
+ 					char ext_ip_addr[INET_ADDRSTRLEN];
+-					if(getifaddr(ext_if_name, ext_ip_addr, INET_ADDRSTRLEN, &addr, NULL) < 0 || addr_is_reserved(&addr)) {
++					if(getifaddr(ext_if_name, ext_ip_addr, INET_ADDRSTRLEN, &addr, NULL) < 0 || (addr_is_reserved(&addr) && !GETFLAG(FORCEFORWARDINGMASK))) {
+ 						str = strcat_str(str, len, &tmplen, "0.0.0.0");
+ 					} else {
+ 						str = strcat_str(str, len, &tmplen, ext_ip_addr);
+--- a/upnpglobalvars.h
++++ b/upnpglobalvars.h
+@@ -87,6 +87,8 @@ extern int runtime_flags;
+ 
+ #define PERFORMSTUNMASK    0x1000
+ 
++#define FORCEFORWARDINGMASK 0x2000
++
+ #define SETFLAG(mask)	runtime_flags |= mask
+ #define GETFLAG(mask)	(runtime_flags & mask)
+ #define CLEARFLAG(mask)	runtime_flags &= ~mask
+--- a/upnpredirect.c
++++ b/upnpredirect.c
+@@ -444,7 +444,7 @@ upnp_redirect_internal(const char * rhos
+ {
+ 	/*syslog(LOG_INFO, "redirecting port %hu to %s:%hu protocol %s for: %s",
+ 		eport, iaddr, iport, protocol, desc);			*/
+-	if(disable_port_forwarding)
++	if(disable_port_forwarding && !GETFLAG(FORCEFORWARDINGMASK))
+ 		return -1;
+ 	if(add_redirect_rule2(ext_if_name, rhost, eport, iaddr, iport, proto,
+ 	                      desc, timestamp) < 0) {
+--- a/upnpsoap.c
++++ b/upnpsoap.c
+@@ -348,7 +348,11 @@ GetExternalIPAddress(struct upnphttp * h
+ 			ext_ip_addr[0] = '\0';
+ 		} else if (addr_is_reserved(&addr)) {
+ 			syslog(LOG_NOTICE, "private/reserved address %s is not suitable for external IP", ext_ip_addr);
+-			ext_ip_addr[0] = '\0';
++			if (!GETFLAG(FORCEFORWARDINGMASK)) {
++				ext_ip_addr[0] = '\0';
++			} else {
++				syslog(LOG_NOTICE, "force_forwarding enable, private/reserved address %s used as external IP", ext_ip_addr);
++			}
+ 		}
+ 	}
+ #else
-- 
2.43.0

