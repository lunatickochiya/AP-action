From e02a5c3dbdfda143153110c90ea603dcacb3af89 Mon Sep 17 00:00:00 2001
From: sfiction <sfiction.r@gmail.com>
Date: Mon, 3 Feb 2025 07:03:53 +0800
Subject: [PATCH 1/4] feat: move constants to a new header

---
 src/common.h   | 84 ++++++++++++++++++++++++++++++++++++++++++++++++++
 src/dns.h      | 17 ++--------
 src/dns_conf.h | 39 +----------------------
 src/util.h     |  1 +
 4 files changed, 88 insertions(+), 53 deletions(-)
 create mode 100644 src/common.h

diff --git a/src/common.h b/src/common.h
new file mode 100644
index 0000000000..94817a3bf9
--- /dev/null
+++ b/src/common.h
@@ -0,0 +1,84 @@
+/*************************************************************************
+ *
+ * Copyright (C) 2018-2024 Ruilin Peng (Nick) <pymumu@gmail.com>.
+ *
+ * smartdns is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * smartdns is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef _SMARTDNS_COMMON_H
+#define _SMARTDNS_COMMON_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+// from dns
+#define DNS_RR_A_LEN 4
+#define DNS_RR_AAAA_LEN 16
+#define DNS_MAX_CNAME_LEN 256
+#define DNS_MAX_OPT_LEN 256
+#define DNS_IN_PACKSIZE (512 * 8)
+#define DNS_PACKSIZE (512 * 16)
+#define DNS_DEFAULT_PACKET_SIZE 512
+#define DNS_MAX_ALPN_LEN 32
+#define DNS_MAX_ECH_LEN 512
+
+#define DNS_OPT_FLAG_DO 0x8000
+
+#define DNS_ADDR_FAMILY_IP 1
+#define DNS_ADDR_FAMILY_IPV6 2
+
+// from dns_conf
+#define DNS_MAX_BIND_IP 32
+#define DNS_MAX_SERVERS 64
+#define DNS_MAX_SERVER_NAME_LEN 128
+#define DNS_MAX_PTR_LEN 128
+#define DNS_MAX_IPSET_NAMELEN 32
+#define DNS_MAX_NFTSET_FAMILYLEN 8
+#define DNS_MAX_NFTSET_NAMELEN 256
+#define DNS_GROUP_NAME_LEN 32
+
+#define PROXY_NAME_LEN 32
+#define PROXY_MAX_SERVERS 128
+
+#define DNS_NAX_GROUP_NUMBER 16
+#define DNS_MAX_IPLEN 64
+#define DNS_PROXY_MAX_LEN 128
+#define DNS_CONF_USERNAME_LEN 32
+#define DNS_MAX_SPKI_LEN 64
+#define DNS_MAX_URL_LEN 256
+#define DNS_MAX_PATH 1024
+#define DEFAULT_DNS_PORT 53
+#define DEFAULT_DNS_TLS_PORT 853
+#define DEFAULT_DNS_HTTPS_PORT 443
+#define DNS_MAX_CONF_CNAME_LEN 256
+#define MAX_QTYPE_NUM 65535
+#define DNS_MAX_REPLY_IP_NUM 8
+#define DNS_MAX_QUERY_LIMIT 65535
+#define DNS_DEFAULT_CHECKPOINT_TIME (3600 * 24)
+#define DNS_MAX_SERVE_EXPIRED_TIME (3600 * 24 * 365)
+#define MAX_INTERFACE_LEN 16
+
+#define SMARTDNS_CONF_FILE "/etc/smartdns/smartdns.conf"
+#define SMARTDNS_LOG_FILE "/var/log/smartdns/smartdns.log"
+#define SMARTDNS_AUDIT_FILE "/var/log/smartdns/smartdns-audit.log"
+#define SMARTDNS_CACHE_FILE "/var/cache/smartdns/smartdns.cache"
+#define SMARTDNS_TMP_CACHE_FILE "/tmp/smartdns.cache"
+#define SMARTDNS_DEBUG_DIR "/tmp/smartdns"
+#define DNS_RESOLV_FILE "/etc/resolv.conf"
+
+#ifdef __cplusplus
+}
+#endif
+#endif // !_SMART_DNS_COMMON_H
\ No newline at end of file
diff --git a/src/dns.h b/src/dns.h
index 30bd240a11..b345e31e54 100644
--- a/src/dns.h
+++ b/src/dns.h
@@ -19,25 +19,12 @@
 #ifndef _DNS_HEAD_H
 #define _DNS_HEAD_H

+#include "common.h"
+
 #ifdef __cplusplus
 extern "C" {
 #endif /*__cplusplus */

-#define DNS_RR_A_LEN 4
-#define DNS_RR_AAAA_LEN 16
-#define DNS_MAX_CNAME_LEN 256
-#define DNS_MAX_OPT_LEN 256
-#define DNS_IN_PACKSIZE (512 * 8)
-#define DNS_PACKSIZE (512 * 16)
-#define DNS_DEFAULT_PACKET_SIZE 512
-#define DNS_MAX_ALPN_LEN 32
-#define DNS_MAX_ECH_LEN 512
-
-#define DNS_OPT_FLAG_DO 0x8000
-
-#define DNS_ADDR_FAMILY_IP 1
-#define DNS_ADDR_FAMILY_IPV6 2
-
 /*
 DNS parameters:
 https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml
diff --git a/src/dns_conf.h b/src/dns_conf.h
index c3706f8645..fbbf523f4a 100644
--- a/src/dns_conf.h
+++ b/src/dns_conf.h
@@ -21,6 +21,7 @@

 #include "art.h"
 #include "atomic.h"
+#include "common.h"
 #include "conf.h"
 #include "dns.h"
 #include "dns_client.h"
@@ -34,44 +35,6 @@
 extern "C" {
 #endif

-#define DNS_MAX_BIND_IP 32
-#define DNS_MAX_SERVERS 64
-#define DNS_MAX_SERVER_NAME_LEN 128
-#define DNS_MAX_PTR_LEN 128
-#define DNS_MAX_IPSET_NAMELEN 32
-#define DNS_MAX_NFTSET_FAMILYLEN 8
-#define DNS_MAX_NFTSET_NAMELEN 256
-#define DNS_GROUP_NAME_LEN 32
-
-#define PROXY_NAME_LEN 32
-#define PROXY_MAX_SERVERS 128
-
-#define DNS_NAX_GROUP_NUMBER 16
-#define DNS_MAX_IPLEN 64
-#define DNS_PROXY_MAX_LEN 128
-#define DNS_CONF_USERNAME_LEN 32
-#define DNS_MAX_SPKI_LEN 64
-#define DNS_MAX_URL_LEN 256
-#define DNS_MAX_PATH 1024
-#define DEFAULT_DNS_PORT 53
-#define DEFAULT_DNS_TLS_PORT 853
-#define DEFAULT_DNS_HTTPS_PORT 443
-#define DNS_MAX_CONF_CNAME_LEN 256
-#define MAX_QTYPE_NUM 65535
-#define DNS_MAX_REPLY_IP_NUM 8
-#define DNS_MAX_QUERY_LIMIT 65535
-#define DNS_DEFAULT_CHECKPOINT_TIME (3600 * 24)
-#define DNS_MAX_SERVE_EXPIRED_TIME (3600 * 24 * 365)
-#define MAX_INTERFACE_LEN 16
-
-#define SMARTDNS_CONF_FILE "/etc/smartdns/smartdns.conf"
-#define SMARTDNS_LOG_FILE "/var/log/smartdns/smartdns.log"
-#define SMARTDNS_AUDIT_FILE "/var/log/smartdns/smartdns-audit.log"
-#define SMARTDNS_CACHE_FILE "/var/cache/smartdns/smartdns.cache"
-#define SMARTDNS_TMP_CACHE_FILE "/tmp/smartdns.cache"
-#define SMARTDNS_DEBUG_DIR "/tmp/smartdns"
-#define DNS_RESOLV_FILE "/etc/resolv.conf"
-
 enum domain_rule {
 	DOMAIN_RULE_FLAGS = 0,
 	DOMAIN_RULE_ADDRESS_IPV4,
diff --git a/src/util.h b/src/util.h
index 8e33d97829..ab9cb916aa 100644
--- a/src/util.h
+++ b/src/util.h
@@ -19,6 +19,7 @@
 #ifndef SMART_DNS_UTIL_H
 #define SMART_DNS_UTIL_H

+#include "common.h"
 #include "stringutil.h"
 #include <netdb.h>
 #include <time.h>

From 0c7acada86f78754c73ba407a89232e040e501e3 Mon Sep 17 00:00:00 2001
From: sfiction <sfiction.r@gmail.com>
Date: Mon, 3 Feb 2025 07:01:41 +0800
Subject: [PATCH 2/4] feat(dns_rules): separate `dns_domain_rule`

---
 src/dns_conf.c   | 149 +++++------------------------
 src/dns_conf.h   | 137 +--------------------------
 src/dns_rules.c  | 239 +++++++++++++++++++++++++++++++++++++++++++++++
 src/dns_rules.h  | 184 ++++++++++++++++++++++++++++++++++++
 src/dns_server.c |  16 +++-
 5 files changed, 456 insertions(+), 269 deletions(-)
 create mode 100644 src/dns_rules.c
 create mode 100644 src/dns_rules.h

diff --git a/src/dns_conf.c b/src/dns_conf.c
index 74fd7703ba..c0072ce865 100644
--- a/src/dns_conf.c
+++ b/src/dns_conf.c
@@ -285,87 +285,6 @@ static __attribute__((unused)) int _dns_conf_group_enum(int value, int *data)
 	return 0;
 }

-static void *_new_dns_rule_ext(enum domain_rule domain_rule, int ext_size)
-{
-	struct dns_rule *rule;
-	int size = 0;
-
-	if (domain_rule >= DOMAIN_RULE_MAX) {
-		return NULL;
-	}
-
-	switch (domain_rule) {
-	case DOMAIN_RULE_FLAGS:
-		size = sizeof(struct dns_rule_flags);
-		break;
-	case DOMAIN_RULE_ADDRESS_IPV4:
-		size = sizeof(struct dns_rule_address_IPV4);
-		break;
-	case DOMAIN_RULE_ADDRESS_IPV6:
-		size = sizeof(struct dns_rule_address_IPV6);
-		break;
-	case DOMAIN_RULE_IPSET:
-	case DOMAIN_RULE_IPSET_IPV4:
-	case DOMAIN_RULE_IPSET_IPV6:
-		size = sizeof(struct dns_ipset_rule);
-		break;
-	case DOMAIN_RULE_NFTSET_IP:
-	case DOMAIN_RULE_NFTSET_IP6:
-		size = sizeof(struct dns_nftset_rule);
-		break;
-	case DOMAIN_RULE_NAMESERVER:
-		size = sizeof(struct dns_nameserver_rule);
-		break;
-	case DOMAIN_RULE_GROUP:
-		size = sizeof(struct dns_group_rule);
-		break;
-	case DOMAIN_RULE_CHECKSPEED:
-		size = sizeof(struct dns_domain_check_orders);
-		break;
-	case DOMAIN_RULE_RESPONSE_MODE:
-		size = sizeof(struct dns_response_mode_rule);
-		break;
-	case DOMAIN_RULE_CNAME:
-		size = sizeof(struct dns_cname_rule);
-		break;
-	case DOMAIN_RULE_HTTPS:
-		size = sizeof(struct dns_https_record_rule);
-		break;
-	case DOMAIN_RULE_TTL:
-		size = sizeof(struct dns_ttl_rule);
-		break;
-	default:
-		return NULL;
-	}
-
-	size += ext_size;
-	rule = malloc(size);
-	if (!rule) {
-		return NULL;
-	}
-	memset(rule, 0, size);
-	rule->rule = domain_rule;
-	atomic_set(&rule->refcnt, 1);
-	return rule;
-}
-
-static void *_new_dns_rule(enum domain_rule domain_rule)
-{
-	return _new_dns_rule_ext(domain_rule, 0);
-}
-
-static void _dns_rule_get(struct dns_rule *rule)
-{
-	atomic_inc(&rule->refcnt);
-}
-
-static void _dns_rule_put(struct dns_rule *rule)
-{
-	if (atomic_dec_and_test(&rule->refcnt)) {
-		free(rule);
-	}
-}
-
 static void _dns_iplist_ip_address_add(struct dns_iplist_ip_addresses *iplist, unsigned char addr[], int addr_len)
 {
 	iplist->ipaddr = realloc(iplist->ipaddr, (iplist->ipaddr_num + 1) * sizeof(struct dns_iplist_ip_address));
@@ -1213,31 +1132,10 @@ static int _config_update_bootstrap_dns_rule(void)
 	return 0;
 }

-static int _config_domain_rule_free(struct dns_domain_rule *domain_rule)
-{
-	int i = 0;
-
-	if (domain_rule == NULL) {
-		return 0;
-	}
-
-	for (i = 0; i < DOMAIN_RULE_MAX; i++) {
-		if (domain_rule->rules[i] == NULL) {
-			continue;
-		}
-
-		_dns_rule_put(domain_rule->rules[i]);
-		domain_rule->rules[i] = NULL;
-	}
-
-	free(domain_rule);
-	return 0;
-}
-
 static int _config_domain_iter_free(void *data, const unsigned char *key, uint32_t key_len, void *value)
 {
 	struct dns_domain_rule *domain_rule = value;
-	return _config_domain_rule_free(domain_rule);
+	return domain_rule_free(domain_rule);
 }

 static struct dns_conf_group *_config_rule_group_get(const char *group_name)
@@ -1525,38 +1423,35 @@ static int _config_domain_rule_add(const char *domain, enum domain_rule type, vo
 	/* Get existing or create domain rule */
 	domain_rule = art_search(&_config_current_rule_group()->domain_rule.tree, (unsigned char *)domain_key, len);
 	if (domain_rule == NULL) {
-		add_domain_rule = malloc(sizeof(*add_domain_rule));
+		add_domain_rule = domain_rule_new(1);
 		if (add_domain_rule == NULL) {
 			goto errout;
 		}
-		memset(add_domain_rule, 0, sizeof(*add_domain_rule));
 		domain_rule = add_domain_rule;
 	}

-	/* add new rule to domain */
-	if (domain_rule->rules[type]) {
-		_dns_rule_put(domain_rule->rules[type]);
-		domain_rule->rules[type] = NULL;
+	if (domain_rule_set_data(domain_rule, sub_rule_only, root_rule_only)) {
+		goto errout;
 	}

-	domain_rule->rules[type] = rule;
-	domain_rule->sub_rule_only = sub_rule_only;
-	domain_rule->root_rule_only = root_rule_only;
-	_dns_rule_get(rule);
+	/* add new rule to domain */
+	if (domain_rule_set(domain_rule, type, rule)) {
+		goto errout;
+	}

 	/* update domain rule */
 	if (add_domain_rule) {
 		old_domain_rule = art_insert(&_config_current_rule_group()->domain_rule.tree, (unsigned char *)domain_key, len,
 									 add_domain_rule);
 		if (old_domain_rule) {
-			_config_domain_rule_free(old_domain_rule);
+			domain_rule_free(old_domain_rule);
 		}
 	}

 	return 0;
 errout:
 	if (add_domain_rule) {
-		free(add_domain_rule);
+		domain_rule_free(add_domain_rule);
 	}

 	tlog(TLOG_ERROR, "add domain %s rule failed", domain);
@@ -1587,7 +1482,7 @@ static int _config_domain_rule_delete(const char *domain)
 	/* delete existing rules */
 	void *rule = art_delete(&_config_current_rule_group()->domain_rule.tree, (unsigned char *)domain_key, len);
 	if (rule) {
-		_config_domain_rule_free(rule);
+		domain_rule_free(rule);
 	}

 	return 0;
@@ -1630,25 +1525,23 @@ static int _config_domain_rule_flag_set(const char *domain, unsigned int flag, u
 	/* Get existing or create domain rule */
 	domain_rule = art_search(&_config_current_rule_group()->domain_rule.tree, (unsigned char *)domain_key, len);
 	if (domain_rule == NULL) {
-		add_domain_rule = malloc(sizeof(*add_domain_rule));
+		add_domain_rule = domain_rule_new(1);
 		if (add_domain_rule == NULL) {
 			goto errout;
 		}
-		memset(add_domain_rule, 0, sizeof(*add_domain_rule));
 		domain_rule = add_domain_rule;
 	}

-	/* add new rule to domain */
-	if (domain_rule->rules[DOMAIN_RULE_FLAGS] == NULL) {
-		rule_flags = _new_dns_rule(DOMAIN_RULE_FLAGS);
-		rule_flags->flags = 0;
-		domain_rule->rules[DOMAIN_RULE_FLAGS] = (struct dns_rule *)rule_flags;
+	if (domain_rule_set_data(domain_rule, sub_rule_only, root_rule_only)) {
+		goto errout;
 	}

-	domain_rule->sub_rule_only = sub_rule_only;
-	domain_rule->root_rule_only = root_rule_only;
+	/* add new rule to domain */
+	rule_flags = domain_rule_get_or_insert_flags(domain_rule);
+	if (rule_flags == NULL) {
+		goto errout;
+	}

-	rule_flags = (struct dns_rule_flags *)domain_rule->rules[DOMAIN_RULE_FLAGS];
 	if (is_clear == false) {
 		rule_flags->flags |= flag;
 	} else {
@@ -1661,14 +1554,14 @@ static int _config_domain_rule_flag_set(const char *domain, unsigned int flag, u
 		old_domain_rule = art_insert(&_config_current_rule_group()->domain_rule.tree, (unsigned char *)domain_key, len,
 									 add_domain_rule);
 		if (old_domain_rule) {
-			_config_domain_rule_free(old_domain_rule);
+			domain_rule_free(old_domain_rule);
 		}
 	}

 	return 0;
 errout:
 	if (add_domain_rule) {
-		free(add_domain_rule);
+		domain_rule_free(add_domain_rule);
 	}

 	tlog(TLOG_ERROR, "add domain %s rule failed", domain);
diff --git a/src/dns_conf.h b/src/dns_conf.h
index fbbf523f4a..ca340849cc 100644
--- a/src/dns_conf.h
+++ b/src/dns_conf.h
@@ -25,6 +25,7 @@
 #include "conf.h"
 #include "dns.h"
 #include "dns_client.h"
+#include "dns_rules.h"
 #include "hash.h"
 #include "hashtable.h"
 #include "list.h"
@@ -35,25 +36,6 @@
 extern "C" {
 #endif

-enum domain_rule {
-	DOMAIN_RULE_FLAGS = 0,
-	DOMAIN_RULE_ADDRESS_IPV4,
-	DOMAIN_RULE_ADDRESS_IPV6,
-	DOMAIN_RULE_IPSET,
-	DOMAIN_RULE_IPSET_IPV4,
-	DOMAIN_RULE_IPSET_IPV6,
-	DOMAIN_RULE_NFTSET_IP,
-	DOMAIN_RULE_NFTSET_IP6,
-	DOMAIN_RULE_NAMESERVER,
-	DOMAIN_RULE_GROUP,
-	DOMAIN_RULE_CHECKSPEED,
-	DOMAIN_RULE_RESPONSE_MODE,
-	DOMAIN_RULE_CNAME,
-	DOMAIN_RULE_HTTPS,
-	DOMAIN_RULE_TTL,
-	DOMAIN_RULE_MAX,
-};
-
 enum ip_rule {
 	IP_RULE_FLAGS = 0,
 	IP_RULE_ALIAS = 1,
@@ -73,13 +55,6 @@ typedef enum {
 	DNS_BIND_TYPE_HTTPS,
 } DNS_BIND_TYPE;

-typedef enum {
-	DOMAIN_CHECK_NONE = 0,
-	DOMAIN_CHECK_ICMP = 1,
-	DOMAIN_CHECK_TCP = 2,
-	DOMAIN_CHECK_NUM = 3,
-} DOMAIN_CHECK_TYPE;
-
 #define DOMAIN_FLAG_ADDR_SOA (1 << 0)
 #define DOMAIN_FLAG_ADDR_IPV4_SOA (1 << 1)
 #define DOMAIN_FLAG_ADDR_IPV6_SOA (1 << 2)
@@ -130,45 +105,11 @@ typedef enum {
 #define BIND_FLAG_NO_RULES (1 << 15)
 #define BIND_FLAG_ACL (1 << 16)

-enum response_mode_type {
-	DNS_RESPONSE_MODE_FIRST_PING_IP = 0,
-	DNS_RESPONSE_MODE_FASTEST_IP,
-	DNS_RESPONSE_MODE_FASTEST_RESPONSE,
-};
-
-struct dns_rule {
-	atomic_t refcnt;
-	enum domain_rule rule;
-};
-
-struct dns_rule_flags {
-	struct dns_rule head;
-	unsigned int flags;
-	unsigned int is_flag_set;
-};
-
-struct dns_rule_address_IPV4 {
-	struct dns_rule head;
-	char addr_num;
-	unsigned char ipv4_addr[][DNS_RR_A_LEN];
-};
-
-struct dns_rule_address_IPV6 {
-	struct dns_rule head;
-	char addr_num;
-	unsigned char ipv6_addr[][DNS_RR_AAAA_LEN];
-};
-
 struct dns_ipset_name {
 	struct hlist_node node;
 	char ipsetname[DNS_MAX_IPSET_NAMELEN];
 };

-struct dns_ipset_rule {
-	struct dns_rule head;
-	const char *ipsetname;
-};
-
 struct dns_ipset_names {
 	char inet_enable;
 	char ipv4_enable;
@@ -180,18 +121,6 @@ struct dns_ipset_names {
 extern struct dns_ipset_names dns_conf_ipset_no_speed;
 extern struct dns_ipset_names dns_conf_ipset;

-struct dns_cname_rule {
-	struct dns_rule head;
-	char cname[DNS_MAX_CNAME_LEN];
-};
-
-struct dns_ttl_rule {
-	struct dns_rule head;
-	int ttl;
-	int ttl_max;
-	int ttl_min;
-};
-
 struct dns_nftset_name {
 	struct hlist_node node;
 	char nftfamilyname[DNS_MAX_NFTSET_FAMILYLEN];
@@ -199,13 +128,6 @@ struct dns_nftset_name {
 	char nftsetname[DNS_MAX_NFTSET_NAMELEN];
 };

-struct dns_nftset_rule {
-	struct dns_rule head;
-	const char *familyname;
-	const char *nfttablename;
-	const char *nftsetname;
-};
-
 struct dns_nftset_names {
 	char inet_enable;
 	char ip_enable;
@@ -217,22 +139,6 @@ struct dns_nftset_names {
 extern struct dns_nftset_names dns_conf_nftset_no_speed;
 extern struct dns_nftset_names dns_conf_nftset;

-struct dns_domain_rule {
-	unsigned char sub_rule_only : 1;
-	unsigned char root_rule_only : 1;
-	struct dns_rule *rules[DOMAIN_RULE_MAX];
-};
-
-struct dns_nameserver_rule {
-	struct dns_rule head;
-	const char *group_name;
-};
-
-struct dns_group_rule {
-	struct dns_rule head;
-	const char *group_name;
-};
-
 struct dns_server_groups {
 	struct hlist_node node;
 	char group_name[DNS_GROUP_NAME_LEN];
@@ -240,47 +146,6 @@ struct dns_server_groups {
 	struct dns_servers *servers[DNS_MAX_SERVERS];
 };

-struct dns_domain_check_order {
-	DOMAIN_CHECK_TYPE type;
-	unsigned short tcp_port;
-};
-
-struct dns_domain_check_orders {
-	struct dns_rule head;
-	struct dns_domain_check_order orders[DOMAIN_CHECK_NUM];
-};
-
-struct dns_response_mode_rule {
-	struct dns_rule head;
-	enum response_mode_type mode;
-};
-
-struct dns_https_record {
-	int enable;
-	char target[DNS_MAX_CNAME_LEN];
-	int priority;
-	char alpn[DNS_MAX_ALPN_LEN];
-	int alpn_len;
-	int port;
-	unsigned char ech[DNS_MAX_ECH_LEN];
-	int ech_len;
-	int has_ipv4;
-	unsigned char ipv4_addr[DNS_RR_A_LEN];
-	int has_ipv6;
-	unsigned char ipv6_addr[DNS_RR_AAAA_LEN];
-};
-
-struct dns_https_filter {
-	int no_ipv4hint;
-	int no_ipv6hint;
-};
-
-struct dns_https_record_rule {
-	struct dns_rule head;
-	struct dns_https_record record;
-	struct dns_https_filter filter;
-};
-
 struct dns_group_table {
 	DECLARE_HASHTABLE(group, 8);
 };
diff --git a/src/dns_rules.c b/src/dns_rules.c
new file mode 100644
index 0000000000..7651ca6837
--- /dev/null
+++ b/src/dns_rules.c
@@ -0,0 +1,239 @@
+/*************************************************************************
+ *
+ * Copyright (C) 2018-2024 Ruilin Peng (Nick) <pymumu@gmail.com>.
+ *
+ * smartdns is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * smartdns is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "stddef.h"
+#include "stdlib.h"
+#include "string.h"
+
+#include "dns_rules.h"
+#include "tlog.h"
+
+void *_new_dns_rule_ext(enum domain_rule domain_rule, int ext_size)
+{
+	struct dns_rule *rule;
+	int size = 0;
+
+	if (domain_rule >= DOMAIN_RULE_MAX) {
+		return NULL;
+	}
+
+	switch (domain_rule) {
+	case DOMAIN_RULE_FLAGS:
+		size = sizeof(struct dns_rule_flags);
+		break;
+	case DOMAIN_RULE_ADDRESS_IPV4:
+		size = sizeof(struct dns_rule_address_IPV4);
+		break;
+	case DOMAIN_RULE_ADDRESS_IPV6:
+		size = sizeof(struct dns_rule_address_IPV6);
+		break;
+	case DOMAIN_RULE_IPSET:
+	case DOMAIN_RULE_IPSET_IPV4:
+	case DOMAIN_RULE_IPSET_IPV6:
+		size = sizeof(struct dns_ipset_rule);
+		break;
+	case DOMAIN_RULE_NFTSET_IP:
+	case DOMAIN_RULE_NFTSET_IP6:
+		size = sizeof(struct dns_nftset_rule);
+		break;
+	case DOMAIN_RULE_NAMESERVER:
+		size = sizeof(struct dns_nameserver_rule);
+		break;
+	case DOMAIN_RULE_GROUP:
+		size = sizeof(struct dns_group_rule);
+		break;
+	case DOMAIN_RULE_CHECKSPEED:
+		size = sizeof(struct dns_domain_check_orders);
+		break;
+	case DOMAIN_RULE_RESPONSE_MODE:
+		size = sizeof(struct dns_response_mode_rule);
+		break;
+	case DOMAIN_RULE_CNAME:
+		size = sizeof(struct dns_cname_rule);
+		break;
+	case DOMAIN_RULE_HTTPS:
+		size = sizeof(struct dns_https_record_rule);
+		break;
+	case DOMAIN_RULE_TTL:
+		size = sizeof(struct dns_ttl_rule);
+		break;
+	default:
+		return NULL;
+	}
+
+	size += ext_size;
+	rule = malloc(size);
+	if (!rule) {
+		return NULL;
+	}
+	memset(rule, 0, size);
+	rule->rule = domain_rule;
+	atomic_set(&rule->refcnt, 1);
+	return rule;
+}
+
+void *_new_dns_rule(enum domain_rule domain_rule)
+{
+	return _new_dns_rule_ext(domain_rule, 0);
+}
+
+static void _dns_rule_get(struct dns_rule *rule)
+{
+	atomic_inc(&rule->refcnt);
+}
+
+void _dns_rule_put(struct dns_rule *rule)
+{
+	if (atomic_dec_and_test(&rule->refcnt)) {
+		free(rule);
+	}
+}
+
+enum layout_type {
+	DOMAIN_RULE_LAYOUT_ARRAY = 1,
+	DOMAIN_RULE_LAYOUT_POINTER = 2,
+};
+
+struct dns_domain_rule {
+	unsigned char sub_rule_only : 1;
+	unsigned char root_rule_only : 1;
+	struct dns_rule *rules[DOMAIN_RULE_MAX];
+};
+
+struct dns_domain_rule *domain_rule_new(uint8_t capacity)
+{
+	struct dns_domain_rule *domain_rule;
+
+	domain_rule = calloc(1, sizeof(struct dns_domain_rule));
+	if (domain_rule == NULL) {
+		return NULL;
+	}
+
+	return domain_rule;
+}
+
+static struct dns_rule **_domain_rule_access(struct dns_domain_rule *domain_rule, enum domain_rule type, int insert)
+{
+	if (domain_rule == NULL) {
+		return NULL;
+	}
+
+	return &domain_rule->rules[type];
+}
+
+int domain_rule_free(struct dns_domain_rule *domain_rule)
+{
+	int i = 0;
+
+	if (domain_rule == NULL) {
+		return 0;
+	}
+
+	for (i = 0; i < DOMAIN_RULE_MAX; i++) {
+		if (domain_rule->rules[i] == NULL) {
+			continue;
+		}
+
+		_dns_rule_put(domain_rule->rules[i]);
+		domain_rule->rules[i] = NULL;
+	}
+
+	free(domain_rule);
+	return 0;
+}
+
+int domain_rule_get_data(struct dns_domain_rule *domain_rule, int *sub_rule_only, int *root_rule_only)
+{
+	if (domain_rule == NULL) {
+		return -1;
+	}
+
+	*sub_rule_only = domain_rule->sub_rule_only;
+	*root_rule_only = domain_rule->root_rule_only;
+
+	return 0;
+}
+
+int domain_rule_set_data(struct dns_domain_rule *domain_rule, int sub_rule_only, int root_rule_only)
+{
+	if (domain_rule == NULL) {
+		return -1;
+	}
+
+	domain_rule->sub_rule_only = sub_rule_only;
+	domain_rule->root_rule_only = root_rule_only;
+
+	return 0;
+}
+
+struct dns_rule *domain_rule_get(struct dns_domain_rule *domain_rule, enum domain_rule type)
+{
+	struct dns_rule **ptr_rule;
+
+	ptr_rule = _domain_rule_access(domain_rule, type, 0);
+	if (ptr_rule == NULL) {
+		return NULL;
+	}
+
+	return *ptr_rule;
+}
+
+struct dns_rule_flags *domain_rule_get_or_insert_flags(struct dns_domain_rule *domain_rule)
+{
+	struct dns_rule **ptr_rule;
+	struct dns_rule_flags *rule_flags;
+
+	ptr_rule = _domain_rule_access(domain_rule, DOMAIN_RULE_FLAGS, 1);
+	if (ptr_rule == NULL) {
+		return NULL;
+	}
+
+	rule_flags = _new_dns_rule(DOMAIN_RULE_FLAGS);
+	if (rule_flags == NULL) {
+		return NULL;
+	}
+
+	*ptr_rule = (struct dns_rule *)rule_flags;
+	rule_flags->flags = 0;
+
+	return rule_flags;
+}
+
+int domain_rule_set(struct dns_domain_rule *domain_rule, enum domain_rule type, struct dns_rule *rule)
+{
+	struct dns_rule **ptr_rule;
+
+	if (domain_rule == NULL || type == DOMAIN_RULE_FLAGS) {
+		return -1;
+	}
+
+	ptr_rule = _domain_rule_access(domain_rule, type, 1);
+	if (ptr_rule == NULL) {
+		return -1;
+	}
+
+	if (*ptr_rule) {
+		_dns_rule_put(*ptr_rule);
+		*ptr_rule = NULL;
+	}
+
+	*ptr_rule = rule;
+	_dns_rule_get(rule);
+
+	return 0;
+}
\ No newline at end of file
diff --git a/src/dns_rules.h b/src/dns_rules.h
new file mode 100644
index 0000000000..d4ffc74c2f
--- /dev/null
+++ b/src/dns_rules.h
@@ -0,0 +1,184 @@
+/*************************************************************************
+ *
+ * Copyright (C) 2018-2024 Ruilin Peng (Nick) <pymumu@gmail.com>.
+ *
+ * smartdns is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * smartdns is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef _DNS_RULES
+#define _DNS_RULES
+
+#include <stdint.h>
+
+#include "atomic.h"
+#include "common.h"
+#include "list.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum domain_rule {
+	DOMAIN_RULE_FLAGS = 0,
+	DOMAIN_RULE_ADDRESS_IPV4,
+	DOMAIN_RULE_ADDRESS_IPV6,
+	DOMAIN_RULE_IPSET,
+	DOMAIN_RULE_IPSET_IPV4,
+	DOMAIN_RULE_IPSET_IPV6,
+	DOMAIN_RULE_NFTSET_IP,
+	DOMAIN_RULE_NFTSET_IP6,
+	DOMAIN_RULE_NAMESERVER,
+	DOMAIN_RULE_GROUP,
+	DOMAIN_RULE_CHECKSPEED,
+	DOMAIN_RULE_RESPONSE_MODE,
+	DOMAIN_RULE_CNAME,
+	DOMAIN_RULE_HTTPS,
+	DOMAIN_RULE_TTL,
+	DOMAIN_RULE_MAX,
+};
+
+struct dns_rule {
+	atomic_t refcnt;
+	enum domain_rule rule;
+};
+
+struct dns_rule_flags {
+	struct dns_rule head;
+	unsigned int flags;
+	unsigned int is_flag_set;
+};
+
+struct dns_rule_address_IPV4 {
+	struct dns_rule head;
+	char addr_num;
+	unsigned char ipv4_addr[][DNS_RR_A_LEN];
+};
+
+struct dns_rule_address_IPV6 {
+	struct dns_rule head;
+	char addr_num;
+	unsigned char ipv6_addr[][DNS_RR_AAAA_LEN];
+};
+
+struct dns_ipset_rule {
+	struct dns_rule head;
+	const char *ipsetname;
+};
+
+struct dns_nftset_rule {
+	struct dns_rule head;
+	const char *familyname;
+	const char *nfttablename;
+	const char *nftsetname;
+};
+
+struct dns_nameserver_rule {
+	struct dns_rule head;
+	const char *group_name;
+};
+
+struct dns_group_rule {
+	struct dns_rule head;
+	const char *group_name;
+};
+
+typedef enum {
+	DOMAIN_CHECK_NONE = 0,
+	DOMAIN_CHECK_ICMP = 1,
+	DOMAIN_CHECK_TCP = 2,
+	DOMAIN_CHECK_NUM = 3,
+} DOMAIN_CHECK_TYPE;
+
+struct dns_domain_check_order {
+	DOMAIN_CHECK_TYPE type;
+	unsigned short tcp_port;
+};
+
+struct dns_domain_check_orders {
+	struct dns_rule head;
+	struct dns_domain_check_order orders[DOMAIN_CHECK_NUM];
+};
+
+enum response_mode_type {
+	DNS_RESPONSE_MODE_FIRST_PING_IP = 0,
+	DNS_RESPONSE_MODE_FASTEST_IP,
+	DNS_RESPONSE_MODE_FASTEST_RESPONSE,
+};
+
+struct dns_response_mode_rule {
+	struct dns_rule head;
+	enum response_mode_type mode;
+};
+
+struct dns_cname_rule {
+	struct dns_rule head;
+	char cname[DNS_MAX_CNAME_LEN];
+};
+
+struct dns_https_record {
+	int enable;
+	char target[DNS_MAX_CNAME_LEN];
+	int priority;
+	char alpn[DNS_MAX_ALPN_LEN];
+	int alpn_len;
+	int port;
+	unsigned char ech[DNS_MAX_ECH_LEN];
+	int ech_len;
+	int has_ipv4;
+	unsigned char ipv4_addr[DNS_RR_A_LEN];
+	int has_ipv6;
+	unsigned char ipv6_addr[DNS_RR_AAAA_LEN];
+};
+
+struct dns_https_filter {
+	int no_ipv4hint;
+	int no_ipv6hint;
+};
+
+struct dns_https_record_rule {
+	struct dns_rule head;
+	struct dns_https_record record;
+	struct dns_https_filter filter;
+};
+
+struct dns_ttl_rule {
+	struct dns_rule head;
+	int ttl;
+	int ttl_max;
+	int ttl_min;
+};
+
+void *_new_dns_rule_ext(enum domain_rule domain_rule, int ext_size);
+void *_new_dns_rule(enum domain_rule domain_rule);
+void _dns_rule_put(struct dns_rule *rule);
+
+struct dns_domain_rule *domain_rule_new(uint8_t capacity);
+int domain_rule_free(struct dns_domain_rule *domain_rule);
+// ensures users can't directly modify `struct dns_domain_rule`
+int domain_rule_get_data(struct dns_domain_rule *domain_rule, int *sub_rule_only, int *root_rule_only);
+int domain_rule_set_data(struct dns_domain_rule *domain_rule, int sub_rule_only, int root_rule_only);
+/**
+ * Get rule without allocation.
+ */
+struct dns_rule *domain_rule_get(struct dns_domain_rule *domain_rule, enum domain_rule type);
+/**
+ * Get flags rule with essentially allocation.
+ */
+struct dns_rule_flags *domain_rule_get_or_insert_flags(struct dns_domain_rule *domain_rule);
+int domain_rule_set(struct dns_domain_rule *domain_rule, enum domain_rule type, struct dns_rule *rule);
+
+#ifdef __cplusplus
+}
+#endif
+#endif // !_DNS_RULES
\ No newline at end of file
diff --git a/src/dns_server.c b/src/dns_server.c
index f97253be5e..883fbfe172 100644
--- a/src/dns_server.c
+++ b/src/dns_server.c
@@ -5331,19 +5331,24 @@ static int _dns_server_get_rules(unsigned char *key, uint32_t key_len, int is_su
 	struct rule_walk_args *walk_args = arg;
 	struct dns_request_domain_rule *request_domain_rule = walk_args->args;
 	struct dns_domain_rule *domain_rule = value;
+	struct dns_rule *rule;
+	int sub_rule_only = 0;
+	int root_rule_only = 0;
 	int i = 0;
 	if (domain_rule == NULL) {
 		return 0;
 	}

-	if (domain_rule->sub_rule_only != domain_rule->root_rule_only) {
+	// always success when domain_rule is not NULL
+	domain_rule_get_data(domain_rule, &sub_rule_only, &root_rule_only);
+	if (sub_rule_only != root_rule_only) {
 		/* only subkey rule */
-		if (domain_rule->sub_rule_only == 1 && is_subkey == 0) {
+		if (sub_rule_only == 1 && is_subkey == 0) {
 			return 0;
 		}

 		/* only root key rule */
-		if (domain_rule->root_rule_only == 1 && is_subkey == 1) {
+		if (root_rule_only == 1 && is_subkey == 1) {
 			return 0;
 		}
 	}
@@ -5355,14 +5360,15 @@ static int _dns_server_get_rules(unsigned char *key, uint32_t key_len, int is_su
 	}

 	for (; i < DOMAIN_RULE_MAX; i++) {
-		if (domain_rule->rules[i] == NULL) {
+		rule = domain_rule_get(domain_rule, i);
+		if (rule == NULL) {
 			if (walk_args->rule_index >= 0) {
 				break;
 			}
 			continue;
 		}

-		request_domain_rule->rules[i] = domain_rule->rules[i];
+		request_domain_rule->rules[i] = rule;
 		request_domain_rule->is_sub_rule[i] = is_subkey;
 		walk_args->key[i] = key;
 		walk_args->key_len[i] = key_len;

From 29d4564f67c8708fa2d6c194cb50a4cdec430256 Mon Sep 17 00:00:00 2001
From: sfiction <sfiction.r@gmail.com>
Date: Sun, 9 Feb 2025 05:25:52 +0800
Subject: [PATCH 3/4] test: domain rules

---
 test/cases/test-domain-rules.cc | 52 +++++++++++++++++++++++++++++++++
 1 file changed, 52 insertions(+)
 create mode 100644 test/cases/test-domain-rules.cc

diff --git a/test/cases/test-domain-rules.cc b/test/cases/test-domain-rules.cc
new file mode 100644
index 0000000000..9b99da5f65
--- /dev/null
+++ b/test/cases/test-domain-rules.cc
@@ -0,0 +1,52 @@
+/*************************************************************************
+ *
+ * Copyright (C) 2018-2024 Ruilin Peng (Nick) <pymumu@gmail.com>.
+ *
+ * smartdns is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * smartdns is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "dns_rules.h"
+#include "gtest/gtest.h"
+
+#include <map>
+
+class DomainRules : public ::testing::Test
+{
+  protected:
+	virtual void SetUp() {}
+	virtual void TearDown() {}
+};
+
+TEST_F(DomainRules, order)
+{
+	struct dns_domain_rule *domain_rule = domain_rule_new(1);
+	ASSERT_NE(domain_rule, nullptr);
+
+	std::map<int, struct dns_rule *> rules;
+	for (int i = 0; i < DOMAIN_RULE_MAX; ++i) {
+		struct dns_rule *rule = (struct dns_rule *)_new_dns_rule((enum domain_rule)i);
+		EXPECT_NE(rule, nullptr);
+		rules[i] = rule;
+		EXPECT_EQ(domain_rule_set(domain_rule, (enum domain_rule)i, rule), i == DOMAIN_RULE_FLAGS ? -1 : 0);
+	}
+
+	EXPECT_EQ(domain_rule_get(domain_rule, DOMAIN_RULE_FLAGS), nullptr);
+	for (int i = 1; i < DOMAIN_RULE_MAX; ++i) {
+		EXPECT_EQ(domain_rule_get(domain_rule, (enum domain_rule)i), rules[i]);
+	}
+
+	struct dns_rule_flags *rule_flags = domain_rule_get_or_insert_flags(domain_rule);
+	EXPECT_NE(rule_flags, nullptr);
+	EXPECT_EQ(rule_flags->flags, 0);
+}

From 63fb3c25d68c2170fca087693c1a2ab85b766d8f Mon Sep 17 00:00:00 2001
From: sfiction <sfiction.r@gmail.com>
Date: Sun, 9 Feb 2025 02:30:32 +0800
Subject: [PATCH 4/4] feat(dns_rules): reduce memory usage of domain rule

---
 src/dns_rules.c | 107 ++++++++++++++++++++++++++++++++++++++++--------
 1 file changed, 90 insertions(+), 17 deletions(-)

diff --git a/src/dns_rules.c b/src/dns_rules.c
index 7651ca6837..0c22959e7b 100644
--- a/src/dns_rules.c
+++ b/src/dns_rules.c
@@ -28,10 +28,6 @@ void *_new_dns_rule_ext(enum domain_rule domain_rule, int ext_size)
 	struct dns_rule *rule;
 	int size = 0;

-	if (domain_rule >= DOMAIN_RULE_MAX) {
-		return NULL;
-	}
-
 	switch (domain_rule) {
 	case DOMAIN_RULE_FLAGS:
 		size = sizeof(struct dns_rule_flags);
@@ -109,13 +105,22 @@ enum layout_type {
 	DOMAIN_RULE_LAYOUT_POINTER = 2,
 };

+#define INNER_ARRAY_SIZE 1
+
 struct dns_domain_rule {
 	unsigned char sub_rule_only : 1;
 	unsigned char root_rule_only : 1;
-	struct dns_rule *rules[DOMAIN_RULE_MAX];
+
+	unsigned char layout_type : 2;
+	uint8_t capacity;
+	uint32_t bitmap;
+	union {
+		struct dns_rule *arr[INNER_ARRAY_SIZE];
+		struct dns_rule **ptr;
+	} rules;
 };

-struct dns_domain_rule *domain_rule_new(uint8_t capacity)
+struct dns_domain_rule *domain_rule_new(uint8_t)
 {
 	struct dns_domain_rule *domain_rule;

@@ -124,33 +129,101 @@ struct dns_domain_rule *domain_rule_new(uint8_t capacity)
 		return NULL;
 	}

+	domain_rule->layout_type = DOMAIN_RULE_LAYOUT_ARRAY;
+	domain_rule->capacity = INNER_ARRAY_SIZE;
+	domain_rule->bitmap = 0;
+
 	return domain_rule;
 }

-static struct dns_rule **_domain_rule_access(struct dns_domain_rule *domain_rule, enum domain_rule type, int insert)
+static struct dns_rule **_domain_rule_rules(struct dns_domain_rule *domain_rule)
 {
 	if (domain_rule == NULL) {
 		return NULL;
 	}

-	return &domain_rule->rules[type];
+	switch (domain_rule->layout_type) {
+	case DOMAIN_RULE_LAYOUT_ARRAY:
+		return domain_rule->rules.arr;
+	case DOMAIN_RULE_LAYOUT_POINTER:
+		return domain_rule->rules.ptr;
+	default:
+		tlog(TLOG_ERROR, "unexpected domain rule layout %d", domain_rule->layout_type);
+		return NULL;
+	}
 }

-int domain_rule_free(struct dns_domain_rule *domain_rule)
+static struct dns_rule **_domain_rule_access(struct dns_domain_rule *domain_rule, enum domain_rule type, int insert)
 {
-	int i = 0;
+	struct dns_rule **rules = _domain_rule_rules(domain_rule);
+	int i, size;
+	int new_capacity;
+	struct dns_rule **new_rules;

-	if (domain_rule == NULL) {
-		return 0;
+	if (rules == NULL || type < 0 || type >= DOMAIN_RULE_MAX) {
+		return NULL;
+	}
+
+	i = __builtin_popcount(domain_rule->bitmap & ((1u << type) - 1));
+	if ((domain_rule->bitmap >> type) & 1) {
+		return &rules[i];
 	}

-	for (i = 0; i < DOMAIN_RULE_MAX; i++) {
-		if (domain_rule->rules[i] == NULL) {
-			continue;
+	if (!insert) {
+		return NULL;
+	}
+
+	size = __builtin_popcount(domain_rule->bitmap);
+	if (size < domain_rule->capacity) {
+		memmove(rules + i + 1, rules + i, (size - i) * sizeof(void *));
+		rules[i] = NULL;
+		domain_rule->bitmap |= 1 << type;
+		return &rules[i];
+	} else {
+		new_capacity = domain_rule->capacity * 2;
+		if (new_capacity > DOMAIN_RULE_MAX) {
+			new_capacity = DOMAIN_RULE_MAX;
+		}
+		new_rules = (struct dns_rule **)malloc(new_capacity * sizeof(void *));
+		if (new_rules == NULL) {
+			return NULL;
+		}
+
+		memcpy(new_rules, rules, i * sizeof(void *));
+		memcpy(new_rules + i + 1, rules + i, (size - i) * sizeof(void *));
+		new_rules[i] = NULL;
+		if (domain_rule->layout_type == DOMAIN_RULE_LAYOUT_POINTER) {
+			free(rules);
+		}
+		domain_rule->layout_type = DOMAIN_RULE_LAYOUT_POINTER;
+		domain_rule->capacity = new_capacity;
+		domain_rule->bitmap |= 1 << type;
+		domain_rule->rules.ptr = new_rules;
+		return &new_rules[i];
+	}
+}
+
+int domain_rule_free(struct dns_domain_rule *domain_rule)
+{
+	struct dns_rule **rules = _domain_rule_rules(domain_rule);
+	int type, i;
+
+	if (rules != NULL) {
+		for (type = 0, i = 0; type < DOMAIN_RULE_MAX; ++type) {
+			if (((domain_rule->bitmap >> type) & 1) == 0) {
+				continue;
+			}
+
+			if (rules[i] != NULL) {
+				_dns_rule_put(rules[i]);
+			}
+
+			++i;
 		}
+	}

-		_dns_rule_put(domain_rule->rules[i]);
-		domain_rule->rules[i] = NULL;
+	if (domain_rule->layout_type == DOMAIN_RULE_LAYOUT_POINTER) {
+		free(rules);
 	}

 	free(domain_rule);
