From f21f6fd8a9c4e8fed509f984dd59bf70ed76bd48 Mon Sep 17 00:00:00 2001
From: Felix Fietkau <nbd@nbd.name>
Date: Sun, 6 Jul 2025 19:23:59 +0200
Subject: [PATCH] mac80211: update to version 6.14.11 ath9k: add back previous
 DT compatible strings for ahb
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The ath9k ahb patch was updated to match the latest upstream version,
however the openwrt DT files still use the older names.
Add those as extra entries in order to remain compatible until DT files
are fixed.

Fixes: 88f4c32060f7 ("mac80211: update to version 6.14.11")
Signed-off-by: Felix Fietkau <nbd@nbd.name>
(cherry picked from commit d2b2670937f051bda7c8fbda8a6c0131977d5e68)
mac80211: fix rt2x00 build error on 6.12

Fix missing remove callback type signature conversion

Signed-off-by: Felix Fietkau <nbd@nbd.name>
(cherry picked from commit e1d39bdbdb0fabbe6adb32f1ce69797ce4248dc4)
mac80211: update to version 6.14.11

Update to version 6.14.11

Signed-off-by: Mieczyslaw Nalewaj <namiltd@yahoo.com>
Signed-off-by: Felix Fietkau <nbd@nbd.name>
(cherry picked from commit 88f4c32060f79e5161a789e85da299cebbde68bf)
ath10k-ct: partially revert removal of 003 patch

Partially revert removal of 003 patch to fix compilation error with
kernel 6.6.

In 6.6 .remove still require int and .remove_new needs to be used.

Fixes: bfb106e8ae73 ("mac80211: backport API change for sta rate control update")
Signed-off-by: Christian Marangi <ansuelsmth@gmail.com>
(cherry picked from commit b68173500a1a6455a0faa3c4d54b2c62cf8593f1)
generic: 6.6: backport devm_clk_get_optional_enabled_with_rate

This is needed for mac80211 v6.14.5 update.

9934a1bd45b2b clk: provide devm_clk_get_optional_enabled_with_rate()

https://github.com/torvalds/linux/commit/9934a1bd45b2b03f6d1204a6ae2780d3b009799f

Signed-off-by: Álvaro Fernández Rojas <noltari@gmail.com>
(cherry picked from commit 268c352e44956a3e7fe86e68ad727ba57b0a75a5)
generic: backport secs_to_jiffies

This is needed for mac80211 v6.14.5 update.

b35108a51cf7b jiffies: Define secs_to_jiffies()
bb2784d9ab495 jiffies: Cast to unsigned long in secs_to_jiffies() conversion

https://github.com/torvalds/linux/commit/b35108a51cf7bab58d7eace1267d7965978bcdb8
https://github.com/torvalds/linux/commit/bb2784d9ab49587ba4fbff37a319fff2924db289

Signed-off-by: Álvaro Fernández Rojas <noltari@gmail.com>
(cherry picked from commit f40250781de03b7c6e789645016e19def93563d0)
wifi: ath11k: increase max ATH11K_QMI_CALDB_SIZE macro

QCN6122 wifi in fw-memory-mode 1 has a slightly larger caldb size than
currently defined in the ath11k driver. When coldboot calibration was
disabled, the fw mem mode was changed from 2 (256MB mem profile) to 1
(512MB mem profile), which is the correct setting for devices in scope.
However, in fw mem mode, the caldb size is 0x500000 instead of the max
0x480000 defined in the driver, causing QCN6122 wifi failing to boot:

ath11k b00a040.wifi1: qmi mem size is low to load caldata
ath11k b00a040.wifi1: failed to assign qmi target memory: -22

As such, change the max caldb memory size accordingly.

This macro is used by the driver only as a max size limit to validate
the requested caldb size returned by QMI. Different ath11k wifi chips
have different caldb sizes (for ex. the size for IPQ5018 is 0x200000).

Fixes: cf715a230589 ("wifi: ath11k: disable coldboot calibration for ipq5018")
Signed-off-by: George Moussalem <george.moussalem@outlook.com>
Link: https://github.com/openwrt/openwrt/pull/19118
Signed-off-by: Robert Marko <robimarko@gmail.com>
(cherry picked from commit aefdbf0edc9ea046f55868ddee85442a591b2e4b)
wifi: ath11k: disable coldboot calibration for ipq5018 and qcn6122

Coldboot calibration does not work causes the firmware to crash during
wifi startup. So let's disable coldboot calibration until a solution is
found.

Signed-off-by: George Moussalem <george.moussalem@outlook.com>
Link: https://github.com/openwrt/openwrt/pull/19083
Signed-off-by: Robert Marko <robimarko@gmail.com>
(cherry picked from commit cf715a230589058aeb703f930504d6d98619a53b)
mac80211: realtek: rtw88: sync with v6.16

Renamed 046..051 pending patches with the merged tag/hash.
Two patches were skipped, they make use of WQ_BH present since v6.14:
  https://github.com/torvalds/linux/commit/13221be72034d1c34630ab124c43438aefe7e656
  https://github.com/torvalds/linux/commit/3e3aa566dd1803f1697530de6c8489a8350765b3
Manually refreshed 062-v6.14-wifi-rtw88-Add-support-for-LED-blinking.patch
Manually refreshed  063-v6.14-wifi-rtw88-add-RTW88_LEDS-depends-on-LEDS_CLASS-to-K.patch
Manually backported 090-v6.15-wifi-rtw88-Enable-the-new-RTL8814AE-RTL8814AU-driver.patch

git log --no-merges --pretty=oneline --abbrev-commit 4c2c372de...0daa521a drivers/net/wireless/realtek/rtw88:
4c2c372de2e1 wifi: rtw88: fix the 'para' buffer size to avoid reading out of bounds
f24d0d8c3cd7 wifi: rtw88: Fix the random "error beacon valid" messages for USB
80fe0bc1659c wifi: rtw88: usb: Upload the firmware in bigger chunks
490340faddea wifi: rtw88: usb: Reduce control message timeout to 500 ms
b7f0cc647e52 wifi: rtw88: rtw8822bu VID/PID for BUFFALO WI-U2-866DM
2c17afde9ff6 wifi: rtw88: Handle RTL8723D(S) with blank efuse
0ffa1ba81b35 wifi: rtw88: Fix RX aggregation settings for RTL8723DS
20d3c19bd8f9 wifi: rtw88: do not ignore hardware read error during DPK
fc5f5a0ec463 wifi: rtw88: sdio: call rtw_sdio_indicate_tx_status unconditionally
b2effcdc2379 wifi: rtw88: sdio: map mgmt frames to queue TX_DESC_QSEL_MGMT
581cf3a9cb61 wifi: rtw88: Fix the module names printed in dmesg
b8d49bb8d16a wifi: rtw88: Don't set SUPPORTS_AMSDU_IN_AMPDU for RTL8814AU
0d2a88690e58 wifi: rtw88: Set AMPDU factor to hardware for RTL8814A
dcbb7bb3a364 wifi: rtw88: usb: Enable RX aggregation for RTL8814AU
bf1103654df9 wifi: rtw88: usb: Enable switching the RTL8814AU to USB 3
625fbc16524a wifi: rtw88: usb: Remove redundant 'flush_workqueue()' calls
5c4cf36c538b wifi: rtw88: sdio: Remove redundant 'flush_workqueue()' calls
d58ad77d5cc2 wifi: rtw88: Add __nonstring annotations for unterminated strings
deb3ddeb1865 wifi: rtw88: Enable the new RTL8814AE/RTL8814AU drivers
bad060e8a425 wifi: rtw88: Add rtw8814au.c
dad8e8793102 wifi: rtw88: Add rtw8814ae.c
1a7545784642 wifi: rtw88: Add rtw8814a.{c,h}
e38246889cc9 wifi: rtw88: Add rtw8814a_table.c (part 2/2)
f4debfcb1b3c wifi: rtw88: Add rtw8814a_table.c (part 1/2)
679ec431477c wifi: rtw88: Add some definitions for RTL8814AU
c374281f8285 wifi: rtw88: Extend rtw_debugfs_get_tx_pwr_tbl() for RTL8814AU
cfebabdd351e wifi: rtw88: Extend rtw_debugfs_get_phy_info() for RTL8814AU
8b42c46cf665 wifi: rtw88: Extend rtw_phy_config_swing_table() for RTL8814AU
053a7aace020 wifi: rtw88: Fix rtw_rx_phy_stat() for RTL8814AU
6be7544d19fc wifi: rtw88: Fix rtw_init_vht_cap() for RTL8814AU
c7eea1ba05ca wifi: rtw88: Fix rtw_init_ht_cap() for RTL8814AU
86d04f8f991a wifi: rtw88: Fix rtw_desc_to_mcsrate() to handle MCS16-31
e66bca16638e wifi: rtw88: Fix rtw_mac_power_switch() for RTL8814AU
80c4668d024f wifi: rtw88: Add support for Mercusys MA30N and D-Link DWA-T185 rev. A1
9f00e2218e15 wifi: rtw88: Fix rtw_update_sta_info() for RTL8814AU
0f98a5959657 wifi: rtw88: Extend TX power stuff for 3-4 spatial streams
ad815f392003 wifi: rtw88: Rename RTW_RATE_SECTION_MAX to RTW_RATE_SECTION_NUM
e66f3b5c7535 wifi: rtw88: Constify some more structs and arrays
8f0076726b66 wifi: rtw88: Extend rtw_fw_send_ra_info() for RTL8814AU
d80e7d9b6ba3 wifi: rtw88: Extend rf_base_addr and rf_sipi_addr for RTL8814AU
62f726848da4 wifi: rtw88: Extend struct rtw_pwr_track_tbl for RTL8814AU
9e8243025cc0 wifi: rtw88: Fix download_firmware_validate() for RTL8814AU
8425f5c8f04d wifi: rtw88: Fix __rtw_download_firmware() for RTL8814AU
105dc94233e4 wifi: rtw88: Fix a typo of debug message in rtw8723d_iqk_check_tx_failed()
0d1d165eff9d wifi: rtw88: Don't use static local variable in rtw8821c_set_tx_power_index_by_rate
00451eb3bec7 wifi: rtw88: Don't use static local variable in rtw8822b_set_tx_power_index_by_rate
b4bfbc50b1b9 wifi: rtw88: add RTW88_LEDS depends on LEDS_CLASS to Kconfig
4b6652bc6d8d wifi: rtw88: Add support for LED blinking
fb2fcfbe5eef wifi: rtw88: sdio: Fix disconnection after beacon loss
a806a8160a0f wifi: rtw88: 8703b: Fix RX/TX issues
5ad483955acc wifi: rtw88: Delete rf_type member of struct rtw_sta_info
5b1b9545262b wifi: rtw88: Add USB PHY configuration
not backported (3e3aa566dd18 wifi: rtw88: usb: Preallocate and reuse the RX skbs)
not backported (13221be72034 wifi: rtw88: Handle C2H_ADAPTIVITY in rtw_fw_c2h_cmd_handle() )
e9048e2935f7 wifi: rtw88: usb: Copy instead of cloning the RX skb
74a72c367573 wifi: rtw88: 8821a/8812a: Set ptct_efuse_size to 0
59ab27a9f20f wifi: rtw88: 8812a: Support RFE type 2

Signed-off-by: Marty Jones <mj8263788@gmail.com>
Link: https://github.com/openwrt/openwrt/pull/19052
Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
(cherry picked from commit 4a1aca53761643404a81f8023eb16b53142423df)
mac80211: ath9k: avoid a double reset

The original OF code effectively does a reset at ahb.c but then again in
hw.c. For AR9330, it's already done in the driver and with the others,
there are patches in here that do the same. hw.c looks like the proper
place to handle this.

Signed-off-by: Rosen Penev <rosenp@gmail.com>
Link: https://github.com/openwrt/openwrt/pull/19031
Signed-off-by: Robert Marko <robimarko@gmail.com>
(cherry picked from commit 0ccc336c56fca7ecaede590995da30889c71d8a6)
mac80211: ath9k: fix refclock typo

Fixes ath9k on ar934x platforms.

Signed-off-by: Rosen Penev <rosenp@gmail.com>
Link: https://github.com/openwrt/openwrt/pull/19031
Signed-off-by: Robert Marko <robimarko@gmail.com>
(cherry picked from commit 6f607c69dc39c3532084a46be80287932f8bd4d2)
mac80211: allow scanning operating on DFS channels

Only for multi-radio configurations where the scan would not affect the radio
running DFS detection

Signed-off-by: Felix Fietkau <nbd@nbd.name>
(cherry picked from commit 91d33d156349796c88f9e4fafd4de2581b2a2d8b)
mac80211: ath9k: replace qca,led-sources

Upstream seems to be using led-sources instead of custom properties.

Code mostly taken from mt76.

Changed all(few) users of qca,led_pin to use the new format.

Signed-off-by: Rosen Penev <rosenp@gmail.com>
Link: https://github.com/openwrt/openwrt/pull/18805
Signed-off-by: Robert Marko <robimarko@gmail.com>
(cherry picked from commit 3d6e1a3c9d2e0fb4b2e0dde7fabd269c7769db2d)
mac80211: move OF stuff to ath9k_of_init

It's the proper function to handle this stuff in.

The original patch abused the fact that the ath9k driver in init called
ath9k_init_platform to populate all the needed configuration. This is
the wrong place to do so and it also goes away in 6.13.

Move 553-ath9k_of_gpio_mask.patch contents to ath9k_of_init where they
belong.

Signed-off-by: Rosen Penev <rosenp@gmail.com>
Link: https://github.com/openwrt/openwrt/pull/18764
Signed-off-by: Robert Marko <robimarko@gmail.com>
(cherry picked from commit 12913c3c5658992985e13f4395dee86e5450154d)
mac80211: rt2x00: use remove_new

Easy compability fix for kernel 6.12.

Signed-off-by: Mieczyslaw Nalewaj <namiltd@yahoo.com>
Link: https://github.com/openwrt/openwrt/pull/18719
Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
(cherry picked from commit 6b0f414aff8ef8bd453c3b907781979c64c3e580)
mac80211: ath9k: fix missing prototypes warnings

Fix following warnings by including the corresponding headers:

backports-6.12.6/drivers/net/wireless/ath/ath9k/hsr.c:50:6: error: no previous prototype for 'ath9k_hsr_init' [-Werror=missing-prototypes]
   50 | void ath9k_hsr_init(struct ath_hw *ah)
      |      ^~~~~~~~~~~~~~
backports-6.12.6/drivers/net/wireless/ath/ath9k/hsr.c:165:5: error: no previous prototype for 'ath9k_hsr_disable' [-Werror=missing-prototypes]
  165 | int ath9k_hsr_disable(struct ath_hw *ah)
      |     ^~~~~~~~~~~~~~~~~
backports-6.12.6/drivers/net/wireless/ath/ath9k/hsr.c:177:5: error: no previous prototype for 'ath9k_hsr_enable' [-Werror=missing-prototypes]
  177 | int ath9k_hsr_enable(struct ath_hw *ah, int bw, int fq)
      |     ^~~~~~~~~~~~~~~~
backports-6.12.6/drivers/net/wireless/ath/ath9k/hsr.c:234:5: error: no previous prototype for 'ath9k_hsr_status' [-Werror=missing-prototypes]
  234 | int ath9k_hsr_status(struct ath_hw *ah)
      |     ^~~~~~~~~~~~~~~~

Signed-off-by: Shiji Yang <yangshiji66@outlook.com>
Link: https://github.com/openwrt/openwrt/pull/18637
Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
(cherry picked from commit 6deb2a03ba71c4e8d5315fbe6cbcf13874ee2f58)
mac80211: fix unaligned.h header location for 6.12 kernel

Fix mt76 build error on 6.12 kernel:

In file included from /workspaces/openwrt/build_dir/target-x86_64_musl/linux-x86_64/mt76-2025.04.11~be28ef77/mt76x0/eeprom.c:13:
/workspaces/openwrt/staging_dir/target-x86_64_musl/usr/include/mac80211-backport/asm/unaligned.h:3:15: fatal error: asm/unaligned.h: No such file or directory
    3 | #include_next <asm/unaligned.h>
      |               ^~~~~~~~~~~~~~~~~

Signed-off-by: Shiji Yang <yangshiji66@outlook.com>
Link: https://github.com/openwrt/openwrt/pull/18637
Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
(cherry picked from commit 9aea4c9280931d03464b7543cae8d727f4b1e037)
mac80211: rt2x00: fix build warnings on 6.12 kernel

Move rt2x00lib_read_eeprom() function prototype from rt2800lib.h to
rt2x00.h and make rt6352_enable_pa_pin() static to fix the missing
prototypes warnings:

/workspaces/openwrt/build_dir/target-x86_64_musl/linux-x86_64/mac80211-regular/backports-6.12.6/drivers/net/wireless/ralink/rt2x00/rt2x00eeprom.c:213:5: error: no previous prototype for 'rt2x00lib_read_eeprom' [-Werror=missing-prototypes]
  213 | int rt2x00lib_read_eeprom(struct rt2x00_dev *rt2x00dev)
      |     ^~~~~~~~~~~~~~~~~~~~~
/workspaces/openwrt/build_dir/target-x86_64_musl/linux-x86_64/mac80211-regular/backports-6.12.6/drivers/net/wireless/ralink/rt2x00/rt2800lib.c:308:6: error: no previous prototype for 'rt6352_enable_pa_pin' [-Werror=missing-prototypes]
  308 | void rt6352_enable_pa_pin(struct rt2x00_dev *rt2x00dev, int enable)
      |      ^~~~~~~~~~~~~~~~~~~~

Signed-off-by: Shiji Yang <yangshiji66@outlook.com>
Link: https://github.com/openwrt/openwrt/pull/18637
Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
(cherry picked from commit bad441ae4e60b9203eb4f6370026cc52e9b29384)
mac80211: ath9k: remove wrong devm for request_irq

Since the irq gets copied to sc, it's a really bad idea to use devm,
especially when probe fails.

Signed-off-by: Rosen Penev <rosenp@gmail.com>
Fixes: 4e18d22 ("mac80211: ath9k: simplify probe with devm")
Link: https://github.com/openwrt/openwrt/pull/18570
Signed-off-by: Robert Marko <robimarko@gmail.com>
(cherry picked from commit 410111a8daadd9e71fddc4ea278ce0a372b863ad)
mac80211: ath12k: fix regdb parsing for 6GHz

Add backport patch that fixes ath12k regdomain parsing failure in
6GHz band triggered by the latest regdb/board-2.bin update.

Signed-off-by: Mantas Pucka <mantas@8devices.com>
Link: https://github.com/openwrt/openwrt/pull/18512
Signed-off-by: Robert Marko <robimarko@gmail.com>
(cherry picked from commit 8ffb3b2829773455641d406eada7c9bfaf65b89e)
mac80211: refresh patches

Previous commits missed some refreshing

Signed-off-by: Mantas Pucka <mantas@8devices.com>
Link: https://github.com/openwrt/openwrt/pull/18512
Signed-off-by: Robert Marko <robimarko@gmail.com>
(cherry picked from commit 903566c2d62a9aa98a965a9cf03fbc84d96860ba)
mac80211: ath12k: add patches for 160MHz support

Add series enabling 160MHz channels on ath12k

Signed-off-by: Mantas Pucka <mantas@8devices.com>
Link: https://github.com/openwrt/openwrt/pull/18459
Signed-off-by: Christian Marangi <ansuelsmth@gmail.com>
(cherry picked from commit 9e3a2466f6944c77276aa6e7cd3f98dc6ffdadf1)
mac80211: ath12k: fix wideband operation on QCN9274

Add patches to enable QCN9274 radios that support both 5GHz and 6GHz
bands.

Signed-off-by: Mantas Pucka <mantas@8devices.com>
Link: https://github.com/openwrt/openwrt/pull/18459
Signed-off-by: Christian Marangi <ansuelsmth@gmail.com>
(cherry picked from commit 49e6e1daf4ae33536b9e26c34d248ffc23c9a0b4)
mac80211: ath12k: support fetching regdb from board-2.bin

In board-2.bin available at linux-firmare regdb is stored with
board-id=255. This change is needed to properly use it.

Signed-off-by: Mantas Pucka <mantas@8devices.com>
Link: https://github.com/openwrt/openwrt/pull/18459
Signed-off-by: Christian Marangi <ansuelsmth@gmail.com>
(cherry picked from commit c1acef2e0cb2fcaf1ee72dbf737f6017ddb1159e)
mac80211: backport API change for sta rate control update

Helps stay in sync with mt76 upstream development

Signed-off-by: Felix Fietkau <nbd@nbd.name>
(cherry picked from commit bfb106e8ae7390ad920ef1c40e78da22a88b2c7d)
mac80211: ath9k: simplify probe with devm

Upstream backport.

Signed-off-by: Rosen Penev <rosenp@gmail.com>
Link: https://github.com/openwrt/openwrt/pull/17445
Signed-off-by: Robert Marko <robimarko@gmail.com>
(cherry picked from commit 410111a8daadd9e71fddc4ea278ce0a372b863ad)
mac80211: fix led-pin usage

ath9k uses a deprecated GPIO API that assumes a starting base of 0. This
is no longer the case and so must be fixed.

Upstream pending patch.

Signed-off-by: Rosen Penev <rosenp@gmail.com>
Link: https://github.com/openwrt/openwrt/pull/17445
Signed-off-by: Robert Marko <robimarko@gmail.com>
(cherry picked from commit 8534844847d47d1f883012c0297422d5611c7e83)
mac80211: ath9k: remove gpio buttons support

This is only used by mach files, which are no longer used in OpenWrt.

Allows removing a custon ath9k_platform.h file.

Signed-off-by: Rosen Penev <rosenp@gmail.com>
Link: https://github.com/openwrt/openwrt/pull/17445
Signed-off-by: Robert Marko <robimarko@gmail.com>
(cherry picked from commit d70f8dea1ec5d5de34cf294d42520747247de387)
mac80211: ath9k: remove platform leds

These only work with and are useful with mach files. Now that those are
gone, this can go too.

Signed-off-by: Rosen Penev <rosenp@gmail.com>
Link: https://github.com/openwrt/openwrt/pull/17445
Signed-off-by: Robert Marko <robimarko@gmail.com>
(cherry picked from commit baf73daaacdef46307454bc5d507c31d9033c01c)
mac80211: ath9k: clean up gpiochip

Simplify patch with gpiochip_add_data, struct reduction, new GPIO API,
and header cleanup.

Signed-off-by: Rosen Penev <rosenp@gmail.com>
Link: https://github.com/openwrt/openwrt/pull/17445
Signed-off-by: Robert Marko <robimarko@gmail.com>
(cherry picked from commit e78dc2eae49c5980a5201c98b26cd4a1b177c9a5)
mac80211: ath11k: poll reo status ring for IPQ5018

This downstream patch fixes a bug which could flood the logs with the
following message and would eventually lead to a crash.

ath11k c000000.wifi: failed to send HAL_REO_CMD_UPDATE_RX_QUEUE cmd, tid 0 (-105)

Signed-off-by: George Moussalem <george.moussalem@outlook.com>
Link: https://github.com/openwrt/openwrt/pull/17182
Signed-off-by: Robert Marko <robimarko@gmail.com>
(cherry picked from commit c9c0f1d8e5d1f97d6c2f2251b101606c3493fcfb)
mac80211: ath11k: add support for QCN6122 wifi

Add QCN6122 platform support.

QCN6122 is a PCIe based solution that is attached to and enumerated
by the WPSS (Wireless Processor SubSystem) Q6 processor.

Though it is a PCIe device, since it is not attached to APSS processor
(Application Processor SubSystem), APSS will be unaware of such a decice
and hence it is registered to the APSS processor as a platform device(AHB).
Because of this hybrid nature, it is called as a hybrid bus device.

As such, QCN6122 is a hybrid bus type device and follows the same codepath
as for WCN6750.

This is a reversed engineered and heavily simplified version of below
downstream patch:
https://git.codelinaro.org/clo/qsdk/oss/system/feeds/wlan-open/-/ \
blob/NHSS.QSDK.12.4.5.r2/mac80211/patches/232-ath11k-qcn6122-support.patch

Co-developed-by: George Moussalem <george.moussalem@outlook.com>
Signed-off-by: Sowmiya Sree Elavalagan <ssreeela@codeaurora.org>
Signed-off-by: George Moussalem <george.moussalem@outlook.com>
Link: https://github.com/openwrt/openwrt/pull/17182
Signed-off-by: Robert Marko <robimarko@gmail.com>
(cherry picked from commit f76b846eea288be452be070413353185e7abe822)
mac80211: ath11k: Support setting bdf-addr and caldb-addr via DT

IPQ5018 uses different BDF and caldb addresses for vairous boards,
so let's support reading these addresses from the device tree.

Signed-off-by: Ziyang Huang <hzyitc@outlook.com>
Signed-off-by: George Moussalem <george.moussalem@outlook.com>
Link: https://github.com/openwrt/openwrt/pull/17182
Signed-off-by: Robert Marko <robimarko@gmail.com>
(cherry picked from commit 432f2f83decb826df7e20324919a32bd4491f862)
mac80211: ath11k: fix remapped ce access on 64-bit OS

https://lore.kernel.org/linux-wireless/TYZPR01MB55563B3A689D54D18179E5B4C9192@TYZPR01MB5556.apcprd01.prod.exchangelabs.com/

Signed-off-by: Ziyang Huang <hzyitc@outlook.com>
Signed-off-by: George Moussalem <george.moussalem@outlook.com>
Link: https://github.com/openwrt/openwrt/pull/17182
Signed-off-by: Robert Marko <robimarko@gmail.com>
(cherry picked from commit f520f54ab261677863f2e071da9ba5b1960227ad)
mac80211: Fix tracing backport

Update handling of macro __assign_str() to also support the one-argument
variant when building against kernel 6.10 or later. This is needed for
building the next LTS kernel 6.12.

Fixes: 384d079fd8 ("mac80211: update to version 6.11")
Signed-off-by: Tony Ambardar <itugrok@yahoo.com>
Link: https://github.com/openwrt/openwrt/pull/17456
Signed-off-by: Robert Marko <robimarko@gmail.com>
(cherry picked from commit 9096f996baf5555bae1c3175a9ddf7bbd3be9a9c)
mac80211: fix issues with including linux/acpi_amd_wbrf.h on newer kernels

Change the double-include guard to avoid conflict with the linux kernel header

Reported-by: Tony Ambardar <itugrok@yahoo.com>
Signed-off-by: Felix Fietkau <nbd@nbd.name>
(cherry picked from commit 7bf3bc871ac1ae6b6f199ba1bd83eba9d017a0d5)
ath10k-ct: update to version 6.14

This new version fixes some memory leak and NULL pointer issues.

Upstreamed patches:
[1] 010-api_update.patch
[2] 201-wifi-ath10k-add-LED-and-GPIO-controlling-support-for.patch

The new 003 patch was introduced to fix the build error on old LTS
kernel. The patch 004 was used to fix the issue of IPQ4019 radio
not being able to start.

Tested on QCA9882 and IPQ4019.

[1] https://github.com/torvalds/linux/commit/bca8bc0399ac2efd56e6adbed0307e10125a556c
[2] https://github.com/torvalds/linux/commit/8e1debd82466a3fe711784ab37e6b54e56011267

Signed-off-by: Shiji Yang <yangshiji66@outlook.com>
Link: https://github.com/openwrt/openwrt/pull/18368
Signed-off-by: Robert Marko <robimarko@gmail.com>
(cherry picked from commit b47cf6e2db8ea5535350f2b7368ebae66fc749c9)
---
 package/kernel/ath10k-ct/Makefile             |    12 +-
 .../ath10k-ct/patches/001-patch-version.patch |     6 +-
 ...h10k-6.10-remove-unsupported-feature.patch |     6 +-
 ...t-compatible-with-the-old-LTS-kernel.patch |    22 +
 ...ath10k-Use-iommu_paging_domain_alloc.patch |    28 +
 .../ath10k-ct/patches/010-api_update.patch    |    42 -
 ...LED-and-GPIO-controlling-support-for.patch |   616 -
 ...02-ath10k-use-tpt-trigger-by-default.patch |    20 +-
 .../300-fix-fortify-checking-error.patch      |     4 +-
 ...0-0010-ath10k-limit-htt-rx-ring-size.patch |     4 +-
 ...60-0011-ath10k-limit-pci-buffer-size.patch |     4 +-
 ...k-always-use-mac80211-loss-detection.patch |     8 +-
 package/kernel/mac80211/Makefile              |     6 +-
 .../patches/ath/402-ath_regd_optional.patch   |     2 +-
 .../patches/ath/404-regd_no_assoc_hints.patch |     4 +-
 .../ath10k/080-ath10k_thermal_config.patch    |     2 +-
 .../930-ath10k_add_tpt_led_trigger.patch      |     4 +-
 ...75-ath10k-use-tpt-trigger-by-default.patch |     2 +-
 ...k-always-use-mac80211-loss-detection.patch |     2 +-
 ...allocation-to-resolve-SWIOTLB-issues.patch |    91 -
 ...oherent-for-rx-tid-buffer-allocation.patch |   255 -
 ...-ath11k-disable-coldboot-for-ipq6018.patch |     2 +-
 ...ble-coldboot-calibration-for-ipq5018.patch |    27 +
 ...ort-setting-bdf-addr-and-caldb-addr-.patch |    62 +
 ...k-control-thermal-support-via-symbol.patch |     2 +-
 ...upport-setting-FW-memory-mode-via-DT.patch |     4 +-
 ...tersection-support-for-regulatory-ru.patch |    24 +-
 ...apped-ce-accessing-issue-on-64bit-OS.patch |   153 +
 ...ifi-ath11k-add-hw-params-for-QCN6122.patch |   120 +
 ...wifi-ath11k-add-hal-regs-for-QCN6122.patch |   114 +
 ...-ath11k-add-hw-ring-mask-for-QCN6122.patch |    74 +
 ...k-update-hif_and-pci_ops-for-QCN6122.patch |   102 +
 ...h11k-add-multipd-support-for-QCN6122.patch |   110 +
 ...fi-ath11k-add-QCN6122-device-support.patch |    55 +
 ...11k-Support-to-assign-m3-dump-memory.patch |    31 +
 ...-wifi-ath11k-poll-reo-status-ipq5018.patch |   164 +
 ...ear-the-keys-properly-when-DISABLE_K.patch |     2 +-
 ...-and-handle-country-code-for-WCN7850.patch |   142 +-
 ...-correct-values-of-center-freq1-and-.patch |    53 +
 ...-correct-values-of-center-freq1-and-.patch |    43 +
 ...0-ath12k-prevent-ltssm-startup-crash.patch |     2 +-
 ...k-limit-WMI_SCAN_CHAN_LIST_CMDID-arg.patch |   153 +
 ...k-fix-5GHz-operation-on-wideband-QCN.patch |   137 +
 ...k-push-HE-MU-MIMO-params-to-hardware.patch |   484 +
 ...-push-EHT-MU-MIMO-params-to-hardware.patch |   242 +
 ...HE-MCS-mapper-to-a-separate-function.patch |   173 +
 ...and-tx-mcs-maps-for-supported-HE-mcs.patch |   197 +
 ...X-MCS-rate-configurations-in-HE-mode.patch |   152 +
 ...ort-for-setting-fixed-HE-rate-GI-LTF.patch |  1184 ++
 ...7-wifi-ath12k-clean-up-80P80-support.patch |   262 +
 ...2k-add-support-for-160-MHz-bandwidth.patch |   393 +
 ...ed-NSS-bandwidth-support-for-160-MHz.patch |   202 +
 ...2k-convert-tasklet-to-BH-workqueue-f.patch |    82 +
 .../341-wifi-ath9k-obtain-system-gpios.patch  |   273 +
 ...erpret-requested-txpower-in-EIRP-dom.patch |     4 +-
 ...power-reduction-for-US-regulatory-do.patch |     2 +-
 .../ath9k/401-ath9k_blink_default.patch       |     2 +-
 .../ath9k/410-ath9k_allow_adhoc_and_ap.patch  |     2 +-
 ...abled-MFP-capability-unconditionally.patch |     4 +-
 .../ath9k/500-ath9k_eeprom_debugfs.patch      |     2 +-
 .../patches/ath9k/501-ath9k_ahb_init.patch    |     2 +-
 ...se-devm-for-irq-and-ioremap-resource.patch |    50 +
 .../ath9k/512-ath9k_channelbw_debugfs.patch   |     4 +-
 .../patches/ath9k/513-ath9k_add_pci_ids.patch |     2 +-
 .../patches/ath9k/530-ath9k_extra_leds.patch  |     6 +-
 .../ath9k/531-ath9k_extra_platform_leds.patch |    64 -
 .../ath9k/542-ath9k_debugfs_diag.patch        |    12 +-
 .../ath9k/543-ath9k_entropy_from_adc.patch    |     6 +-
 ...544-ath9k-ar933x-usb-hang-workaround.patch |     2 +-
 .../ath9k/547-ath9k_led_defstate_fix.patch    |     2 +-
 .../ath9k/548-ath9k_enable_gpio_chip.patch    |   125 +-
 .../ath9k/549-ath9k_enable_gpio_buttons.patch |   130 -
 .../mac80211/patches/ath9k/550-ath9k-of.patch |   166 +
 .../ath9k/551-ath9k_ubnt_uap_plus_hsr.patch   |    11 +-
 .../patches/ath9k/552-ath9k-ahb_of.patch      |   336 +-
 .../ath9k/553-ath9k-ahb_of_compat.patch       |    16 +
 .../ath9k/553-ath9k_of_gpio_mask.patch        |    25 -
 ...und-bug-with-some-inconsistent-BSSes.patch |     2 +-
 ...-in-driver-tables-with-country-codes.patch |    14 +-
 ...fer-a-ccode-from-OTP-over-nvram-file.patch |     2 +-
 ...ac-Increase-power-saving-delay-to-2s.patch |     2 +-
 ...upport-DS1-exit-firmware-re-download.patch |    16 +-
 ...eroperating-DPP-and-other-encryption.patch |     2 +-
 ...mfmac-disable-dump_survey-on-bcm2835.patch |     6 +-
 .../100-backports-drop-QRTR-and-MHI.patch     |     2 +-
 ...port-fix-unaligned.h-header-location.patch |    26 +
 .../patches/build/140-trace_backport.patch    |   419 +-
 .../210-wireless_netns_local_backport.patch   |     6 +-
 .../220-brcmfmac_usb_driver_backport.patch    |     2 +-
 ...x-init_vqs-build-error-on-kernel-6.6.patch |     4 +-
 .../240-realtek-rtw88-BH-workqueue.patch      |    14 +
 .../build/360-change-read_new-to-read.patch   |    20 +
 .../build/400-restore-old-debugfs_fops.patch  |   252 +
 ...-convert-short-fops-to-debugfs-files.patch |   210 +
 ...ringified-name-of-command-in-error-l.patch |     2 +-
 ...00-fix-remove-callback-type-mismatch.patch |    42 +
 ...support-for-loading-EEPROM-from-user.patch |    32 +-
 ...c-loadable-via-OF-on-rt288x-305x-SoC.patch |     9 +-
 ...0-rt2x00-change-led-polarity-from-OF.patch |     2 +-
 ...spect-rt2800-hardware-TX-queue-index.patch |     6 +-
 ...librate-MT7620-when-switching-channe.patch |     4 +-
 ...gister-operation-on-RXIQ-calibration.patch |    34 -
 ...FCSR-register-init-values-for-RT5592.patch |     2 +-
 ...t-support-for-external-LNA-on-MT7620.patch |     6 +-
 ...-differentiate-based-on-SoC-CHIP_VER.patch |    10 +-
 ...w88-Constify-some-arrays-and-structs.patch |   374 -
 ...-the-RX-descriptor-with-a-single-fun.patch |   560 -
 ...tor-looping-in-rtw_phy_store_tx_powe.patch |    34 -
 ...t-the-signal-strength-only-if-it-s-k.patch |    39 -
 ...ome-definitions-for-RTL8821AU-RTL881.patch |   490 -
 ...-the-HW-features-only-for-some-chips.patch |    93 -
 ...-Allow-different-C2H-RA-report-sizes.patch |   175 -
 ...d-the-init-table-parsing-for-RTL8812.patch |   165 -
 ...-rtw_chip_info.ltecoex_addr-to-be-NU.patch |    58 -
 ...ach-driver-control-the-power-on-off-.patch |   272 -
 ...e-data-rate-fallback-for-older-chips.patch |   194 -
 ...w88-Make-txagc_remnant_ofdm-an-array.patch |    85 -
 ...upport-TX-page-sizes-bigger-than-128.patch |   115 -
 ...-pwr_track_tbl-to-struct-rtw_rfe_def.patch |   297 -
 ...et-pkt_info.ls-for-the-reserved-page.patch |    27 -
 ...t-beacon-loss-with-chips-other-than-.patch |    63 -
 ...x-Support-chips-without-a-scoreboard.patch |    66 -
 ...1a-Regularly-ask-for-BT-info-updates.patch |    67 -
 ...ifi-rtw88-8812a-Mitigate-beacon-loss.patch |    37 -
 ...3-wifi-rtw88-Add-rtw8812a_table.-c-h.patch |  2862 ----
 ...3-wifi-rtw88-Add-rtw8821a_table.-c-h.patch |  2395 ---
 ...1-v6.13-wifi-rtw88-Add-rtw88xxa.-c-h.patch |  2187 ---
 ...2-v6.13-wifi-rtw88-Add-rtw8821a.-c-h.patch |  1230 --
 ...3-v6.13-wifi-rtw88-Add-rtw8812a.-c-h.patch |  1135 --
 ...tw88-Add-rtw8821au.c-and-rtw8812au.c.patch |    80 -
 ...e-the-new-RTL8821AU-RTL8812AU-driver.patch |   153 -
 ...u-Add-additional-devices-to-the-USB_.patch |    77 -
 ...ifi-rtw88-8812au-Add-more-device-IDs.patch |    91 -
 ...w88-usb-Support-USB-3-with-RTL8812AU.patch |    69 -
 ...nable-RX-aggregation-for-8821au-8812.patch |    65 -
 ...8821ae-phy-restore-removed-code-to-f.patch |    32 -
 ...Add-additional-USB-IDs-for-RTL8812BU.patch |    31 -
 ...-use-static-local-variable-in-rtw882.patch |    71 +
 ...-typo-of-debug-message-in-rtw8723d_i.patch |    39 +
 ...d-struct-rtw_pwr_track_tbl-for-RTL88.patch |    46 +
 ...d-rf_base_addr-and-rf_sipi_addr-for-.patch |    32 +
 ...onstify-some-more-structs-and-arrays.patch |   213 +
 ...e-RTW_RATE_SECTION_MAX-to-RTW_RATE_S.patch |   227 +
 ...d-TX-power-stuff-for-3-4-spatial-str.patch |   369 +
 ...88-Fix-rtw_rx_phy_stat-for-RTL8814AU.patch |    54 +
 ...d-rtw_phy_config_swing_table-for-RTL.patch |    75 +
 ...d-rtw_debugfs_get_phy_info-for-RTL88.patch |    86 +
 ...d-rtw_debugfs_get_tx_pwr_tbl-for-RTL.patch |    65 +
 ...8-Add-some-definitions-for-RTL8814AU.patch |   200 +
 ...-rtw88-Add-rtw8814a_table.c-part-1-2.patch | 12573 ++++++++++++++++
 ...-rtw88-Add-rtw8814a_table.c-part-2-2.patch | 11450 ++++++++++++++
 ...8-v6.15-wifi-rtw88-Add-rtw8814a.-c-h.patch |  2343 +++
 ...089-v6.15-wifi-rtw88-Add-rtw8814ae.c.patch |    50 +
 ...090-v6.15-wifi-rtw88-Add-rtw8814au.c.patch |    73 +
 ..._nonstring-annotations-for-untermina.patch |    34 +
 ...e-the-new-RTL8814AE-RTL8814AU-driver.patch |   130 +
 ...Remove-redundant-flush_workqueue-cal.patch |    36 +
 ...emove-redundant-flush_workqueue-call.patch |    44 +
 ...nable-switching-the-RTL8814AU-to-USB.patch |    32 +
 ...-Enable-RX-aggregation-for-RTL8814AU.patch |    28 +
 ...MPDU-factor-to-hardware-for-RTL8814A.patch |   192 +
 ...-set-SUPPORTS_AMSDU_IN_AMPDU-for-RTL.patch |   169 +
 ...ix-the-module-names-printed-in-dmesg.patch |   230 +
 ...map-mgmt-frames-to-queue-TX_DESC_QSE.patch |    36 +
 ...call-rtw_sdio_indicate_tx_status-unc.patch |    37 +
 ...t-ignore-hardware-read-error-during-.patch |    32 +
 ...X-aggregation-settings-for-RTL8723DS.patch |    44 +
 ...8-Handle-RTL8723D-S-with-blank-efuse.patch |   198 +
 ...22bu-VID-PID-for-BUFFALO-WI-U2-866DM.patch |    27 +
 ...educe-control-message-timeout-to-500.patch |    52 +
 ...Upload-the-firmware-in-bigger-chunks.patch |   214 +
 ...he-random-error-beacon-valid-message.patch |    73 +
 ...he-para-buffer-size-to-avoid-reading.patch |    38 +
 .../110-mac80211_keep_keys_on_stop_ap.patch   |     4 +-
 .../patches/subsys/130-disable_auto_vif.patch |     2 +-
 .../mac80211/patches/subsys/210-ap_scan.patch |     2 +-
 .../patches/subsys/220-allow-ibss-mixed.patch |     2 +-
 .../230-avoid-crashing-missing-band.patch     |     2 +-
 ...domize-BA-session-dialog-token-alloc.patch |     2 +-
 ...crease-quantum-for-airtime-scheduler.patch |     6 +-
 ...race-period-for-DFS-available-after-.patch |    22 +-
 ...dd-AQL-support-for-broadcast-packets.patch |    24 +-
 ...11-add-option-for-vif-allowed-radios.patch |   309 -
 ...e-vif-radio-mask-to-limit-ibss-scan-.patch |    79 -
 ...e-vif-radio-mask-to-limit-chanctx-an.patch |    52 -
 ...11-remove-status-ampdu_delimiter_crc.patch |    67 -
 ...s-net_device-to-.set_monitor_channel.patch |   165 -
 ...d-flag-to-opt-out-of-virtual-monitor.patch |   337 -
 ...fi-cfg80211-add-monitor-SKIP_TX-flag.patch |    56 -
 ...d-support-for-the-monitor-SKIP_TX-fl.patch |    54 -
 ...c80211-refactor-ieee80211_rx_monitor.patch |    94 -
 ...lter-on-monitor-interfaces-based-on-.patch |    29 -
 ...-report-per-wiphy-radio-antenna-mask.patch |    64 -
 ...x-vif-addr-when-switching-from-monit.patch |    63 -
 ...llow-scanning-while-on-radar-channel.patch |   372 +
 ...-not-offer-a-mesh-path-if-forwarding.patch |     6 +-
 .../mt76/patches/003-wifi-mt76-link_id.patch  |    34 +
 .../kernel/mt76/patches/100-api_update.patch  |    46 +
 .../rtl8812au-ct/patches/110-link_id.patch    |    11 +
 ...ar9344_mikrotik_routerboard-951ui-2hnd.dts |     5 +-
 ...v6.13-jiffies-Define-secs_to_jiffies.patch |    60 +
 ...unsigned-long-in-secs_to_jiffies-con.patch |    35 +
 ...m_clk_get_optional_enabled_with_rate.patch |   104 +
 .../files/include/linux/ath9k_platform.h      |    58 -
 .../arch/powerpc/boot/dts/tl-wdr4900-v1.dts   |     7 +-
 ...less-ath11k-add-bindings-for-QCN6122.patch |    62 +
 206 files changed, 36909 insertions(+), 17039 deletions(-)
 create mode 100644 package/kernel/ath10k-ct/patches/003-ath10k-ct-make-it-compatible-with-the-old-LTS-kernel.patch
 create mode 100644 package/kernel/ath10k-ct/patches/004-Revert-wifi-ath10k-Use-iommu_paging_domain_alloc.patch
 delete mode 100644 package/kernel/ath10k-ct/patches/010-api_update.patch
 delete mode 100644 package/kernel/ath10k-ct/patches/201-wifi-ath10k-add-LED-and-GPIO-controlling-support-for.patch
 delete mode 100644 package/kernel/mac80211/patches/ath11k/001-wifi-ath11k-Fix-DMA-buffer-allocation-to-resolve-SWIOTLB-issues.patch
 delete mode 100644 package/kernel/mac80211/patches/ath11k/002-wifi-ath11k-use-dma-alloc-noncoherent-for-rx-tid-buffer-allocation.patch
 create mode 100644 package/kernel/mac80211/patches/ath11k/0907-wifi-ath11k-disable-coldboot-calibration-for-ipq5018.patch
 create mode 100644 package/kernel/mac80211/patches/ath11k/201-wifi-ath11k-Support-setting-bdf-addr-and-caldb-addr-.patch
 create mode 100644 package/kernel/mac80211/patches/ath11k/910-ath11k-fix-remapped-ce-accessing-issue-on-64bit-OS.patch
 create mode 100644 package/kernel/mac80211/patches/ath11k/920-wifi-ath11k-add-hw-params-for-QCN6122.patch
 create mode 100644 package/kernel/mac80211/patches/ath11k/921-wifi-ath11k-add-hal-regs-for-QCN6122.patch
 create mode 100644 package/kernel/mac80211/patches/ath11k/922-wifi-ath11k-add-hw-ring-mask-for-QCN6122.patch
 create mode 100644 package/kernel/mac80211/patches/ath11k/923-wifi-ath11k-update-hif_and-pci_ops-for-QCN6122.patch
 create mode 100644 package/kernel/mac80211/patches/ath11k/924-wifi-ath11k-add-multipd-support-for-QCN6122.patch
 create mode 100644 package/kernel/mac80211/patches/ath11k/925-wifi-ath11k-add-QCN6122-device-support.patch
 create mode 100644 package/kernel/mac80211/patches/ath11k/931-wifi-ath11k-Support-to-assign-m3-dump-memory.patch
 create mode 100644 package/kernel/mac80211/patches/ath11k/932-wifi-ath11k-poll-reo-status-ipq5018.patch
 create mode 100644 package/kernel/mac80211/patches/ath12k/003-1-v6.16-wifi-ath12k-Pass-correct-values-of-center-freq1-and-.patch
 create mode 100644 package/kernel/mac80211/patches/ath12k/003-2-v6.16-wifi-ath12k-Pass-correct-values-of-center-freq1-and-.patch
 create mode 100644 package/kernel/mac80211/patches/ath12k/102-wifi-ath12k-limit-WMI_SCAN_CHAN_LIST_CMDID-arg.patch
 create mode 100644 package/kernel/mac80211/patches/ath12k/103-wifi-ath12k-fix-5GHz-operation-on-wideband-QCN.patch
 create mode 100644 package/kernel/mac80211/patches/ath12k/104-1-wifi-ath12k-push-HE-MU-MIMO-params-to-hardware.patch
 create mode 100644 package/kernel/mac80211/patches/ath12k/104-2-wifi-ath12k-push-EHT-MU-MIMO-params-to-hardware.patch
 create mode 100644 package/kernel/mac80211/patches/ath12k/104-3-wifi-ath12k-move-HE-MCS-mapper-to-a-separate-function.patch
 create mode 100644 package/kernel/mac80211/patches/ath12k/104-4-wifi-ath12k-generate-rx-and-tx-mcs-maps-for-supported-HE-mcs.patch
 create mode 100644 package/kernel/mac80211/patches/ath12k/104-5-wifi-ath12k-fix-TX-and-RX-MCS-rate-configurations-in-HE-mode.patch
 create mode 100644 package/kernel/mac80211/patches/ath12k/104-6-wifi-ath12k-add-support-for-setting-fixed-HE-rate-GI-LTF.patch
 create mode 100644 package/kernel/mac80211/patches/ath12k/104-7-wifi-ath12k-clean-up-80P80-support.patch
 create mode 100644 package/kernel/mac80211/patches/ath12k/104-8-wifi-ath12k-add-support-for-160-MHz-bandwidth.patch
 create mode 100644 package/kernel/mac80211/patches/ath12k/104-9-wifi-ath12k-add-extended-NSS-bandwidth-support-for-160-MHz.patch
 create mode 100644 package/kernel/mac80211/patches/ath12k/200-Revert-wifi-ath12k-convert-tasklet-to-BH-workqueue-f.patch
 create mode 100644 package/kernel/mac80211/patches/ath9k/341-wifi-ath9k-obtain-system-gpios.patch
 create mode 100644 package/kernel/mac80211/patches/ath9k/509-ath9k-use-devm-for-irq-and-ioremap-resource.patch
 delete mode 100644 package/kernel/mac80211/patches/ath9k/531-ath9k_extra_platform_leds.patch
 delete mode 100644 package/kernel/mac80211/patches/ath9k/549-ath9k_enable_gpio_buttons.patch
 create mode 100644 package/kernel/mac80211/patches/ath9k/550-ath9k-of.patch
 create mode 100644 package/kernel/mac80211/patches/ath9k/553-ath9k-ahb_of_compat.patch
 delete mode 100644 package/kernel/mac80211/patches/ath9k/553-ath9k_of_gpio_mask.patch
 create mode 100644 package/kernel/mac80211/patches/build/120-backport-fix-unaligned.h-header-location.patch
 create mode 100644 package/kernel/mac80211/patches/build/240-realtek-rtw88-BH-workqueue.patch
 create mode 100644 package/kernel/mac80211/patches/build/360-change-read_new-to-read.patch
 create mode 100644 package/kernel/mac80211/patches/build/400-restore-old-debugfs_fops.patch
 create mode 100644 package/kernel/mac80211/patches/build/410-mac80211-convert-short-fops-to-debugfs-files.patch
 create mode 100644 package/kernel/mac80211/patches/rt2x00/110-wifi-rt2x00-fix-remove-callback-type-mismatch.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/017-v6.13-wifi-rtw88-Constify-some-arrays-and-structs.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/019-v6.13-wifi-rtw88-Parse-the-RX-descriptor-with-a-single-fun.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/022-v6.13-wifi-rtw88-Refactor-looping-in-rtw_phy_store_tx_powe.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/023-v6.13-wifi-rtw88-Report-the-signal-strength-only-if-it-s-k.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/024-v6.13-wifi-rtw88-Add-some-definitions-for-RTL8821AU-RTL881.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/025-v6.13-wifi-rtw88-Dump-the-HW-features-only-for-some-chips.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/026-v6.13-wifi-rtw88-Allow-different-C2H-RA-report-sizes.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/027-v6.13-wifi-rtw88-Extend-the-init-table-parsing-for-RTL8812.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/028-v6.13-wifi-rtw88-Allow-rtw_chip_info.ltecoex_addr-to-be-NU.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/029-v6.13-wifi-rtw88-Let-each-driver-control-the-power-on-off-.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/030-v6.13-wifi-rtw88-Enable-data-rate-fallback-for-older-chips.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/031-v6.13-wifi-rtw88-Make-txagc_remnant_ofdm-an-array.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/032-v6.13-wifi-rtw88-Support-TX-page-sizes-bigger-than-128.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/033-v6.13-wifi-rtw88-Move-pwr_track_tbl-to-struct-rtw_rfe_def.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/034-v6.13-wifi-rtw88-usb-Set-pkt_info.ls-for-the-reserved-page.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/035-v6.13-wifi-rtw88-Detect-beacon-loss-with-chips-other-than-.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/036-v6.13-wifi-rtw88-coex-Support-chips-without-a-scoreboard.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/037-v6.13-wifi-rtw88-8821a-Regularly-ask-for-BT-info-updates.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/038-v6.13-wifi-rtw88-8812a-Mitigate-beacon-loss.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/039-v6.13-wifi-rtw88-Add-rtw8812a_table.-c-h.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/040-v6.13-wifi-rtw88-Add-rtw8821a_table.-c-h.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/041-v6.13-wifi-rtw88-Add-rtw88xxa.-c-h.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/042-v6.13-wifi-rtw88-Add-rtw8821a.-c-h.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/043-v6.13-wifi-rtw88-Add-rtw8812a.-c-h.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/044-v6.13-wifi-rtw88-Add-rtw8821au.c-and-rtw8812au.c.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/045-v6.13-wifi-rtw88-Enable-the-new-RTL8821AU-RTL8812AU-driver.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/046-wifi-rtw88-8821au-Add-additional-devices-to-the-USB_.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/047-wifi-rtw88-8812au-Add-more-device-IDs.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/048-wifi-rtw88-usb-Support-USB-3-with-RTL8812AU.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/049-wifi-rtw88-usb-Enable-RX-aggregation-for-8821au-8812.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/050-wifi-rtlwifi-rtl8821ae-phy-restore-removed-code-to-f.patch
 delete mode 100644 package/kernel/mac80211/patches/rtl/051-wifi-rtw88-Add-additional-USB-IDs-for-RTL8812BU.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/065-v6.15-wifi-rtw88-Don-t-use-static-local-variable-in-rtw882.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/066-v6.15-wifi-rtw88-Fix-a-typo-of-debug-message-in-rtw8723d_i.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/069-v6.15-wifi-rtw88-Extend-struct-rtw_pwr_track_tbl-for-RTL88.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/070-v6.15-wifi-rtw88-Extend-rf_base_addr-and-rf_sipi_addr-for-.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/072-v6.15-wifi-rtw88-Constify-some-more-structs-and-arrays.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/073-v6.15-wifi-rtw88-Rename-RTW_RATE_SECTION_MAX-to-RTW_RATE_S.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/074-v6.15-wifi-rtw88-Extend-TX-power-stuff-for-3-4-spatial-str.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/081-v6.15-wifi-rtw88-Fix-rtw_rx_phy_stat-for-RTL8814AU.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/082-v6.15-wifi-rtw88-Extend-rtw_phy_config_swing_table-for-RTL.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/083-v6.15-wifi-rtw88-Extend-rtw_debugfs_get_phy_info-for-RTL88.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/084-v6.15-wifi-rtw88-Extend-rtw_debugfs_get_tx_pwr_tbl-for-RTL.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/085-v6.15-wifi-rtw88-Add-some-definitions-for-RTL8814AU.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/086-v6.15-wifi-rtw88-Add-rtw8814a_table.c-part-1-2.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/087-v6.15-wifi-rtw88-Add-rtw8814a_table.c-part-2-2.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/088-v6.15-wifi-rtw88-Add-rtw8814a.-c-h.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/089-v6.15-wifi-rtw88-Add-rtw8814ae.c.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/090-v6.15-wifi-rtw88-Add-rtw8814au.c.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/091-v6.15-wifi-rtw88-Add-__nonstring-annotations-for-untermina.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/092-v6.15-wifi-rtw88-Enable-the-new-RTL8814AE-RTL8814AU-driver.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/093-v6.16-wifi-rtw88-sdio-Remove-redundant-flush_workqueue-cal.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/094-v6.16-wifi-rtw88-usb-Remove-redundant-flush_workqueue-call.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/095-v6.16-wifi-rtw88-usb-Enable-switching-the-RTL8814AU-to-USB.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/096-v6.16-wifi-rtw88-usb-Enable-RX-aggregation-for-RTL8814AU.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/097-v6.16-wifi-rtw88-Set-AMPDU-factor-to-hardware-for-RTL8814A.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/098-v6.16-wifi-rtw88-Don-t-set-SUPPORTS_AMSDU_IN_AMPDU-for-RTL.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/099-v6.16-wifi-rtw88-Fix-the-module-names-printed-in-dmesg.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/100-v6.16-wifi-rtw88-sdio-map-mgmt-frames-to-queue-TX_DESC_QSE.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/101-v6.16-wifi-rtw88-sdio-call-rtw_sdio_indicate_tx_status-unc.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/102-v6.16-wifi-rtw88-do-not-ignore-hardware-read-error-during-.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/103-v6.16-wifi-rtw88-Fix-RX-aggregation-settings-for-RTL8723DS.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/104-v6.16-wifi-rtw88-Handle-RTL8723D-S-with-blank-efuse.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/105-v6.16-wifi-rtw88-rtw8822bu-VID-PID-for-BUFFALO-WI-U2-866DM.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/106-v6.16-wifi-rtw88-usb-Reduce-control-message-timeout-to-500.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/107-v6.16-wifi-rtw88-usb-Upload-the-firmware-in-bigger-chunks.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/108-v6.16-wifi-rtw88-Fix-the-random-error-beacon-valid-message.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/109-v6.16-wifi-rtw88-fix-the-para-buffer-size-to-avoid-reading.patch
 delete mode 100644 package/kernel/mac80211/patches/subsys/330-wifi-cfg80211-add-option-for-vif-allowed-radios.patch
 delete mode 100644 package/kernel/mac80211/patches/subsys/331-wifi-mac80211-use-vif-radio-mask-to-limit-ibss-scan-.patch
 delete mode 100644 package/kernel/mac80211/patches/subsys/332-wifi-mac80211-use-vif-radio-mask-to-limit-chanctx-an.patch
 delete mode 100644 package/kernel/mac80211/patches/subsys/333-wifi-mac80211-remove-status-ampdu_delimiter_crc.patch
 delete mode 100644 package/kernel/mac80211/patches/subsys/334-wifi-cfg80211-pass-net_device-to-.set_monitor_channel.patch
 delete mode 100644 package/kernel/mac80211/patches/subsys/335-wifi-mac80211-add-flag-to-opt-out-of-virtual-monitor.patch
 delete mode 100644 package/kernel/mac80211/patches/subsys/336-wifi-cfg80211-add-monitor-SKIP_TX-flag.patch
 delete mode 100644 package/kernel/mac80211/patches/subsys/337-wifi-mac80211-add-support-for-the-monitor-SKIP_TX-fl.patch
 delete mode 100644 package/kernel/mac80211/patches/subsys/338-wifi-mac80211-refactor-ieee80211_rx_monitor.patch
 delete mode 100644 package/kernel/mac80211/patches/subsys/339-wifi-mac80211-filter-on-monitor-interfaces-based-on-.patch
 delete mode 100644 package/kernel/mac80211/patches/subsys/340-wifi-cfg80211-report-per-wiphy-radio-antenna-mask.patch
 delete mode 100644 package/kernel/mac80211/patches/subsys/341-wifi-mac80211-fix-vif-addr-when-switching-from-monit.patch
 create mode 100644 package/kernel/mac80211/patches/subsys/350-mac80211-allow-scanning-while-on-radar-channel.patch
 create mode 100644 package/kernel/mt76/patches/003-wifi-mt76-link_id.patch
 create mode 100644 package/kernel/mt76/patches/100-api_update.patch
 create mode 100644 package/kernel/rtl8812au-ct/patches/110-link_id.patch
 create mode 100644 target/linux/generic/backport-6.6/330-v6.13-jiffies-Define-secs_to_jiffies.patch
 create mode 100644 target/linux/generic/backport-6.6/331-v6.14-jiffies-Cast-to-unsigned-long-in-secs_to_jiffies-con.patch
 create mode 100644 target/linux/generic/backport-6.6/920-v6.12-clk-provide-devm_clk_get_optional_enabled_with_rate.patch
 delete mode 100644 target/linux/generic/files/include/linux/ath9k_platform.h
 create mode 100644 target/linux/qualcommax/patches-6.6/0820-dt-bindings-net-wireless-ath11k-add-bindings-for-QCN6122.patch

diff --git a/package/kernel/ath10k-ct/Makefile b/package/kernel/ath10k-ct/Makefile
index f9795d8c8d..dfe1602449 100644
--- a/package/kernel/ath10k-ct/Makefile
+++ b/package/kernel/ath10k-ct/Makefile
@@ -1,21 +1,21 @@
 include $(TOPDIR)/rules.mk
 
 PKG_NAME:=ath10k-ct
-PKG_RELEASE:=2
+PKG_RELEASE:=1
 
 PKG_LICENSE:=GPLv2
 PKG_LICENSE_FILES:=
 
 PKG_SOURCE_URL:=https://github.com/greearb/ath10k-ct.git
 PKG_SOURCE_PROTO:=git
-PKG_SOURCE_DATE:=2024-07-30
-PKG_SOURCE_VERSION:=ac71b14dc93aef0af6f0f24808b0afb673eaa5f5
-PKG_MIRROR_HASH:=f7774fc7002bbea450f543927acd528fb1bb6742f0e9ef28a402df3796893d93
+PKG_SOURCE_DATE:=2025-03-14
+PKG_SOURCE_VERSION:=63f5b605236f2cd2f919539d67236c43fb8f957d
+PKG_MIRROR_HASH:=d83cb59b947680d40006e0da825735c387c5b1699a7981c2d973ca4d285266f2
 
-# Build the 6.10 ath10k-ct driver version.
+# Build the 6.14 ath10k-ct driver version.
 # Probably this should match as closely as
 # possible to whatever mac80211 backports version is being used.
-CT_KVER="-6.10"
+CT_KVER="-6.14"
 
 PKG_MAINTAINER:=Ben Greear <greearb@candelatech.com>
 PKG_BUILD_PARALLEL:=1
diff --git a/package/kernel/ath10k-ct/patches/001-patch-version.patch b/package/kernel/ath10k-ct/patches/001-patch-version.patch
index 4c90a3f316..9cea32e639 100644
--- a/package/kernel/ath10k-ct/patches/001-patch-version.patch
+++ b/package/kernel/ath10k-ct/patches/001-patch-version.patch
@@ -1,11 +1,11 @@
---- a/ath10k-6.10/pci.c
-+++ b/ath10k-6.10/pci.c
+--- a/ath10k-6.14/pci.c
++++ b/ath10k-6.14/pci.c
 @@ -3871,7 +3871,7 @@ static int __ath10k_pci_probe(struct pci
  	int (*pci_hard_reset)(struct ath10k *ar);
  	u32 (*targ_cpu_to_ce_addr)(struct ath10k *ar, u32 addr);
  
 -	printk(KERN_INFO "ath10k 6.7 driver, optimized for CT firmware, probing pci device: 0x%x.\n",
-+	printk(KERN_INFO "ath10k 6.10 driver, optimized for CT firmware, probing pci device: 0x%x.\n",
++	printk(KERN_INFO "ath10k 6.14 driver, optimized for CT firmware, probing pci device: 0x%x.\n",
  	       pci_dev->device);
  
  	switch (pci_dev->device) {
diff --git a/package/kernel/ath10k-ct/patches/002-ath10k-6.10-remove-unsupported-feature.patch b/package/kernel/ath10k-ct/patches/002-ath10k-6.10-remove-unsupported-feature.patch
index ca64c8a110..f7caa52603 100644
--- a/package/kernel/ath10k-ct/patches/002-ath10k-6.10-remove-unsupported-feature.patch
+++ b/package/kernel/ath10k-ct/patches/002-ath10k-6.10-remove-unsupported-feature.patch
@@ -1,6 +1,6 @@
---- a/ath10k-6.10/mac.c
-+++ b/ath10k-6.10/mac.c
-@@ -11626,7 +11626,6 @@ int ath10k_mac_register(struct ath10k *a
+--- a/ath10k-6.14/mac.c
++++ b/ath10k-6.14/mac.c
+@@ -11648,7 +11648,6 @@ int ath10k_mac_register(struct ath10k *a
  	ar->hw->wiphy->n_cipher_suites = ar->hw_params.n_cipher_suites;
  
  	wiphy_ext_feature_set(ar->hw->wiphy, NL80211_EXT_FEATURE_CQM_RSSI_LIST);
diff --git a/package/kernel/ath10k-ct/patches/003-ath10k-ct-make-it-compatible-with-the-old-LTS-kernel.patch b/package/kernel/ath10k-ct/patches/003-ath10k-ct-make-it-compatible-with-the-old-LTS-kernel.patch
new file mode 100644
index 0000000000..4f1918cf52
--- /dev/null
+++ b/package/kernel/ath10k-ct/patches/003-ath10k-ct-make-it-compatible-with-the-old-LTS-kernel.patch
@@ -0,0 +1,22 @@
+From: Shiji Yang <yangshiji66@outlook.com>
+Date: Fri, 28 Mar 2025 19:56:06 +0800
+Subject: [PATCH] ath10k-ct: make it compatible with the old LTS kernel
+
+Rollback some APIs to fix compilation errors.
+
+Signed-off-by: Shiji Yang <yangshiji66@outlook.com>
+---
+ ath10k-6.14/ahb.c | 2 +-
+ 1 files changed, 1 insertions(+), 1 deletions(-)
+
+--- a/ath10k-6.14/ahb.c
++++ b/ath10k-6.14/ahb.c
+@@ -842,7 +842,7 @@ static struct platform_driver ath10k_ahb
+ 		.of_match_table = ath10k_ahb_of_match,
+ 	},
+ 	.probe = ath10k_ahb_probe,
+-	.remove = ath10k_ahb_remove,
++	.remove_new = ath10k_ahb_remove,
+ };
+ 
+ int ath10k_ahb_init(void)
diff --git a/package/kernel/ath10k-ct/patches/004-Revert-wifi-ath10k-Use-iommu_paging_domain_alloc.patch b/package/kernel/ath10k-ct/patches/004-Revert-wifi-ath10k-Use-iommu_paging_domain_alloc.patch
new file mode 100644
index 0000000000..f765950cad
--- /dev/null
+++ b/package/kernel/ath10k-ct/patches/004-Revert-wifi-ath10k-Use-iommu_paging_domain_alloc.patch
@@ -0,0 +1,28 @@
+From: Shiji Yang <yangshiji66@outlook.com>
+Date: Fri, 28 Mar 2025 19:56:06 +0800
+Subject: [PATCH] Revert "wifi: ath10k: Use iommu_paging_domain_alloc()"
+
+IPQ4019 wireless can't start after upstream commit d5b7485588df[1].
+
+[1] https://github.com/torvalds/linux/commit/d5b7485588dffb39c5687e965623124ab7ebcd51
+Signed-off-by: Shiji Yang <yangshiji66@outlook.com>
+---
+ ath10k-6.14/snoc.c | 6 +++---
+ 1 file changed, 3 insertions(+), 3 deletions(-)
+
+--- a/ath10k-6.14/snoc.c
++++ b/ath10k-6.14/snoc.c
+@@ -1635,10 +1635,10 @@ static int ath10k_fw_init(struct ath10k
+ 
+ 	ar_snoc->fw.dev = &pdev->dev;
+ 
+-	iommu_dom = iommu_paging_domain_alloc(ar_snoc->fw.dev);
+-	if (IS_ERR(iommu_dom)) {
++	iommu_dom = iommu_domain_alloc(&platform_bus_type);
++	if (!iommu_dom) {
+ 		ath10k_err(ar, "failed to allocate iommu domain\n");
+-		ret = PTR_ERR(iommu_dom);
++		ret = -ENOMEM;
+ 		goto err_unregister;
+ 	}
+ 
diff --git a/package/kernel/ath10k-ct/patches/010-api_update.patch b/package/kernel/ath10k-ct/patches/010-api_update.patch
deleted file mode 100644
index dff725b4e4..0000000000
--- a/package/kernel/ath10k-ct/patches/010-api_update.patch
+++ /dev/null
@@ -1,42 +0,0 @@
---- a/ath10k-6.10/mac.c
-+++ b/ath10k-6.10/mac.c
-@@ -1675,7 +1675,7 @@ static void ath10k_recalc_radar_detectio
- 		 * by indicating that radar was detected.
- 		 */
- 		ath10k_warn(ar, "failed to start CAC: %d\n", ret);
--		ieee80211_radar_detected(ar->hw);
-+		ieee80211_radar_detected(ar->hw, NULL);
- 	}
- }
- 
-@@ -6238,7 +6238,7 @@ err:
- 	return ret;
- }
- 
--static void ath10k_stop(struct ieee80211_hw *hw)
-+static void ath10k_stop(struct ieee80211_hw *hw, bool suspend)
- {
- 	struct ath10k *ar = hw->priv;
- 	u32 opt;
---- a/ath10k-6.10/debug.c
-+++ b/ath10k-6.10/debug.c
-@@ -3319,7 +3319,7 @@ static ssize_t ath10k_write_simulate_rad
- 	if (!arvif->is_started)
- 		return -EINVAL;
- 
--	ieee80211_radar_detected(ar->hw);
-+	ieee80211_radar_detected(ar->hw, NULL);
- 
- 	return count;
- }
---- a/ath10k-6.10/wmi.c
-+++ b/ath10k-6.10/wmi.c
-@@ -4402,7 +4402,7 @@ static void ath10k_radar_detected(struct
- 	if (ar->dfs_block_radar_events)
- 		ath10k_info(ar, "DFS Radar detected, but ignored as requested\n");
- 	else
--		ieee80211_radar_detected(ar->hw);
-+		ieee80211_radar_detected(ar->hw, NULL);
- }
- 
- static void ath10k_radar_confirmation_work(struct work_struct *work)
diff --git a/package/kernel/ath10k-ct/patches/201-wifi-ath10k-add-LED-and-GPIO-controlling-support-for.patch b/package/kernel/ath10k-ct/patches/201-wifi-ath10k-add-LED-and-GPIO-controlling-support-for.patch
deleted file mode 100644
index c1137d081e..0000000000
--- a/package/kernel/ath10k-ct/patches/201-wifi-ath10k-add-LED-and-GPIO-controlling-support-for.patch
+++ /dev/null
@@ -1,616 +0,0 @@
-From 8e1debd82466a3fe711784ab37e6b54e56011267 Mon Sep 17 00:00:00 2001
-From: Sebastian Gottschall <s.gottschall@dd-wrt.com>
-Date: Mon, 13 May 2024 17:22:25 +0300
-Subject: [PATCH] wifi: ath10k: add LED and GPIO controlling support for
- various chipsets
-
-Adds LED and GPIO Control support for 988x, 9887, 9888, 99x0, 9984
-based chipsets with on chipset connected led's using WMI Firmware API.
-The LED device will get available named as "ath10k-phyX" at sysfs and
-can be controlled with various triggers.
-Adds also debugfs interface for gpio control.
-
-Signed-off-by: Sebastian Gottschall <s.gottschall@dd-wrt.com>
-Reviewed-by: Steve deRosier <derosier@cal-sierra.com>
-[kvalo: major reorg and cleanup]
-Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
-[ansuel: rebase and small cleanup]
-Signed-off-by: Christian Marangi <ansuelsmth@gmail.com>
-Tested-by: Stefan Lippers-Hollmann <s.l-h@gmx.de>
-Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
-Link: https://msgid.link/20230611080505.17393-1-ansuelsmth@gmail.com
----
- ath10k-6.10/Kconfig   |  6 ++
- ath10k-6.10/Makefile  |  1 +
- ath10k-6.10/core.c    | 32 ++++++++
- ath10k-6.10/core.h    |  8 ++
- ath10k-6.10/hw.h      |  1 +
- ath10k-6.10/leds.c    | 90 +++++++++++++++++++++++
- ath10k-6.10/leds.h    | 34 +++++++++
- ath10k-6.10/mac.c     |  1 +
- ath10k-6.10/wmi-ops.h | 32 ++++++++
- ath10k-6.10/wmi-tlv.c |  2 +
- ath10k-6.10/wmi.c     | 54 ++++++++++++++
- ath10k-6.10/wmi.h     | 35 +++++++++
- 12 files changed, 296 insertions(+)
- create mode 100644 ath10k-6.10/leds.c
- create mode 100644 ath10k-6.10/leds.h
-
---- a/ath10k-6.10/Kconfig
-+++ b/ath10k-6.10/Kconfig
-@@ -68,6 +68,12 @@ config ATH10K_DEBUGFS
- 
- 	  If unsure, say Y to make it easier to debug problems.
- 
-+config ATH10K_LEDS
-+	bool
-+	depends on ATH10K
-+	depends on LEDS_CLASS=y || LEDS_CLASS=MAC80211
-+	default y
-+
- config ATH10K_SPECTRAL
- 	bool "Atheros ath10k spectral scan support"
- 	depends on ATH10K_DEBUGFS
---- a/ath10k-6.10/Makefile
-+++ b/ath10k-6.10/Makefile
-@@ -20,6 +20,7 @@ ath10k_core-$(CONFIG_ATH10K_SPECTRAL) +=
- ath10k_core-$(CONFIG_NL80211_TESTMODE) += testmode.o
- ath10k_core-$(CONFIG_ATH10K_TRACING) += trace.o
- ath10k_core-$(CONFIG_THERMAL) += thermal.o
-+ath10k_core-$(CONFIG_ATH10K_LEDS) += leds.o
- ath10k_core-$(CONFIG_MAC80211_DEBUGFS) += debugfs_sta.o
- ath10k_core-$(CONFIG_PM) += wow.o
- ath10k_core-$(CONFIG_ATH10K_CE) += ce.o
---- a/ath10k-6.10/core.c
-+++ b/ath10k-6.10/core.c
-@@ -29,6 +29,7 @@
- #include "testmode.h"
- #include "wmi-ops.h"
- #include "coredump.h"
-+#include "leds.h"
- 
- /* Disable ath10k-ct DBGLOG output by default */
- unsigned int ath10k_debug_mask = ATH10K_DBG_NO_DBGLOG;
-@@ -81,6 +82,7 @@ static const struct ath10k_hw_params ath
- 		.name = "qca988x hw2.0",
- 		.patch_load_addr = QCA988X_HW_2_0_PATCH_LOAD_ADDR,
- 		.uart_pin = 7,
-+		.led_pin = 1,
- 		.cc_wraparound_type = ATH10K_HW_CC_WRAP_SHIFTED_ALL,
- 		.otp_exe_param = 0,
- 		.channel_counters_freq_hz = 88000,
-@@ -121,6 +123,7 @@ static const struct ath10k_hw_params ath
- 		.name = "qca988x hw2.0 ubiquiti",
- 		.patch_load_addr = QCA988X_HW_2_0_PATCH_LOAD_ADDR,
- 		.uart_pin = 7,
-+		.led_pin = 0,
- 		.cc_wraparound_type = ATH10K_HW_CC_WRAP_SHIFTED_ALL,
- 		.otp_exe_param = 0,
- 		.channel_counters_freq_hz = 88000,
-@@ -162,6 +165,7 @@ static const struct ath10k_hw_params ath
- 		.name = "qca9887 hw1.0",
- 		.patch_load_addr = QCA9887_HW_1_0_PATCH_LOAD_ADDR,
- 		.uart_pin = 7,
-+		.led_pin = 1,
- 		.cc_wraparound_type = ATH10K_HW_CC_WRAP_SHIFTED_ALL,
- 		.otp_exe_param = 0,
- 		.channel_counters_freq_hz = 88000,
-@@ -203,6 +207,7 @@ static const struct ath10k_hw_params ath
- 		.name = "qca6174 hw3.2 sdio",
- 		.patch_load_addr = QCA6174_HW_3_0_PATCH_LOAD_ADDR,
- 		.uart_pin = 19,
-+		.led_pin = 0,
- 		.otp_exe_param = 0,
- 		.channel_counters_freq_hz = 88000,
- 		.max_probe_resp_desc_thres = 0,
-@@ -239,6 +244,7 @@ static const struct ath10k_hw_params ath
- 		.name = "qca6164 hw2.1",
- 		.patch_load_addr = QCA6174_HW_2_1_PATCH_LOAD_ADDR,
- 		.uart_pin = 6,
-+		.led_pin = 0,
- 		.otp_exe_param = 0,
- 		.channel_counters_freq_hz = 88000,
- 		.max_probe_resp_desc_thres = 0,
-@@ -279,6 +285,7 @@ static const struct ath10k_hw_params ath
- 		.name = "qca6174 hw2.1",
- 		.patch_load_addr = QCA6174_HW_2_1_PATCH_LOAD_ADDR,
- 		.uart_pin = 6,
-+		.led_pin = 0,
- 		.otp_exe_param = 0,
- 		.channel_counters_freq_hz = 88000,
- 		.max_probe_resp_desc_thres = 0,
-@@ -319,6 +326,7 @@ static const struct ath10k_hw_params ath
- 		.name = "qca6174 hw3.0",
- 		.patch_load_addr = QCA6174_HW_3_0_PATCH_LOAD_ADDR,
- 		.uart_pin = 6,
-+		.led_pin = 0,
- 		.otp_exe_param = 0,
- 		.channel_counters_freq_hz = 88000,
- 		.max_probe_resp_desc_thres = 0,
-@@ -359,6 +367,7 @@ static const struct ath10k_hw_params ath
- 		.name = "qca6174 hw3.2",
- 		.patch_load_addr = QCA6174_HW_3_0_PATCH_LOAD_ADDR,
- 		.uart_pin = 6,
-+		.led_pin = 0,
- 		.otp_exe_param = 0,
- 		.channel_counters_freq_hz = 88000,
- 		.max_probe_resp_desc_thres = 0,
-@@ -403,6 +412,7 @@ static const struct ath10k_hw_params ath
- 		.name = "qca99x0 hw2.0",
- 		.patch_load_addr = QCA99X0_HW_2_0_PATCH_LOAD_ADDR,
- 		.uart_pin = 7,
-+		.led_pin = 17,
- 		.otp_exe_param = 0x00000700,
- 		.continuous_frag_desc = true,
- 		.cck_rate_map_rev2 = true,
-@@ -449,6 +459,7 @@ static const struct ath10k_hw_params ath
- 		.name = "qca9984/qca9994 hw1.0",
- 		.patch_load_addr = QCA9984_HW_1_0_PATCH_LOAD_ADDR,
- 		.uart_pin = 7,
-+		.led_pin = 17,
- 		.cc_wraparound_type = ATH10K_HW_CC_WRAP_SHIFTED_EACH,
- 		.otp_exe_param = 0x00000700,
- 		.continuous_frag_desc = true,
-@@ -501,6 +512,7 @@ static const struct ath10k_hw_params ath
- 		.name = "qca9888 hw2.0",
- 		.patch_load_addr = QCA9888_HW_2_0_PATCH_LOAD_ADDR,
- 		.uart_pin = 7,
-+		.led_pin = 17,
- 		.cc_wraparound_type = ATH10K_HW_CC_WRAP_SHIFTED_EACH,
- 		.otp_exe_param = 0x00000700,
- 		.continuous_frag_desc = true,
-@@ -551,6 +563,7 @@ static const struct ath10k_hw_params ath
- 		.name = "qca9377 hw1.0",
- 		.patch_load_addr = QCA9377_HW_1_0_PATCH_LOAD_ADDR,
- 		.uart_pin = 6,
-+		.led_pin = 0,
- 		.otp_exe_param = 0,
- 		.channel_counters_freq_hz = 88000,
- 		.max_probe_resp_desc_thres = 0,
-@@ -591,6 +604,7 @@ static const struct ath10k_hw_params ath
- 		.name = "qca9377 hw1.1",
- 		.patch_load_addr = QCA9377_HW_1_0_PATCH_LOAD_ADDR,
- 		.uart_pin = 6,
-+		.led_pin = 0,
- 		.otp_exe_param = 0,
- 		.channel_counters_freq_hz = 88000,
- 		.max_probe_resp_desc_thres = 0,
-@@ -633,6 +647,7 @@ static const struct ath10k_hw_params ath
- 		.name = "qca9377 hw1.1 sdio",
- 		.patch_load_addr = QCA9377_HW_1_0_PATCH_LOAD_ADDR,
- 		.uart_pin = 19,
-+		.led_pin = 0,
- 		.otp_exe_param = 0,
- 		.channel_counters_freq_hz = 88000,
- 		.max_probe_resp_desc_thres = 0,
-@@ -666,6 +681,7 @@ static const struct ath10k_hw_params ath
- 		.name = "qca4019 hw1.0",
- 		.patch_load_addr = QCA4019_HW_1_0_PATCH_LOAD_ADDR,
- 		.uart_pin = 7,
-+		.led_pin = 0,
- 		.cc_wraparound_type = ATH10K_HW_CC_WRAP_SHIFTED_EACH,
- 		.otp_exe_param = 0x0010000,
- 		.continuous_frag_desc = true,
-@@ -711,6 +727,7 @@ static const struct ath10k_hw_params ath
- 		.dev_id = 0,
- 		.bus = ATH10K_BUS_SNOC,
- 		.name = "wcn3990 hw1.0",
-+		.led_pin = 0,
- 		.continuous_frag_desc = true,
- 		.tx_chain_mask = 0x7,
- 		.rx_chain_mask = 0x7,
-@@ -4073,6 +4090,10 @@ int ath10k_core_start(struct ath10k *ar,
- 			ath10k_wmi_check_apply_board_power_ctl_table(ar);
- 	}
- 
-+	status = ath10k_leds_start(ar);
-+	if (status)
-+		goto err_hif_stop;
-+
- 	return 0;
- 
- err_hif_stop:
-@@ -4334,9 +4355,18 @@ static void ath10k_core_register_work(st
- 		goto err_spectral_destroy;
- 	}
- 
-+	status = ath10k_leds_register(ar);
-+	if (status) {
-+		ath10k_err(ar, "could not register leds: %d\n",
-+			   status);
-+		goto err_thermal_unregister;
-+	}
-+
- 	set_bit(ATH10K_FLAG_CORE_REGISTERED, &ar->dev_flags);
- 	return;
- 
-+err_thermal_unregister:
-+	ath10k_thermal_unregister(ar);
- err_spectral_destroy:
- 	ath10k_spectral_destroy(ar);
- err_debug_destroy:
-@@ -4396,6 +4426,8 @@ void ath10k_core_unregister(struct ath10
- 	if (!test_bit(ATH10K_FLAG_CORE_REGISTERED, &ar->dev_flags))
- 		return;
- 
-+	ath10k_leds_unregister(ar);
-+
- 	ath10k_thermal_unregister(ar);
- 	/* Stop spectral before unregistering from mac80211 to remove the
- 	 * relayfs debugfs file cleanly. Otherwise the parent debugfs tree
---- a/ath10k-6.10/core.h
-+++ b/ath10k-6.10/core.h
-@@ -15,6 +15,7 @@
- #include <linux/pci.h>
- #include <linux/uuid.h>
- #include <linux/time.h>
-+#include <linux/leds.h>
- 
- #include "htt.h"
- #include "htc.h"
-@@ -1592,6 +1593,13 @@ struct ath10k {
- 	} testmode;
- 
- 	struct {
-+		struct gpio_led wifi_led;
-+		struct led_classdev cdev;
-+		char label[48];
-+		u32 gpio_state_pin;
-+	} leds;
-+
-+	struct {
- 		/* protected by data_lock */
- 		u32 rx_crc_err_drop;
- 		u32 fw_crash_counter;
---- a/ath10k-6.10/hw.h
-+++ b/ath10k-6.10/hw.h
-@@ -516,6 +516,7 @@ struct ath10k_hw_params {
- 	const char *name;
- 	u32 patch_load_addr;
- 	int uart_pin;
-+	int led_pin;
- 	u32 otp_exe_param;
- 
- 	/* Type of hw cycle counter wraparound logic, for more info
---- /dev/null
-+++ b/ath10k-6.10/leds.c
-@@ -0,0 +1,90 @@
-+// SPDX-License-Identifier: ISC
-+/*
-+ * Copyright (c) 2005-2011 Atheros Communications Inc.
-+ * Copyright (c) 2011-2017 Qualcomm Atheros, Inc.
-+ * Copyright (c) 2018 Sebastian Gottschall <s.gottschall@dd-wrt.com>
-+ * Copyright (c) 2018 The Linux Foundation. All rights reserved.
-+ */
-+
-+#include <linux/leds.h>
-+
-+#include "core.h"
-+#include "wmi.h"
-+#include "wmi-ops.h"
-+
-+#include "leds.h"
-+
-+static int ath10k_leds_set_brightness_blocking(struct led_classdev *led_cdev,
-+					       enum led_brightness brightness)
-+{
-+	struct ath10k *ar = container_of(led_cdev, struct ath10k,
-+					 leds.cdev);
-+	struct gpio_led *led = &ar->leds.wifi_led;
-+
-+	mutex_lock(&ar->conf_mutex);
-+
-+	if (ar->state != ATH10K_STATE_ON)
-+		goto out;
-+
-+	ar->leds.gpio_state_pin = (brightness != LED_OFF) ^ led->active_low;
-+	ath10k_wmi_gpio_output(ar, led->gpio, ar->leds.gpio_state_pin);
-+
-+out:
-+	mutex_unlock(&ar->conf_mutex);
-+
-+	return 0;
-+}
-+
-+int ath10k_leds_start(struct ath10k *ar)
-+{
-+	if (ar->hw_params.led_pin == 0)
-+		/* leds not supported */
-+		return 0;
-+
-+	/* under some circumstances, the gpio pin gets reconfigured
-+	 * to default state by the firmware, so we need to
-+	 * reconfigure it this behaviour has only ben seen on
-+	 * QCA9984 and QCA99XX devices so far
-+	 */
-+	ath10k_wmi_gpio_config(ar, ar->hw_params.led_pin, 0,
-+			       WMI_GPIO_PULL_NONE, WMI_GPIO_INTTYPE_DISABLE);
-+	ath10k_wmi_gpio_output(ar, ar->hw_params.led_pin, 1);
-+
-+	return 0;
-+}
-+
-+int ath10k_leds_register(struct ath10k *ar)
-+{
-+	int ret;
-+
-+	if (ar->hw_params.led_pin == 0)
-+		/* leds not supported */
-+		return 0;
-+
-+	snprintf(ar->leds.label, sizeof(ar->leds.label), "ath10k-%s",
-+		 wiphy_name(ar->hw->wiphy));
-+	ar->leds.wifi_led.active_low = 1;
-+	ar->leds.wifi_led.gpio = ar->hw_params.led_pin;
-+	ar->leds.wifi_led.name = ar->leds.label;
-+	ar->leds.wifi_led.default_state = LEDS_GPIO_DEFSTATE_KEEP;
-+
-+	ar->leds.cdev.name = ar->leds.label;
-+	ar->leds.cdev.brightness_set_blocking = ath10k_leds_set_brightness_blocking;
-+	ar->leds.cdev.default_trigger = ar->leds.wifi_led.default_trigger;
-+
-+	ret = led_classdev_register(wiphy_dev(ar->hw->wiphy), &ar->leds.cdev);
-+	if (ret)
-+		return ret;
-+
-+	return 0;
-+}
-+
-+void ath10k_leds_unregister(struct ath10k *ar)
-+{
-+	if (ar->hw_params.led_pin == 0)
-+		/* leds not supported */
-+		return;
-+
-+	led_classdev_unregister(&ar->leds.cdev);
-+}
-+
---- /dev/null
-+++ b/ath10k-6.10/leds.h
-@@ -0,0 +1,34 @@
-+/* SPDX-License-Identifier: ISC */
-+/*
-+ * Copyright (c) 2005-2011 Atheros Communications Inc.
-+ * Copyright (c) 2011-2017 Qualcomm Atheros, Inc.
-+ * Copyright (c) 2018 Sebastian Gottschall <s.gottschall@dd-wrt.com>
-+ * Copyright (c) 2018 The Linux Foundation. All rights reserved.
-+ */
-+
-+#ifndef _LEDS_H_
-+#define _LEDS_H_
-+
-+#include "core.h"
-+
-+#ifdef CONFIG_ATH10K_LEDS
-+void ath10k_leds_unregister(struct ath10k *ar);
-+int ath10k_leds_start(struct ath10k *ar);
-+int ath10k_leds_register(struct ath10k *ar);
-+#else
-+static inline void ath10k_leds_unregister(struct ath10k *ar)
-+{
-+}
-+
-+static inline int ath10k_leds_start(struct ath10k *ar)
-+{
-+	return 0;
-+}
-+
-+static inline int ath10k_leds_register(struct ath10k *ar)
-+{
-+	return 0;
-+}
-+
-+#endif
-+#endif /* _LEDS_H_ */
---- a/ath10k-6.10/mac.c
-+++ b/ath10k-6.10/mac.c
-@@ -26,6 +26,7 @@
- #include "wmi-tlv.h"
- #include "wmi-ops.h"
- #include "wow.h"
-+#include "leds.h"
- 
- /*********/
- /* Rates */
---- a/ath10k-6.10/wmi-ops.h
-+++ b/ath10k-6.10/wmi-ops.h
-@@ -228,7 +228,10 @@ struct wmi_ops {
- 			 const struct wmi_bb_timing_cfg_arg *arg);
- 	struct sk_buff *(*gen_per_peer_per_tid_cfg)(struct ath10k *ar,
- 						    const struct wmi_per_peer_per_tid_cfg_arg *arg);
-+	struct sk_buff *(*gen_gpio_config)(struct ath10k *ar, u32 gpio_num,
-+					   u32 input, u32 pull_type, u32 intr_mode);
- 
-+	struct sk_buff *(*gen_gpio_output)(struct ath10k *ar, u32 gpio_num, u32 set);
- };
- 
- int ath10k_wmi_cmd_send(struct ath10k *ar, struct sk_buff *skb, u32 cmd_id);
-@@ -1147,6 +1150,35 @@ ath10k_wmi_force_fw_hang(struct ath10k *
- 	return ath10k_wmi_cmd_send(ar, skb, ar->wmi.cmd->force_fw_hang_cmdid);
- }
- 
-+static inline int ath10k_wmi_gpio_config(struct ath10k *ar, u32 gpio_num,
-+					 u32 input, u32 pull_type, u32 intr_mode)
-+{
-+	struct sk_buff *skb;
-+
-+	if (!ar->wmi.ops->gen_gpio_config)
-+		return -EOPNOTSUPP;
-+
-+	skb = ar->wmi.ops->gen_gpio_config(ar, gpio_num, input, pull_type, intr_mode);
-+	if (IS_ERR(skb))
-+		return PTR_ERR(skb);
-+
-+	return ath10k_wmi_cmd_send(ar, skb, ar->wmi.cmd->gpio_config_cmdid);
-+}
-+
-+static inline int ath10k_wmi_gpio_output(struct ath10k *ar, u32 gpio_num, u32 set)
-+{
-+	struct sk_buff *skb;
-+
-+	if (!ar->wmi.ops->gen_gpio_config)
-+		return -EOPNOTSUPP;
-+
-+	skb = ar->wmi.ops->gen_gpio_output(ar, gpio_num, set);
-+	if (IS_ERR(skb))
-+		return PTR_ERR(skb);
-+
-+	return ath10k_wmi_cmd_send(ar, skb, ar->wmi.cmd->gpio_output_cmdid);
-+}
-+
- static inline int
- ath10k_wmi_dbglog_cfg(struct ath10k *ar, u64 module_enable, u32 log_level)
- {
---- a/ath10k-6.10/wmi-tlv.c
-+++ b/ath10k-6.10/wmi-tlv.c
-@@ -4606,6 +4606,8 @@ static const struct wmi_ops wmi_tlv_ops
- 	.gen_echo = ath10k_wmi_tlv_op_gen_echo,
- 	.gen_vdev_spectral_conf = ath10k_wmi_tlv_op_gen_vdev_spectral_conf,
- 	.gen_vdev_spectral_enable = ath10k_wmi_tlv_op_gen_vdev_spectral_enable,
-+	/* .gen_gpio_config not implemented */
-+	/* .gen_gpio_output not implemented */
- };
- 
- static const struct wmi_peer_flags_map wmi_tlv_peer_flags_map = {
---- a/ath10k-6.10/wmi.c
-+++ b/ath10k-6.10/wmi.c
-@@ -8467,6 +8467,49 @@ ath10k_wmi_op_gen_peer_set_param(struct
- 	return skb;
- }
- 
-+static struct sk_buff *ath10k_wmi_op_gen_gpio_config(struct ath10k *ar,
-+						     u32 gpio_num, u32 input,
-+						     u32 pull_type, u32 intr_mode)
-+{
-+	struct wmi_gpio_config_cmd *cmd;
-+	struct sk_buff *skb;
-+
-+	skb = ath10k_wmi_alloc_skb(ar, sizeof(*cmd));
-+	if (!skb)
-+		return ERR_PTR(-ENOMEM);
-+
-+	cmd = (struct wmi_gpio_config_cmd *)skb->data;
-+	cmd->pull_type = __cpu_to_le32(pull_type);
-+	cmd->gpio_num = __cpu_to_le32(gpio_num);
-+	cmd->input = __cpu_to_le32(input);
-+	cmd->intr_mode = __cpu_to_le32(intr_mode);
-+
-+	ath10k_dbg(ar, ATH10K_DBG_WMI, "wmi gpio_config gpio_num 0x%08x input 0x%08x pull_type 0x%08x intr_mode 0x%08x\n",
-+		   gpio_num, input, pull_type, intr_mode);
-+
-+	return skb;
-+}
-+
-+static struct sk_buff *ath10k_wmi_op_gen_gpio_output(struct ath10k *ar,
-+						     u32 gpio_num, u32 set)
-+{
-+	struct wmi_gpio_output_cmd *cmd;
-+	struct sk_buff *skb;
-+
-+	skb = ath10k_wmi_alloc_skb(ar, sizeof(*cmd));
-+	if (!skb)
-+		return ERR_PTR(-ENOMEM);
-+
-+	cmd = (struct wmi_gpio_output_cmd *)skb->data;
-+	cmd->gpio_num = __cpu_to_le32(gpio_num);
-+	cmd->set = __cpu_to_le32(set);
-+
-+	ath10k_dbg(ar, ATH10K_DBG_WMI, "wmi gpio_output gpio_num 0x%08x set 0x%08x\n",
-+		   gpio_num, set);
-+
-+	return skb;
-+}
-+
- static struct sk_buff *
- ath10k_wmi_op_gen_set_psmode(struct ath10k *ar, u32 vdev_id,
- 			     enum wmi_sta_ps_mode psmode)
-@@ -10274,6 +10317,9 @@ static const struct wmi_ops wmi_ops = {
- 	.fw_stats_fill = ath10k_wmi_main_op_fw_stats_fill,
- 	.get_vdev_subtype = ath10k_wmi_op_get_vdev_subtype,
- 	.gen_echo = ath10k_wmi_op_gen_echo,
-+	.gen_gpio_config = ath10k_wmi_op_gen_gpio_config,
-+	.gen_gpio_output = ath10k_wmi_op_gen_gpio_output,
-+
- 	/* .gen_bcn_tmpl not implemented */
- 	/* .gen_prb_tmpl not implemented */
- 	/* .gen_p2p_go_bcn_ie not implemented */
-@@ -10344,6 +10390,8 @@ static const struct wmi_ops wmi_10_1_ops
- 	.fw_stats_fill = ath10k_wmi_10x_op_fw_stats_fill,
- 	.get_vdev_subtype = ath10k_wmi_op_get_vdev_subtype,
- 	.gen_echo = ath10k_wmi_op_gen_echo,
-+	.gen_gpio_config = ath10k_wmi_op_gen_gpio_config,
-+	.gen_gpio_output = ath10k_wmi_op_gen_gpio_output,
- 	/* .gen_bcn_tmpl not implemented */
- 	/* .gen_prb_tmpl not implemented */
- 	/* .gen_p2p_go_bcn_ie not implemented */
-@@ -10423,6 +10471,8 @@ static const struct wmi_ops wmi_10_2_ops
- 	.gen_delba_send = ath10k_wmi_op_gen_delba_send,
- 	.fw_stats_fill = ath10k_wmi_10x_op_fw_stats_fill,
- 	.get_vdev_subtype = ath10k_wmi_op_get_vdev_subtype,
-+	.gen_gpio_config = ath10k_wmi_op_gen_gpio_config,
-+	.gen_gpio_output = ath10k_wmi_op_gen_gpio_output,
- 	/* .gen_pdev_enable_adaptive_cca not implemented */
- };
- 
-@@ -10494,6 +10544,8 @@ static const struct wmi_ops wmi_10_2_4_o
- 		ath10k_wmi_op_gen_pdev_enable_adaptive_cca,
- 	.get_vdev_subtype = ath10k_wmi_10_2_4_op_get_vdev_subtype,
- 	.gen_bb_timing = ath10k_wmi_10_2_4_op_gen_bb_timing,
-+	.gen_gpio_config = ath10k_wmi_op_gen_gpio_config,
-+	.gen_gpio_output = ath10k_wmi_op_gen_gpio_output,
- 	/* .gen_bcn_tmpl not implemented */
- 	/* .gen_prb_tmpl not implemented */
- 	/* .gen_p2p_go_bcn_ie not implemented */
-@@ -10576,6 +10628,8 @@ static const struct wmi_ops wmi_10_4_ops
- 	.gen_pdev_bss_chan_info_req = ath10k_wmi_10_2_op_gen_pdev_bss_chan_info,
- 	.gen_echo = ath10k_wmi_op_gen_echo,
- 	.gen_pdev_get_tpc_config = ath10k_wmi_10_2_4_op_gen_pdev_get_tpc_config,
-+	.gen_gpio_config = ath10k_wmi_op_gen_gpio_config,
-+	.gen_gpio_output = ath10k_wmi_op_gen_gpio_output,
- };
- 
- int ath10k_wmi_attach(struct ath10k *ar)
---- a/ath10k-6.10/wmi.h
-+++ b/ath10k-6.10/wmi.h
-@@ -3137,6 +3137,41 @@ enum wmi_10_4_feature_mask {
- 
- };
- 
-+/* WMI_GPIO_CONFIG_CMDID */
-+enum {
-+	WMI_GPIO_PULL_NONE,
-+	WMI_GPIO_PULL_UP,
-+	WMI_GPIO_PULL_DOWN,
-+};
-+
-+enum {
-+	WMI_GPIO_INTTYPE_DISABLE,
-+	WMI_GPIO_INTTYPE_RISING_EDGE,
-+	WMI_GPIO_INTTYPE_FALLING_EDGE,
-+	WMI_GPIO_INTTYPE_BOTH_EDGE,
-+	WMI_GPIO_INTTYPE_LEVEL_LOW,
-+	WMI_GPIO_INTTYPE_LEVEL_HIGH
-+};
-+
-+/* WMI_GPIO_CONFIG_CMDID */
-+struct wmi_gpio_config_cmd {
-+	__le32 gpio_num;             /* GPIO number to be setup */
-+	__le32 input;                /* 0 - Output/ 1 - Input */
-+	__le32 pull_type;            /* Pull type defined above */
-+	__le32 intr_mode;            /* Interrupt mode defined above (Input) */
-+} __packed;
-+
-+/* WMI_GPIO_OUTPUT_CMDID */
-+struct wmi_gpio_output_cmd {
-+	__le32 gpio_num;    /* GPIO number to be setup */
-+	__le32 set;         /* Set the GPIO pin*/
-+} __packed;
-+
-+/* WMI_GPIO_INPUT_EVENTID */
-+struct wmi_gpio_input_event {
-+	__le32 gpio_num;    /* GPIO number which changed state */
-+} __packed;
-+
- struct wmi_ext_resource_config_10_4_cmd {
- 	/* contains enum wmi_host_platform_type */
- 	__le32 host_platform_config;
diff --git a/package/kernel/ath10k-ct/patches/202-ath10k-use-tpt-trigger-by-default.patch b/package/kernel/ath10k-ct/patches/202-ath10k-use-tpt-trigger-by-default.patch
index cd1d300b38..34dd2101b9 100644
--- a/package/kernel/ath10k-ct/patches/202-ath10k-use-tpt-trigger-by-default.patch
+++ b/package/kernel/ath10k-ct/patches/202-ath10k-use-tpt-trigger-by-default.patch
@@ -9,13 +9,13 @@ traffic.
 
 Signed-off-by: Mathias Kresin <dev@kresin.me>
 ---
- ath10k-6.7/core.h | 4 ++++
- ath10k-6.7/leds.c | 4 +---
- ath10k-6.7/mac.c  | 2 +-
+ ath10k-6.14/core.h | 4 ++++
+ ath10k-6.14/leds.c | 4 +---
+ ath10k-6.14/mac.c  | 2 +-
  3 files changed, 6 insertions(+), 4 deletions(-)
 
---- a/ath10k-6.10/core.h
-+++ b/ath10k-6.10/core.h
+--- a/ath10k-6.14/core.h
++++ b/ath10k-6.14/core.h
 @@ -1707,6 +1707,10 @@ struct ath10k {
  	u8 csi_data[4096];
  	u16 csi_data_len;
@@ -27,8 +27,8 @@ Signed-off-by: Mathias Kresin <dev@kresin.me>
  	/* must be last */
  	u8 drv_priv[] __aligned(sizeof(void *));
  };
---- a/ath10k-6.10/leds.c
-+++ b/ath10k-6.10/leds.c
+--- a/ath10k-6.14/leds.c
++++ b/ath10k-6.14/leds.c
 @@ -70,7 +70,7 @@ int ath10k_leds_register(struct ath10k *
  
  	ar->leds.cdev.name = ar->leds.label;
@@ -38,9 +38,9 @@ Signed-off-by: Mathias Kresin <dev@kresin.me>
  
  	ret = led_classdev_register(wiphy_dev(ar->hw->wiphy), &ar->leds.cdev);
  	if (ret)
---- a/ath10k-6.10/mac.c
-+++ b/ath10k-6.10/mac.c
-@@ -11631,7 +11631,7 @@ int ath10k_mac_register(struct ath10k *a
+--- a/ath10k-6.14/mac.c
++++ b/ath10k-6.14/mac.c
+@@ -11651,7 +11651,7 @@ int ath10k_mac_register(struct ath10k *a
  	ar->hw->weight_multiplier = ATH10K_AIRTIME_WEIGHT_MULTIPLIER;
  
  #ifdef CPTCFG_MAC80211_LEDS
diff --git a/package/kernel/ath10k-ct/patches/300-fix-fortify-checking-error.patch b/package/kernel/ath10k-ct/patches/300-fix-fortify-checking-error.patch
index 89921d6a34..84a74c0d3e 100644
--- a/package/kernel/ath10k-ct/patches/300-fix-fortify-checking-error.patch
+++ b/package/kernel/ath10k-ct/patches/300-fix-fortify-checking-error.patch
@@ -1,5 +1,5 @@
---- a/ath10k-6.10/wmi.h
-+++ b/ath10k-6.10/wmi.h
+--- a/ath10k-6.14/wmi.h
++++ b/ath10k-6.14/wmi.h
 @@ -6310,7 +6310,7 @@ struct qca9880_set_ctl_table_cmd {
  	__le32 ctl_len; /* in bytes.  This may be ignored in firmware,
  			 * make sure ctl_info data is sizeof(qca9880_power_ctl) */
diff --git a/package/kernel/ath10k-ct/patches/960-0010-ath10k-limit-htt-rx-ring-size.patch b/package/kernel/ath10k-ct/patches/960-0010-ath10k-limit-htt-rx-ring-size.patch
index bd25222e1d..31a5161c0a 100644
--- a/package/kernel/ath10k-ct/patches/960-0010-ath10k-limit-htt-rx-ring-size.patch
+++ b/package/kernel/ath10k-ct/patches/960-0010-ath10k-limit-htt-rx-ring-size.patch
@@ -1,5 +1,5 @@
---- a/ath10k-6.10/htt.h
-+++ b/ath10k-6.10/htt.h
+--- a/ath10k-6.14/htt.h
++++ b/ath10k-6.14/htt.h
 @@ -238,7 +238,11 @@ enum htt_rx_ring_flags {
  };
  
diff --git a/package/kernel/ath10k-ct/patches/960-0011-ath10k-limit-pci-buffer-size.patch b/package/kernel/ath10k-ct/patches/960-0011-ath10k-limit-pci-buffer-size.patch
index 708a7caea2..6490e3ca9b 100644
--- a/package/kernel/ath10k-ct/patches/960-0011-ath10k-limit-pci-buffer-size.patch
+++ b/package/kernel/ath10k-ct/patches/960-0011-ath10k-limit-pci-buffer-size.patch
@@ -1,5 +1,5 @@
---- a/ath10k-6.10/pci.c
-+++ b/ath10k-6.10/pci.c
+--- a/ath10k-6.14/pci.c
++++ b/ath10k-6.14/pci.c
 @@ -132,7 +132,11 @@ static const struct ce_attr pci_host_ce_
  		.flags = CE_ATTR_FLAGS,
  		.src_nentries = 0,
diff --git a/package/kernel/ath10k-ct/patches/988-ath10k-always-use-mac80211-loss-detection.patch b/package/kernel/ath10k-ct/patches/988-ath10k-always-use-mac80211-loss-detection.patch
index 1f9f38c2b0..3729e0f323 100644
--- a/package/kernel/ath10k-ct/patches/988-ath10k-always-use-mac80211-loss-detection.patch
+++ b/package/kernel/ath10k-ct/patches/988-ath10k-always-use-mac80211-loss-detection.patch
@@ -13,12 +13,12 @@ own loss detection mechanism.
 
 Signed-off-by: David Bauer <mail@david-bauer.net>
 ---
- ath10k-6.10/mac.c | 1 -
+ ath10k-6.14/mac.c | 1 -
  1 file changed, 1 deletion(-)
 
---- a/ath10k-6.10/mac.c
-+++ b/ath10k-6.10/mac.c
-@@ -11317,7 +11317,6 @@ int ath10k_mac_register(struct ath10k *a
+--- a/ath10k-6.14/mac.c
++++ b/ath10k-6.14/mac.c
+@@ -11336,7 +11336,6 @@ int ath10k_mac_register(struct ath10k *a
  	ieee80211_hw_set(ar->hw, CHANCTX_STA_CSA);
  	ieee80211_hw_set(ar->hw, QUEUE_CONTROL);
  	ieee80211_hw_set(ar->hw, SUPPORTS_TX_FRAG);
diff --git a/package/kernel/mac80211/Makefile b/package/kernel/mac80211/Makefile
index 375a2d869b..ee88c11a2f 100644
--- a/package/kernel/mac80211/Makefile
+++ b/package/kernel/mac80211/Makefile
@@ -10,13 +10,13 @@ include $(INCLUDE_DIR)/kernel.mk
 
 PKG_NAME:=mac80211
 
-PKG_VERSION:=6.12.6
-PKG_RELEASE:=2
+PKG_VERSION:=6.14.11
+PKG_RELEASE:=1
 PKG_LICENSE:=GPL-2.0-only
 PKG_LICENSE_FILES:=COPYING
 
 PKG_SOURCE_URL:=http://mirror2.openwrt.org/sources/
-PKG_HASH:=28ec39425a1b3270e1422d92a8131a6a3d8919cc13e8ee250c315e55d922ba68
+PKG_HASH:=1f6620485f0b33046e87aa2c6ac04ae529e9b5e83e318652d89939b192c6e348
 
 PKG_SOURCE:=backports-$(PKG_VERSION).tar.xz
 PKG_BUILD_DIR:=$(KERNEL_BUILD_DIR)/$(if $(BUILD_VARIANT),$(PKG_NAME)-$(BUILD_VARIANT)/)backports-$(PKG_VERSION)
diff --git a/package/kernel/mac80211/patches/ath/402-ath_regd_optional.patch b/package/kernel/mac80211/patches/ath/402-ath_regd_optional.patch
index 5f5ac20ddb..6b1bbefd24 100644
--- a/package/kernel/mac80211/patches/ath/402-ath_regd_optional.patch
+++ b/package/kernel/mac80211/patches/ath/402-ath_regd_optional.patch
@@ -82,7 +82,7 @@
  	help
 --- a/local-symbols
 +++ b/local-symbols
-@@ -96,6 +96,7 @@ ADM8211=
+@@ -90,6 +90,7 @@ ADM8211=
  ATH_COMMON=
  WLAN_VENDOR_ATH=
  ATH_DEBUG=
diff --git a/package/kernel/mac80211/patches/ath/404-regd_no_assoc_hints.patch b/package/kernel/mac80211/patches/ath/404-regd_no_assoc_hints.patch
index 895e2ff8d8..e9b83b87cc 100644
--- a/package/kernel/mac80211/patches/ath/404-regd_no_assoc_hints.patch
+++ b/package/kernel/mac80211/patches/ath/404-regd_no_assoc_hints.patch
@@ -1,6 +1,6 @@
 --- a/net/wireless/reg.c
 +++ b/net/wireless/reg.c
-@@ -3364,6 +3364,8 @@ void regulatory_hint_country_ie(struct w
+@@ -3365,6 +3365,8 @@ void regulatory_hint_country_ie(struct w
  	enum environment_cap env = ENVIRON_ANY;
  	struct regulatory_request *request = NULL, *lr;
  
@@ -9,7 +9,7 @@
  	/* IE len must be evenly divisible by 2 */
  	if (country_ie_len & 0x01)
  		return;
-@@ -3615,6 +3617,7 @@ static bool is_wiphy_all_set_reg_flag(en
+@@ -3614,6 +3616,7 @@ static bool is_wiphy_all_set_reg_flag(en
  
  void regulatory_hint_disconnect(void)
  {
diff --git a/package/kernel/mac80211/patches/ath10k/080-ath10k_thermal_config.patch b/package/kernel/mac80211/patches/ath10k/080-ath10k_thermal_config.patch
index 10d95d36bf..0c631f6bb2 100644
--- a/package/kernel/mac80211/patches/ath10k/080-ath10k_thermal_config.patch
+++ b/package/kernel/mac80211/patches/ath10k/080-ath10k_thermal_config.patch
@@ -37,7 +37,7 @@
  void ath10k_thermal_event_temperature(struct ath10k *ar, int temperature);
 --- a/local-symbols
 +++ b/local-symbols
-@@ -156,6 +156,7 @@ ATH10K_DEBUG=
+@@ -150,6 +150,7 @@ ATH10K_DEBUG=
  ATH10K_DEBUGFS=
  ATH10K_LEDS=
  ATH10K_SPECTRAL=
diff --git a/package/kernel/mac80211/patches/ath10k/930-ath10k_add_tpt_led_trigger.patch b/package/kernel/mac80211/patches/ath10k/930-ath10k_add_tpt_led_trigger.patch
index b13bc33498..ec055b20bf 100644
--- a/package/kernel/mac80211/patches/ath10k/930-ath10k_add_tpt_led_trigger.patch
+++ b/package/kernel/mac80211/patches/ath10k/930-ath10k_add_tpt_led_trigger.patch
@@ -1,6 +1,6 @@
 --- a/drivers/net/wireless/ath/ath10k/mac.c
 +++ b/drivers/net/wireless/ath/ath10k/mac.c
-@@ -9919,6 +9919,21 @@ static int ath10k_mac_init_rd(struct ath
+@@ -9934,6 +9934,21 @@ static int ath10k_mac_init_rd(struct ath
  	return 0;
  }
  
@@ -22,7 +22,7 @@
  int ath10k_mac_register(struct ath10k *ar)
  {
  	static const u32 cipher_suites[] = {
-@@ -10281,6 +10296,12 @@ int ath10k_mac_register(struct ath10k *a
+@@ -10296,6 +10311,12 @@ int ath10k_mac_register(struct ath10k *a
  
  	ar->hw->weight_multiplier = ATH10K_AIRTIME_WEIGHT_MULTIPLIER;
  
diff --git a/package/kernel/mac80211/patches/ath10k/975-ath10k-use-tpt-trigger-by-default.patch b/package/kernel/mac80211/patches/ath10k/975-ath10k-use-tpt-trigger-by-default.patch
index fc41f5f151..f6247f092c 100644
--- a/package/kernel/mac80211/patches/ath10k/975-ath10k-use-tpt-trigger-by-default.patch
+++ b/package/kernel/mac80211/patches/ath10k/975-ath10k-use-tpt-trigger-by-default.patch
@@ -40,7 +40,7 @@ Signed-off-by: Mathias Kresin <dev@kresin.me>
  	if (ret)
 --- a/drivers/net/wireless/ath/ath10k/mac.c
 +++ b/drivers/net/wireless/ath/ath10k/mac.c
-@@ -10297,7 +10297,7 @@ int ath10k_mac_register(struct ath10k *a
+@@ -10312,7 +10312,7 @@ int ath10k_mac_register(struct ath10k *a
  	ar->hw->weight_multiplier = ATH10K_AIRTIME_WEIGHT_MULTIPLIER;
  
  #ifdef CPTCFG_MAC80211_LEDS
diff --git a/package/kernel/mac80211/patches/ath10k/988-ath10k-always-use-mac80211-loss-detection.patch b/package/kernel/mac80211/patches/ath10k/988-ath10k-always-use-mac80211-loss-detection.patch
index b9cdae7e1f..cfcf5a091a 100644
--- a/package/kernel/mac80211/patches/ath10k/988-ath10k-always-use-mac80211-loss-detection.patch
+++ b/package/kernel/mac80211/patches/ath10k/988-ath10k-always-use-mac80211-loss-detection.patch
@@ -18,7 +18,7 @@ Signed-off-by: David Bauer <mail@david-bauer.net>
 
 --- a/drivers/net/wireless/ath/ath10k/mac.c
 +++ b/drivers/net/wireless/ath/ath10k/mac.c
-@@ -10089,7 +10089,6 @@ int ath10k_mac_register(struct ath10k *a
+@@ -10104,7 +10104,6 @@ int ath10k_mac_register(struct ath10k *a
  	ieee80211_hw_set(ar->hw, CHANCTX_STA_CSA);
  	ieee80211_hw_set(ar->hw, QUEUE_CONTROL);
  	ieee80211_hw_set(ar->hw, SUPPORTS_TX_FRAG);
diff --git a/package/kernel/mac80211/patches/ath11k/001-wifi-ath11k-Fix-DMA-buffer-allocation-to-resolve-SWIOTLB-issues.patch b/package/kernel/mac80211/patches/ath11k/001-wifi-ath11k-Fix-DMA-buffer-allocation-to-resolve-SWIOTLB-issues.patch
deleted file mode 100644
index d5d80a395d..0000000000
--- a/package/kernel/mac80211/patches/ath11k/001-wifi-ath11k-Fix-DMA-buffer-allocation-to-resolve-SWIOTLB-issues.patch
+++ /dev/null
@@ -1,91 +0,0 @@
-wifi: ath11k: Fix DMA buffer allocation to resolve SWIOTLB issues
-Currently, the driver allocates cacheable DMA buffers for rings like
-HAL_REO_DST and HAL_WBM2SW_RELEASE. The buffers for HAL_WBM2SW_RELEASE
-are large (1024 KiB), exceeding the SWIOTLB slot size of 256 KiB. This
-leads to "swiotlb buffer is full" error messages on systems without an
-IOMMU that use SWIOTLB, causing driver initialization failures. The driver
-calls dma_map_single() with these large buffers obtained from kzalloc(),
-resulting in ring initialization errors on systems without an IOMMU that
-use SWIOTLB.
-
-To address these issues, replace the flawed buffer allocation mechanism
-with the appropriate DMA API. Specifically, use dma_alloc_noncoherent()
-for cacheable DMA buffers, ensuring proper freeing of buffers with
-dma_free_noncoherent().
-
-Error log:
-[   10.194343] ath11k_pci 0000:04:00.0: swiotlb buffer is full (sz:1048583 bytes), total 32768 (slots), used 2529 (slots)
-[   10.194406] ath11k_pci 0000:04:00.0: failed to set up tcl_comp ring (0) :-12
-[   10.194781] ath11k_pci 0000:04:00.0: failed to init DP: -12
-
-Tested-on: QCN9074 hw1.0 PCI WLAN.HK.2.7.0.1-01744-QCAHKSWPL_SILICONZ-1
-Tested-on: WCN6855 hw2.0 PCI WLAN.HSP.1.1-03125-QCAHSPSWPL_V1_V2_SILICONZ_LITE-3
-
-Reported-by: Tim Harvey <tharvey@gateworks.com>
-Closes: https://lore.kernel.org/all/20241210041133.GA17116@lst.de/
-Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
-Tested-by: Tim Harvey <tharvey@gateworks.com>
-Link: https://patch.msgid.link/20250119164219.647059-2-quic_ppranees@quicinc.com
-Signed-off-by: Jeff Johnson <jeff.johnson@oss.qualcomm.com>
---- a/drivers/net/wireless/ath/ath11k/dp.c
-+++ b/drivers/net/wireless/ath/ath11k/dp.c
-@@ -1,7 +1,7 @@
- // SPDX-License-Identifier: BSD-3-Clause-Clear
- /*
-  * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.
-- * Copyright (c) 2021-2024 Qualcomm Innovation Center, Inc. All rights reserved.
-+ * Copyright (c) 2021-2025 Qualcomm Innovation Center, Inc. All rights reserved.
-  */
- 
- #include <crypto/hash.h>
-@@ -104,14 +104,12 @@ void ath11k_dp_srng_cleanup(struct ath11
- 	if (!ring->vaddr_unaligned)
- 		return;
- 
--	if (ring->cached) {
--		dma_unmap_single(ab->dev, ring->paddr_unaligned, ring->size,
--				 DMA_FROM_DEVICE);
--		kfree(ring->vaddr_unaligned);
--	} else {
-+	if (ring->cached)
-+		dma_free_noncoherent(ab->dev, ring->size, ring->vaddr_unaligned,
-+				     ring->paddr_unaligned, DMA_FROM_DEVICE);
-+	else
- 		dma_free_coherent(ab->dev, ring->size, ring->vaddr_unaligned,
- 				  ring->paddr_unaligned);
--	}
- 
- 	ring->vaddr_unaligned = NULL;
- }
-@@ -249,25 +247,14 @@ int ath11k_dp_srng_setup(struct ath11k_b
- 		default:
- 			cached = false;
- 		}
--
--		if (cached) {
--			ring->vaddr_unaligned = kzalloc(ring->size, GFP_KERNEL);
--			if (!ring->vaddr_unaligned)
--				return -ENOMEM;
--
--			ring->paddr_unaligned = dma_map_single(ab->dev,
--							       ring->vaddr_unaligned,
--							       ring->size,
--							       DMA_FROM_DEVICE);
--			if (dma_mapping_error(ab->dev, ring->paddr_unaligned)) {
--				kfree(ring->vaddr_unaligned);
--				ring->vaddr_unaligned = NULL;
--				return -ENOMEM;
--			}
--		}
- 	}
- 
--	if (!cached)
-+	if (cached)
-+		ring->vaddr_unaligned = dma_alloc_noncoherent(ab->dev, ring->size,
-+							      &ring->paddr_unaligned,
-+							      DMA_FROM_DEVICE,
-+							      GFP_KERNEL);
-+	else
- 		ring->vaddr_unaligned = dma_alloc_coherent(ab->dev, ring->size,
- 							   &ring->paddr_unaligned,
- 							   GFP_KERNEL);
diff --git a/package/kernel/mac80211/patches/ath11k/002-wifi-ath11k-use-dma-alloc-noncoherent-for-rx-tid-buffer-allocation.patch b/package/kernel/mac80211/patches/ath11k/002-wifi-ath11k-use-dma-alloc-noncoherent-for-rx-tid-buffer-allocation.patch
deleted file mode 100644
index 2257b06910..0000000000
--- a/package/kernel/mac80211/patches/ath11k/002-wifi-ath11k-use-dma-alloc-noncoherent-for-rx-tid-buffer-allocation.patch
+++ /dev/null
@@ -1,255 +0,0 @@
-wifi: ath11k: Use dma_alloc_noncoherent for rx_tid buffer allocation
-
-Currently, the driver allocates cacheable DMA buffers for the rx_tid
-structure using kzalloc() and dma_map_single(). These buffers are
-long-lived and can persist for the lifetime of the peer, which is not
-advisable. Instead of using kzalloc() and dma_map_single() for allocating
-cacheable DMA buffers, utilize the dma_alloc_noncoherent() helper for the
-allocation of long-lived cacheable DMA buffers, such as the peer's rx_tid.
-Since dma_alloc_noncoherent() returns unaligned physical and virtual
-addresses, align them internally before use within the driver. This
-ensures proper allocation of non-coherent memory through the kernel
-helper.
-
-Tested-on: QCN9074 hw1.0 PCI WLAN.HK.2.7.0.1-01744-QCAHKSWPL_SILICONZ-1
-Tested-on: WCN6855 hw2.0 PCI WLAN.HSP.1.1-03125-QCAHSPSWPL_V1_V2_SILICONZ_LITE-3
-
-Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---- a/drivers/net/wireless/ath/ath11k/dp.h
-+++ b/drivers/net/wireless/ath/ath11k/dp.h
-@@ -1,7 +1,7 @@
- /* SPDX-License-Identifier: BSD-3-Clause-Clear */
- /*
-  * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.
-- * Copyright (c) 2021-2023 Qualcomm Innovation Center, Inc. All rights reserved.
-+ * Copyright (c) 2021-2023, 2025 Qualcomm Innovation Center, Inc. All rights reserved.
-  */
- 
- #ifndef ATH11K_DP_H
-@@ -20,7 +20,6 @@ struct ath11k_ext_irq_grp;
- 
- struct dp_rx_tid {
- 	u8 tid;
--	u32 *vaddr;
- 	dma_addr_t paddr;
- 	u32 size;
- 	u32 ba_win_sz;
-@@ -37,6 +36,9 @@ struct dp_rx_tid {
- 	/* Timer info related to fragments */
- 	struct timer_list frag_timer;
- 	struct ath11k_base *ab;
-+	u32 *vaddr_unaligned;
-+	dma_addr_t paddr_unaligned;
-+	u32 unaligned_size;
- };
- 
- #define DP_REO_DESC_FREE_THRESHOLD  64
---- a/drivers/net/wireless/ath/ath11k/dp_rx.c
-+++ b/drivers/net/wireless/ath/ath11k/dp_rx.c
-@@ -1,7 +1,7 @@
- // SPDX-License-Identifier: BSD-3-Clause-Clear
- /*
-  * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.
-- * Copyright (c) 2021-2024 Qualcomm Innovation Center, Inc. All rights reserved.
-+ * Copyright (c) 2021-2025 Qualcomm Innovation Center, Inc. All rights reserved.
-  */
- 
- #include <linux/ieee80211.h>
-@@ -675,11 +675,11 @@ void ath11k_dp_reo_cmd_list_cleanup(stru
- 	list_for_each_entry_safe(cmd, tmp, &dp->reo_cmd_list, list) {
- 		list_del(&cmd->list);
- 		rx_tid = &cmd->data;
--		if (rx_tid->vaddr) {
--			dma_unmap_single(ab->dev, rx_tid->paddr,
--					 rx_tid->size, DMA_BIDIRECTIONAL);
--			kfree(rx_tid->vaddr);
--			rx_tid->vaddr = NULL;
-+		if (rx_tid->vaddr_unaligned) {
-+			dma_free_noncoherent(ab->dev, rx_tid->unaligned_size,
-+					     rx_tid->vaddr_unaligned,
-+					     rx_tid->paddr_unaligned, DMA_BIDIRECTIONAL);
-+			rx_tid->vaddr_unaligned = NULL;
- 		}
- 		kfree(cmd);
- 	}
-@@ -689,11 +689,11 @@ void ath11k_dp_reo_cmd_list_cleanup(stru
- 		list_del(&cmd_cache->list);
- 		dp->reo_cmd_cache_flush_count--;
- 		rx_tid = &cmd_cache->data;
--		if (rx_tid->vaddr) {
--			dma_unmap_single(ab->dev, rx_tid->paddr,
--					 rx_tid->size, DMA_BIDIRECTIONAL);
--			kfree(rx_tid->vaddr);
--			rx_tid->vaddr = NULL;
-+		if (rx_tid->vaddr_unaligned) {
-+			dma_free_noncoherent(ab->dev, rx_tid->unaligned_size,
-+					     rx_tid->vaddr_unaligned,
-+					     rx_tid->paddr_unaligned, DMA_BIDIRECTIONAL);
-+			rx_tid->vaddr_unaligned = NULL;
- 		}
- 		kfree(cmd_cache);
- 	}
-@@ -708,11 +708,11 @@ static void ath11k_dp_reo_cmd_free(struc
- 	if (status != HAL_REO_CMD_SUCCESS)
- 		ath11k_warn(dp->ab, "failed to flush rx tid hw desc, tid %d status %d\n",
- 			    rx_tid->tid, status);
--	if (rx_tid->vaddr) {
--		dma_unmap_single(dp->ab->dev, rx_tid->paddr, rx_tid->size,
--				 DMA_BIDIRECTIONAL);
--		kfree(rx_tid->vaddr);
--		rx_tid->vaddr = NULL;
-+	if (rx_tid->vaddr_unaligned) {
-+		dma_free_noncoherent(dp->ab->dev, rx_tid->unaligned_size,
-+				     rx_tid->vaddr_unaligned,
-+				     rx_tid->paddr_unaligned, DMA_BIDIRECTIONAL);
-+		rx_tid->vaddr_unaligned = NULL;
- 	}
- }
- 
-@@ -749,10 +749,10 @@ static void ath11k_dp_reo_cache_flush(st
- 	if (ret) {
- 		ath11k_err(ab, "failed to send HAL_REO_CMD_FLUSH_CACHE cmd, tid %d (%d)\n",
- 			   rx_tid->tid, ret);
--		dma_unmap_single(ab->dev, rx_tid->paddr, rx_tid->size,
--				 DMA_BIDIRECTIONAL);
--		kfree(rx_tid->vaddr);
--		rx_tid->vaddr = NULL;
-+		dma_free_noncoherent(ab->dev, rx_tid->unaligned_size,
-+				     rx_tid->vaddr_unaligned,
-+				     rx_tid->paddr_unaligned, DMA_BIDIRECTIONAL);
-+		rx_tid->vaddr_unaligned = NULL;
- 	}
- }
- 
-@@ -802,10 +802,10 @@ static void ath11k_dp_rx_tid_del_func(st
- 
- 	return;
- free_desc:
--	dma_unmap_single(ab->dev, rx_tid->paddr, rx_tid->size,
--			 DMA_BIDIRECTIONAL);
--	kfree(rx_tid->vaddr);
--	rx_tid->vaddr = NULL;
-+	dma_free_noncoherent(ab->dev, rx_tid->unaligned_size,
-+			     rx_tid->vaddr_unaligned,
-+			     rx_tid->paddr_unaligned, DMA_BIDIRECTIONAL);
-+	rx_tid->vaddr_unaligned = NULL;
- }
- 
- void ath11k_peer_rx_tid_delete(struct ath11k *ar,
-@@ -831,14 +831,16 @@ void ath11k_peer_rx_tid_delete(struct at
- 		if (ret != -ESHUTDOWN)
- 			ath11k_err(ar->ab, "failed to send HAL_REO_CMD_UPDATE_RX_QUEUE cmd, tid %d (%d)\n",
- 				   tid, ret);
--		dma_unmap_single(ar->ab->dev, rx_tid->paddr, rx_tid->size,
--				 DMA_BIDIRECTIONAL);
--		kfree(rx_tid->vaddr);
--		rx_tid->vaddr = NULL;
-+		dma_free_noncoherent(ar->ab->dev, rx_tid->unaligned_size,
-+				     rx_tid->vaddr_unaligned,
-+				     rx_tid->paddr_unaligned, DMA_BIDIRECTIONAL);
-+		rx_tid->vaddr_unaligned = NULL;
- 	}
- 
- 	rx_tid->paddr = 0;
-+	rx_tid->paddr_unaligned = 0;
- 	rx_tid->size = 0;
-+	rx_tid->unaligned_size = 0;
- }
- 
- static int ath11k_dp_rx_link_desc_return(struct ath11k_base *ab,
-@@ -982,10 +984,9 @@ static void ath11k_dp_rx_tid_mem_free(st
- 	if (!rx_tid->active)
- 		goto unlock_exit;
- 
--	dma_unmap_single(ab->dev, rx_tid->paddr, rx_tid->size,
--			 DMA_BIDIRECTIONAL);
--	kfree(rx_tid->vaddr);
--	rx_tid->vaddr = NULL;
-+	dma_free_noncoherent(ab->dev, rx_tid->unaligned_size, rx_tid->vaddr_unaligned,
-+			     rx_tid->paddr_unaligned, DMA_BIDIRECTIONAL);
-+	rx_tid->vaddr_unaligned = NULL;
- 
- 	rx_tid->active = false;
- 
-@@ -1000,9 +1001,8 @@ int ath11k_peer_rx_tid_setup(struct ath1
- 	struct ath11k_base *ab = ar->ab;
- 	struct ath11k_peer *peer;
- 	struct dp_rx_tid *rx_tid;
--	u32 hw_desc_sz;
--	u32 *addr_aligned;
--	void *vaddr;
-+	u32 hw_desc_sz, *vaddr;
-+	void *vaddr_unaligned;
- 	dma_addr_t paddr;
- 	int ret;
- 
-@@ -1050,37 +1050,34 @@ int ath11k_peer_rx_tid_setup(struct ath1
- 	else
- 		hw_desc_sz = ath11k_hal_reo_qdesc_size(DP_BA_WIN_SZ_MAX, tid);
- 
--	vaddr = kzalloc(hw_desc_sz + HAL_LINK_DESC_ALIGN - 1, GFP_ATOMIC);
--	if (!vaddr) {
-+	rx_tid->unaligned_size = hw_desc_sz + HAL_LINK_DESC_ALIGN - 1;
-+	vaddr_unaligned = dma_alloc_noncoherent(ab->dev, rx_tid->unaligned_size, &paddr,
-+						DMA_BIDIRECTIONAL, GFP_ATOMIC);
-+	if (!vaddr_unaligned) {
- 		spin_unlock_bh(&ab->base_lock);
- 		return -ENOMEM;
- 	}
- 
--	addr_aligned = PTR_ALIGN(vaddr, HAL_LINK_DESC_ALIGN);
--
--	ath11k_hal_reo_qdesc_setup(addr_aligned, tid, ba_win_sz,
--				   ssn, pn_type);
--
--	paddr = dma_map_single(ab->dev, addr_aligned, hw_desc_sz,
--			       DMA_BIDIRECTIONAL);
--
--	ret = dma_mapping_error(ab->dev, paddr);
--	if (ret) {
--		spin_unlock_bh(&ab->base_lock);
--		ath11k_warn(ab, "failed to setup dma map for peer %pM rx tid %d: %d\n",
--			    peer_mac, tid, ret);
--		goto err_mem_free;
--	}
--
--	rx_tid->vaddr = vaddr;
--	rx_tid->paddr = paddr;
-+	rx_tid->vaddr_unaligned = vaddr_unaligned;
-+	vaddr = PTR_ALIGN(vaddr_unaligned, HAL_LINK_DESC_ALIGN);
-+	rx_tid->paddr_unaligned = paddr;
-+	rx_tid->paddr = rx_tid->paddr_unaligned + ((unsigned long)vaddr -
-+			(unsigned long)rx_tid->vaddr_unaligned);
-+	ath11k_hal_reo_qdesc_setup(vaddr, tid, ba_win_sz, ssn, pn_type);
- 	rx_tid->size = hw_desc_sz;
- 	rx_tid->active = true;
- 
-+	/* After dma_alloc_noncoherent, vaddr is being modified for reo qdesc setup.
-+	 * Since these changes are not reflected in the device, driver now needs to
-+	 * explicitly call dma_sync_single_for_device.
-+	 */
-+	dma_sync_single_for_device(ab->dev, rx_tid->paddr,
-+				   rx_tid->size,
-+				   DMA_TO_DEVICE);
- 	spin_unlock_bh(&ab->base_lock);
- 
--	ret = ath11k_wmi_peer_rx_reorder_queue_setup(ar, vdev_id, peer_mac,
--						     paddr, tid, 1, ba_win_sz);
-+	ret = ath11k_wmi_peer_rx_reorder_queue_setup(ar, vdev_id, peer_mac, rx_tid->paddr,
-+						     tid, 1, ba_win_sz);
- 	if (ret) {
- 		ath11k_warn(ar->ab, "failed to setup rx reorder queue for peer %pM tid %d: %d\n",
- 			    peer_mac, tid, ret);
-@@ -1088,12 +1085,6 @@ int ath11k_peer_rx_tid_setup(struct ath1
- 	}
- 
- 	return ret;
--
--err_mem_free:
--	kfree(rx_tid->vaddr);
--	rx_tid->vaddr = NULL;
--
--	return ret;
- }
- 
- int ath11k_dp_rx_ampdu_start(struct ath11k *ar,
diff --git a/package/kernel/mac80211/patches/ath11k/0906-wifi-ath11k-disable-coldboot-for-ipq6018.patch b/package/kernel/mac80211/patches/ath11k/0906-wifi-ath11k-disable-coldboot-for-ipq6018.patch
index 325724e68d..132f5359b0 100644
--- a/package/kernel/mac80211/patches/ath11k/0906-wifi-ath11k-disable-coldboot-for-ipq6018.patch
+++ b/package/kernel/mac80211/patches/ath11k/0906-wifi-ath11k-disable-coldboot-for-ipq6018.patch
@@ -13,7 +13,7 @@ Signed-off-by: Mantas Pucka <mantas@8devices.com>
 
 --- a/drivers/net/wireless/ath/ath11k/core.c
 +++ b/drivers/net/wireless/ath/ath11k/core.c
-@@ -170,8 +170,8 @@ static const struct ath11k_hw_params ath
+@@ -171,8 +171,8 @@ static const struct ath11k_hw_params ath
  		.supports_shadow_regs = false,
  		.idle_ps = false,
  		.supports_sta_ps = false,
diff --git a/package/kernel/mac80211/patches/ath11k/0907-wifi-ath11k-disable-coldboot-calibration-for-ipq5018.patch b/package/kernel/mac80211/patches/ath11k/0907-wifi-ath11k-disable-coldboot-calibration-for-ipq5018.patch
new file mode 100644
index 0000000000..597d6aa445
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath11k/0907-wifi-ath11k-disable-coldboot-calibration-for-ipq5018.patch
@@ -0,0 +1,27 @@
+From b2d16b688ce04b67f2033f90f49f4add7ebd3fe8 Mon Sep 17 00:00:00 2001
+From: George Moussalem <george.moussalem@outlook.com>
+Date: Tue, 10 Jun 2025 14:34:37 +0400
+Subject: [PATCH] wifi: ath11k: disable coldboot calibration for ipq5018
+
+Coldboot calibration does not work causes the firmware to crash during
+wifi startup. So let's disable coldboot calibration until a solution is
+found.
+
+Signed-off-by: George Moussalem <george.moussalem@outlook.com>
+---
+ drivers/net/wireless/ath/ath11k/core.c | 4 ++--
+ 1 file changed, 2 insertions(+), 2 deletions(-)
+
+--- a/drivers/net/wireless/ath/ath11k/core.c
++++ b/drivers/net/wireless/ath/ath11k/core.c
+@@ -698,8 +698,8 @@ static const struct ath11k_hw_params ath
+ 		.supports_suspend = false,
+ 		.hal_params = &ath11k_hw_hal_params_ipq8074,
+ 		.single_pdev_only = false,
+-		.coldboot_cal_mm = true,
+-		.coldboot_cal_ftm = true,
++		.coldboot_cal_mm = false,
++		.coldboot_cal_ftm = false,
+ 		.cbcal_restart_fw = true,
+ 		.fix_l1ss = true,
+ 		.supports_dynamic_smps_6ghz = false,
diff --git a/package/kernel/mac80211/patches/ath11k/201-wifi-ath11k-Support-setting-bdf-addr-and-caldb-addr-.patch b/package/kernel/mac80211/patches/ath11k/201-wifi-ath11k-Support-setting-bdf-addr-and-caldb-addr-.patch
new file mode 100644
index 0000000000..40d3b8065c
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath11k/201-wifi-ath11k-Support-setting-bdf-addr-and-caldb-addr-.patch
@@ -0,0 +1,62 @@
+From 824dde8652815aa67b4e2bf2d8a9455a8ef82b8f Mon Sep 17 00:00:00 2001
+From: Ziyang Huang <hzyitc@outlook.com>
+Date: Thu, 29 Jun 2023 06:12:45 +0000
+Subject: [PATCH] wifi: ath11k: Support setting bdf-addr and caldb-addr via DT
+
+Signed-off-by: Ziyang Huang <hzyitc@outlook.com>
+---
+ drivers/net/wireless/ath/ath11k/qmi.c | 15 +++++++++++----
+ 1 file changed, 11 insertions(+), 4 deletions(-)
+
+--- a/drivers/net/wireless/ath/ath11k/qmi.c
++++ b/drivers/net/wireless/ath/ath11k/qmi.c
+@@ -2030,6 +2030,7 @@ static int ath11k_qmi_assign_target_mem_
+ 	struct device_node *hremote_node = NULL;
+ 	struct resource res;
+ 	u32 host_ddr_sz;
++	u32 addr;
+ 	int i, idx, ret;
+ 
+ 	for (i = 0, idx = 0; i < ab->qmi.mem_seg_count; i++) {
+@@ -2069,7 +2070,9 @@ static int ath11k_qmi_assign_target_mem_
+ 			idx++;
+ 			break;
+ 		case BDF_MEM_REGION_TYPE:
+-			ab->qmi.target_mem[idx].paddr = ab->hw_params.bdf_addr;
++			if(of_property_read_u32(dev->of_node, "qcom,bdf-addr", &addr))
++				addr = ab->hw_params.bdf_addr;
++			ab->qmi.target_mem[idx].paddr = addr;
+ 			ab->qmi.target_mem[idx].vaddr = NULL;
+ 			ab->qmi.target_mem[idx].size = ab->qmi.target_mem[i].size;
+ 			ab->qmi.target_mem[idx].type = ab->qmi.target_mem[i].type;
+@@ -2091,8 +2094,9 @@ static int ath11k_qmi_assign_target_mem_
+ 					if (!ab->qmi.target_mem[idx].iaddr)
+ 						return -EIO;
+ 				} else {
+-					ab->qmi.target_mem[idx].paddr =
+-						ATH11K_QMI_CALDB_ADDRESS;
++					if(of_property_read_u32(dev->of_node, "qcom,caldb-addr", &addr))
++						addr = ATH11K_QMI_CALDB_ADDRESS;
++					ab->qmi.target_mem[idx].paddr = addr;
+ 				}
+ 			} else {
+ 				ab->qmi.target_mem[idx].paddr = 0;
+@@ -2297,6 +2301,7 @@ static int ath11k_qmi_load_file_target_m
+ 	struct qmi_wlanfw_bdf_download_resp_msg_v01 resp;
+ 	struct qmi_txn txn;
+ 	const u8 *temp = data;
++	u32 addr;
+ 	void __iomem *bdf_addr = NULL;
+ 	int ret = 0;
+ 	u32 remaining = len;
+@@ -2308,7 +2313,9 @@ static int ath11k_qmi_load_file_target_m
+ 	memset(&resp, 0, sizeof(resp));
+ 
+ 	if (ab->hw_params.fixed_bdf_addr) {
+-		bdf_addr = ioremap(ab->hw_params.bdf_addr, ab->hw_params.fw.board_size);
++		if(of_property_read_u32(ab->dev->of_node, "qcom,bdf-addr", &addr))
++			addr = ab->hw_params.bdf_addr;
++		bdf_addr = ioremap(addr, ab->hw_params.fw.board_size);
+ 		if (!bdf_addr) {
+ 			ath11k_warn(ab, "qmi ioremap error for bdf_addr\n");
+ 			ret = -EIO;
diff --git a/package/kernel/mac80211/patches/ath11k/900-ath11k-control-thermal-support-via-symbol.patch b/package/kernel/mac80211/patches/ath11k/900-ath11k-control-thermal-support-via-symbol.patch
index 6a0e4ff77e..fbc26cd96b 100644
--- a/package/kernel/mac80211/patches/ath11k/900-ath11k-control-thermal-support-via-symbol.patch
+++ b/package/kernel/mac80211/patches/ath11k/900-ath11k-control-thermal-support-via-symbol.patch
@@ -56,7 +56,7 @@ Signed-off-by: Robert Marko <robimarko@gmail.com>
  int ath11k_thermal_set_throttling(struct ath11k *ar, u32 throttle_state);
 --- a/local-symbols
 +++ b/local-symbols
-@@ -168,6 +168,7 @@ ATH11K_DEBUG=
+@@ -162,6 +162,7 @@ ATH11K_DEBUG=
  ATH11K_DEBUGFS=
  ATH11K_TRACING=
  ATH11K_SPECTRAL=
diff --git a/package/kernel/mac80211/patches/ath11k/903-ath11k-support-setting-FW-memory-mode-via-DT.patch b/package/kernel/mac80211/patches/ath11k/903-ath11k-support-setting-FW-memory-mode-via-DT.patch
index 1250147e2b..4b1bd69863 100644
--- a/package/kernel/mac80211/patches/ath11k/903-ath11k-support-setting-FW-memory-mode-via-DT.patch
+++ b/package/kernel/mac80211/patches/ath11k/903-ath11k-support-setting-FW-memory-mode-via-DT.patch
@@ -31,7 +31,7 @@ Signed-off-by: Robert Marko <robimarko@gmail.com>
  	{
  		.hw_rev = ATH11K_HW_IPQ8074,
  		.name = "ipq8074 hw2.0",
-@@ -2147,7 +2147,8 @@ static void ath11k_core_reset(struct wor
+@@ -2280,7 +2280,8 @@ static void ath11k_core_reset(struct wor
  static int ath11k_init_hw_params(struct ath11k_base *ab)
  {
  	const struct ath11k_hw_params *hw_params = NULL;
@@ -41,7 +41,7 @@ Signed-off-by: Robert Marko <robimarko@gmail.com>
  
  	for (i = 0; i < ARRAY_SIZE(ath11k_hw_params); i++) {
  		hw_params = &ath11k_hw_params[i];
-@@ -2163,7 +2164,31 @@ static int ath11k_init_hw_params(struct
+@@ -2296,7 +2297,31 @@ static int ath11k_init_hw_params(struct
  
  	ab->hw_params = *hw_params;
  
diff --git a/package/kernel/mac80211/patches/ath11k/905-ath11k-remove-intersection-support-for-regulatory-ru.patch b/package/kernel/mac80211/patches/ath11k/905-ath11k-remove-intersection-support-for-regulatory-ru.patch
index f30e03475f..59a2165c0c 100644
--- a/package/kernel/mac80211/patches/ath11k/905-ath11k-remove-intersection-support-for-regulatory-ru.patch
+++ b/package/kernel/mac80211/patches/ath11k/905-ath11k-remove-intersection-support-for-regulatory-ru.patch
@@ -23,7 +23,7 @@ Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
 
 --- a/drivers/net/wireless/ath/ath11k/reg.c
 +++ b/drivers/net/wireless/ath/ath11k/reg.c
-@@ -361,134 +361,6 @@ static u32 ath11k_map_fw_phy_flags(u32 p
+@@ -353,134 +353,6 @@ static u32 ath11k_map_fw_phy_flags(u32 p
  	return flags;
  }
  
@@ -158,7 +158,7 @@ Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
  static const char *
  ath11k_reg_get_regdom_str(enum nl80211_dfs_regions dfs_region)
  {
-@@ -639,11 +511,11 @@ ath11k_reg_ap_pwr_convert(enum ieee80211
+@@ -631,11 +503,11 @@ ath11k_reg_ap_pwr_convert(enum ieee80211
  
  struct ieee80211_regdomain *
  ath11k_reg_build_regd(struct ath11k_base *ab,
@@ -172,7 +172,7 @@ Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
  	struct cur_reg_rule *reg_rule, *reg_rule_6ghz;
  	u8 i = 0, j = 0, k = 0;
  	u8 num_rules;
-@@ -686,26 +558,26 @@ ath11k_reg_build_regd(struct ath11k_base
+@@ -678,26 +550,26 @@ ath11k_reg_build_regd(struct ath11k_base
  	}
  
  	if (!num_rules)
@@ -206,7 +206,7 @@ Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
  		   reg_info->dfs_region, num_rules);
  	/* Update reg_rules[] below. Firmware is expected to
  	 * send these rules in order(2 GHz rules first and then 5 GHz)
-@@ -744,7 +616,7 @@ ath11k_reg_build_regd(struct ath11k_base
+@@ -736,7 +608,7 @@ ath11k_reg_build_regd(struct ath11k_base
  		flags |= ath11k_map_fw_reg_flags(reg_rule->flags);
  		flags |= ath11k_map_fw_phy_flags(reg_info->phybitmap);
  
@@ -215,7 +215,7 @@ Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
  				       reg_rule->start_freq,
  				       reg_rule->end_freq, max_bw,
  				       reg_rule->ant_gain, reg_rule->reg_power,
-@@ -759,7 +631,7 @@ ath11k_reg_build_regd(struct ath11k_base
+@@ -751,7 +623,7 @@ ath11k_reg_build_regd(struct ath11k_base
  		    reg_info->dfs_region == ATH11K_DFS_REG_ETSI &&
  		    (reg_rule->end_freq > ETSI_WEATHER_RADAR_BAND_LOW &&
  		    reg_rule->start_freq < ETSI_WEATHER_RADAR_BAND_HIGH)){
@@ -224,7 +224,7 @@ Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
  							     reg_rule, &i,
  							     flags, max_bw);
  			continue;
-@@ -770,51 +642,23 @@ ath11k_reg_build_regd(struct ath11k_base
+@@ -762,37 +634,20 @@ ath11k_reg_build_regd(struct ath11k_base
  				   "\t%d. (%d - %d @ %d) (%d, %d) (%d ms) (FLAGS %d) (%d, %d)\n",
  				   i + 1, reg_rule->start_freq, reg_rule->end_freq,
  				   max_bw, reg_rule->ant_gain, reg_rule->reg_power,
@@ -265,6 +265,10 @@ Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
  	return new_regd;
  }
  
+@@ -844,17 +699,6 @@ void ath11k_regd_update_chan_list_work(s
+ 	}
+ }
+ 
 -static bool ath11k_reg_is_world_alpha(char *alpha)
 -{
 -	if (alpha[0] == '0' && alpha[1] == '0')
@@ -279,7 +283,7 @@ Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
  static enum wmi_vdev_type ath11k_reg_get_ar_vdev_type(struct ath11k *ar)
  {
  	struct ath11k_vif *arvif;
-@@ -837,7 +681,6 @@ int ath11k_reg_handle_chan_list(struct a
+@@ -877,7 +721,6 @@ int ath11k_reg_handle_chan_list(struct a
  				enum ieee80211_ap_reg_power power_type)
  {
  	struct ieee80211_regdomain *regd;
@@ -287,7 +291,7 @@ Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
  	int pdev_idx;
  	struct ath11k *ar;
  	enum wmi_vdev_type vdev_type;
-@@ -889,24 +732,14 @@ int ath11k_reg_handle_chan_list(struct a
+@@ -929,24 +772,14 @@ int ath11k_reg_handle_chan_list(struct a
  		    (char *)reg_info->alpha2, 2))
  		goto retfail;
  
@@ -317,8 +321,8 @@ Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
  		goto fallback;
 --- a/drivers/net/wireless/ath/ath11k/reg.h
 +++ b/drivers/net/wireless/ath/ath11k/reg.h
-@@ -35,7 +35,7 @@ void ath11k_reg_free(struct ath11k_base
- void ath11k_regd_update_work(struct work_struct *work);
+@@ -36,7 +36,7 @@ void ath11k_regd_update_work(struct work
+ void ath11k_regd_update_chan_list_work(struct work_struct *work);
  struct ieee80211_regdomain *
  ath11k_reg_build_regd(struct ath11k_base *ab,
 -		      struct cur_regulatory_info *reg_info, bool intersect,
diff --git a/package/kernel/mac80211/patches/ath11k/910-ath11k-fix-remapped-ce-accessing-issue-on-64bit-OS.patch b/package/kernel/mac80211/patches/ath11k/910-ath11k-fix-remapped-ce-accessing-issue-on-64bit-OS.patch
new file mode 100644
index 0000000000..5878fa08df
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath11k/910-ath11k-fix-remapped-ce-accessing-issue-on-64bit-OS.patch
@@ -0,0 +1,153 @@
+From: Ziyang Huang <hzyitc@outlook.com>
+Date: Thu,  2 May 2024 00:14:31 +0800
+Subject: [PATCH] wifi: ath11k: fix remapped ce accessing issue on 64bit OS
+
+On 64bit OS, when ab->mem_ce is lower than or 4G far away from ab->mem,
+u32 is not enough to store the offsets, which makes ath11k_ahb_read32()
+and ath11k_ahb_write32() access incorrect address and causes Data Abort
+Exception.
+
+Let's use the high bits of offsets to decide where to access, which is
+similar as ath11k_pci_get_window_start() done. In the future, we can merge
+these functions for unified regs accessing.
+
+Signed-off-by: Ziyang Huang <hzyitc@outlook.com>
+---
+
+--- a/drivers/net/wireless/ath/ath11k/ahb.c
++++ b/drivers/net/wireless/ath/ath11k/ahb.c
+@@ -198,12 +198,18 @@ static const struct ath11k_pci_ops ath11
+ 
+ static inline u32 ath11k_ahb_read32(struct ath11k_base *ab, u32 offset)
+ {
+-	return ioread32(ab->mem + offset);
++	if ((offset & ATH11K_REG_TYPE_MASK) == ATH11K_REG_TYPE_CE)
++		return ioread32(ab->mem_ce + FIELD_GET(ATH11K_REG_OFFSET_MASK, offset));
++	else
++		return ioread32(ab->mem + FIELD_GET(ATH11K_REG_OFFSET_MASK, offset));
+ }
+ 
+ static inline void ath11k_ahb_write32(struct ath11k_base *ab, u32 offset, u32 value)
+ {
+-	iowrite32(value, ab->mem + offset);
++	if ((offset & ATH11K_REG_TYPE_MASK) == ATH11K_REG_TYPE_CE)
++		iowrite32(value, ab->mem_ce + FIELD_GET(ATH11K_REG_OFFSET_MASK, offset));
++	else
++		iowrite32(value, ab->mem + FIELD_GET(ATH11K_REG_OFFSET_MASK, offset));
+ }
+ 
+ static void ath11k_ahb_kill_tasklets(struct ath11k_base *ab)
+@@ -275,9 +281,9 @@ static void ath11k_ahb_ce_irq_enable(str
+ 	const struct ce_ie_addr *ce_ie_addr = ab->hw_params.ce_ie_addr;
+ 	u32 ie1_reg_addr, ie2_reg_addr, ie3_reg_addr;
+ 
+-	ie1_reg_addr = ce_ie_addr->ie1_reg_addr + ATH11K_CE_OFFSET(ab);
+-	ie2_reg_addr = ce_ie_addr->ie2_reg_addr + ATH11K_CE_OFFSET(ab);
+-	ie3_reg_addr = ce_ie_addr->ie3_reg_addr + ATH11K_CE_OFFSET(ab);
++	ie1_reg_addr = ce_ie_addr->ie1_reg_addr;
++	ie2_reg_addr = ce_ie_addr->ie2_reg_addr;
++	ie3_reg_addr = ce_ie_addr->ie3_reg_addr;
+ 
+ 	ce_attr = &ab->hw_params.host_ce_config[ce_id];
+ 	if (ce_attr->src_nentries)
+@@ -296,9 +302,9 @@ static void ath11k_ahb_ce_irq_disable(st
+ 	const struct ce_ie_addr *ce_ie_addr = ab->hw_params.ce_ie_addr;
+ 	u32 ie1_reg_addr, ie2_reg_addr, ie3_reg_addr;
+ 
+-	ie1_reg_addr = ce_ie_addr->ie1_reg_addr + ATH11K_CE_OFFSET(ab);
+-	ie2_reg_addr = ce_ie_addr->ie2_reg_addr + ATH11K_CE_OFFSET(ab);
+-	ie3_reg_addr = ce_ie_addr->ie3_reg_addr + ATH11K_CE_OFFSET(ab);
++	ie1_reg_addr = ce_ie_addr->ie1_reg_addr;
++	ie2_reg_addr = ce_ie_addr->ie2_reg_addr;
++	ie3_reg_addr = ce_ie_addr->ie3_reg_addr;
+ 
+ 	ce_attr = &ab->hw_params.host_ce_config[ce_id];
+ 	if (ce_attr->src_nentries)
+--- a/drivers/net/wireless/ath/ath11k/hal.c
++++ b/drivers/net/wireless/ath/ath11k/hal.c
+@@ -1247,20 +1247,16 @@ static int ath11k_hal_srng_create_config
+ 	s->reg_start[1] = HAL_SEQ_WCSS_UMAC_TCL_REG + HAL_TCL_STATUS_RING_HP;
+ 
+ 	s = &hal->srng_config[HAL_CE_SRC];
+-	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_CE0_SRC_REG(ab) + HAL_CE_DST_RING_BASE_LSB +
+-		ATH11K_CE_OFFSET(ab);
+-	s->reg_start[1] = HAL_SEQ_WCSS_UMAC_CE0_SRC_REG(ab) + HAL_CE_DST_RING_HP +
+-		ATH11K_CE_OFFSET(ab);
++	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_CE0_SRC_REG(ab) + HAL_CE_DST_RING_BASE_LSB;
++	s->reg_start[1] = HAL_SEQ_WCSS_UMAC_CE0_SRC_REG(ab) + HAL_CE_DST_RING_HP;
+ 	s->reg_size[0] = HAL_SEQ_WCSS_UMAC_CE1_SRC_REG(ab) -
+ 		HAL_SEQ_WCSS_UMAC_CE0_SRC_REG(ab);
+ 	s->reg_size[1] = HAL_SEQ_WCSS_UMAC_CE1_SRC_REG(ab) -
+ 		HAL_SEQ_WCSS_UMAC_CE0_SRC_REG(ab);
+ 
+ 	s = &hal->srng_config[HAL_CE_DST];
+-	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_CE0_DST_REG(ab) + HAL_CE_DST_RING_BASE_LSB +
+-		ATH11K_CE_OFFSET(ab);
+-	s->reg_start[1] = HAL_SEQ_WCSS_UMAC_CE0_DST_REG(ab) + HAL_CE_DST_RING_HP +
+-		ATH11K_CE_OFFSET(ab);
++	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_CE0_DST_REG(ab) + HAL_CE_DST_RING_BASE_LSB;
++	s->reg_start[1] = HAL_SEQ_WCSS_UMAC_CE0_DST_REG(ab) + HAL_CE_DST_RING_HP;
+ 	s->reg_size[0] = HAL_SEQ_WCSS_UMAC_CE1_DST_REG(ab) -
+ 		HAL_SEQ_WCSS_UMAC_CE0_DST_REG(ab);
+ 	s->reg_size[1] = HAL_SEQ_WCSS_UMAC_CE1_DST_REG(ab) -
+@@ -1268,9 +1264,8 @@ static int ath11k_hal_srng_create_config
+ 
+ 	s = &hal->srng_config[HAL_CE_DST_STATUS];
+ 	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_CE0_DST_REG(ab) +
+-		HAL_CE_DST_STATUS_RING_BASE_LSB + ATH11K_CE_OFFSET(ab);
+-	s->reg_start[1] = HAL_SEQ_WCSS_UMAC_CE0_DST_REG(ab) + HAL_CE_DST_STATUS_RING_HP +
+-		ATH11K_CE_OFFSET(ab);
++		HAL_CE_DST_STATUS_RING_BASE_LSB;
++	s->reg_start[1] = HAL_SEQ_WCSS_UMAC_CE0_DST_REG(ab) + HAL_CE_DST_STATUS_RING_HP;
+ 	s->reg_size[0] = HAL_SEQ_WCSS_UMAC_CE1_DST_REG(ab) -
+ 		HAL_SEQ_WCSS_UMAC_CE0_DST_REG(ab);
+ 	s->reg_size[1] = HAL_SEQ_WCSS_UMAC_CE1_DST_REG(ab) -
+--- a/drivers/net/wireless/ath/ath11k/hw.c
++++ b/drivers/net/wireless/ath/ath11k/hw.c
+@@ -2268,9 +2268,9 @@ const struct ce_ie_addr ath11k_ce_ie_add
+ };
+ 
+ const struct ce_ie_addr ath11k_ce_ie_addr_ipq5018 = {
+-	.ie1_reg_addr = CE_HOST_IPQ5018_IE_ADDRESS - HAL_IPQ5018_CE_WFSS_REG_BASE,
+-	.ie2_reg_addr = CE_HOST_IPQ5018_IE_2_ADDRESS - HAL_IPQ5018_CE_WFSS_REG_BASE,
+-	.ie3_reg_addr = CE_HOST_IPQ5018_IE_3_ADDRESS - HAL_IPQ5018_CE_WFSS_REG_BASE,
++	.ie1_reg_addr = ATH11K_REG_TYPE_CE + CE_HOST_IPQ5018_IE_ADDRESS - HAL_IPQ5018_CE_WFSS_REG_BASE,
++	.ie2_reg_addr = ATH11K_REG_TYPE_CE + CE_HOST_IPQ5018_IE_2_ADDRESS - HAL_IPQ5018_CE_WFSS_REG_BASE,
++	.ie3_reg_addr = ATH11K_REG_TYPE_CE + CE_HOST_IPQ5018_IE_3_ADDRESS - HAL_IPQ5018_CE_WFSS_REG_BASE,
+ };
+ 
+ const struct ce_remap ath11k_ce_remap_ipq5018 = {
+@@ -2801,13 +2801,13 @@ const struct ath11k_hw_regs ipq5018_regs
+ 	.hal_reo_status_hp = 0x00003070,
+ 
+ 	/* WCSS relative address */
+-	.hal_seq_wcss_umac_ce0_src_reg = 0x08400000
++	.hal_seq_wcss_umac_ce0_src_reg = ATH11K_REG_TYPE_CE + 0x08400000
+ 		- HAL_IPQ5018_CE_WFSS_REG_BASE,
+-	.hal_seq_wcss_umac_ce0_dst_reg = 0x08401000
++	.hal_seq_wcss_umac_ce0_dst_reg = ATH11K_REG_TYPE_CE + 0x08401000
+ 		- HAL_IPQ5018_CE_WFSS_REG_BASE,
+-	.hal_seq_wcss_umac_ce1_src_reg = 0x08402000
++	.hal_seq_wcss_umac_ce1_src_reg = ATH11K_REG_TYPE_CE + 0x08402000
+ 		- HAL_IPQ5018_CE_WFSS_REG_BASE,
+-	.hal_seq_wcss_umac_ce1_dst_reg = 0x08403000
++	.hal_seq_wcss_umac_ce1_dst_reg = ATH11K_REG_TYPE_CE + 0x08403000
+ 		- HAL_IPQ5018_CE_WFSS_REG_BASE,
+ 
+ 	/* WBM Idle address */
+--- a/drivers/net/wireless/ath/ath11k/hw.h
++++ b/drivers/net/wireless/ath/ath11k/hw.h
+@@ -81,7 +81,12 @@
+ #define ATH11K_M3_FILE			"m3.bin"
+ #define ATH11K_REGDB_FILE_NAME		"regdb.bin"
+ 
+-#define ATH11K_CE_OFFSET(ab)	(ab->mem_ce - ab->mem)
++#define ATH11K_REG_TYPE_MASK		GENMASK(31, 28)
++#define  ATH11K_REG_TYPE(x)		FIELD_PREP_CONST(ATH11K_REG_TYPE_MASK, x)
++#define  ATH11K_REG_TYPE_NORMAL		ATH11K_REG_TYPE(0)
++#define  ATH11K_REG_TYPE_DP		ATH11K_REG_TYPE(1)
++#define  ATH11K_REG_TYPE_CE		ATH11K_REG_TYPE(2)
++#define ATH11K_REG_OFFSET_MASK		GENMASK(27, 0)
+ 
+ enum ath11k_hw_rate_cck {
+ 	ATH11K_HW_RATE_CCK_LP_11M = 0,
diff --git a/package/kernel/mac80211/patches/ath11k/920-wifi-ath11k-add-hw-params-for-QCN6122.patch b/package/kernel/mac80211/patches/ath11k/920-wifi-ath11k-add-hw-params-for-QCN6122.patch
new file mode 100644
index 0000000000..a428684cba
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath11k/920-wifi-ath11k-add-hw-params-for-QCN6122.patch
@@ -0,0 +1,120 @@
+From: George Moussalem <george.moussalem@outlook.com>
+Date: Wed, 27 Oct 2024 16:34:11 +0400
+Subject: [PATCH] wifi: ath11k: add hw params for QCN6122
+
+Add QCN6122 platform support.
+
+QCN6122 is a PCIe based solution that is attached to and enumerated
+by the WPSS (Wireless Processor SubSystem) Q6 processor.
+
+Though it is a PCIe device, since it is not attached to APSS processor
+(Application Processor SubSystem), APSS will be unaware of such a decice
+and hence it is registered to the APSS processor as a platform device(AHB).
+Because of this hybrid nature, it is called as a hybrid bus device.
+
+As such, QCN6122 is a hybrid bus type device and follows the same codepath
+as for WCN6750.
+
+This is a heavily simplified version of below downstream patch:
+Download from https://git.codelinaro.org/clo/qsdk/oss/system/feeds/wlan-open/-/blob/NHSS.QSDK.12.4.5.r2/mac80211/patches/232-ath11k-qcn6122-support.patch
+
+Co-developed-by: George Moussalem <george.moussalem@outlook.com>
+Signed-off-by: Sowmiya Sree Elavalagan <ssreeela@codeaurora.org>
+Signed-off-by: George Moussalem <george.moussalem@outlook.com>
+---
+
+--- a/drivers/net/wireless/ath/ath11k/core.c
++++ b/drivers/net/wireless/ath/ath11k/core.c
+@@ -905,6 +905,67 @@ static struct ath11k_hw_params ath11k_hw
+ 		.support_dual_stations = true,
+ 		.pdev_suspend = false,
+ 	},
++	{
++		.hw_rev = ATH11K_HW_QCN6122_HW10,
++		.name = "qcn6122 hw1.0",
++		.fw = {
++			.dir = "QCN6122/hw1.0",
++			.board_size = 256 * 1024,
++			.cal_offset = 128 * 1024,
++		},
++		.hal_params = &ath11k_hw_hal_params_ipq8074,
++		.max_radios = MAX_RADIOS_5018,
++		.bdf_addr = 0x4D200000,
++		.hw_ops = &ipq5018_ops,
++		.hal_desc_sz = sizeof(struct hal_rx_desc_qcn9074),
++		.qmi_service_ins_id = ATH11K_QMI_WLFW_SERVICE_INS_ID_V01_QCN6122,
++		.interface_modes = BIT(NL80211_IFTYPE_STATION) |
++					BIT(NL80211_IFTYPE_AP) |
++					BIT(NL80211_IFTYPE_MESH_POINT),
++		.spectral = {
++			.fft_sz = 2,
++			.fft_pad_sz = 0,
++			.summary_pad_sz = 16,
++			.fft_hdr_len = 24,
++			.max_fft_bins = 1024,
++		},
++		.credit_flow = false,
++		.max_tx_ring = 1,
++		.supports_monitor = true,
++		.supports_shadow_regs = false,
++		.idle_ps = false,
++		.supports_suspend = false,
++		.host_ce_config = ath11k_host_ce_config_qcn9074,
++		.ce_count = CE_CNT_5018,
++		.target_ce_config = ath11k_target_ce_config_wlan_ipq5018,
++		.target_ce_count = TARGET_CE_CNT_5018,
++		.svc_to_ce_map = ath11k_target_service_to_ce_map_wlan_ipq5018,
++		.svc_to_ce_map_len = SVC_CE_MAP_LEN_5018,
++		.single_pdev_only = false,
++		.rxdma1_enable = true,
++		.num_rxdma_per_pdev = RXDMA_PER_PDEV_5018,
++		.rx_mac_buf_ring = false,
++		.vdev_start_delay = false,
++		.htt_peer_map_v2 = true,
++		.coldboot_cal_mm = false,
++		.coldboot_cal_ftm = false,
++		.cbcal_restart_fw = true,
++		.fix_l1ss = true,
++		.alloc_cacheable_memory = true,
++		.m3_fw_support = false,
++		.fixed_bdf_addr = true,
++		.fixed_mem_region = true,
++		.static_window_map = true,
++		.hybrid_bus_type = true,
++		.fw_mem_mode = 1,
++		.supports_sta_ps = false,
++		.dbr_debug_support = true,
++		.bios_sar_capa = NULL,
++		.fixed_fw_mem = false,
++		.support_off_channel_tx = false,
++		.tcl_ring_retry = true,
++		.tx_ring_size = DP_TCL_DATA_RING_SIZE,
++	},
+ };
+ 
+ static inline struct ath11k_pdev *ath11k_core_get_single_pdev(struct ath11k_base *ab)
+--- a/drivers/net/wireless/ath/ath11k/core.h
++++ b/drivers/net/wireless/ath/ath11k/core.h
+@@ -149,6 +149,7 @@ enum ath11k_hw_rev {
+ 	ATH11K_HW_IPQ5018_HW10,
+ 	ATH11K_HW_QCA2066_HW21,
+ 	ATH11K_HW_QCA6698AQ_HW21,
++	ATH11K_HW_QCN6122_HW10,
+ };
+ 
+ enum ath11k_firmware_mode {
+--- a/drivers/net/wireless/ath/ath11k/qmi.h
++++ b/drivers/net/wireless/ath/ath11k/qmi.h
+@@ -22,10 +22,11 @@
+ #define ATH11K_QMI_WLFW_SERVICE_INS_ID_V01_IPQ8074	0x02
+ #define ATH11K_QMI_WLFW_SERVICE_INS_ID_V01_QCN9074	0x07
+ #define ATH11K_QMI_WLFW_SERVICE_INS_ID_V01_WCN6750	0x03
++#define ATH11K_QMI_WLFW_SERVICE_INS_ID_V01_QCN6122	0x40
+ #define ATH11K_QMI_WLANFW_MAX_TIMESTAMP_LEN_V01	32
+ #define ATH11K_QMI_RESP_LEN_MAX			8192
+ #define ATH11K_QMI_WLANFW_MAX_NUM_MEM_SEG_V01	52
+-#define ATH11K_QMI_CALDB_SIZE			0x480000
++#define ATH11K_QMI_CALDB_SIZE			0x500000
+ #define ATH11K_QMI_BDF_EXT_STR_LENGTH		0x20
+ #define ATH11K_QMI_FW_MEM_REQ_SEGMENT_CNT	5
+ 
diff --git a/package/kernel/mac80211/patches/ath11k/921-wifi-ath11k-add-hal-regs-for-QCN6122.patch b/package/kernel/mac80211/patches/ath11k/921-wifi-ath11k-add-hal-regs-for-QCN6122.patch
new file mode 100644
index 0000000000..4ecf1d3471
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath11k/921-wifi-ath11k-add-hal-regs-for-QCN6122.patch
@@ -0,0 +1,114 @@
+From: George Moussalem <george.moussalem@outlook.com>
+Date: Wed, 27 Oct 2024 16:34:11 +0400
+Subject: [PATCH] wifi: ath11k: add hal regs for QCN6122
+
+Add HAL changes required to support QCN6122. Offsets are similar to those of 
+WCN6750 but QCN6122 does not use the hal_shadow_base_addr, so add platform 
+specific ath11k_hw_regs and register them in hw params.
+
+Signed-off-by: George Moussalem <george.moussalem@outlook.com>
+---
+--- a/drivers/net/wireless/ath/ath11k/core.c
++++ b/drivers/net/wireless/ath/ath11k/core.c
+@@ -918,6 +918,7 @@ static struct ath11k_hw_params ath11k_hw
+ 		.bdf_addr = 0x4D200000,
+ 		.hw_ops = &ipq5018_ops,
+ 		.hal_desc_sz = sizeof(struct hal_rx_desc_qcn9074),
++		.regs = &qcn6122_regs,
+ 		.qmi_service_ins_id = ATH11K_QMI_WLFW_SERVICE_INS_ID_V01_QCN6122,
+ 		.interface_modes = BIT(NL80211_IFTYPE_STATION) |
+ 					BIT(NL80211_IFTYPE_AP) |
+--- a/drivers/net/wireless/ath/ath11k/hw.c
++++ b/drivers/net/wireless/ath/ath11k/hw.c
+@@ -2822,6 +2822,81 @@ const struct ath11k_hw_regs ipq5018_regs
+ 	.hal_wbm1_release_ring_base_lsb = 0x0000097c,
+ };
+ 
++const struct ath11k_hw_regs qcn6122_regs = {
++	/* SW2TCL(x) R0 ring configuration address */
++	.hal_tcl1_ring_base_lsb = 0x00000694,
++	.hal_tcl1_ring_base_msb = 0x00000698,
++	.hal_tcl1_ring_id = 0x0000069c,
++	.hal_tcl1_ring_misc = 0x000006a4,
++	.hal_tcl1_ring_tp_addr_lsb = 0x000006b0,
++	.hal_tcl1_ring_tp_addr_msb = 0x000006b4,
++	.hal_tcl1_ring_consumer_int_setup_ix0 = 0x000006c4,
++	.hal_tcl1_ring_consumer_int_setup_ix1 = 0x000006c8,
++	.hal_tcl1_ring_msi1_base_lsb = 0x000006dc,
++	.hal_tcl1_ring_msi1_base_msb = 0x000006e0,
++	.hal_tcl1_ring_msi1_data = 0x000006e4,
++	.hal_tcl2_ring_base_lsb = 0x000006ec,
++	.hal_tcl_ring_base_lsb = 0x0000079c,
++
++	/* TCL STATUS ring address */
++	.hal_tcl_status_ring_base_lsb = 0x000008a4,
++
++	/* REO2SW(x) R0 ring configuration address */
++	.hal_reo1_ring_base_lsb = 0x000001ec,
++	.hal_reo1_ring_base_msb = 0x000001f0,
++	.hal_reo1_ring_id = 0x000001f4,
++	.hal_reo1_ring_misc = 0x000001fc,
++	.hal_reo1_ring_hp_addr_lsb = 0x00000200,
++	.hal_reo1_ring_hp_addr_msb = 0x00000204,
++	.hal_reo1_ring_producer_int_setup = 0x00000210,
++	.hal_reo1_ring_msi1_base_lsb = 0x00000234,
++	.hal_reo1_ring_msi1_base_msb = 0x00000238,
++	.hal_reo1_ring_msi1_data = 0x0000023c,
++	.hal_reo2_ring_base_lsb = 0x00000244,
++	.hal_reo1_aging_thresh_ix_0 = 0x00000564,
++	.hal_reo1_aging_thresh_ix_1 = 0x00000568,
++	.hal_reo1_aging_thresh_ix_2 = 0x0000056c,
++	.hal_reo1_aging_thresh_ix_3 = 0x00000570,
++
++	/* REO2SW(x) R2 ring pointers (head/tail) address */
++	.hal_reo1_ring_hp = 0x00003028,
++	.hal_reo1_ring_tp = 0x0000302c,
++	.hal_reo2_ring_hp = 0x00003030,
++
++	/* REO2TCL R0 ring configuration address */
++	.hal_reo_tcl_ring_base_lsb = 0x000003fc,
++	.hal_reo_tcl_ring_hp = 0x00003058,
++
++	/* SW2REO ring address */
++	.hal_sw2reo_ring_base_lsb = 0x0000013c,
++	.hal_sw2reo_ring_hp = 0x00003018,
++
++	/* REO CMD ring address */
++	.hal_reo_cmd_ring_base_lsb = 0x000000e4,
++	.hal_reo_cmd_ring_hp = 0x00003010,
++
++	/* REO status address */
++	.hal_reo_status_ring_base_lsb = 0x00000504,
++	.hal_reo_status_hp = 0x00003070,
++
++	/* WCSS relative address */
++	.hal_seq_wcss_umac_ce0_src_reg = 0x01b80000,
++	.hal_seq_wcss_umac_ce0_dst_reg = 0x01b81000,
++	.hal_seq_wcss_umac_ce1_src_reg = 0x01b82000,
++	.hal_seq_wcss_umac_ce1_dst_reg = 0x01b83000,
++
++	/* WBM Idle address */
++	.hal_wbm_idle_link_ring_base_lsb = 0x00000874,
++	.hal_wbm_idle_link_ring_misc = 0x00000884,
++
++	/* SW2WBM release address */
++	.hal_wbm_release_ring_base_lsb = 0x000001ec,
++
++	/* WBM2SW release address */
++	.hal_wbm0_release_ring_base_lsb = 0x00000924,
++	.hal_wbm1_release_ring_base_lsb = 0x0000097c,
++};
++
+ const struct ath11k_hw_hal_params ath11k_hw_hal_params_ipq8074 = {
+ 	.rx_buf_rbm = HAL_RX_BUF_RBM_SW3_BM,
+ 	.tcl2wbm_rbm_map = ath11k_hw_tcl2wbm_rbm_map_ipq8074,
+--- a/drivers/net/wireless/ath/ath11k/hw.h
++++ b/drivers/net/wireless/ath/ath11k/hw.h
+@@ -426,6 +426,7 @@ extern const struct ath11k_hw_regs qcn90
+ extern const struct ath11k_hw_regs wcn6855_regs;
+ extern const struct ath11k_hw_regs wcn6750_regs;
+ extern const struct ath11k_hw_regs ipq5018_regs;
++extern const struct ath11k_hw_regs qcn6122_regs;
+ 
+ static inline const char *ath11k_bd_ie_type_str(enum ath11k_bd_ie_type type)
+ {
diff --git a/package/kernel/mac80211/patches/ath11k/922-wifi-ath11k-add-hw-ring-mask-for-QCN6122.patch b/package/kernel/mac80211/patches/ath11k/922-wifi-ath11k-add-hw-ring-mask-for-QCN6122.patch
new file mode 100644
index 0000000000..b54461f74f
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath11k/922-wifi-ath11k-add-hw-ring-mask-for-QCN6122.patch
@@ -0,0 +1,74 @@
+From: George Moussalem <george.moussalem@outlook.com>
+Date: Wed, 27 Oct 2024 16:34:11 +0400
+Subject: [PATCH] wifi: ath11k: add hw ring mask for QCN6122
+
+Add ring mask for QCN6122 and register them in hw params.
+
+Signed-off-by: George Moussalem <george.moussalem@outlook.com>
+---
+--- a/drivers/net/wireless/ath/ath11k/core.c
++++ b/drivers/net/wireless/ath/ath11k/core.c
+@@ -917,6 +917,7 @@ static struct ath11k_hw_params ath11k_hw
+ 		.max_radios = MAX_RADIOS_5018,
+ 		.bdf_addr = 0x4D200000,
+ 		.hw_ops = &ipq5018_ops,
++		.ring_mask = &ath11k_hw_ring_mask_qcn6122,
+ 		.hal_desc_sz = sizeof(struct hal_rx_desc_qcn9074),
+ 		.regs = &qcn6122_regs,
+ 		.qmi_service_ins_id = ATH11K_QMI_WLFW_SERVICE_INS_ID_V01_QCN6122,
+--- a/drivers/net/wireless/ath/ath11k/hw.c
++++ b/drivers/net/wireless/ath/ath11k/hw.c
+@@ -2070,6 +2070,43 @@ const struct ath11k_hw_ring_mask ath11k_
+ 	},
+ };
+ 
++const struct ath11k_hw_ring_mask ath11k_hw_ring_mask_qcn6122 = {
++	.tx  = {
++		ATH11K_TX_RING_MASK_0,
++		ATH11K_TX_RING_MASK_1,
++		ATH11K_TX_RING_MASK_2,
++	},
++	.rx_mon_status = {
++		0, 0, 0,
++		ATH11K_RX_MON_STATUS_RING_MASK_0,
++	},
++	.rx = {
++		0, 0, 0, 0,
++		ATH11K_RX_RING_MASK_0,
++		ATH11K_RX_RING_MASK_1,
++		ATH11K_RX_RING_MASK_2,
++		ATH11K_RX_RING_MASK_3,
++	},
++	.rx_err = {
++		0, 0, 0, 0, 0, 0, 0, 0,
++		ATH11K_RX_ERR_RING_MASK_0,
++	},
++	.rx_wbm_rel = {
++		0, 0, 0, 0, 0, 0, 0, 0, 0,
++		ATH11K_RX_WBM_REL_RING_MASK_0,
++	},
++       .reo_status = {
++		0, 0, 0,
++		ATH11K_REO_STATUS_RING_MASK_0,
++	},
++	.rxdma2host = {
++		ATH11K_RXDMA2HOST_RING_MASK_0,
++	},
++	.host2rxdma = {
++		ATH11K_HOST2RXDMA_RING_MASK_0,
++	},
++};
++
+ /* Target firmware's Copy Engine configuration for IPQ5018 */
+ const struct ce_pipe_config ath11k_target_ce_config_wlan_ipq5018[] = {
+ 	/* CE0: host->target HTC control and raw streams */
+--- a/drivers/net/wireless/ath/ath11k/hw.h
++++ b/drivers/net/wireless/ath/ath11k/hw.h
+@@ -290,6 +290,7 @@ extern const struct ath11k_hw_ring_mask
+ extern const struct ath11k_hw_ring_mask ath11k_hw_ring_mask_qca6390;
+ extern const struct ath11k_hw_ring_mask ath11k_hw_ring_mask_qcn9074;
+ extern const struct ath11k_hw_ring_mask ath11k_hw_ring_mask_wcn6750;
++extern const struct ath11k_hw_ring_mask ath11k_hw_ring_mask_qcn6122;
+ 
+ extern const struct ce_ie_addr ath11k_ce_ie_addr_ipq8074;
+ extern const struct ce_ie_addr ath11k_ce_ie_addr_ipq5018;
diff --git a/package/kernel/mac80211/patches/ath11k/923-wifi-ath11k-update-hif_and-pci_ops-for-QCN6122.patch b/package/kernel/mac80211/patches/ath11k/923-wifi-ath11k-update-hif_and-pci_ops-for-QCN6122.patch
new file mode 100644
index 0000000000..07eaf87279
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath11k/923-wifi-ath11k-update-hif_and-pci_ops-for-QCN6122.patch
@@ -0,0 +1,102 @@
+From: George Moussalem <george.moussalem@outlook.com>
+Date: Wed, 27 Oct 2024 16:34:11 +0400
+Subject: [PATCH] wifi: ath11k: update hif and pci ops for QCN6122
+
+Add HIF and PCI ops for QCN6122. QCN6122 by default uses DP window 3.
+However, this is configurable, so let's introduce a function to do that and
+follow the existing register access code for (hybrid)AHB devices and use 
+DP window 1.
+
+Signed-off-by: George Moussalem <george.moussalem@outlook.com>
+---
+--- a/drivers/net/wireless/ath/ath11k/ahb.c
++++ b/drivers/net/wireless/ath/ath11k/ahb.c
+@@ -768,6 +768,18 @@ static int ath11k_ahb_hif_resume(struct
+ 	return 0;
+ }
+ 
++static void ath11k_ahb_config_static_window_qcn6122(struct ath11k_base *ab)
++{
++	u32 umac_window = FIELD_GET(ATH11K_PCI_WINDOW_VALUE_MASK, HAL_SEQ_WCSS_UMAC_OFFSET);
++	u32 ce_window = FIELD_GET(ATH11K_PCI_WINDOW_VALUE_MASK, HAL_CE_WFSS_CE_REG_BASE);
++	u32 window;
++
++	window = (umac_window) | (ce_window << 6);
++
++	iowrite32(ATH11K_PCI_WINDOW_ENABLE_BIT | window,
++		  ab->mem + ATH11K_PCI_WINDOW_REG_ADDRESS);
++}
++
+ static const struct ath11k_hif_ops ath11k_ahb_hif_ops_ipq8074 = {
+ 	.start = ath11k_ahb_start,
+ 	.stop = ath11k_ahb_stop,
+@@ -800,6 +812,24 @@ static const struct ath11k_hif_ops ath11
+ 	.ce_irq_disable = ath11k_pci_disable_ce_irqs_except_wake_irq,
+ };
+ 
++static const struct ath11k_hif_ops ath11k_ahb_hif_ops_qcn6122 = {
++	.start = ath11k_pcic_start,
++	.stop = ath11k_pcic_stop,
++	.read32 = ath11k_pcic_read32,
++	.write32 = ath11k_pcic_write32,
++	.read = NULL,
++	.irq_enable = ath11k_pcic_ext_irq_enable,
++	.irq_disable = ath11k_pcic_ext_irq_disable,
++	.get_msi_address =  ath11k_pcic_get_msi_address,
++	.get_user_msi_vector = ath11k_pcic_get_user_msi_assignment,
++	.map_service_to_pipe = ath11k_pcic_map_service_to_pipe,
++	.power_down = ath11k_ahb_power_down,
++	.power_up = ath11k_ahb_power_up,
++	.ce_irq_enable = ath11k_pci_enable_ce_irqs_except_wake_irq,
++	.ce_irq_disable = ath11k_pci_disable_ce_irqs_except_wake_irq,
++	.config_static_window = ath11k_ahb_config_static_window_qcn6122,
++};
++
+ static int ath11k_core_get_rproc(struct ath11k_base *ab)
+ {
+ 	struct ath11k_ahb *ab_ahb = ath11k_ahb_priv(ab);
+@@ -1144,6 +1174,10 @@ static int ath11k_ahb_probe(struct platf
+ 		hif_ops = &ath11k_ahb_hif_ops_wcn6750;
+ 		pci_ops = &ath11k_ahb_pci_ops_wcn6750;
+ 		break;
++	case ATH11K_HW_QCN6122_HW10:
++		hif_ops = &ath11k_ahb_hif_ops_qcn6122;
++		pci_ops = &ath11k_ahb_pci_ops_wcn6750;
++		break;
+ 	default:
+ 		dev_err(&pdev->dev, "unsupported device type %d\n", hw_rev);
+ 		return -EOPNOTSUPP;
+--- a/drivers/net/wireless/ath/ath11k/hif.h
++++ b/drivers/net/wireless/ath/ath11k/hif.h
+@@ -31,6 +31,7 @@ struct ath11k_hif_ops {
+ 	void (*ce_irq_enable)(struct ath11k_base *ab);
+ 	void (*ce_irq_disable)(struct ath11k_base *ab);
+ 	void (*get_ce_msi_idx)(struct ath11k_base *ab, u32 ce_id, u32 *msi_idx);
++	void (*config_static_window)(struct ath11k_base *ab);
+ };
+ 
+ static inline void ath11k_hif_ce_irq_enable(struct ath11k_base *ab)
+@@ -146,4 +147,12 @@ static inline void ath11k_get_ce_msi_idx
+ 		*msi_data_idx = ce_id;
+ }
+ 
++static inline void ath11k_hif_config_static_window(struct ath11k_base *ab)
++{
++	if (!ab->hw_params.static_window_map || !ab->hif.ops->config_static_window)
++		return;
++
++	ab->hif.ops->config_static_window(ab);
++}
++
+ #endif /* _HIF_H_ */
+--- a/drivers/net/wireless/ath/ath11k/qmi.c
++++ b/drivers/net/wireless/ath/ath11k/qmi.c
+@@ -2189,6 +2189,8 @@ static int ath11k_qmi_request_device_inf
+ 	if (!ab->hw_params.ce_remap)
+ 		ab->mem_ce = ab->mem;
+ 
++	ath11k_hif_config_static_window(ab);
++
+ 	return 0;
+ out:
+ 	return ret;
diff --git a/package/kernel/mac80211/patches/ath11k/924-wifi-ath11k-add-multipd-support-for-QCN6122.patch b/package/kernel/mac80211/patches/ath11k/924-wifi-ath11k-add-multipd-support-for-QCN6122.patch
new file mode 100644
index 0000000000..e73b8da379
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath11k/924-wifi-ath11k-add-multipd-support-for-QCN6122.patch
@@ -0,0 +1,110 @@
+From: George Moussalem <george.moussalem@outlook.com>
+Date: Wed, 27 Oct 2024 16:34:11 +0400
+Subject: [PATCH] wifi: ath11k: add multipd support for QCN6122
+
+IPQ5018/QCN6122 platforms use multi PD (protection domains) to avoid having 
+one instance of the running Q6 firmware crashing resulting in crashing the 
+others. See below patch for more info:
+https://lore.kernel.org/all/20231110091939.3025413-1-quic_mmanikan@quicinc.com/
+
+The IPQ5018 platform can have multiple (2) QCN6122 wifi cards. To differentiate
+the two, the PD instance number (1 or 2) is added to the QMI service instance
+ID, which the QCN6122 firmware also expects. IPQ5018 is always the first PD, so
+the QCN6122 cards should be the second or third.
+
+Signed-off-by: George Moussalem <george.moussalem@outlook.com>
+---
+--- a/drivers/net/wireless/ath/ath11k/ahb.c
++++ b/drivers/net/wireless/ath/ath11k/ahb.c
+@@ -435,6 +435,7 @@ static void ath11k_ahb_init_qmi_ce_confi
+ 	cfg->svc_to_ce_map_len = ab->hw_params.svc_to_ce_map_len;
+ 	cfg->svc_to_ce_map = ab->hw_params.svc_to_ce_map;
+ 	ab->qmi.service_ins_id = ab->hw_params.qmi_service_ins_id;
++	ab->qmi.service_ins_id += ab->userpd_id;
+ }
+ 
+ static void ath11k_ahb_free_ext_irq(struct ath11k_base *ab)
+@@ -1118,6 +1119,27 @@ err_unregister:
+ 	return ret;
+ }
+ 
++static int ath11k_get_userpd_id(struct device *dev)
++{
++	int ret;
++	int userpd_id = 0;
++	const char *subsys_name;
++
++	ret = of_property_read_string(dev->of_node,
++				      "qcom,userpd-subsys-name",
++				      &subsys_name);
++	if (ret) 
++		return 0;
++
++	if (strcmp(subsys_name, "q6v5_wcss_userpd2") == 0)
++		userpd_id = ATH11K_QCN6122_USERPD_2;
++	else if (strcmp(subsys_name, "q6v5_wcss_userpd3") == 0)
++		userpd_id = ATH11K_QCN6122_USERPD_3;
++	dev_info(dev, "Multipd architecture - userpd: %d\n", userpd_id + 1);
++
++	return userpd_id;
++}
++
+ static int ath11k_ahb_fw_resource_deinit(struct ath11k_base *ab)
+ {
+ 	struct ath11k_ahb *ab_ahb = ath11k_ahb_priv(ab);
+@@ -1159,7 +1181,7 @@ static int ath11k_ahb_probe(struct platf
+ 	const struct ath11k_hif_ops *hif_ops;
+ 	const struct ath11k_pci_ops *pci_ops;
+ 	enum ath11k_hw_rev hw_rev;
+-	int ret;
++	int ret, userpd_id;
+ 
+ 	hw_rev = (uintptr_t)device_get_match_data(&pdev->dev);
+ 
+@@ -1183,6 +1205,7 @@ static int ath11k_ahb_probe(struct platf
+ 		return -EOPNOTSUPP;
+ 	}
+ 
++	userpd_id = ath11k_get_userpd_id(&pdev->dev);
+ 	ret = dma_set_mask_and_coherent(&pdev->dev, DMA_BIT_MASK(32));
+ 	if (ret) {
+ 		dev_err(&pdev->dev, "failed to set 32-bit consistent dma\n");
+@@ -1199,6 +1222,7 @@ static int ath11k_ahb_probe(struct platf
+ 	ab->hif.ops = hif_ops;
+ 	ab->pdev = pdev;
+ 	ab->hw_rev = hw_rev;
++	ab->userpd_id = userpd_id;
+ 	ab->fw_mode = ATH11K_FIRMWARE_MODE_NORMAL;
+ 	platform_set_drvdata(pdev, ab);
+ 
+--- a/drivers/net/wireless/ath/ath11k/core.h
++++ b/drivers/net/wireless/ath/ath11k/core.h
+@@ -45,6 +45,9 @@
+ #define ATH11K_INVALID_HW_MAC_ID	0xFF
+ #define ATH11K_CONNECTION_LOSS_HZ	(3 * HZ)
+ 
++#define	ATH11K_QCN6122_USERPD_2		1
++#define	ATH11K_QCN6122_USERPD_3		2
++
+ /* SMBIOS type containing Board Data File Name Extension */
+ #define ATH11K_SMBIOS_BDF_EXT_TYPE 0xF8
+ 
+@@ -952,6 +955,7 @@ struct ath11k_base {
+ 	struct list_head peers;
+ 	wait_queue_head_t peer_mapping_wq;
+ 	u8 mac_addr[ETH_ALEN];
++	int userpd_id;
+ 	int irq_num[ATH11K_IRQ_NUM_MAX];
+ 	struct ath11k_ext_irq_grp ext_irq_grp[ATH11K_EXT_IRQ_GRP_NUM_MAX];
+ 	struct ath11k_targ_cap target_caps;
+--- a/drivers/net/wireless/ath/ath11k/pci.c
++++ b/drivers/net/wireless/ath/ath11k/pci.c
+@@ -389,6 +389,8 @@ static void ath11k_pci_init_qmi_ce_confi
+ 	} else
+ 		ab->qmi.service_ins_id = ab->hw_params.qmi_service_ins_id;
+ 
++	ab->qmi.service_ins_id += ab->userpd_id;
++
+ 	ath11k_ce_get_shadow_config(ab, &cfg->shadow_reg_v2,
+ 				    &cfg->shadow_reg_v2_len);
+ }
diff --git a/package/kernel/mac80211/patches/ath11k/925-wifi-ath11k-add-QCN6122-device-support.patch b/package/kernel/mac80211/patches/ath11k/925-wifi-ath11k-add-QCN6122-device-support.patch
new file mode 100644
index 0000000000..b8b12ddf23
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath11k/925-wifi-ath11k-add-QCN6122-device-support.patch
@@ -0,0 +1,55 @@
+From: George Moussalem <george.moussalem@outlook.com>
+Date: Wed, 27 Oct 2024 16:34:11 +0400
+Subject: [PATCH] wifi: ath11k: add QCN6122 device support
+
+QCN6122 is a 2x2 11AX PCIe based chipset, but it is attached to the WPSS
+(Wireless Processor SubSystem) Q6 processor, hence it is enumerated
+by the Q6 processor. It is registered to the APSS processor 
+(Application Processor SubSystem) as a platform device (AHB) and remoteproc 
+APIs are used to boot up or shutdown the device like other AHB devices.
+
+Also, device information like BAR and its size is not known to the
+APSS processor as the chip is enumerated by WPSS Q6. These details
+are fetched over QMI.
+
+STA, AP, and MESH modes are supported. 
+Tested on: Linksys MX2000 and GLiNET B3000 access points for prolonged duration
+tests spanning multiple days with multiple clients connected with firmware
+WLAN.HK.2.7.0.1-01744-QCAHKSWPL_SILICONZ-1
+
+An important point to note is that though QCN6122 is a PCIe device,
+it is an IPQ5018 SoC specific solution and cannot be attached to any other 
+platform.
+
+Signed-off-by: George Moussalem <george.moussalem@outlook.com>
+---
+--- a/drivers/net/wireless/ath/ath11k/ahb.c
++++ b/drivers/net/wireless/ath/ath11k/ahb.c
+@@ -37,6 +37,9 @@ static const struct of_device_id ath11k_
+ 	{ .compatible = "qcom,ipq5018-wifi",
+ 	  .data = (void *)ATH11K_HW_IPQ5018_HW10,
+ 	},
++	{ .compatible = "qcom,qcn6122-wifi",
++	  .data = (void *)ATH11K_HW_QCN6122_HW10,
++	},
+ 	{ }
+ };
+ 
+--- a/drivers/net/wireless/ath/ath11k/pcic.c
++++ b/drivers/net/wireless/ath/ath11k/pcic.c
+@@ -137,6 +137,15 @@ static const struct ath11k_msi_config at
+ 		},
+ 		.hw_rev = ATH11K_HW_QCA6698AQ_HW21,
+ 	},
++	{
++		.total_vectors = 13,
++		.total_users = 2,
++		.users = (struct ath11k_msi_user[]) {
++			{ .name = "CE", .num_vectors = 5, .base_vector = 0 },
++			{ .name = "DP", .num_vectors = 8, .base_vector = 5 },
++		},
++		.hw_rev = ATH11K_HW_QCN6122_HW10,
++	},
+ };
+ 
+ int ath11k_pcic_init_msi_config(struct ath11k_base *ab)
diff --git a/package/kernel/mac80211/patches/ath11k/931-wifi-ath11k-Support-to-assign-m3-dump-memory.patch b/package/kernel/mac80211/patches/ath11k/931-wifi-ath11k-Support-to-assign-m3-dump-memory.patch
new file mode 100644
index 0000000000..3339cfc43c
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath11k/931-wifi-ath11k-Support-to-assign-m3-dump-memory.patch
@@ -0,0 +1,31 @@
+From 64f6f6cdde0b6b763181145a698207fad4536c06 Mon Sep 17 00:00:00 2001
+From: Ziyang Huang <hzyitc@outlook.com>
+Date: Wed, 9 Aug 2023 17:44:49 +0000
+Subject: [PATCH] wifi: ath11k: Support to assign m3 dump memory
+
+Signed-off-by: Ziyang Huang <hzyitc@outlook.com>
+---
+ drivers/net/wireless/ath/ath11k/qmi.c | 12 ++++++++++++
+ 1 file changed, 12 insertions(+)
+
+--- a/drivers/net/wireless/ath/ath11k/qmi.c
++++ b/drivers/net/wireless/ath/ath11k/qmi.c
+@@ -2106,6 +2106,18 @@ static int ath11k_qmi_assign_target_mem_
+ 			ab->qmi.target_mem[idx].type = ab->qmi.target_mem[i].type;
+ 			idx++;
+ 			break;
++		case M3_DUMP_REGION_TYPE:
++			if (of_property_read_u32(dev->of_node, "qcom,m3-dump-addr", &addr)) {
++				ath11k_warn(ab, "qmi fail to get qcom,m3-dump-addr, ignore m3 dump mem req\n");
++				break;
++			}
++
++			ab->qmi.target_mem[idx].paddr = (phys_addr_t) addr;
++			ab->qmi.target_mem[idx].vaddr = NULL;
++			ab->qmi.target_mem[idx].size = ab->qmi.target_mem[i].size;
++			ab->qmi.target_mem[idx].type = ab->qmi.target_mem[i].type;
++			idx++;
++			break;
+ 		default:
+ 			ath11k_warn(ab, "qmi ignore invalid mem req type %d\n",
+ 				    ab->qmi.target_mem[i].type);
diff --git a/package/kernel/mac80211/patches/ath11k/932-wifi-ath11k-poll-reo-status-ipq5018.patch b/package/kernel/mac80211/patches/ath11k/932-wifi-ath11k-poll-reo-status-ipq5018.patch
new file mode 100644
index 0000000000..894346652f
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath11k/932-wifi-ath11k-poll-reo-status-ipq5018.patch
@@ -0,0 +1,164 @@
+From d890c6d602307c9297df12c7d0287f9ffd26208b Mon Sep 17 00:00:00 2001
+From: Sriram R <srirrama@codeaurora.org>
+Date: Wed, 12 May 2021 19:21:09 +0530
+Subject: [PATCH] ath11k: poll reo status ring for IPQ5018
+
+Currently reo status interrupts are not received
+due to wrong mapping of the reo status interrupt
+line in IPQ5018.
+
+Hence, until the mapping is resolved in HW, use
+polling to reap the reo status ring. Rather than
+a period timer to reap the ring, the timer is
+triggered only on sending a reo command with
+status request.
+
+Without proper reaping of the ring, backpressure
+and ring full issues are seen in multi client test
+setups which leads to flooding the console with
+error messages reporting failure to send reo cmds.
+
+Can be reverted once HW solution is available.
+
+Signed-off-by: Sriram R <srirrama@codeaurora.org>
+---
+--- a/drivers/net/wireless/ath/ath11k/core.c
++++ b/drivers/net/wireless/ath/ath11k/core.c
+@@ -727,6 +727,7 @@ static struct ath11k_hw_params ath11k_hw
+ 		.support_fw_mac_sequence = false,
+ 		.support_dual_stations = false,
+ 		.pdev_suspend = false,
++		.reo_status_poll = true,
+ 	},
+ 	{
+ 		.name = "qca2066 hw2.1",
+--- a/drivers/net/wireless/ath/ath11k/dp.c
++++ b/drivers/net/wireless/ath/ath11k/dp.c
+@@ -348,12 +348,66 @@ void ath11k_dp_stop_shadow_timers(struct
+ 	ath11k_dp_shadow_stop_timer(ab, &ab->dp.reo_cmd_timer);
+ }
+ 
++static void ath11k_dp_handle_reo_status_timer(struct timer_list *timer)
++{
++	struct ath11k_dp *dp = from_timer(dp, timer, reo_status_timer);
++	struct ath11k_base *ab = dp->ab;
++
++	spin_lock_bh(&dp->reo_cmd_lock);
++	dp->reo_status_timer_running = false;
++	spin_unlock_bh(&dp->reo_cmd_lock);
++
++	ath11k_dp_process_reo_status(ab);
++}
++
++void ath11k_dp_start_reo_status_timer(struct ath11k_base *ab)
++{
++	struct ath11k_dp *dp = &ab->dp;
++
++	if (!ab->hw_params.reo_status_poll)
++		return;
++
++	spin_lock_bh(&dp->reo_cmd_lock);
++	if (dp->reo_status_timer_running) {
++		spin_unlock_bh(&dp->reo_cmd_lock);
++		return;
++	}
++	dp->reo_status_timer_running = true;
++	spin_unlock_bh(&dp->reo_cmd_lock);
++
++	mod_timer(&dp->reo_status_timer, jiffies +
++		  msecs_to_jiffies(ATH11K_REO_STATUS_POLL_TIMEOUT_MS));
++}
++
++static void ath11k_dp_stop_reo_status_timer(struct ath11k_base *ab)
++{
++	struct ath11k_dp *dp = &ab->dp;
++
++	if (!ab->hw_params.reo_status_poll)
++		return;
++
++	del_timer_sync(&dp->reo_status_timer);
++	dp->reo_status_timer_running = false;
++}
++
++static void ath11k_dp_init_reo_status_timer(struct ath11k_base *ab)
++{
++	struct ath11k_dp *dp = &ab->dp;
++
++	if (!ab->hw_params.reo_status_poll)
++		return;
++
++	timer_setup(&dp->reo_status_timer,
++		    ath11k_dp_handle_reo_status_timer, 0);
++}
++
+ static void ath11k_dp_srng_common_cleanup(struct ath11k_base *ab)
+ {
+ 	struct ath11k_dp *dp = &ab->dp;
+ 	int i;
+ 
+ 	ath11k_dp_stop_shadow_timers(ab);
++	ath11k_dp_stop_reo_status_timer(ab);
+ 	ath11k_dp_srng_cleanup(ab, &dp->wbm_desc_rel_ring);
+ 	ath11k_dp_srng_cleanup(ab, &dp->tcl_cmd_ring);
+ 	ath11k_dp_srng_cleanup(ab, &dp->tcl_status_ring);
+@@ -375,6 +429,8 @@ static int ath11k_dp_srng_common_setup(s
+ 	int i, ret;
+ 	u8 tcl_num, wbm_num;
+ 
++	ath11k_dp_init_reo_status_timer(ab);
++
+ 	ret = ath11k_dp_srng_setup(ab, &dp->wbm_desc_rel_ring,
+ 				   HAL_SW2WBM_RELEASE, 0, 0,
+ 				   DP_WBM_RELEASE_RING_SIZE);
+--- a/drivers/net/wireless/ath/ath11k/dp.h
++++ b/drivers/net/wireless/ath/ath11k/dp.h
+@@ -46,6 +46,8 @@ struct dp_rx_tid {
+ #define DP_MON_PURGE_TIMEOUT_MS     100
+ #define DP_MON_SERVICE_BUDGET       128
+ 
++#define ATH11K_REO_STATUS_POLL_TIMEOUT_MS 10
++
+ struct dp_reo_cache_flush_elem {
+ 	struct list_head list;
+ 	struct dp_rx_tid data;
+@@ -287,6 +289,10 @@ struct ath11k_dp {
+ 	spinlock_t reo_cmd_lock;
+ 	struct ath11k_hp_update_timer reo_cmd_timer;
+ 	struct ath11k_hp_update_timer tx_ring_timer[DP_TCL_NUM_RING_MAX];
++
++	/* reo status timer and flags */
++	struct timer_list reo_status_timer;
++	bool reo_status_timer_running;
+ };
+ 
+ /* HTT definitions */
+@@ -1690,5 +1696,6 @@ void ath11k_dp_shadow_init_timer(struct
+ 				 struct ath11k_hp_update_timer *update_timer,
+ 				 u32 interval, u32 ring_id);
+ void ath11k_dp_stop_shadow_timers(struct ath11k_base *ab);
++void ath11k_dp_start_reo_status_timer(struct ath11k_base *ab);
+ 
+ #endif
+--- a/drivers/net/wireless/ath/ath11k/dp_tx.c
++++ b/drivers/net/wireless/ath/ath11k/dp_tx.c
+@@ -787,6 +787,10 @@ int ath11k_dp_tx_send_reo_cmd(struct ath
+ 	if (cmd_num == 0)
+ 		return -EINVAL;
+ 
++	/* Trigger reo status polling if required */
++	if (cmd->flag & HAL_REO_CMD_FLG_NEED_STATUS)
++		ath11k_dp_start_reo_status_timer(ab);
++
+ 	if (!cb)
+ 		return 0;
+ 
+--- a/drivers/net/wireless/ath/ath11k/hw.h
++++ b/drivers/net/wireless/ath/ath11k/hw.h
+@@ -233,6 +233,7 @@ struct ath11k_hw_params {
+ 	bool support_fw_mac_sequence;
+ 	bool support_dual_stations;
+ 	bool pdev_suspend;
++	bool reo_status_poll;
+ };
+ 
+ struct ath11k_hw_ops {
diff --git a/package/kernel/mac80211/patches/ath11k/940-ath11k-Revert-clear-the-keys-properly-when-DISABLE_K.patch b/package/kernel/mac80211/patches/ath11k/940-ath11k-Revert-clear-the-keys-properly-when-DISABLE_K.patch
index ec2dc222b6..352e68fcec 100644
--- a/package/kernel/mac80211/patches/ath11k/940-ath11k-Revert-clear-the-keys-properly-when-DISABLE_K.patch
+++ b/package/kernel/mac80211/patches/ath11k/940-ath11k-Revert-clear-the-keys-properly-when-DISABLE_K.patch
@@ -23,7 +23,7 @@ Signed-off-by: Rameshkumar Sundaram <quic_ramess@quicinc.com>
 
 --- a/drivers/net/wireless/ath/ath11k/mac.c
 +++ b/drivers/net/wireless/ath/ath11k/mac.c
-@@ -4222,7 +4222,9 @@ static int ath11k_install_key(struct ath
+@@ -4220,7 +4220,9 @@ static int ath11k_install_key(struct ath
  		return 0;
  
  	if (cmd == DISABLE_KEY) {
diff --git a/package/kernel/mac80211/patches/ath12k/001-wifi-ath12k-add-11d-scan-offload-support-and-handle-country-code-for-WCN7850.patch b/package/kernel/mac80211/patches/ath12k/001-wifi-ath12k-add-11d-scan-offload-support-and-handle-country-code-for-WCN7850.patch
index caa4e20f97..e93a591b0e 100644
--- a/package/kernel/mac80211/patches/ath12k/001-wifi-ath12k-add-11d-scan-offload-support-and-handle-country-code-for-WCN7850.patch
+++ b/package/kernel/mac80211/patches/ath12k/001-wifi-ath12k-add-11d-scan-offload-support-and-handle-country-code-for-WCN7850.patch
@@ -121,7 +121,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  };
  
  static __le32 ath12k_wmi_tlv_hdr(u32 cmd, u32 len)
-@@ -2364,7 +2366,10 @@ int ath12k_wmi_send_scan_start_cmd(struc
+@@ -2531,7 +2533,10 @@ int ath12k_wmi_send_scan_start_cmd(struc
  	cmd->scan_id = cpu_to_le32(arg->scan_id);
  	cmd->scan_req_id = cpu_to_le32(arg->scan_req_id);
  	cmd->vdev_id = cpu_to_le32(arg->vdev_id);
@@ -133,7 +133,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  	cmd->notify_scan_events = cpu_to_le32(arg->notify_scan_events);
  
  	ath12k_wmi_copy_scan_event_cntrl_flags(cmd, arg);
-@@ -3084,6 +3089,110 @@ out:
+@@ -3253,6 +3258,110 @@ out:
  	return ret;
  }
  
@@ -244,7 +244,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  int
  ath12k_wmi_send_twt_enable_cmd(struct ath12k *ar, u32 pdev_id)
  {
-@@ -5669,6 +5778,50 @@ static void ath12k_wmi_op_ep_tx_credits(
+@@ -5873,6 +5982,50 @@ static void ath12k_wmi_op_ep_tx_credits(
  	wake_up(&ab->wmi_ab.tx_credits_wq);
  }
  
@@ -295,9 +295,9 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  static void ath12k_wmi_htc_tx_complete(struct ath12k_base *ab,
  				       struct sk_buff *skb)
  {
-@@ -7270,6 +7423,9 @@ static void ath12k_wmi_op_rx(struct ath1
- 	case WMI_GTK_OFFLOAD_STATUS_EVENTID:
- 		ath12k_wmi_gtk_offload_status_event(ab, skb);
+@@ -7586,6 +7739,9 @@ static void ath12k_wmi_op_rx(struct ath1
+ 	case WMI_OBSS_COLOR_COLLISION_DETECTION_EVENTID:
+ 		/* debug might flood hence silently ignore (no-op) */
  		break;
 +	case WMI_11D_NEW_COUNTRY_EVENTID:
 +		ath12k_reg_11d_new_cc_event(ab, skb);
@@ -307,7 +307,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  		ath12k_dbg(ab, ATH12K_DBG_WMI, "Unknown eventid: 0x%x\n", id);
 --- a/drivers/net/wireless/ath/ath12k/wmi.h
 +++ b/drivers/net/wireless/ath/ath12k/wmi.h
-@@ -3860,6 +3860,28 @@ struct wmi_init_country_cmd {
+@@ -3990,6 +3990,28 @@ struct wmi_init_country_cmd {
  	} cc_info;
  } __packed;
  
@@ -336,9 +336,9 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  struct wmi_delba_send_cmd {
  	__le32 tlv_header;
  	__le32 vdev_id;
-@@ -3945,6 +3967,16 @@ struct ath12k_wmi_eht_rate_set_params {
+@@ -4074,6 +4096,16 @@ struct ath12k_wmi_eht_rate_set_params {
+ #define REG_ALPHA2_LEN 2
  #define MAX_6G_REG_RULES 5
- #define REG_US_5G_NUM_REG_RULES 4
  
 +struct wmi_set_current_country_arg {
 +	u8 alpha2[REG_ALPHA2_LEN];
@@ -353,7 +353,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  enum wmi_start_event_param {
  	WMI_VDEV_START_RESP_EVENT = 0,
  	WMI_VDEV_RESTART_RESP_EVENT,
-@@ -5547,11 +5579,17 @@ int ath12k_wmi_send_bcn_offload_control_
+@@ -5714,11 +5746,17 @@ int ath12k_wmi_send_bcn_offload_control_
  					    u32 vdev_id, u32 bcn_ctrl_op);
  int ath12k_wmi_send_init_country_cmd(struct ath12k *ar,
  				     struct ath12k_wmi_init_country_arg *arg);
@@ -373,7 +373,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  				 struct ath12k_wmi_rx_reorder_queue_remove_arg *arg);
 --- a/drivers/net/wireless/ath/ath12k/core.c
 +++ b/drivers/net/wireless/ath/ath12k/core.c
-@@ -1014,6 +1014,7 @@ void ath12k_core_halt(struct ath12k *ar)
+@@ -1251,6 +1251,7 @@ void ath12k_core_halt(struct ath12k *ar)
  	cancel_delayed_work_sync(&ar->scan.timeout);
  	cancel_work_sync(&ar->regd_update_work);
  	cancel_work_sync(&ab->rfkill_work);
@@ -381,7 +381,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  
  	rcu_assign_pointer(ab->pdevs_active[ar->pdev_idx], NULL);
  	synchronize_rcu();
-@@ -1021,6 +1022,34 @@ void ath12k_core_halt(struct ath12k *ar)
+@@ -1258,6 +1259,34 @@ void ath12k_core_halt(struct ath12k *ar)
  	idr_init(&ar->txmgmt_idr);
  }
  
@@ -415,8 +415,8 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
 +
  static void ath12k_core_pre_reconfigure_recovery(struct ath12k_base *ab)
  {
- 	struct ath12k *ar;
-@@ -1045,8 +1074,10 @@ static void ath12k_core_pre_reconfigure_
+ 	struct ath12k_hw_group *ag = ab->ag;
+@@ -1283,8 +1312,10 @@ static void ath12k_core_pre_reconfigure_
  			ar = &ah->radio[j];
  
  			ath12k_mac_drain_tx(ar);
@@ -428,18 +428,18 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  			complete(&ar->scan.on_channel);
  			complete(&ar->peer_assoc_done);
  			complete(&ar->peer_delete_done);
-@@ -1312,6 +1343,7 @@ struct ath12k_base *ath12k_core_alloc(st
- 	INIT_WORK(&ab->restart_work, ath12k_core_restart);
+@@ -1953,6 +1984,7 @@ struct ath12k_base *ath12k_core_alloc(st
  	INIT_WORK(&ab->reset_work, ath12k_core_reset);
  	INIT_WORK(&ab->rfkill_work, ath12k_rfkill_work);
+ 	INIT_WORK(&ab->dump_work, ath12k_coredump_upload);
 +	INIT_WORK(&ab->update_11d_work, ath12k_update_11d);
  
  	timer_setup(&ab->rx_replenish_retry, ath12k_ce_rx_replenish_retry, 0);
  	init_completion(&ab->htc_suspend);
 --- a/drivers/net/wireless/ath/ath12k/core.h
 +++ b/drivers/net/wireless/ath/ath12k/core.h
-@@ -199,6 +199,12 @@ enum ath12k_scan_state {
- 	ATH12K_SCAN_ABORTING,
+@@ -224,6 +224,12 @@ enum ath12k_hw_group_flags {
+ 	ATH12K_GROUP_FLAG_UNREGISTER,
  };
  
 +enum ath12k_11d_state {
@@ -449,9 +449,9 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
 +};
 +
  enum ath12k_dev_flags {
- 	ATH12K_CAC_RUNNING,
+ 	ATH12K_FLAG_CAC_RUNNING,
  	ATH12K_FLAG_CRASH_FLUSH,
-@@ -319,6 +325,8 @@ struct ath12k_vif_iter {
+@@ -361,6 +367,8 @@ struct ath12k_vif_iter {
  #define ATH12K_RX_RATE_TABLE_11AX_NUM	576
  #define ATH12K_RX_RATE_TABLE_NUM 320
  
@@ -460,9 +460,9 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  struct ath12k_rx_peer_rate_stats {
  	u64 ht_mcs_count[HAL_RX_MAX_MCS_HT + 1];
  	u64 vht_mcs_count[HAL_RX_MAX_MCS_VHT + 1];
-@@ -654,6 +662,13 @@ struct ath12k {
- 	u32 freq_low;
- 	u32 freq_high;
+@@ -713,6 +721,13 @@ struct ath12k {
+ 
+ 	struct wiphy_radio_freq_range freq_range;
  
 +	/* Protected by wiphy::mtx lock. */
 +	u32 vdev_id_11d_scan;
@@ -472,9 +472,9 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
 +	bool regdom_set_by_user;
 +
  	bool nlo_enabled;
- };
  
-@@ -886,6 +901,8 @@ struct ath12k_base {
+ 	struct completion mlo_setup_done;
+@@ -985,6 +1000,8 @@ struct ath12k_base {
  	/* continuous recovery fail count */
  	atomic_t fail_cont_count;
  	unsigned long reset_fail_timeout;
@@ -485,28 +485,28 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  		u32 fw_crash_counter;
 --- a/drivers/net/wireless/ath/ath12k/mac.c
 +++ b/drivers/net/wireless/ath/ath12k/mac.c
-@@ -2949,6 +2949,11 @@ static void ath12k_bss_assoc(struct ath1
+@@ -3340,6 +3340,11 @@ static void ath12k_bss_assoc(struct ath1
  	if (ret)
  		ath12k_warn(ar->ab, "failed to set vdev %i OBSS PD parameters: %d\n",
  			    arvif->vdev_id, ret);
 +
 +	if (test_bit(WMI_TLV_SERVICE_11D_OFFLOAD, ar->ab->wmi_ab.svc_map) &&
-+	    arvif->vdev_type == WMI_VDEV_TYPE_STA &&
-+	    arvif->vdev_subtype == WMI_VDEV_SUBTYPE_NONE)
++	    ahvif->vdev_type == WMI_VDEV_TYPE_STA &&
++	    ahvif->vdev_subtype == WMI_VDEV_SUBTYPE_NONE)
 +		ath12k_mac_11d_scan_stop_all(ar->ab);
  }
  
  static void ath12k_bss_disassoc(struct ath12k *ar,
-@@ -3524,7 +3529,7 @@ void __ath12k_mac_scan_finish(struct ath
- 		ar->scan_channel = NULL;
- 		ar->scan.roc_freq = 0;
+@@ -4094,7 +4099,7 @@ void __ath12k_mac_scan_finish(struct ath
+ 		fallthrough;
+ 	case ATH12K_SCAN_STARTING:
  		cancel_delayed_work(&ar->scan.timeout);
 -		complete(&ar->scan.completed);
 +		complete_all(&ar->scan.completed);
+ 		wiphy_work_queue(ar->ah->hw->wiphy, &ar->scan.vdev_clean_wk);
  		break;
  	}
- }
-@@ -3790,7 +3795,12 @@ scan:
+@@ -4438,7 +4443,12 @@ static int ath12k_mac_op_hw_scan(struct
  
  	ret = ath12k_start_scan(ar, arg);
  	if (ret) {
@@ -520,19 +520,19 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  		spin_lock_bh(&ar->data_lock);
  		ar->scan.state = ATH12K_SCAN_IDLE;
  		spin_unlock_bh(&ar->data_lock);
-@@ -3810,6 +3820,11 @@ exit:
- 
- 	mutex_unlock(&ar->conf_mutex);
+@@ -4465,6 +4475,11 @@ exit:
+ 		kfree(arg);
+ 	}
  
 +	if (ar->state_11d == ATH12K_11D_PREPARING &&
-+	    arvif->vdev_type == WMI_VDEV_TYPE_STA &&
-+	    arvif->vdev_subtype == WMI_VDEV_SUBTYPE_NONE)
++	    ahvif->vdev_type == WMI_VDEV_TYPE_STA &&
++	    ahvif->vdev_subtype == WMI_VDEV_SUBTYPE_NONE)
 +		ath12k_mac_11d_scan_start(ar, arvif->vdev_id);
 +
  	return ret;
  }
  
-@@ -5994,7 +6009,7 @@ static int ath12k_mac_start(struct ath12
+@@ -7383,7 +7398,7 @@ static int ath12k_mac_start(struct ath12
  
  	/* TODO: Do we need to enable ANI? */
  
@@ -541,8 +541,8 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  
  	ar->num_started_vdevs = 0;
  	ar->num_created_vdevs = 0;
-@@ -6174,6 +6189,9 @@ static void ath12k_mac_stop(struct ath12
- 	cancel_delayed_work_sync(&ar->scan.timeout);
+@@ -7564,6 +7579,9 @@ static void ath12k_mac_stop(struct ath12
+ 	wiphy_work_cancel(ath12k_ar_to_hw(ar)->wiphy, &ar->scan.vdev_clean_wk);
  	cancel_work_sync(&ar->regd_update_work);
  	cancel_work_sync(&ar->ab->rfkill_work);
 +	cancel_work_sync(&ar->ab->update_11d_work);
@@ -551,22 +551,22 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  
  	spin_lock_bh(&ar->data_lock);
  	list_for_each_entry_safe(ppdu_stats, tmp, &ar->ppdu_stats_info, list) {
-@@ -6420,6 +6438,117 @@ static void ath12k_mac_op_update_vif_off
- 	ath12k_mac_update_vif_offload(arvif);
+@@ -7857,6 +7875,117 @@ static void ath12k_mac_op_update_vif_off
+ 	ath12k_mac_update_vif_offload(&ahvif->deflink);
  }
  
 +static bool ath12k_mac_vif_ap_active_any(struct ath12k_base *ab)
 +{
 +	struct ath12k *ar;
 +	struct ath12k_pdev *pdev;
-+	struct ath12k_vif *arvif;
++	struct ath12k_link_vif *arvif;
 +	int i;
 +
 +	for (i = 0; i < ab->num_radios; i++) {
 +		pdev = &ab->pdevs[i];
 +		ar = pdev->ar;
 +		list_for_each_entry(arvif, &ar->arvifs, list) {
-+			if (arvif->is_up && arvif->vdev_type == WMI_VDEV_TYPE_AP)
++			if (arvif->is_up && arvif->ahvif->vdev_type == WMI_VDEV_TYPE_AP)
 +				return true;
 +		}
 +	}
@@ -666,10 +666,10 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
 +	}
 +}
 +
- static int ath12k_mac_vdev_create(struct ath12k *ar, struct ieee80211_vif *vif)
+ int ath12k_mac_vdev_create(struct ath12k *ar, struct ath12k_link_vif *arvif)
  {
  	struct ath12k_hw *ah = ar->ah;
-@@ -6534,6 +6663,7 @@ static int ath12k_mac_vdev_create(struct
+@@ -7991,6 +8120,7 @@ int ath12k_mac_vdev_create(struct ath12k
  				    arvif->vdev_id, ret);
  			goto err_peer_del;
  		}
@@ -677,48 +677,48 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  		break;
  	case WMI_VDEV_TYPE_STA:
  		param_id = WMI_STA_PS_PARAM_RX_WAKE_POLICY;
-@@ -6572,6 +6702,13 @@ static int ath12k_mac_vdev_create(struct
+@@ -8029,6 +8159,13 @@ int ath12k_mac_vdev_create(struct ath12k
  				    arvif->vdev_id, ret);
  			goto err_peer_del;
  		}
 +
 +		if (test_bit(WMI_TLV_SERVICE_11D_OFFLOAD, ab->wmi_ab.svc_map) &&
-+		    arvif->vdev_type == WMI_VDEV_TYPE_STA &&
-+		    arvif->vdev_subtype == WMI_VDEV_SUBTYPE_NONE) {
++		    ahvif->vdev_type == WMI_VDEV_TYPE_STA &&
++		    ahvif->vdev_subtype == WMI_VDEV_SUBTYPE_NONE) {
 +			reinit_completion(&ar->completed_11d_scan);
 +			ar->state_11d = ATH12K_11D_PREPARING;
 +		}
  		break;
  	default:
  		break;
-@@ -6912,6 +7049,11 @@ static void ath12k_mac_op_remove_interfa
- 	ath12k_dbg(ab, ATH12K_DBG_MAC, "mac remove interface (vdev %d)\n",
- 		   arvif->vdev_id);
+@@ -8821,6 +8958,11 @@ ath12k_mac_vdev_start_restart(struct ath
+ 			return ret;
+ 	}
  
 +	if (test_bit(WMI_TLV_SERVICE_11D_OFFLOAD, ab->wmi_ab.svc_map) &&
-+	    arvif->vdev_type == WMI_VDEV_TYPE_STA &&
-+	    arvif->vdev_subtype == WMI_VDEV_SUBTYPE_NONE)
++	    ahvif->vdev_type == WMI_VDEV_TYPE_STA &&
++	    ahvif->vdev_subtype == WMI_VDEV_SUBTYPE_NONE)
 +		ath12k_mac_11d_scan_stop(ar);
 +
- 	if (arvif->vdev_type == WMI_VDEV_TYPE_AP) {
- 		ret = ath12k_peer_delete(ar, arvif->vdev_id, vif->addr);
- 		if (ret)
-@@ -7752,6 +7894,14 @@ ath12k_mac_op_unassign_vif_chanctx(struc
+ 	if (ahvif->vdev_type == WMI_VDEV_TYPE_AP) {
+ 		arg.ssid = ahvif->u.ap.ssid;
+ 		arg.ssid_len = ahvif->u.ap.ssid_len;
+@@ -9395,6 +9537,14 @@ ath12k_mac_op_unassign_vif_chanctx(struc
  	    ar->num_started_vdevs == 1 && ar->monitor_vdev_created)
  		ath12k_mac_monitor_stop(ar);
  
 +	if (test_bit(WMI_TLV_SERVICE_11D_OFFLOAD, ab->wmi_ab.svc_map) &&
-+	    arvif->vdev_type == WMI_VDEV_TYPE_STA &&
-+	    arvif->vdev_subtype == WMI_VDEV_SUBTYPE_NONE &&
++	    ahvif->vdev_type == WMI_VDEV_TYPE_STA &&
++	    ahvif->vdev_subtype == WMI_VDEV_SUBTYPE_NONE &&
 +	    ar->state_11d != ATH12K_11D_PREPARING) {
 +		reinit_completion(&ar->completed_11d_scan);
 +		ar->state_11d = ATH12K_11D_PREPARING;
 +	}
 +
- 	mutex_unlock(&ar->conf_mutex);
+ 	ath12k_mac_remove_link_interface(hw, arvif);
+ 	ath12k_mac_unassign_link_vif(arvif);
  }
- 
-@@ -8290,6 +8440,14 @@ ath12k_mac_op_reconfig_complete(struct i
+@@ -9958,6 +10108,14 @@ ath12k_mac_op_reconfig_complete(struct i
  		ath12k_warn(ar->ab, "pdev %d successfully recovered\n",
  			    ar->pdev->pdev_id);
  
@@ -733,19 +733,19 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  		if (ab->is_reset) {
  			recovery_count = atomic_inc_return(&ab->recovery_count);
  
-@@ -9339,6 +9497,9 @@ static void ath12k_mac_setup(struct ath1
+@@ -11173,6 +11331,9 @@ static void ath12k_mac_setup(struct ath1
  
- 	INIT_WORK(&ar->wmi_mgmt_tx_work, ath12k_mgmt_over_wmi_tx_work);
+ 	wiphy_work_init(&ar->wmi_mgmt_tx_work, ath12k_mgmt_over_wmi_tx_work);
  	skb_queue_head_init(&ar->wmi_mgmt_tx_queue);
 +
 +	ar->vdev_id_11d_scan = ATH12K_11D_INVALID_VDEV_ID;
 +	init_completion(&ar->completed_11d_scan);
  }
  
- int ath12k_mac_register(struct ath12k_base *ab)
+ static int __ath12k_mac_mlo_setup(struct ath12k *ar)
 --- a/drivers/net/wireless/ath/ath12k/mac.h
 +++ b/drivers/net/wireless/ath/ath12k/mac.h
-@@ -51,6 +51,13 @@ enum ath12k_supported_bw {
+@@ -66,6 +66,13 @@ struct ath12k_mac_get_any_chanctx_conf_a
  
  extern const struct htt_rx_ring_tlv_filter ath12k_mac_mon_status_filter_default;
  
@@ -756,9 +756,9 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
 +void ath12k_mac_11d_scan_stop(struct ath12k *ar);
 +void ath12k_mac_11d_scan_stop_all(struct ath12k_base *ab);
 +
- void ath12k_mac_destroy(struct ath12k_base *ab);
- void ath12k_mac_unregister(struct ath12k_base *ab);
- int ath12k_mac_register(struct ath12k_base *ab);
+ void ath12k_mac_destroy(struct ath12k_hw_group *ag);
+ void ath12k_mac_unregister(struct ath12k_hw_group *ag);
+ int ath12k_mac_register(struct ath12k_hw_group *ag);
 --- a/drivers/net/wireless/ath/ath12k/reg.c
 +++ b/drivers/net/wireless/ath/ath12k/reg.c
 @@ -48,6 +48,7 @@ ath12k_reg_notifier(struct wiphy *wiphy,
diff --git a/package/kernel/mac80211/patches/ath12k/003-1-v6.16-wifi-ath12k-Pass-correct-values-of-center-freq1-and-.patch b/package/kernel/mac80211/patches/ath12k/003-1-v6.16-wifi-ath12k-Pass-correct-values-of-center-freq1-and-.patch
new file mode 100644
index 0000000000..78dea13a49
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath12k/003-1-v6.16-wifi-ath12k-Pass-correct-values-of-center-freq1-and-.patch
@@ -0,0 +1,53 @@
+From b1b01e46a3db5ad44d1e4691ba37c1e0832cd5cf Mon Sep 17 00:00:00 2001
+From: Suraj P Kizhakkethil <quic_surapk@quicinc.com>
+Date: Tue, 4 Mar 2025 15:23:14 +0530
+Subject: [PATCH 1/2] wifi: ath12k: Pass correct values of center freq1 and
+ center freq2 for 160 MHz
+
+Currently, for 160 MHz bandwidth, center frequency1 and
+center frequency2 are not passed correctly to the firmware.
+Set center frequency1 as the center frequency
+of the primary 80 MHz channel segment and center frequency2 as
+the center frequency of the 160 MHz channel and pass the values
+to the firmware.
+
+Tested-on: QCN9274 hw2.0 PCI WLAN.WBE.1.3.1-00173-QCAHKSWPL_SILICONZ-1
+
+Signed-off-by: Suraj P Kizhakkethil <quic_surapk@quicinc.com>
+Reviewed-by: Aditya Kumar Singh <aditya.kumar.singh@oss.qualcomm.com>
+Link: https://patch.msgid.link/20250304095315.3050325-2-quic_surapk@quicinc.com
+Signed-off-by: Jeff Johnson <jeff.johnson@oss.qualcomm.com>
+---
+ drivers/net/wireless/ath/ath12k/wmi.c | 16 +++++++++++++---
+ 1 file changed, 13 insertions(+), 3 deletions(-)
+
+--- a/drivers/net/wireless/ath/ath12k/wmi.c
++++ b/drivers/net/wireless/ath/ath12k/wmi.c
+@@ -1000,14 +1000,24 @@ int ath12k_wmi_vdev_down(struct ath12k *
+ static void ath12k_wmi_put_wmi_channel(struct ath12k_wmi_channel_params *chan,
+ 				       struct wmi_vdev_start_req_arg *arg)
+ {
++	u32 center_freq1 = arg->band_center_freq1;
++
+ 	memset(chan, 0, sizeof(*chan));
+ 
+ 	chan->mhz = cpu_to_le32(arg->freq);
+-	chan->band_center_freq1 = cpu_to_le32(arg->band_center_freq1);
+-	if (arg->mode == MODE_11AC_VHT80_80)
++	chan->band_center_freq1 = cpu_to_le32(center_freq1);
++	if (arg->mode == MODE_11BE_EHT160) {
++		if (arg->freq > center_freq1)
++			chan->band_center_freq1 = cpu_to_le32(center_freq1 + 40);
++		else
++			chan->band_center_freq1 = cpu_to_le32(center_freq1 - 40);
++
++		chan->band_center_freq2 = cpu_to_le32(center_freq1);
++	} else if (arg->mode == MODE_11BE_EHT80_80) {
+ 		chan->band_center_freq2 = cpu_to_le32(arg->band_center_freq2);
+-	else
++	} else {
+ 		chan->band_center_freq2 = 0;
++	}
+ 
+ 	chan->info |= le32_encode_bits(arg->mode, WMI_CHAN_INFO_MODE);
+ 	if (arg->passive)
diff --git a/package/kernel/mac80211/patches/ath12k/003-2-v6.16-wifi-ath12k-Pass-correct-values-of-center-freq1-and-.patch b/package/kernel/mac80211/patches/ath12k/003-2-v6.16-wifi-ath12k-Pass-correct-values-of-center-freq1-and-.patch
new file mode 100644
index 0000000000..3f7f05e9ac
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath12k/003-2-v6.16-wifi-ath12k-Pass-correct-values-of-center-freq1-and-.patch
@@ -0,0 +1,43 @@
+From 5e44b181bec8e2fe3826033360fc1a42bb432191 Mon Sep 17 00:00:00 2001
+From: Sriram R <quic_srirrama@quicinc.com>
+Date: Tue, 4 Mar 2025 15:23:15 +0530
+Subject: [PATCH 2/2] wifi: ath12k: Pass correct values of center freq1 and
+ center freq2 for 320 MHz
+
+Currently, for 320 MHz bandwidth, center frequency1 and
+center frequency2 are not passed correctly to the firmware.
+Set center frequency1 as the center frequency of the
+primary 160 MHz channel segment and center frequency2 as the center
+frequency of the 320 MHz channel and pass the values
+to the firmware.
+
+Tested-on: QCN9274 hw2.0 PCI WLAN.WBE.1.3.1-00173-QCAHKSWPL_SILICONZ-1
+
+Signed-off-by: Sriram R <quic_srirrama@quicinc.com>
+Signed-off-by: Suraj P Kizhakkethil <quic_surapk@quicinc.com>
+Reviewed-by: Aditya Kumar Singh <aditya.kumar.singh@oss.qualcomm.com>
+Link: https://patch.msgid.link/20250304095315.3050325-3-quic_surapk@quicinc.com
+Signed-off-by: Jeff Johnson <jeff.johnson@oss.qualcomm.com>
+---
+ drivers/net/wireless/ath/ath12k/wmi.c | 10 +++++++++-
+ 1 file changed, 9 insertions(+), 1 deletion(-)
+
+--- a/drivers/net/wireless/ath/ath12k/wmi.c
++++ b/drivers/net/wireless/ath/ath12k/wmi.c
+@@ -1006,7 +1006,15 @@ static void ath12k_wmi_put_wmi_channel(s
+ 
+ 	chan->mhz = cpu_to_le32(arg->freq);
+ 	chan->band_center_freq1 = cpu_to_le32(center_freq1);
+-	if (arg->mode == MODE_11BE_EHT160) {
++	if (arg->mode == MODE_11BE_EHT320) {
++		if (arg->freq > center_freq1)
++			chan->band_center_freq1 = cpu_to_le32(center_freq1 + 80);
++		else
++			chan->band_center_freq1 = cpu_to_le32(center_freq1 - 80);
++
++		chan->band_center_freq2 = cpu_to_le32(center_freq1);
++
++	} else if (arg->mode == MODE_11BE_EHT160) {
+ 		if (arg->freq > center_freq1)
+ 			chan->band_center_freq1 = cpu_to_le32(center_freq1 + 40);
+ 		else
diff --git a/package/kernel/mac80211/patches/ath12k/100-ath12k-prevent-ltssm-startup-crash.patch b/package/kernel/mac80211/patches/ath12k/100-ath12k-prevent-ltssm-startup-crash.patch
index cd85a0f6aa..2209878b3c 100644
--- a/package/kernel/mac80211/patches/ath12k/100-ath12k-prevent-ltssm-startup-crash.patch
+++ b/package/kernel/mac80211/patches/ath12k/100-ath12k-prevent-ltssm-startup-crash.patch
@@ -5,7 +5,7 @@ But have issues on BPI-Rx boards.
 
 --- a/drivers/net/wireless/ath/ath12k/pci.c
 +++ b/drivers/net/wireless/ath/ath12k/pci.c
-@@ -277,6 +277,9 @@ static void ath12k_pci_enable_ltssm(stru
+@@ -279,6 +279,9 @@ static void ath12k_pci_enable_ltssm(stru
  	u32 val;
  	int i;
  
diff --git a/package/kernel/mac80211/patches/ath12k/102-wifi-ath12k-limit-WMI_SCAN_CHAN_LIST_CMDID-arg.patch b/package/kernel/mac80211/patches/ath12k/102-wifi-ath12k-limit-WMI_SCAN_CHAN_LIST_CMDID-arg.patch
new file mode 100644
index 0000000000..398f4d4451
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath12k/102-wifi-ath12k-limit-WMI_SCAN_CHAN_LIST_CMDID-arg.patch
@@ -0,0 +1,153 @@
+From patchwork Mon Mar 10 13:28:18 2025
+Content-Type: text/plain; charset="utf-8"
+MIME-Version: 1.0
+Content-Transfer-Encoding: 7bit
+X-Patchwork-Submitter: Mantas <mantas@8devices.com>
+X-Patchwork-Id: 14010032
+X-Patchwork-Delegate: quic_jjohnson@quicinc.com
+Received: from mail-lf1-f41.google.com (mail-lf1-f41.google.com
+ [209.85.167.41])
+	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
+	(No client certificate requested)
+	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 2ADD522A4DA
+	for <linux-wireless@vger.kernel.org>; Mon, 10 Mar 2025 13:28:47 +0000 (UTC)
+Authentication-Results: smtp.subspace.kernel.org;
+ arc=none smtp.client-ip=209.85.167.41
+ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
+	t=1741613330; cv=none;
+ b=Vx8zckt7S92zrauuzzoNjX/1eXhlbq+4R3uNXCWPCBFXXHBuAHrmXrDOQILh1g+IfyWOgpyXyibTTkLg6IWREXcA/OjV+V9ehNaQaHJAt4D14uxuNW6uIDA56myF+bhdmiZnfGZfK3puVBjeCAMbZwGhc81dTR3RaEhKYP93Wcg=
+ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
+	s=arc-20240116; t=1741613330; c=relaxed/simple;
+	bh=yRMCaDQnvsF6vQ/w9rLRB/etZre1sSzpWUDTNGX0zAk=;
+	h=From:Date:Subject:MIME-Version:Content-Type:Message-Id:To:Cc;
+ b=rFopB9f+nOXbmGbGXoo4SeBAV82xQ6nydiMDCiYAw7sELURejS0lK9xQZolnRGeyNtHnQgix39lrcilr6cdvGMhaziXzS6RYlY2WyoHTMxHwYGUIa9McnJ1AkCczdVv6SgeNUlVVEgAZBqH0Q2pmd5b91h/PMc/aPdQm9SQY8IU=
+ARC-Authentication-Results: i=1; smtp.subspace.kernel.org;
+ dmarc=pass (p=quarantine dis=none) header.from=8devices.com;
+ spf=pass smtp.mailfrom=8devices.com;
+ dkim=pass (2048-bit key) header.d=8devices.com header.i=@8devices.com
+ header.b=LitRbtOU; arc=none smtp.client-ip=209.85.167.41
+Authentication-Results: smtp.subspace.kernel.org;
+ dmarc=pass (p=quarantine dis=none) header.from=8devices.com
+Authentication-Results: smtp.subspace.kernel.org;
+ spf=pass smtp.mailfrom=8devices.com
+Authentication-Results: smtp.subspace.kernel.org;
+	dkim=pass (2048-bit key) header.d=8devices.com header.i=@8devices.com
+ header.b="LitRbtOU"
+Received: by mail-lf1-f41.google.com with SMTP id
+ 2adb3069b0e04-5499c5d9691so1866539e87.2
+        for <linux-wireless@vger.kernel.org>;
+ Mon, 10 Mar 2025 06:28:47 -0700 (PDT)
+DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
+        d=8devices.com; s=8devices; t=1741613326; x=1742218126;
+ darn=vger.kernel.org;
+        h=cc:to:message-id:content-transfer-encoding:mime-version:subject
+         :date:from:from:to:cc:subject:date:message-id:reply-to;
+        bh=6+w3029kfHch5SeD/z0zur2K64cd98za9hhmN/ji0MY=;
+        b=LitRbtOUxDhUPycKFo/pzuJu9Y11QmpYSvOmkgM9TcNEOsBvLk8z0EJ7+xy24ijRGJ
+         Xz16V9Z1kJGkXBK90klI6s3RjVBQf+dxf37t2kdQWdrgOE2VhXjnnV5zP7odCkMmOViw
+         2UmKSvagsxc6KojE2OYyd+vR3hmL+4fCtegorXMaRrf0Brje8XJmViAUgbc+IAtfL0Ao
+         pnig300fAb4WbnmIJIRiOUKoTESjbJRkUehGJkhe1ztiPE1F86AVMXw5IrDBR/WtMin1
+         9nYYDqfSGvI7fOvfStfZ9hS0ShIhBNd5naccyQ7c0xSTvXJ51vUvNvdZuufm9OKsbQ99
+         nh4g==
+X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
+        d=1e100.net; s=20230601; t=1741613326; x=1742218126;
+        h=cc:to:message-id:content-transfer-encoding:mime-version:subject
+         :date:from:x-gm-message-state:from:to:cc:subject:date:message-id
+         :reply-to;
+        bh=6+w3029kfHch5SeD/z0zur2K64cd98za9hhmN/ji0MY=;
+        b=Gx+AX3aIV66kzjGLGOToc2CuQrnfaWn43yZW2rgRpKJv03162undTbo+SdaI8s+8mY
+         aKrYsNOOqI4h6pHCZsVkBzqVh5ZOs+xJbJaHEETGzyBYA2sy0bdDwDUr0rIzJUD8ZYiw
+         736zfMRE2rxfOLoVIcfBLXMUcR2d63n/4wxgr1s5HVV3o8uEZ5gxNDnz5p/QabiWbT3m
+         AMSVVaOBUTRnd9GcZhzYfKboT7SNrTJz0emqSWPKCWfm8dYIzH3TuIGULfRu5UA1/Y2H
+         Q6ZbLmcYu5+VDKCtQl4nSmun3WUNAyPoeg5PCB1YcuCpqKcjU8l5Kkn+JxNjYAG432us
+         Z5xQ==
+X-Forwarded-Encrypted: i=1;
+ AJvYcCVigvWgctGNxtYGpBtNhTPBpQPHa7l14ZVktj/Oe1W8p1xwSIjIViAk2X3sDC23bbrmI41TVZbgJZDGCMFJ6g==@vger.kernel.org
+X-Gm-Message-State: AOJu0YxJFjAixTwr8dSwTYmdvbVzm/jbyVk+gQV6pF/9Vep5xeVdJMWa
+	TE+4MHJDPdO8dA16Yn/y5c8pLBEYKqRlo8uDHNKV6e5ldbv18Xv6bR163j+rVCQ=
+X-Gm-Gg: ASbGncsUwV1fquQPNOfmTge/yCSzRhyC7+A8STTBe3n+C2XDK1UV8IswQL5UEXlb268
+	mumVPzu1Ex8+Nh+quKWT+CIR3WR0NRXm1oiG0N+Cu2Mm4cm4mipqrV9Yxd6x5OMsG32XKd6r0iQ
+	gr7joJETyo6k1TGc6i0LyoIabLOCc7Nkeu7BD+URUnBvoeQyXBdJpX0bbdvANKW5DrUeX1GkUA7
+	0o4dZYtRola31Z1W9xZMdSefhmI4zZE4uy/RyR/FkQq2Zqk9FGct8DOKoHpOPa0DHVMy0lQAiNI
+	KNg6OYtuJY+/6TpDoZzNpooiLi29WL6hqlpkmlZeluuCBG6HlSbZTQ==
+X-Google-Smtp-Source: 
+ AGHT+IGIixTut4yqDWp69RPz6EjMMq4lD94Ez1yhsRnow6NgvTk6WmKPLFavYgOJC+xGczTQmaocLw==
+X-Received: by 2002:a05:6512:1112:b0:549:5850:f275 with SMTP id
+ 2adb3069b0e04-54990ec8e60mr4354451e87.50.1741613326121;
+        Mon, 10 Mar 2025 06:28:46 -0700 (PDT)
+Received: from [127.0.1.1] ([78.62.132.154])
+        by smtp.gmail.com with ESMTPSA id
+ 2adb3069b0e04-5498b1bcaecsm1460408e87.200.2025.03.10.06.28.45
+        (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
+        Mon, 10 Mar 2025 06:28:45 -0700 (PDT)
+From: Mantas Pucka <mantas@8devices.com>
+Date: Mon, 10 Mar 2025 15:28:18 +0200
+Subject: [PATCH ath-next] wifi: ath12k: limit WMI_SCAN_CHAN_LIST_CMDID
+ argument size
+Precedence: bulk
+X-Mailing-List: linux-wireless@vger.kernel.org
+List-Id: <linux-wireless.vger.kernel.org>
+List-Subscribe: <mailto:linux-wireless+subscribe@vger.kernel.org>
+List-Unsubscribe: <mailto:linux-wireless+unsubscribe@vger.kernel.org>
+MIME-Version: 1.0
+Message-Id: <20250310-limit-wmi-chanlist-v1-1-8f0fb45459a7@8devices.com>
+X-B4-Tracking: v=1; b=H4sIAPHozmcC/x2MSwqEMBAFryK9tiGJ+MGriIuMtvpAM0MSHEG8u
+ 9FNQVG8d1IQDwnUZid52RHwdUl0ntGwWDcLY0xORplSFVrxig2R/xv46StCZF0Pn2Y0ibaiNPx
+ 5mXC8px3ZuLCTI1J/XTfUqQSebgAAAA==
+X-Change-ID: 20250310-limit-wmi-chanlist-17cb8d27cba6
+To: ath12k@lists.infradead.org
+Cc: Johannes Berg <johannes@sipsolutions.net>,
+ Jeff Johnson <jjohnson@kernel.org>, linux-wireless@vger.kernel.org,
+ linux-kernel@vger.kernel.org, Mantas Pucka <mantas@8devices.com>
+X-Mailer: b4 0.14.2
+
+When using BDF with both 5GHz and 6GHz bands enabled on QCN9274, interface
+fails to start. It happens because FW fails to process
+WMI_SCAN_CHAN_LIST_CMDID with argument size >2048, resulting in a command
+timeout. The current code allows splitting channel list across multiple WMI
+commands but uses WMI max_msg_len (4096) as chunk size, which is still too
+large.
+
+Fix this by limiting the number of channels sent at once, using the value
+specified in WMI interface description [1].
+
+[1] https://git.codelinaro.org/clo/qsdk/platform/vendor/qcom-opensource/wlan/fw-api/-/blob/NHSS.QSDK.13.0.0.6/fw/wmi_unified.h#L6459
+
+Tested-on: QCN9274 hw2.0 PCI WLAN.WBE.1.4.1-00199-QCAHKSWPL_SILICONZ-1
+
+Signed-off-by: Mantas Pucka <mantas@8devices.com>
+---
+ drivers/net/wireless/ath/ath12k/wmi.c | 3 +++
+ drivers/net/wireless/ath/ath12k/wmi.h | 2 ++
+ 2 files changed, 5 insertions(+)
+
+
+---
+base-commit: 42aa76e608ca845c98e79f9e23af0bdb07b2eb1d
+change-id: 20250310-limit-wmi-chanlist-17cb8d27cba6
+
+Best regards,
+
+--- a/drivers/net/wireless/ath/ath12k/wmi.c
++++ b/drivers/net/wireless/ath/ath12k/wmi.c
+@@ -2743,6 +2743,9 @@ int ath12k_wmi_send_scan_chan_list_cmd(s
+ 		max_chan_limit = (wmi->wmi_ab->max_msg_len[ar->pdev_idx] - len) /
+ 			sizeof(*chan_info);
+ 
++		if (max_chan_limit > WMI_MAX_NUM_CHAN_PER_WMI_CMD)
++			max_chan_limit = WMI_MAX_NUM_CHAN_PER_WMI_CMD;
++
+ 		num_send_chans = min(arg->nallchans, max_chan_limit);
+ 
+ 		arg->nallchans -= num_send_chans;
+--- a/drivers/net/wireless/ath/ath12k/wmi.h
++++ b/drivers/net/wireless/ath/ath12k/wmi.h
+@@ -3873,6 +3873,8 @@ struct wmi_stop_scan_cmd {
+ 	__le32 pdev_id;
+ } __packed;
+ 
++#define WMI_MAX_NUM_CHAN_PER_WMI_CMD	58
++
+ struct ath12k_wmi_scan_chan_list_arg {
+ 	u32 pdev_id;
+ 	u16 nallchans;
diff --git a/package/kernel/mac80211/patches/ath12k/103-wifi-ath12k-fix-5GHz-operation-on-wideband-QCN.patch b/package/kernel/mac80211/patches/ath12k/103-wifi-ath12k-fix-5GHz-operation-on-wideband-QCN.patch
new file mode 100644
index 0000000000..a8aa752db3
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath12k/103-wifi-ath12k-fix-5GHz-operation-on-wideband-QCN.patch
@@ -0,0 +1,137 @@
+From patchwork Thu Mar 13 09:00:56 2025
+Content-Type: text/plain; charset="utf-8"
+MIME-Version: 1.0
+Content-Transfer-Encoding: 7bit
+X-Patchwork-Submitter: Mantas <mantas@8devices.com>
+X-Patchwork-Id: 14014575
+X-Patchwork-Delegate: quic_jjohnson@quicinc.com
+Received: from mail-lf1-f49.google.com (mail-lf1-f49.google.com
+ [209.85.167.49])
+	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
+	(No client certificate requested)
+	by smtp.subspace.kernel.org (Postfix) with ESMTPS id F210C2641F0
+	for <linux-wireless@vger.kernel.org>; Thu, 13 Mar 2025 09:01:28 +0000 (UTC)
+Authentication-Results: smtp.subspace.kernel.org;
+ arc=none smtp.client-ip=209.85.167.49
+ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
+	t=1741856491; cv=none;
+ b=CeFjBZstZXxg4oQQPPON0u0Mw9kvUaCubWSfpcWvN2italvlwccDBr+izqIzCXwxYaoAedVR6iHEQv+LBtIHOsMWHOCI9E6jYAPqjbEUEU0RMdvujKLVFvFXYR4UaRDAMzDGMlFF1qc0pY0sYR4FYfFBBQOarHn2sjZ/csIyj4k=
+ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
+	s=arc-20240116; t=1741856491; c=relaxed/simple;
+	bh=oLhlWw1tOovRHEGC4gsbi6BHKYXLNDYOrtVP3tTS5nE=;
+	h=From:Date:Subject:MIME-Version:Content-Type:Message-Id:To:Cc;
+ b=baAfN8drFOEwQR9LVuWoVsd3jkMbQECK7Zuc68EzbbJwM4Zb0tbziTk1vvqED+f9JPOMbjRyjvV1hvy3svqZr7OuTZJdSM41D+DsbHvw0jEhaRlKwzpLWuOn9lu56ahcAsvx4A4JRawEK90smoYpejhxkdlSrxqRBh1ey3RwmQU=
+ARC-Authentication-Results: i=1; smtp.subspace.kernel.org;
+ dmarc=pass (p=quarantine dis=none) header.from=8devices.com;
+ spf=pass smtp.mailfrom=8devices.com;
+ dkim=pass (2048-bit key) header.d=8devices.com header.i=@8devices.com
+ header.b=FdBxu3P+; arc=none smtp.client-ip=209.85.167.49
+Authentication-Results: smtp.subspace.kernel.org;
+ dmarc=pass (p=quarantine dis=none) header.from=8devices.com
+Authentication-Results: smtp.subspace.kernel.org;
+ spf=pass smtp.mailfrom=8devices.com
+Authentication-Results: smtp.subspace.kernel.org;
+	dkim=pass (2048-bit key) header.d=8devices.com header.i=@8devices.com
+ header.b="FdBxu3P+"
+Received: by mail-lf1-f49.google.com with SMTP id
+ 2adb3069b0e04-54943bb8006so648002e87.0
+        for <linux-wireless@vger.kernel.org>;
+ Thu, 13 Mar 2025 02:01:28 -0700 (PDT)
+DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
+        d=8devices.com; s=8devices; t=1741856487; x=1742461287;
+ darn=vger.kernel.org;
+        h=cc:to:message-id:content-transfer-encoding:mime-version:subject
+         :date:from:from:to:cc:subject:date:message-id:reply-to;
+        bh=uj7GGUjO2Cb2hoHrzMda/fIIQwFl12ddzGuw5jrHW8M=;
+        b=FdBxu3P+gf3qNd4jxSOCYUJ1meLFYAm0ou6lnEyomeeXDBFwITM6FM0cgBdXgmkLWZ
+         ZKowNImwE9FKqNGxpg2tZ4obR9aM7HzzkxV3TE+1aIiocbr/5xyXQU+/AUvaM3vui/8d
+         SFiwhX9FwFKdrYi1Og4XFD2aBhA5Fzp0U27grJYGTLchEfkr9Om43y3vZ7w2ENEBU0SO
+         7NFmSwx7BmflIybP2sGCUzjacGQzzec0zz256EY7GpZH9r19jgWiCe1YGWdlxDaRhWze
+         xV4okbZKydpYlUU/qGsgn23cRQuFCvMobvfkmTwsGYwlN4bAzq/cHw83YEFrUzYOngZK
+         z7bg==
+X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
+        d=1e100.net; s=20230601; t=1741856487; x=1742461287;
+        h=cc:to:message-id:content-transfer-encoding:mime-version:subject
+         :date:from:x-gm-message-state:from:to:cc:subject:date:message-id
+         :reply-to;
+        bh=uj7GGUjO2Cb2hoHrzMda/fIIQwFl12ddzGuw5jrHW8M=;
+        b=PhLIANoGtdl34d9fFH7uxPyg1K5yPGRwimsWPVhHon98V9QP64+qUbifocbfojxz8u
+         NEVzhOx0kfmsmkBxUzuRCu6xuTAF8LmjBpAJJxo3/4nqY67np8iZt/MITzx6egbMOUAs
+         txqj0rzXwr55N/9yAD/QuD6bBcd8PcNMPp0CjFAt39AyK6De3BEIcA7b/eLoY3lifaxJ
+         9U5ZZ/dHXwSIr9xuE1EB6pT5FbHcI8iWJTDJ8NdBcmWC8qtGAAMzlzWqHU0nOAJEjwEc
+         T+oaJr8fTAgq4B5OvS1cNClscZHvoM3zlIoczwPPoBZCtUi2gThz9R4BrBxepdoZl1qq
+         NZQA==
+X-Forwarded-Encrypted: i=1;
+ AJvYcCUSbJyRkEPLa3fw7FZX3Ci6+/o8dqI0hd6pkVT20pi6Ufgze7nBQXa+qdK3OM5Ng2TFBrym8JoyBo//MwDHng==@vger.kernel.org
+X-Gm-Message-State: AOJu0Ywjzq2sFNyTMNPyxDt+721RyXdLbDPrF5PY3LnwpKaTfduyXkMF
+	K/7N3Cpb/71aQsMXwmIbXAOGeLVWLBQHdYnQLZlsCTjVNArIjgiX7tNB0Mq56+qYtR9PdMrBAt8
+	m
+X-Gm-Gg: ASbGncvDd0SdjhjPfzaKTXW4e0hclZuKu4pZ4d0XD5/Q6dnv09ZObgGjJbIRrAhYizp
+	zWc8CwidDk8UYPX/OhiAyDhS4XRKRy2QG03sZh17aHDhishhmCE+mcqe+YUM+F4ns/05sAR2MeP
+	wu/Rz6NS6UD4ihGNReTORGB3X4n9I5dgdNheFyqbrRX+Js4zXuvn1jgoEWawfovOu/4HAlnv+7p
+	1ufgXBXJGVj6+OGzyNOyYloTB/Csok3zU9yBfrU+G19mpGaF86t/6yxmUIXCO+cWfbu2GIhVZp3
+	RmSiDo/spnsvtYVGCPc6v9jALz83YcknTLkX8u+08AOkJKK7Mh8rKlCvbfZcB355
+X-Google-Smtp-Source: 
+ AGHT+IE2NulrNIo+M5vahinpDWyI9BdSgzdREdo+l0AN7HhcxOd01ZBOpT3HYFht1EVpKj5T7Edrrw==
+X-Received: by 2002:a05:6512:ba6:b0:549:8f21:bc0e with SMTP id
+ 2adb3069b0e04-54990eb1987mr9398593e87.32.1741856486697;
+        Thu, 13 Mar 2025 02:01:26 -0700 (PDT)
+Received: from [127.0.1.1] ([78.62.132.154])
+        by smtp.gmail.com with ESMTPSA id
+ 2adb3069b0e04-549ba88591csm142134e87.187.2025.03.13.02.01.25
+        (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
+        Thu, 13 Mar 2025 02:01:25 -0700 (PDT)
+From: Mantas Pucka <mantas@8devices.com>
+Date: Thu, 13 Mar 2025 11:00:56 +0200
+Subject: [PATCH] wifi: ath12k: fix 5GHz operation on wideband QCN9274
+ radios
+Precedence: bulk
+X-Mailing-List: linux-wireless@vger.kernel.org
+List-Id: <linux-wireless.vger.kernel.org>
+List-Subscribe: <mailto:linux-wireless+subscribe@vger.kernel.org>
+List-Unsubscribe: <mailto:linux-wireless+unsubscribe@vger.kernel.org>
+MIME-Version: 1.0
+Message-Id: <20250313-ath12-wideband-caps-v1-1-23ac4247cd8a@8devices.com>
+X-B4-Tracking: v=1; b=H4sIAMee0mcC/x3MQQqAIBBA0avErBvIsUi6SrSwHGs2FhoVhHdPW
+ r7F/y8kjsIJhuqFyJck2UOBqitYNhtWRnHFQA11jVYa7bkpwlsczzY4XOyRkNqZjOqNcZ6hlEd
+ kL89/HaecP+zWjGtlAAAA
+X-Change-ID: 20250313-ath12-wideband-caps-24b281788dfe
+To: ath12k@lists.infradead.org
+Cc: Johannes Berg <johannes@sipsolutions.net>,
+ Jeff Johnson <jjohnson@kernel.org>, linux-wireless@vger.kernel.org,
+ linux-kernel@vger.kernel.org, Mantas Pucka <mantas@8devices.com>
+X-Mailer: b4 0.14.2
+
+Currently ath12k_mac_setup_ht_vht_cap() incorrectly assumes that QCN9274
+radios with 6GHz band can't support 5GHz as well. This prevents the
+addition of HT and VHT capabilities for the 5GHz band. Since QCN9274 is
+capable of operating in multiple bands, remove the 6GHz support check and
+exception for single_pdev_only (i.e. WCN7850).
+
+Tested-on: QCN9274 hw2.0 PCI WLAN.WBE.1.4.1-00199-QCAHKSWPL_SILICONZ-1
+
+Signed-off-by: Mantas Pucka <mantas@8devices.com>
+---
+ drivers/net/wireless/ath/ath12k/mac.c | 4 +---
+ 1 file changed, 1 insertion(+), 3 deletions(-)
+
+
+---
+base-commit: 42aa76e608ca845c98e79f9e23af0bdb07b2eb1d
+change-id: 20250313-ath12-wideband-caps-24b281788dfe
+
+Best regards,
+
+--- a/drivers/net/wireless/ath/ath12k/mac.c
++++ b/drivers/net/wireless/ath/ath12k/mac.c
+@@ -6432,9 +6432,7 @@ static void ath12k_mac_setup_ht_vht_cap(
+ 						    rate_cap_rx_chainmask);
+ 	}
+ 
+-	if (cap->supported_bands & WMI_HOST_WLAN_5G_CAP &&
+-	    (ar->ab->hw_params->single_pdev_only ||
+-	     !ar->supports_6ghz)) {
++	if (cap->supported_bands & WMI_HOST_WLAN_5G_CAP) {
+ 		band = &ar->mac.sbands[NL80211_BAND_5GHZ];
+ 		ht_cap = cap->band[NL80211_BAND_5GHZ].ht_cap_info;
+ 		if (ht_cap_info)
diff --git a/package/kernel/mac80211/patches/ath12k/104-1-wifi-ath12k-push-HE-MU-MIMO-params-to-hardware.patch b/package/kernel/mac80211/patches/ath12k/104-1-wifi-ath12k-push-HE-MU-MIMO-params-to-hardware.patch
new file mode 100644
index 0000000000..0ab44b54a5
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath12k/104-1-wifi-ath12k-push-HE-MU-MIMO-params-to-hardware.patch
@@ -0,0 +1,484 @@
+From patchwork Wed May 21 22:45:31 2025
+Content-Type: text/plain; charset="utf-8"
+MIME-Version: 1.0
+Content-Transfer-Encoding: 7bit
+X-Patchwork-Submitter: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+X-Patchwork-Id: 14096118
+X-Patchwork-Delegate: quic_jjohnson@quicinc.com
+Received: from mx0b-0031df01.pphosted.com (mx0b-0031df01.pphosted.com
+ [205.220.180.131])
+	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
+	(No client certificate requested)
+	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 8D9B523506D
+	for <linux-wireless@vger.kernel.org>; Wed, 21 May 2025 22:45:57 +0000 (UTC)
+Authentication-Results: smtp.subspace.kernel.org;
+ arc=none smtp.client-ip=205.220.180.131
+ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
+	t=1747867559; cv=none;
+ b=QXLrpE5trQYq3qZVPuAYdZ8IfmZi7XatjLyxn+9IZXmAWvPsCpT2EOrmLKoTKXH1gxwInwHzxiiwzDveDdYBFh2FGnxhAgdJlTBf1yChfW7+YndhKTtca3rP8z+Zt8QK48/n7gpmFEWkKGmxkG1DKIkCHgAZjD///ttubaAe2gc=
+ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
+	s=arc-20240116; t=1747867559; c=relaxed/simple;
+	bh=wlnSlGktw4cBYqpNPJwSPfG4fkld5ABcJ0NmmjY/jLg=;
+	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
+	 MIME-Version:Content-Type;
+ b=A4dIxT87Fh9Y97+jvDIVTPlA5cnixK5ZcCAl5lklS0dCWBpo0QkFFiYyRUSKso7kYaT6KFazofkMt8A2z/fDgN8gVZgqEkaXDFSRjqNWCtoplSK7qYryl88snzbQvzD52CbWKkX8yu2Qmd98HFrl2kg69o1e4wzXVcNc+fehea8=
+ARC-Authentication-Results: i=1; smtp.subspace.kernel.org;
+ dmarc=pass (p=none dis=none) header.from=quicinc.com;
+ spf=pass smtp.mailfrom=quicinc.com;
+ dkim=pass (2048-bit key) header.d=quicinc.com header.i=@quicinc.com
+ header.b=gwsO0461; arc=none smtp.client-ip=205.220.180.131
+Authentication-Results: smtp.subspace.kernel.org;
+ dmarc=pass (p=none dis=none) header.from=quicinc.com
+Authentication-Results: smtp.subspace.kernel.org;
+ spf=pass smtp.mailfrom=quicinc.com
+Authentication-Results: smtp.subspace.kernel.org;
+	dkim=pass (2048-bit key) header.d=quicinc.com header.i=@quicinc.com
+ header.b="gwsO0461"
+Received: from pps.filterd (m0279871.ppops.net [127.0.0.1])
+	by mx0a-0031df01.pphosted.com (8.18.1.2/8.18.1.2) with ESMTP id
+ 54LIZCMW000836;
+	Wed, 21 May 2025 22:45:53 GMT
+DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=quicinc.com; h=
+	cc:content-transfer-encoding:content-type:date:from:in-reply-to
+	:message-id:mime-version:references:subject:to; s=qcppdkim1; bh=
+	jJ/9931jjDg+8neUbH09oigyzQwINmgJKgsYw6rWwPU=; b=gwsO0461NDm4hzMy
+	/aP5LNjbfqB08SmlMEzcZ/MRNS7Ffjdvz9gsUyJR4DOilx71C5MvB0ZBvxEJF6pg
+	qcU4QPZtOzyixWx+3vL6eh4Sdt/RN5AD/6U6TJEZCPwdJNLMD5uB2OQjP87NG9Wj
+	2aEs+kb//lRXz6Gy5d7CCDW3+1KSDzgIg/cYJecPjWsMKbyCxTeFTIkkdonetQyz
+	PSzkIDi3IBnca94koYTQyFTVvpUVHpC3QAq+jM9+xQJOItRbDHZjdPjLG6q1ML4W
+	zYHODhd8LupxL323rnWJQxtYu5Ver7g2LgPW3npNz/JEdF2Hq9b8G0w5U8qVJVHr
+	2nNuUA==
+Received: from nalasppmta05.qualcomm.com (Global_NAT1.qualcomm.com
+ [129.46.96.20])
+	by mx0a-0031df01.pphosted.com (PPS) with ESMTPS id 46rwf6vbsd-1
+	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
+	Wed, 21 May 2025 22:45:53 +0000 (GMT)
+Received: from nalasex01a.na.qualcomm.com (nalasex01a.na.qualcomm.com
+ [10.47.209.196])
+	by NALASPPMTA05.qualcomm.com (8.18.1.2/8.18.1.2) with ESMTPS id
+ 54LMjqLl023280
+	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
+	Wed, 21 May 2025 22:45:52 GMT
+Received: from ath12k-linux2.qualcomm.com (10.80.80.8) by
+ nalasex01a.na.qualcomm.com (10.47.209.196) with Microsoft SMTP Server
+ (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
+ 15.2.1544.9; Wed, 21 May 2025 15:45:51 -0700
+From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+To: <ath12k@lists.infradead.org>
+CC: <linux-wireless@vger.kernel.org>,
+        Pradeep Kumar Chitrapu
+	<quic_pradeepc@quicinc.com>,
+        Muna Sinada <quic_msinada@quicinc.com>,
+        "Jeff
+ Johnson" <quic_jjohnson@quicinc.com>
+Subject: [PATCH ath-next V14 1/9] wifi: ath12k: push HE MU-MIMO params to
+ hardware
+Date: Wed, 21 May 2025 15:45:31 -0700
+Message-ID: <20250521224539.355985-2-quic_pradeepc@quicinc.com>
+X-Mailer: git-send-email 2.43.0
+In-Reply-To: <20250521224539.355985-1-quic_pradeepc@quicinc.com>
+References: <20250521224539.355985-1-quic_pradeepc@quicinc.com>
+Precedence: bulk
+X-Mailing-List: linux-wireless@vger.kernel.org
+List-Id: <linux-wireless.vger.kernel.org>
+List-Subscribe: <mailto:linux-wireless+subscribe@vger.kernel.org>
+List-Unsubscribe: <mailto:linux-wireless+unsubscribe@vger.kernel.org>
+MIME-Version: 1.0
+X-ClientProxiedBy: nasanex01a.na.qualcomm.com (10.52.223.231) To
+ nalasex01a.na.qualcomm.com (10.47.209.196)
+X-QCInternal: smtphost
+X-Proofpoint-Virus-Version: vendor=nai engine=6200 definitions=5800
+ signatures=585085
+X-Proofpoint-GUID: Zzf2Q5y4JzSN5f1E_vlCnvLRODG4zasa
+X-Proofpoint-Spam-Details-Enc: AW1haW4tMjUwNTIxMDIyNiBTYWx0ZWRfXyLZVeJQcQf0U
+ B/O6/0+L+1nXg6SAFSC1bdc8B/eF8RxRnvbbX+YkF3RG14/UHGCF654g8ZXTq8oTCDzm3x5wmAk
+ i8wAlv0otog8iYaicRd5q/x9Vynwlo0e67/iHhH1K0rxsp5yagZ6L3XLS82iLDPuXzHP7ylgo+I
+ D0c1CMcLo4bGNe421uQk2jqRij3j1iAoI0gGSwcQqHRucJQSYetF+SSp/oDox9Dn2TqOagngt4V
+ UxzAxO13SoH2X7RyWe5NxhfbEjOUmHjfodyJhBfIYh4s5SCx8IDUn6jSorAnl5mh1ZmAfISyZCC
+ UqoQ2LDdmGl1HT3d4xvb7/ah09ru4wukKEcvP+HDrow6Xn/WsfgmRy6xdRv5vdNODiEv64XOGHa
+ TxrJA2l36xRwX82xvkyUzyQ1sIeXwbvD0Wn//AQSmFVE0uMJHnCwRE1OYRGf9Dd2p/mfZfFh
+X-Authority-Analysis: v=2.4 cv=fZOty1QF c=1 sm=1 tr=0 ts=682e57a1 cx=c_pps
+ a=ouPCqIW2jiPt+lZRy3xVPw==:117 a=ouPCqIW2jiPt+lZRy3xVPw==:17
+ a=GEpy-HfZoHoA:10 a=dt9VzEwgFbYA:10 a=COk6AnOGAAAA:8 a=-_O-Wy8N5QNPZvNXkjkA:9
+ a=TjNXssC_j7lpFel5tvFf:22
+X-Proofpoint-ORIG-GUID: Zzf2Q5y4JzSN5f1E_vlCnvLRODG4zasa
+X-Proofpoint-Virus-Version: vendor=baseguard
+ engine=ICAP:2.0.293,Aquarius:18.0.1099,Hydra:6.0.736,FMLib:17.12.80.40
+ definitions=2025-05-21_07,2025-05-20_03,2025-03-28_01
+X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
+ clxscore=1015 mlxscore=0 adultscore=0 spamscore=0 bulkscore=0 suspectscore=0
+ malwarescore=0 priorityscore=1501 impostorscore=0 mlxlogscore=999
+ lowpriorityscore=0 phishscore=0 classifier=spam authscore=0 authtc=n/a
+ authcc= route=outbound adjust=0 reason=mlx scancount=1
+ engine=8.19.0-2505160000 definitions=main-2505210226
+
+Currently, only the HE IE in management frames is updated with
+respect to MU-MIMO configurations, but this change is not
+reflected in the hardware. Add support to propagate MU-MIMO
+configurations to the hardware as well.
+
+Tested-on: QCN9274 hw2.0 PCI WLAN.WBE.1.0.1-00029-QCAHKSWPL_SILICONZ-1
+
+Co-developed-by: Muna Sinada <quic_msinada@quicinc.com>
+Signed-off-by: Muna Sinada <quic_msinada@quicinc.com>
+Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
+---
+ drivers/net/wireless/ath/ath12k/mac.c | 228 +++++++++++++++++---------
+ drivers/net/wireless/ath/ath12k/mac.h |  15 ++
+ drivers/net/wireless/ath/ath12k/wmi.h |  28 +---
+ 3 files changed, 169 insertions(+), 102 deletions(-)
+
+--- a/drivers/net/wireless/ath/ath12k/mac.c
++++ b/drivers/net/wireless/ath/ath12k/mac.c
+@@ -3215,6 +3215,125 @@ static int ath12k_setup_peer_smps(struct
+ 					 ath12k_smps_map[smps]);
+ }
+ 
++static int ath12k_mac_set_he_txbf_conf(struct ath12k_link_vif *arvif)
++{
++	struct ath12k_vif *ahvif = arvif->ahvif;
++	struct ath12k *ar = arvif->ar;
++	u32 param = WMI_VDEV_PARAM_SET_HEMU_MODE;
++	u32 value = 0;
++	int ret;
++	struct ieee80211_bss_conf *link_conf;
++
++	link_conf = ath12k_mac_get_link_bss_conf(arvif);
++	if (!link_conf) {
++		ath12k_warn(ar->ab, "unable to access bss link conf in txbf conf\n");
++		return -EINVAL;
++	}
++
++	if (!link_conf->he_support)
++		return 0;
++
++	if (link_conf->he_su_beamformer) {
++		value |= u32_encode_bits(HE_SU_BFER_ENABLE, HE_MODE_SU_TX_BFER);
++		if (link_conf->he_mu_beamformer &&
++		    ahvif->vdev_type == WMI_VDEV_TYPE_AP)
++			value |= u32_encode_bits(HE_MU_BFER_ENABLE, HE_MODE_MU_TX_BFER);
++	}
++
++	if (ahvif->vif->type != NL80211_IFTYPE_MESH_POINT) {
++		value |= u32_encode_bits(HE_DL_MUOFDMA_ENABLE, HE_MODE_DL_OFDMA) |
++			 u32_encode_bits(HE_UL_MUOFDMA_ENABLE, HE_MODE_UL_OFDMA);
++
++		if (link_conf->he_full_ul_mumimo)
++			value |= u32_encode_bits(HE_UL_MUMIMO_ENABLE, HE_MODE_UL_MUMIMO);
++
++		if (link_conf->he_su_beamformee)
++			value |= u32_encode_bits(HE_SU_BFEE_ENABLE, HE_MODE_SU_TX_BFEE);
++	}
++
++	ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id, param, value);
++	if (ret) {
++		ath12k_warn(ar->ab, "failed to set vdev %d HE MU mode: %d\n",
++			    arvif->vdev_id, ret);
++		return ret;
++	}
++
++	param = WMI_VDEV_PARAM_SET_HE_SOUNDING_MODE;
++	value =	u32_encode_bits(HE_VHT_SOUNDING_MODE_ENABLE, HE_VHT_SOUNDING_MODE) |
++		u32_encode_bits(HE_TRIG_NONTRIG_SOUNDING_MODE_ENABLE,
++				HE_TRIG_NONTRIG_SOUNDING_MODE);
++	ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id,
++					    param, value);
++	if (ret) {
++		ath12k_warn(ar->ab, "failed to set vdev %d sounding mode: %d\n",
++			    arvif->vdev_id, ret);
++		return ret;
++	}
++
++	return 0;
++}
++
++static int ath12k_mac_vif_recalc_sta_he_txbf(struct ath12k *ar,
++					     struct ath12k_link_vif *arvif,
++					     struct ieee80211_sta_he_cap *he_cap,
++					     int *hemode)
++{
++	struct ieee80211_vif *vif = arvif->ahvif->vif;
++	struct ieee80211_he_cap_elem he_cap_elem = {};
++	struct ieee80211_sta_he_cap *cap_band;
++	struct cfg80211_chan_def def;
++	u8 link_id = arvif->link_id;
++	struct ieee80211_bss_conf *link_conf;
++
++	link_conf = ath12k_mac_get_link_bss_conf(arvif);
++	if (!link_conf) {
++		ath12k_warn(ar->ab, "unable to access bss link conf in recalc txbf conf\n");
++		return -EINVAL;
++	}
++
++	if (!link_conf->he_support)
++		return 0;
++
++	if (vif->type != NL80211_IFTYPE_STATION)
++		return -EINVAL;
++
++	if (WARN_ON(ath12k_mac_vif_link_chan(vif, link_id, &def)))
++		return -EINVAL;
++
++	if (def.chan->band == NL80211_BAND_2GHZ)
++		cap_band = &ar->mac.iftype[NL80211_BAND_2GHZ][vif->type].he_cap;
++	else
++		cap_band = &ar->mac.iftype[NL80211_BAND_5GHZ][vif->type].he_cap;
++
++	memcpy(&he_cap_elem, &cap_band->he_cap_elem, sizeof(he_cap_elem));
++
++	*hemode = 0;
++	if (HECAP_PHY_SUBFME_GET(he_cap_elem.phy_cap_info)) {
++		if (HECAP_PHY_SUBFMR_GET(he_cap->he_cap_elem.phy_cap_info))
++			*hemode |= u32_encode_bits(HE_SU_BFEE_ENABLE, HE_MODE_SU_TX_BFEE);
++		if (HECAP_PHY_MUBFMR_GET(he_cap->he_cap_elem.phy_cap_info))
++			*hemode |= u32_encode_bits(HE_MU_BFEE_ENABLE, HE_MODE_MU_TX_BFEE);
++	}
++
++	if (vif->type != NL80211_IFTYPE_MESH_POINT) {
++		*hemode |= u32_encode_bits(HE_DL_MUOFDMA_ENABLE, HE_MODE_DL_OFDMA) |
++			  u32_encode_bits(HE_UL_MUOFDMA_ENABLE, HE_MODE_UL_OFDMA);
++
++		if (HECAP_PHY_ULMUMIMO_GET(he_cap_elem.phy_cap_info))
++			if (HECAP_PHY_ULMUMIMO_GET(he_cap->he_cap_elem.phy_cap_info))
++				*hemode |= u32_encode_bits(HE_UL_MUMIMO_ENABLE,
++							  HE_MODE_UL_MUMIMO);
++
++		if (u32_get_bits(*hemode, HE_MODE_MU_TX_BFEE))
++			*hemode |= u32_encode_bits(HE_SU_BFEE_ENABLE, HE_MODE_SU_TX_BFEE);
++
++		if (u32_get_bits(*hemode, HE_MODE_MU_TX_BFER))
++			*hemode |= u32_encode_bits(HE_SU_BFER_ENABLE, HE_MODE_SU_TX_BFER);
++	}
++
++	return 0;
++}
++
+ static void ath12k_bss_assoc(struct ath12k *ar,
+ 			     struct ath12k_link_vif *arvif,
+ 			     struct ieee80211_bss_conf *bss_conf)
+@@ -3229,6 +3348,7 @@ static void ath12k_bss_assoc(struct ath1
+ 	struct ath12k_sta *ahsta;
+ 	struct ath12k_peer *peer;
+ 	bool is_auth = false;
++	u32 hemode = 0;
+ 	int ret;
+ 
+ 	lockdep_assert_wiphy(ath12k_ar_to_hw(ar)->wiphy);
+@@ -3272,8 +3392,26 @@ static void ath12k_bss_assoc(struct ath1
+ 
+ 	ath12k_peer_assoc_prepare(ar, arvif, arsta, peer_arg, false);
+ 
++	/* link_sta->he_cap must be protected by rcu_read_lock */
++	ret = ath12k_mac_vif_recalc_sta_he_txbf(ar, arvif, &link_sta->he_cap, &hemode);
++	if (ret) {
++		ath12k_warn(ar->ab, "failed to recalc he txbf for vdev %i on bss %pM: %d\n",
++			    arvif->vdev_id, bss_conf->bssid, ret);
++		rcu_read_unlock();
++		return;
++	}
++
+ 	rcu_read_unlock();
+ 
++	/* keep this before ath12k_wmi_send_peer_assoc_cmd() */
++	ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id,
++					    WMI_VDEV_PARAM_SET_HEMU_MODE, hemode);
++	if (ret) {
++		ath12k_warn(ar->ab, "failed to submit vdev param txbf 0x%x: %d\n",
++			    hemode, ret);
++		return;
++	}
++
+ 	ret = ath12k_wmi_send_peer_assoc_cmd(ar, peer_arg);
+ 	if (ret) {
+ 		ath12k_warn(ar->ab, "failed to run peer assoc for %pM vdev %i: %d\n",
+@@ -3677,6 +3815,13 @@ static void ath12k_mac_bss_info_changed(
+ 		ether_addr_copy(arvif->bssid, info->bssid);
+ 
+ 	if (changed & BSS_CHANGED_BEACON_ENABLED) {
++		if (info->enable_beacon) {
++			ret = ath12k_mac_set_he_txbf_conf(arvif);
++			if (ret)
++				ath12k_warn(ar->ab,
++					    "failed to set HE TXBF config for vdev: %d\n",
++					    arvif->vdev_id);
++		}
+ 		ath12k_control_beaconing(arvif, info);
+ 
+ 		if (arvif->is_up && info->he_support &&
+@@ -6598,11 +6743,14 @@ static void ath12k_mac_copy_he_cap(struc
+ 
+ 	he_cap_elem->mac_cap_info[1] &=
+ 		IEEE80211_HE_MAC_CAP1_TF_MAC_PAD_DUR_MASK;
+-
++	he_cap_elem->phy_cap_info[0] &=
++		IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_40MHZ_IN_2G |
++		IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_40MHZ_80MHZ_IN_5G |
++		IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_160MHZ_IN_5G;
++	he_cap_elem->phy_cap_info[0] &=
++		~IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_80PLUS80_MHZ_IN_5G;
+ 	he_cap_elem->phy_cap_info[5] &=
+ 		~IEEE80211_HE_PHY_CAP5_BEAMFORMEE_NUM_SND_DIM_UNDER_80MHZ_MASK;
+-	he_cap_elem->phy_cap_info[5] &=
+-		~IEEE80211_HE_PHY_CAP5_BEAMFORMEE_NUM_SND_DIM_ABOVE_80MHZ_MASK;
+ 	he_cap_elem->phy_cap_info[5] |= num_tx_chains - 1;
+ 
+ 	switch (iftype) {
+@@ -7734,72 +7882,6 @@ static int ath12k_mac_setup_vdev_create_
+ 	return 0;
+ }
+ 
+-static u32
+-ath12k_mac_prepare_he_mode(struct ath12k_pdev *pdev, u32 viftype)
+-{
+-	struct ath12k_pdev_cap *pdev_cap = &pdev->cap;
+-	struct ath12k_band_cap *cap_band = NULL;
+-	u32 *hecap_phy_ptr = NULL;
+-	u32 hemode;
+-
+-	if (pdev->cap.supported_bands & WMI_HOST_WLAN_2G_CAP)
+-		cap_band = &pdev_cap->band[NL80211_BAND_2GHZ];
+-	else
+-		cap_band = &pdev_cap->band[NL80211_BAND_5GHZ];
+-
+-	hecap_phy_ptr = &cap_band->he_cap_phy_info[0];
+-
+-	hemode = u32_encode_bits(HE_SU_BFEE_ENABLE, HE_MODE_SU_TX_BFEE) |
+-		 u32_encode_bits(HECAP_PHY_SUBFMR_GET(hecap_phy_ptr),
+-				 HE_MODE_SU_TX_BFER) |
+-		 u32_encode_bits(HECAP_PHY_ULMUMIMO_GET(hecap_phy_ptr),
+-				 HE_MODE_UL_MUMIMO);
+-
+-	/* TODO: WDS and other modes */
+-	if (viftype == NL80211_IFTYPE_AP) {
+-		hemode |= u32_encode_bits(HECAP_PHY_MUBFMR_GET(hecap_phy_ptr),
+-					  HE_MODE_MU_TX_BFER) |
+-			  u32_encode_bits(HE_DL_MUOFDMA_ENABLE, HE_MODE_DL_OFDMA) |
+-			  u32_encode_bits(HE_UL_MUOFDMA_ENABLE, HE_MODE_UL_OFDMA);
+-	} else {
+-		hemode |= u32_encode_bits(HE_MU_BFEE_ENABLE, HE_MODE_MU_TX_BFEE);
+-	}
+-
+-	return hemode;
+-}
+-
+-static int ath12k_set_he_mu_sounding_mode(struct ath12k *ar,
+-					  struct ath12k_link_vif *arvif)
+-{
+-	u32 param_id, param_value;
+-	struct ath12k_base *ab = ar->ab;
+-	struct ath12k_vif *ahvif = arvif->ahvif;
+-	int ret;
+-
+-	param_id = WMI_VDEV_PARAM_SET_HEMU_MODE;
+-	param_value = ath12k_mac_prepare_he_mode(ar->pdev, ahvif->vif->type);
+-	ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id,
+-					    param_id, param_value);
+-	if (ret) {
+-		ath12k_warn(ab, "failed to set vdev %d HE MU mode: %d param_value %x\n",
+-			    arvif->vdev_id, ret, param_value);
+-		return ret;
+-	}
+-	param_id = WMI_VDEV_PARAM_SET_HE_SOUNDING_MODE;
+-	param_value =
+-		u32_encode_bits(HE_VHT_SOUNDING_MODE_ENABLE, HE_VHT_SOUNDING_MODE) |
+-		u32_encode_bits(HE_TRIG_NONTRIG_SOUNDING_MODE_ENABLE,
+-				HE_TRIG_NONTRIG_SOUNDING_MODE);
+-	ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id,
+-					    param_id, param_value);
+-	if (ret) {
+-		ath12k_warn(ab, "failed to set vdev %d HE MU mode: %d\n",
+-			    arvif->vdev_id, ret);
+-		return ret;
+-	}
+-	return ret;
+-}
+-
+ static void ath12k_mac_update_vif_offload(struct ath12k_link_vif *arvif)
+ {
+ 	struct ath12k_vif *ahvif = arvif->ahvif;
+@@ -8978,14 +9060,6 @@ ath12k_mac_vdev_start_restart(struct ath
+ 		spin_unlock_bh(&ab->base_lock);
+ 
+ 		/* TODO: Notify if secondary 80Mhz also needs radar detection */
+-		if (link_conf->he_support) {
+-			ret = ath12k_set_he_mu_sounding_mode(ar, arvif);
+-			if (ret) {
+-				ath12k_warn(ar->ab, "failed to set he mode vdev %i\n",
+-					    arg.vdev_id);
+-				return ret;
+-			}
+-		}
+ 	}
+ 
+ 	arg.passive |= !!(chandef->chan->flags & IEEE80211_CHAN_NO_IR);
+--- a/drivers/net/wireless/ath/ath12k/mac.h
++++ b/drivers/net/wireless/ath/ath12k/mac.h
+@@ -51,6 +51,21 @@ struct ath12k_generic_iter {
+ #define ATH12K_DEFAULT_SCAN_LINK	IEEE80211_MLD_MAX_NUM_LINKS
+ #define ATH12K_NUM_MAX_LINKS		(IEEE80211_MLD_MAX_NUM_LINKS + 1)
+ 
++#define HECAP_PHY_SUBFMR_GET(hecap_phy) \
++	u8_get_bits(hecap_phy[3], IEEE80211_HE_PHY_CAP3_SU_BEAMFORMER)
++
++#define HECAP_PHY_SUBFME_GET(hecap_phy) \
++	u8_get_bits(hecap_phy[4], IEEE80211_HE_PHY_CAP4_SU_BEAMFORMEE)
++
++#define HECAP_PHY_MUBFMR_GET(hecap_phy) \
++	u8_get_bits(hecap_phy[4], IEEE80211_HE_PHY_CAP4_MU_BEAMFORMER)
++
++#define HECAP_PHY_ULMUMIMO_GET(hecap_phy) \
++	u8_get_bits(hecap_phy[2], IEEE80211_HE_PHY_CAP2_UL_MU_FULL_MU_MIMO)
++
++#define HECAP_PHY_ULOFDMA_GET(hecap_phy) \
++	u8_get_bits(hecap_phy[2], IEEE80211_HE_PHY_CAP2_UL_MU_PARTIAL_MU_MIMO)
++
+ enum ath12k_supported_bw {
+ 	ATH12K_BW_20    = 0,
+ 	ATH12K_BW_40    = 1,
+--- a/drivers/net/wireless/ath/ath12k/wmi.h
++++ b/drivers/net/wireless/ath/ath12k/wmi.h
+@@ -3079,31 +3079,6 @@ struct ath12k_wmi_rx_reorder_queue_remov
+ #define WMI_VDEV_PARAM_TXBF_SU_TX_BFER BIT(2)
+ #define WMI_VDEV_PARAM_TXBF_MU_TX_BFER BIT(3)
+ 
+-#define HECAP_PHYDWORD_0	0
+-#define HECAP_PHYDWORD_1	1
+-#define HECAP_PHYDWORD_2	2
+-
+-#define HECAP_PHY_SU_BFER		BIT(31)
+-#define HECAP_PHY_SU_BFEE		BIT(0)
+-#define HECAP_PHY_MU_BFER		BIT(1)
+-#define HECAP_PHY_UL_MUMIMO		BIT(22)
+-#define HECAP_PHY_UL_MUOFDMA		BIT(23)
+-
+-#define HECAP_PHY_SUBFMR_GET(hecap_phy) \
+-	u32_get_bits(hecap_phy[HECAP_PHYDWORD_0], HECAP_PHY_SU_BFER)
+-
+-#define HECAP_PHY_SUBFME_GET(hecap_phy) \
+-	u32_get_bits(hecap_phy[HECAP_PHYDWORD_1], HECAP_PHY_SU_BFEE)
+-
+-#define HECAP_PHY_MUBFMR_GET(hecap_phy) \
+-	u32_get_bits(hecap_phy[HECAP_PHYDWORD_1], HECAP_PHY_MU_BFER)
+-
+-#define HECAP_PHY_ULMUMIMO_GET(hecap_phy) \
+-	u32_get_bits(hecap_phy[HECAP_PHYDWORD_0], HECAP_PHY_UL_MUMIMO)
+-
+-#define HECAP_PHY_ULOFDMA_GET(hecap_phy) \
+-	u32_get_bits(hecap_phy[HECAP_PHYDWORD_0], HECAP_PHY_UL_MUOFDMA)
+-
+ #define HE_MODE_SU_TX_BFEE	BIT(0)
+ #define HE_MODE_SU_TX_BFER	BIT(1)
+ #define HE_MODE_MU_TX_BFEE	BIT(2)
+@@ -3115,8 +3090,11 @@ struct ath12k_wmi_rx_reorder_queue_remov
+ #define HE_DL_MUOFDMA_ENABLE	1
+ #define HE_UL_MUOFDMA_ENABLE	1
+ #define HE_DL_MUMIMO_ENABLE	1
++#define HE_UL_MUMIMO_ENABLE	1
+ #define HE_MU_BFEE_ENABLE	1
+ #define HE_SU_BFEE_ENABLE	1
++#define HE_MU_BFER_ENABLE	1
++#define HE_SU_BFER_ENABLE	1
+ 
+ #define HE_VHT_SOUNDING_MODE_ENABLE		1
+ #define HE_SU_MU_SOUNDING_MODE_ENABLE		1
diff --git a/package/kernel/mac80211/patches/ath12k/104-2-wifi-ath12k-push-EHT-MU-MIMO-params-to-hardware.patch b/package/kernel/mac80211/patches/ath12k/104-2-wifi-ath12k-push-EHT-MU-MIMO-params-to-hardware.patch
new file mode 100644
index 0000000000..d733b5be23
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath12k/104-2-wifi-ath12k-push-EHT-MU-MIMO-params-to-hardware.patch
@@ -0,0 +1,242 @@
+From patchwork Wed May 21 22:45:32 2025
+Content-Type: text/plain; charset="utf-8"
+MIME-Version: 1.0
+Content-Transfer-Encoding: 7bit
+X-Patchwork-Submitter: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+X-Patchwork-Id: 14096119
+X-Patchwork-Delegate: quic_jjohnson@quicinc.com
+Received: from mx0b-0031df01.pphosted.com (mx0b-0031df01.pphosted.com
+ [205.220.180.131])
+	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
+	(No client certificate requested)
+	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 697B71A23AA
+	for <linux-wireless@vger.kernel.org>; Wed, 21 May 2025 22:45:58 +0000 (UTC)
+Authentication-Results: smtp.subspace.kernel.org;
+ arc=none smtp.client-ip=205.220.180.131
+ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
+	t=1747867560; cv=none;
+ b=XceXZ7CY2+FEzM9RuC10/cGW+vmyB2cX8QWJ3ckav7jiY5NYBQe1XW2asWcHaAEmOwdUh2iRT6imeiQLYue78g4UAcBErvihTGqlYL0m+10CQMNHmQZurUQkLPeFS0WAwlA+HBgcdp+Z71PhXs/ttQD6dF/8mlPaeGqxlTUoEcM=
+ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
+	s=arc-20240116; t=1747867560; c=relaxed/simple;
+	bh=mXjCwVOeMuqCjiNDATjkwHPrwNjm6Uv3d5yO5+bqbfk=;
+	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
+	 MIME-Version:Content-Type;
+ b=SeDDAI+0lqXCMqhleIhxgpdPq9QuWaPI9jj0JOqYiwOIVtAsNqQv7KQ+AMvXDQTsIe0LfA2l23stlXB7sLNpKHTM9JhPsLkafU7mvBaiwTxaJR5tEi4zGQZhsrKSn/awYszamnM81hQS3r9bBgS4oe8AeFV2/lDXYPXNHCGv0+w=
+ARC-Authentication-Results: i=1; smtp.subspace.kernel.org;
+ dmarc=pass (p=none dis=none) header.from=quicinc.com;
+ spf=pass smtp.mailfrom=quicinc.com;
+ dkim=pass (2048-bit key) header.d=quicinc.com header.i=@quicinc.com
+ header.b=DwzHO5rL; arc=none smtp.client-ip=205.220.180.131
+Authentication-Results: smtp.subspace.kernel.org;
+ dmarc=pass (p=none dis=none) header.from=quicinc.com
+Authentication-Results: smtp.subspace.kernel.org;
+ spf=pass smtp.mailfrom=quicinc.com
+Authentication-Results: smtp.subspace.kernel.org;
+	dkim=pass (2048-bit key) header.d=quicinc.com header.i=@quicinc.com
+ header.b="DwzHO5rL"
+Received: from pps.filterd (m0279869.ppops.net [127.0.0.1])
+	by mx0a-0031df01.pphosted.com (8.18.1.2/8.18.1.2) with ESMTP id
+ 54LJflLg012749;
+	Wed, 21 May 2025 22:45:53 GMT
+DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=quicinc.com; h=
+	cc:content-transfer-encoding:content-type:date:from:in-reply-to
+	:message-id:mime-version:references:subject:to; s=qcppdkim1; bh=
+	tiHJ0bp145D1K0TKBussv+a5p9S+5sP37NuNrmk03fg=; b=DwzHO5rLl1Vp87qm
+	lpxifM2nR9pLT0mgMqz/HRb/yTHCnS9oGDXzc24mnve2I/O9X/YT8q8qN+wjBlLB
+	4W7snIItVpffzrSmAJupTNtzj8qbmIYeti1zUlDdVoesUaICbdiDvSeCWPUtfeaz
+	tNKDOmBUTvCb+1qxxciQZhuRobmmkuRgcg8VkgCFP+OyG5o1OrUESYu3QeZ62Hle
+	ODt78jw+qe8cE9e2TxGEZhy++loik0tbF8D9P3cX5L+CdB+i4TyWnFxwvNgJciIx
+	RptE1lyB75UdrnAqETq0km4svwyidUuum/x0hqd6TvlDod3b7FD4tjbE7EP5iQ5V
+	Dw2tXA==
+Received: from nalasppmta01.qualcomm.com (Global_NAT1.qualcomm.com
+ [129.46.96.20])
+	by mx0a-0031df01.pphosted.com (PPS) with ESMTPS id 46rwf9carr-1
+	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
+	Wed, 21 May 2025 22:45:53 +0000 (GMT)
+Received: from nalasex01a.na.qualcomm.com (nalasex01a.na.qualcomm.com
+ [10.47.209.196])
+	by NALASPPMTA01.qualcomm.com (8.18.1.2/8.18.1.2) with ESMTPS id
+ 54LMjqtS008810
+	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
+	Wed, 21 May 2025 22:45:52 GMT
+Received: from ath12k-linux2.qualcomm.com (10.80.80.8) by
+ nalasex01a.na.qualcomm.com (10.47.209.196) with Microsoft SMTP Server
+ (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
+ 15.2.1544.9; Wed, 21 May 2025 15:45:52 -0700
+From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+To: <ath12k@lists.infradead.org>
+CC: <linux-wireless@vger.kernel.org>,
+        Pradeep Kumar Chitrapu
+	<quic_pradeepc@quicinc.com>,
+        Muna Sinada <quic_msinada@quicinc.com>,
+        "Jeff
+ Johnson" <quic_jjohnson@quicinc.com>
+Subject: [PATCH ath-next V14 2/9] wifi: ath12k: push EHT MU-MIMO params to
+ hardware
+Date: Wed, 21 May 2025 15:45:32 -0700
+Message-ID: <20250521224539.355985-3-quic_pradeepc@quicinc.com>
+X-Mailer: git-send-email 2.43.0
+In-Reply-To: <20250521224539.355985-1-quic_pradeepc@quicinc.com>
+References: <20250521224539.355985-1-quic_pradeepc@quicinc.com>
+Precedence: bulk
+X-Mailing-List: linux-wireless@vger.kernel.org
+List-Id: <linux-wireless.vger.kernel.org>
+List-Subscribe: <mailto:linux-wireless+subscribe@vger.kernel.org>
+List-Unsubscribe: <mailto:linux-wireless+unsubscribe@vger.kernel.org>
+MIME-Version: 1.0
+X-ClientProxiedBy: nasanex01a.na.qualcomm.com (10.52.223.231) To
+ nalasex01a.na.qualcomm.com (10.47.209.196)
+X-QCInternal: smtphost
+X-Proofpoint-Virus-Version: vendor=nai engine=6200 definitions=5800
+ signatures=585085
+X-Proofpoint-ORIG-GUID: _eaDrXLa14UhDtRJT-hk8Y6z1fwFI6QB
+X-Proofpoint-Spam-Details-Enc: AW1haW4tMjUwNTIxMDIyNSBTYWx0ZWRfX7QgTyyXEHZM8
+ OnUvphQD/4J77Z8iHm4hJQIe6duMI5HbpiWELH5aRxqU7pFuvCjmltcmWPjwls9DzTkJnDGHMjo
+ FuBarQpMaZO8eQsx97aM8WpE0dpJHROE1ZRZ3SV8VEoTHHG712fvPw+oUWaZo6WccaEbxH9x9+W
+ n76tkFOOopbjRgOBmCokHCrfZmCMKcT4FLUFoiIDn0Fv8b/WKaut3Z+1hrEwcOuXCJv4X1QIOcx
+ 6NCnxNr8y1O1cwqXg3pBhHB+BpcLiEat6TlD9bH/5oUZHFce4W1jkZYs2J5VJnzLDeQxq8xBhP0
+ Qal3bpuUPyWAMKZKH/uAEXwEZ5ZMghUioGuc78EBMJhSXa2VsT3lhmJtc/CaHDqNKFrp01I/KAh
+ 7UcIN/PKb8qOKrHE8/8cpuHgoBgB24X84Qo5rORKfnW4s7FbS0xkcs2ZV2TI0AIGz4eEZAOY
+X-Authority-Analysis: v=2.4 cv=GawXnRXL c=1 sm=1 tr=0 ts=682e57a1 cx=c_pps
+ a=ouPCqIW2jiPt+lZRy3xVPw==:117 a=ouPCqIW2jiPt+lZRy3xVPw==:17
+ a=GEpy-HfZoHoA:10 a=dt9VzEwgFbYA:10 a=COk6AnOGAAAA:8 a=uoU_VXRAPQDrZd00miQA:9
+ a=TjNXssC_j7lpFel5tvFf:22
+X-Proofpoint-GUID: _eaDrXLa14UhDtRJT-hk8Y6z1fwFI6QB
+X-Proofpoint-Virus-Version: vendor=baseguard
+ engine=ICAP:2.0.293,Aquarius:18.0.1099,Hydra:6.0.736,FMLib:17.12.80.40
+ definitions=2025-05-21_07,2025-05-20_03,2025-03-28_01
+X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
+ mlxscore=0 mlxlogscore=999 lowpriorityscore=0 impostorscore=0
+ priorityscore=1501 clxscore=1015 malwarescore=0 phishscore=0 bulkscore=0
+ spamscore=0 suspectscore=0 adultscore=0 classifier=spam authscore=0
+ authtc=n/a authcc= route=outbound adjust=0 reason=mlx scancount=1
+ engine=8.19.0-2505160000 definitions=main-2505210225
+
+Currently, only the EHT IE in management frames is updated with
+respect to MU-MIMO configurations, but this change is not
+reflected in the hardware. Add support to propagate MU-MIMO
+configurations to the hardware as well for AP mode. Similar
+support for STA mode will be added in future.
+
+Tested-on: QCN9274 hw2.0 PCI WLAN.WBE.1.0.1-00029-QCAHKSWPL_SILICONZ-1
+
+Co-developed-by: Muna Sinada <quic_msinada@quicinc.com>
+Signed-off-by: Muna Sinada <quic_msinada@quicinc.com>
+Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
+---
+ drivers/net/wireless/ath/ath12k/mac.c | 58 +++++++++++++++++++++++++++
+ drivers/net/wireless/ath/ath12k/wmi.h | 21 ++++++++++
+ 2 files changed, 79 insertions(+)
+
+--- a/drivers/net/wireless/ath/ath12k/mac.c
++++ b/drivers/net/wireless/ath/ath12k/mac.c
+@@ -3334,6 +3334,58 @@ static int ath12k_mac_vif_recalc_sta_he_
+ 	return 0;
+ }
+ 
++static int ath12k_mac_set_eht_txbf_conf(struct ath12k_link_vif *arvif)
++{
++	struct ath12k_vif *ahvif = arvif->ahvif;
++	struct ath12k *ar = arvif->ar;
++	u32 param = WMI_VDEV_PARAM_SET_EHT_MU_MODE;
++	u32 value = 0;
++	int ret;
++	struct ieee80211_bss_conf *link_conf;
++
++	link_conf = ath12k_mac_get_link_bss_conf(arvif);
++	if (!link_conf) {
++		ath12k_warn(ar->ab, "unable to access bss link conf in eht txbf conf\n");
++		return -ENOENT;
++	}
++
++	if (!link_conf->eht_support)
++		return 0;
++
++	if (link_conf->eht_su_beamformer) {
++		value |= u32_encode_bits(EHT_SU_BFER_ENABLE, EHT_MODE_SU_TX_BFER);
++		if (link_conf->eht_mu_beamformer &&
++		    ahvif->vdev_type == WMI_VDEV_TYPE_AP)
++			value |= u32_encode_bits(EHT_MU_BFER_ENABLE,
++						 EHT_MODE_MU_TX_BFER) |
++				 u32_encode_bits(EHT_DL_MUOFDMA_ENABLE,
++						 EHT_MODE_DL_OFDMA_MUMIMO) |
++				 u32_encode_bits(EHT_UL_MUOFDMA_ENABLE,
++						 EHT_MODE_UL_OFDMA_MUMIMO);
++	}
++
++	if (ahvif->vif->type != NL80211_IFTYPE_MESH_POINT) {
++		value |= u32_encode_bits(EHT_DL_MUOFDMA_ENABLE, EHT_MODE_DL_OFDMA) |
++			 u32_encode_bits(EHT_UL_MUOFDMA_ENABLE, EHT_MODE_UL_OFDMA);
++
++		if (link_conf->eht_80mhz_full_bw_ul_mumimo)
++			value |= u32_encode_bits(EHT_UL_MUMIMO_ENABLE, EHT_MODE_MUMIMO);
++
++		if (link_conf->eht_su_beamformee)
++			value |= u32_encode_bits(EHT_SU_BFEE_ENABLE,
++						 EHT_MODE_SU_TX_BFEE);
++	}
++
++	ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id, param, value);
++	if (ret) {
++		ath12k_warn(ar->ab, "failed to set vdev %d EHT MU mode: %d\n",
++			    arvif->vdev_id, ret);
++		return ret;
++	}
++
++	return 0;
++}
++
+ static void ath12k_bss_assoc(struct ath12k *ar,
+ 			     struct ath12k_link_vif *arvif,
+ 			     struct ieee80211_bss_conf *bss_conf)
+@@ -3821,6 +3873,12 @@ static void ath12k_mac_bss_info_changed(
+ 				ath12k_warn(ar->ab,
+ 					    "failed to set HE TXBF config for vdev: %d\n",
+ 					    arvif->vdev_id);
++
++			ret = ath12k_mac_set_eht_txbf_conf(arvif);
++			if (ret)
++				ath12k_warn(ar->ab,
++					    "failed to set EHT TXBF config for vdev: %d\n",
++					    arvif->vdev_id);
+ 		}
+ 		ath12k_control_beaconing(arvif, info);
+ 
+--- a/drivers/net/wireless/ath/ath12k/wmi.h
++++ b/drivers/net/wireless/ath/ath12k/wmi.h
+@@ -1152,6 +1152,7 @@ enum wmi_tlv_vdev_param {
+ 	WMI_VDEV_PARAM_BSS_COLOR,
+ 	WMI_VDEV_PARAM_SET_HEMU_MODE,
+ 	WMI_VDEV_PARAM_HEOPS_0_31 = 0x8003,
++	WMI_VDEV_PARAM_SET_EHT_MU_MODE = 0x8005,
+ };
+ 
+ enum wmi_tlv_peer_flags {
+@@ -3096,6 +3097,26 @@ struct ath12k_wmi_rx_reorder_queue_remov
+ #define HE_MU_BFER_ENABLE	1
+ #define HE_SU_BFER_ENABLE	1
+ 
++#define EHT_MODE_SU_TX_BFEE		BIT(0)
++#define EHT_MODE_SU_TX_BFER		BIT(1)
++#define EHT_MODE_MU_TX_BFEE		BIT(2)
++#define EHT_MODE_MU_TX_BFER		BIT(3)
++#define EHT_MODE_DL_OFDMA		BIT(4)
++#define EHT_MODE_UL_OFDMA		BIT(5)
++#define EHT_MODE_MUMIMO			BIT(6)
++#define EHT_MODE_DL_OFDMA_TXBF		BIT(7)
++#define EHT_MODE_DL_OFDMA_MUMIMO	BIT(8)
++#define EHT_MODE_UL_OFDMA_MUMIMO	BIT(9)
++
++#define EHT_DL_MUOFDMA_ENABLE    1
++#define EHT_UL_MUOFDMA_ENABLE    1
++#define EHT_DL_MUMIMO_ENABLE     1
++#define EHT_UL_MUMIMO_ENABLE     1
++#define EHT_MU_BFEE_ENABLE       1
++#define EHT_SU_BFEE_ENABLE       1
++#define EHT_MU_BFER_ENABLE       1
++#define EHT_SU_BFER_ENABLE       1
++
+ #define HE_VHT_SOUNDING_MODE_ENABLE		1
+ #define HE_SU_MU_SOUNDING_MODE_ENABLE		1
+ #define HE_TRIG_NONTRIG_SOUNDING_MODE_ENABLE	1
diff --git a/package/kernel/mac80211/patches/ath12k/104-3-wifi-ath12k-move-HE-MCS-mapper-to-a-separate-function.patch b/package/kernel/mac80211/patches/ath12k/104-3-wifi-ath12k-move-HE-MCS-mapper-to-a-separate-function.patch
new file mode 100644
index 0000000000..ee0f20fe17
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath12k/104-3-wifi-ath12k-move-HE-MCS-mapper-to-a-separate-function.patch
@@ -0,0 +1,173 @@
+From patchwork Wed May 21 22:45:33 2025
+Content-Type: text/plain; charset="utf-8"
+MIME-Version: 1.0
+Content-Transfer-Encoding: 7bit
+X-Patchwork-Submitter: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+X-Patchwork-Id: 14096126
+X-Patchwork-Delegate: quic_jjohnson@quicinc.com
+Received: from mx0a-0031df01.pphosted.com (mx0a-0031df01.pphosted.com
+ [205.220.168.131])
+	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
+	(No client certificate requested)
+	by smtp.subspace.kernel.org (Postfix) with ESMTPS id A4E00239570
+	for <linux-wireless@vger.kernel.org>; Wed, 21 May 2025 22:46:01 +0000 (UTC)
+Authentication-Results: smtp.subspace.kernel.org;
+ arc=none smtp.client-ip=205.220.168.131
+ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
+	t=1747867563; cv=none;
+ b=m0NU8tyG2d1pHiYNjTYhCTeGXC0pFtHNZTKxb+dc5AEzzUCa75lxPxtYFZApv1QHaLqo3lGkZ+ADhqhj/V82GA+bUeetm3hSsnyGgjbayU3IzqeO09+VPkt9sx9hdrTMlVGEI4c5881Zho41rlVW65O/SlmqRi4J/ajQzA4tiGQ=
+ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
+	s=arc-20240116; t=1747867563; c=relaxed/simple;
+	bh=0bTV82dMwisd7nmbtolnSKswG/aTjqN0YxpAx66Oqv8=;
+	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
+	 MIME-Version:Content-Type;
+ b=jOkezej/N9fmvOtPNCGPpnPNtoQ+pAG4k1zAiw3xnL1iikk7VcJlbXDCrGUithxMZE2513zz/fsfDjXx0AMi4YT1ISljvGCw9B0dGQ5ECiFfoGLc+12nnsvqjiXI5zla6C1iX7bgtJjv/OYWzoY0TR5jI28CZWC/Pa9fT/X0duw=
+ARC-Authentication-Results: i=1; smtp.subspace.kernel.org;
+ dmarc=pass (p=none dis=none) header.from=quicinc.com;
+ spf=pass smtp.mailfrom=quicinc.com;
+ dkim=pass (2048-bit key) header.d=quicinc.com header.i=@quicinc.com
+ header.b=UqUMYAcW; arc=none smtp.client-ip=205.220.168.131
+Authentication-Results: smtp.subspace.kernel.org;
+ dmarc=pass (p=none dis=none) header.from=quicinc.com
+Authentication-Results: smtp.subspace.kernel.org;
+ spf=pass smtp.mailfrom=quicinc.com
+Authentication-Results: smtp.subspace.kernel.org;
+	dkim=pass (2048-bit key) header.d=quicinc.com header.i=@quicinc.com
+ header.b="UqUMYAcW"
+Received: from pps.filterd (m0279866.ppops.net [127.0.0.1])
+	by mx0a-0031df01.pphosted.com (8.18.1.2/8.18.1.2) with ESMTP id
+ 54LIDlKw013406;
+	Wed, 21 May 2025 22:45:53 GMT
+DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=quicinc.com; h=
+	cc:content-transfer-encoding:content-type:date:from:in-reply-to
+	:message-id:mime-version:references:subject:to; s=qcppdkim1; bh=
+	tYXOeicncMlFjsw5kmnB5kxC/Nrj/HibF1jgO4m8lhM=; b=UqUMYAcWWQ07Z79h
+	GESSroshxr6zIUBw3jr/ESGDCO554RYWZZh9PXJxjTRM3ceCrNHNpCAT+mqXXiWy
+	eb+l7G0W+s1l/MStBq7B43CSdKxljZtlkC/JsHk6DQjBacQzVB8qAiq3ShbR/vn7
+	ud3kzjHtYsfLvIpi+8wLTkE1in8E/CUFZ4bea866xldnrcOVEa7EuxKwKXj3sLhE
+	8n3IsPUIYGLKnEFkmWFZTXTqlEOV9lVYdTxeDAUBxII8PQIKu+dlB/UWffTFTSOd
+	aQDPK5N6y8x29E2fugyy2XBSEFskz50Jb60+kJhHFGTgl5cQw+NfymuC9SQJBWaE
+	HFZu+w==
+Received: from nalasppmta02.qualcomm.com (Global_NAT1.qualcomm.com
+ [129.46.96.20])
+	by mx0a-0031df01.pphosted.com (PPS) with ESMTPS id 46rwh5cfg1-1
+	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
+	Wed, 21 May 2025 22:45:53 +0000 (GMT)
+Received: from nalasex01a.na.qualcomm.com (nalasex01a.na.qualcomm.com
+ [10.47.209.196])
+	by NALASPPMTA02.qualcomm.com (8.18.1.2/8.18.1.2) with ESMTPS id
+ 54LMjqn9020293
+	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
+	Wed, 21 May 2025 22:45:52 GMT
+Received: from ath12k-linux2.qualcomm.com (10.80.80.8) by
+ nalasex01a.na.qualcomm.com (10.47.209.196) with Microsoft SMTP Server
+ (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
+ 15.2.1544.9; Wed, 21 May 2025 15:45:52 -0700
+From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+To: <ath12k@lists.infradead.org>
+CC: <linux-wireless@vger.kernel.org>,
+        Pradeep Kumar Chitrapu
+	<quic_pradeepc@quicinc.com>,
+        Muna Sinada <quic_msinada@quicinc.com>,
+        "Jeff
+ Johnson" <quic_jjohnson@quicinc.com>
+Subject: [PATCH ath-next V14 3/9] wifi: ath12k: move HE MCS mapper to a
+ separate function
+Date: Wed, 21 May 2025 15:45:33 -0700
+Message-ID: <20250521224539.355985-4-quic_pradeepc@quicinc.com>
+X-Mailer: git-send-email 2.43.0
+In-Reply-To: <20250521224539.355985-1-quic_pradeepc@quicinc.com>
+References: <20250521224539.355985-1-quic_pradeepc@quicinc.com>
+Precedence: bulk
+X-Mailing-List: linux-wireless@vger.kernel.org
+List-Id: <linux-wireless.vger.kernel.org>
+List-Subscribe: <mailto:linux-wireless+subscribe@vger.kernel.org>
+List-Unsubscribe: <mailto:linux-wireless+unsubscribe@vger.kernel.org>
+MIME-Version: 1.0
+X-ClientProxiedBy: nasanex01a.na.qualcomm.com (10.52.223.231) To
+ nalasex01a.na.qualcomm.com (10.47.209.196)
+X-QCInternal: smtphost
+X-Proofpoint-Virus-Version: vendor=nai engine=6200 definitions=5800
+ signatures=585085
+X-Proofpoint-Spam-Details-Enc: AW1haW4tMjUwNTIxMDIyNiBTYWx0ZWRfX0c42ymLt+PTP
+ 1OuRw1LMafhFmBy7Y+zhs50WttVxoryUfqamicOcfcFB1N0ReYFgzeQ7geC/w54E8E6mzQDYeie
+ WWkPGvuIyvtCjzhBcBwz1A7W/LdsI7Od6+VlXyCuAp4pbCASB7kqVnI7Neak6mvdIQIW5khVLX7
+ r/364Kop8/BPQzOVUZf5snfx4TBCgWauiHZQBTJupIn1Tf8+NctUXB8H3QNfu8zJTLVrBA3rtt1
+ +yjeNOHom4U/t0u5Vzxu+8XctXsWHoYytfluXbsRo7WNut0MwPSY8GCm7RQ2wDQp0CzdactGb6t
+ KCMvNcpkDRjEtOdkNtf2BeVHF1yJKxuibe6qssobLjTadJRkC33xnz5E+hzF6sEZlg7JWok01h4
+ OxWFUldQYnF/eQjZYTQcgLyH91h9gWkvz0YJWKGCrg0PlxqeIFS/SQvVNs7qMnsX0qrXb7NV
+X-Authority-Analysis: v=2.4 cv=XeWJzJ55 c=1 sm=1 tr=0 ts=682e57a1 cx=c_pps
+ a=ouPCqIW2jiPt+lZRy3xVPw==:117 a=ouPCqIW2jiPt+lZRy3xVPw==:17
+ a=GEpy-HfZoHoA:10 a=dt9VzEwgFbYA:10 a=COk6AnOGAAAA:8 a=4Pgy4kl5F6fn7-PMLAkA:9
+ a=TjNXssC_j7lpFel5tvFf:22
+X-Proofpoint-GUID: CVZHk1FyIP3eCYHbVaXVp1fjSAGIjnVJ
+X-Proofpoint-ORIG-GUID: CVZHk1FyIP3eCYHbVaXVp1fjSAGIjnVJ
+X-Proofpoint-Virus-Version: vendor=baseguard
+ engine=ICAP:2.0.293,Aquarius:18.0.1099,Hydra:6.0.736,FMLib:17.12.80.40
+ definitions=2025-05-21_07,2025-05-20_03,2025-03-28_01
+X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
+ phishscore=0 clxscore=1015 mlxlogscore=999 mlxscore=0 bulkscore=0 spamscore=0
+ suspectscore=0 impostorscore=0 adultscore=0 malwarescore=0 lowpriorityscore=0
+ priorityscore=1501 classifier=spam authscore=0 authtc=n/a authcc=
+ route=outbound adjust=0 reason=mlx scancount=1 engine=8.19.0-2505160000
+ definitions=main-2505210226
+
+Refactor the HE MCS mapper functionality in
+ath12k_mac_copy_he_cap() into a new function.
+
+This helps improve readability, extensibility and will be used
+when adding support for 160 MHz bandwidth in subsequent patches.
+
+Tested-on: QCN9274 hw2.0 PCI WLAN.WBE.1.0.1-00029-QCAHKSWPL_SILICONZ-1
+
+Co-developed-by: Muna Sinada <quic_msinada@quicinc.com>
+Signed-off-by: Muna Sinada <quic_msinada@quicinc.com>
+Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
+---
+ drivers/net/wireless/ath/ath12k/mac.c | 22 ++++++++++++++--------
+ 1 file changed, 14 insertions(+), 8 deletions(-)
+
+--- a/drivers/net/wireless/ath/ath12k/mac.c
++++ b/drivers/net/wireless/ath/ath12k/mac.c
+@@ -6786,12 +6786,24 @@ static __le16 ath12k_mac_setup_he_6ghz_c
+ 	return cpu_to_le16(bcap->he_6ghz_capa);
+ }
+ 
++static void ath12k_mac_set_hemcsmap(struct ath12k_band_cap *band_cap,
++				    struct ieee80211_sta_he_cap *he_cap)
++{
++	struct ieee80211_he_mcs_nss_supp *mcs_nss = &he_cap->he_mcs_nss_supp;
++
++	mcs_nss->rx_mcs_80 = cpu_to_le16(band_cap->he_mcs & 0xffff);
++	mcs_nss->tx_mcs_80 = cpu_to_le16(band_cap->he_mcs & 0xffff);
++	mcs_nss->rx_mcs_160 = cpu_to_le16((band_cap->he_mcs >> 16) & 0xffff);
++	mcs_nss->tx_mcs_160 = cpu_to_le16((band_cap->he_mcs >> 16) & 0xffff);
++	mcs_nss->rx_mcs_80p80 = cpu_to_le16((band_cap->he_mcs >> 16) & 0xffff);
++	mcs_nss->tx_mcs_80p80 = cpu_to_le16((band_cap->he_mcs >> 16) & 0xffff);
++}
++
+ static void ath12k_mac_copy_he_cap(struct ath12k_band_cap *band_cap,
+ 				   int iftype, u8 num_tx_chains,
+ 				   struct ieee80211_sta_he_cap *he_cap)
+ {
+ 	struct ieee80211_he_cap_elem *he_cap_elem = &he_cap->he_cap_elem;
+-	struct ieee80211_he_mcs_nss_supp *mcs_nss = &he_cap->he_mcs_nss_supp;
+ 
+ 	he_cap->has_he = true;
+ 	memcpy(he_cap_elem->mac_cap_info, band_cap->he_cap_info,
+@@ -6829,13 +6841,7 @@ static void ath12k_mac_copy_he_cap(struc
+ 		break;
+ 	}
+ 
+-	mcs_nss->rx_mcs_80 = cpu_to_le16(band_cap->he_mcs & 0xffff);
+-	mcs_nss->tx_mcs_80 = cpu_to_le16(band_cap->he_mcs & 0xffff);
+-	mcs_nss->rx_mcs_160 = cpu_to_le16((band_cap->he_mcs >> 16) & 0xffff);
+-	mcs_nss->tx_mcs_160 = cpu_to_le16((band_cap->he_mcs >> 16) & 0xffff);
+-	mcs_nss->rx_mcs_80p80 = cpu_to_le16((band_cap->he_mcs >> 16) & 0xffff);
+-	mcs_nss->tx_mcs_80p80 = cpu_to_le16((band_cap->he_mcs >> 16) & 0xffff);
+-
++	ath12k_mac_set_hemcsmap(band_cap, he_cap);
+ 	memset(he_cap->ppe_thres, 0, sizeof(he_cap->ppe_thres));
+ 	if (he_cap_elem->phy_cap_info[6] &
+ 	    IEEE80211_HE_PHY_CAP6_PPE_THRESHOLD_PRESENT)
diff --git a/package/kernel/mac80211/patches/ath12k/104-4-wifi-ath12k-generate-rx-and-tx-mcs-maps-for-supported-HE-mcs.patch b/package/kernel/mac80211/patches/ath12k/104-4-wifi-ath12k-generate-rx-and-tx-mcs-maps-for-supported-HE-mcs.patch
new file mode 100644
index 0000000000..848fd412f9
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath12k/104-4-wifi-ath12k-generate-rx-and-tx-mcs-maps-for-supported-HE-mcs.patch
@@ -0,0 +1,197 @@
+From patchwork Wed May 21 22:45:34 2025
+Content-Type: text/plain; charset="utf-8"
+MIME-Version: 1.0
+Content-Transfer-Encoding: 7bit
+X-Patchwork-Submitter: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+X-Patchwork-Id: 14096123
+X-Patchwork-Delegate: quic_jjohnson@quicinc.com
+Received: from mx0b-0031df01.pphosted.com (mx0b-0031df01.pphosted.com
+ [205.220.180.131])
+	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
+	(No client certificate requested)
+	by smtp.subspace.kernel.org (Postfix) with ESMTPS id A3C04239581
+	for <linux-wireless@vger.kernel.org>; Wed, 21 May 2025 22:45:57 +0000 (UTC)
+Authentication-Results: smtp.subspace.kernel.org;
+ arc=none smtp.client-ip=205.220.180.131
+ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
+	t=1747867561; cv=none;
+ b=JUfYB6YNOea3E6luldlHf63eW7OUVXEtawJXGCeH7nt9iIJpG0ODfz3v+Zl+gtQtUZ1ELh/UAhCubbThHH30w661eEN5+cQarbiqdd1cN5dnkAsmZUNSD6l//QpurFV6Wsvv4Nr2fYgyuAVHf9JDoITZKNEbIki68J7WTV+fieU=
+ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
+	s=arc-20240116; t=1747867561; c=relaxed/simple;
+	bh=e6/wBkUC5dKwNLeEqNLmC/3pJt4EcGfxZRx+zntD5Ek=;
+	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
+	 MIME-Version:Content-Type;
+ b=bg3Y4gdyPqhSKZtqqeN+SjMvTgg+BVUsyqAvkS3YPjV+C7dPwxcByNFjDRsuBqwHuSvgolo2ISExqyfJkgT6Flp4H+hriFJHcMdI0WmDf9NrBPI+E07JvNLDvP5X59C6pSrqpjXYngUV6AvPCJL7ynVBFF80h0neCm0IRu8Ur8w=
+ARC-Authentication-Results: i=1; smtp.subspace.kernel.org;
+ dmarc=pass (p=none dis=none) header.from=quicinc.com;
+ spf=pass smtp.mailfrom=quicinc.com;
+ dkim=pass (2048-bit key) header.d=quicinc.com header.i=@quicinc.com
+ header.b=LbIprPEi; arc=none smtp.client-ip=205.220.180.131
+Authentication-Results: smtp.subspace.kernel.org;
+ dmarc=pass (p=none dis=none) header.from=quicinc.com
+Authentication-Results: smtp.subspace.kernel.org;
+ spf=pass smtp.mailfrom=quicinc.com
+Authentication-Results: smtp.subspace.kernel.org;
+	dkim=pass (2048-bit key) header.d=quicinc.com header.i=@quicinc.com
+ header.b="LbIprPEi"
+Received: from pps.filterd (m0279873.ppops.net [127.0.0.1])
+	by mx0a-0031df01.pphosted.com (8.18.1.2/8.18.1.2) with ESMTP id
+ 54LIdAVE024983;
+	Wed, 21 May 2025 22:45:54 GMT
+DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=quicinc.com; h=
+	cc:content-transfer-encoding:content-type:date:from:in-reply-to
+	:message-id:mime-version:references:subject:to; s=qcppdkim1; bh=
+	oR9JZ4DE7PwiZ/DcP72BpK9yTZspsBeRbWSrP3w24nY=; b=LbIprPEif55TZs6Z
+	ZsvTaIhFDxESbkxn/avX548dzh51JY3wFWHowpcPEnJJdIE1oNPWkxrPo0hHkyUb
+	UICPtIHoZHdMwN/uHPyglzBnBLNP82LGLHZI5eHx6jVz4INyCFm1Gmof8YNLLIo/
+	pTKj4Qx3OO0jH6zSnAoKIIg39v5TWetjVZbL2qbNR+GImD0RtoefBQxRgyJWn11r
+	O3ycFAW9xlW8wYJql07vue+hM3MWNtk5EPqF70c7JrrmMAYvTyOFuP0Kaf11szIB
+	mF4bMyb+bb1/QA6moW7LDIoDBWEjCLINcTdGUPTnwnfBWlxZJhZoMqzU9ZuZgvsR
+	1UjthA==
+Received: from nalasppmta05.qualcomm.com (Global_NAT1.qualcomm.com
+ [129.46.96.20])
+	by mx0a-0031df01.pphosted.com (PPS) with ESMTPS id 46rwf4vc5x-1
+	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
+	Wed, 21 May 2025 22:45:54 +0000 (GMT)
+Received: from nalasex01a.na.qualcomm.com (nalasex01a.na.qualcomm.com
+ [10.47.209.196])
+	by NALASPPMTA05.qualcomm.com (8.18.1.2/8.18.1.2) with ESMTPS id
+ 54LMjrWL023291
+	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
+	Wed, 21 May 2025 22:45:53 GMT
+Received: from ath12k-linux2.qualcomm.com (10.80.80.8) by
+ nalasex01a.na.qualcomm.com (10.47.209.196) with Microsoft SMTP Server
+ (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
+ 15.2.1544.9; Wed, 21 May 2025 15:45:52 -0700
+From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+To: <ath12k@lists.infradead.org>
+CC: <linux-wireless@vger.kernel.org>,
+        Pradeep Kumar Chitrapu
+	<quic_pradeepc@quicinc.com>,
+        Muna Sinada <quic_msinada@quicinc.com>,
+        "Jeff
+ Johnson" <quic_jjohnson@quicinc.com>
+Subject: [PATCH ath-next V14 4/9] wifi: ath12k: generate rx and tx mcs maps
+ for supported HE mcs
+Date: Wed, 21 May 2025 15:45:34 -0700
+Message-ID: <20250521224539.355985-5-quic_pradeepc@quicinc.com>
+X-Mailer: git-send-email 2.43.0
+In-Reply-To: <20250521224539.355985-1-quic_pradeepc@quicinc.com>
+References: <20250521224539.355985-1-quic_pradeepc@quicinc.com>
+Precedence: bulk
+X-Mailing-List: linux-wireless@vger.kernel.org
+List-Id: <linux-wireless.vger.kernel.org>
+List-Subscribe: <mailto:linux-wireless+subscribe@vger.kernel.org>
+List-Unsubscribe: <mailto:linux-wireless+unsubscribe@vger.kernel.org>
+MIME-Version: 1.0
+X-ClientProxiedBy: nasanex01a.na.qualcomm.com (10.52.223.231) To
+ nalasex01a.na.qualcomm.com (10.47.209.196)
+X-QCInternal: smtphost
+X-Proofpoint-Virus-Version: vendor=nai engine=6200 definitions=5800
+ signatures=585085
+X-Proofpoint-GUID: mYgnUwiU6CWGXCKmK4mo491eQG1yf62Y
+X-Proofpoint-ORIG-GUID: mYgnUwiU6CWGXCKmK4mo491eQG1yf62Y
+X-Proofpoint-Spam-Details-Enc: AW1haW4tMjUwNTIxMDIyNiBTYWx0ZWRfX1nkoUF8smaXX
+ IWIOVUfe7hMPdAVBJy7J1imFvumQnVaEdoZ98Hgv5FTjeK2Ebgl2R2fohvg1z4LsyCLnU8qfg96
+ 1OdC0+PM8u7DhRIEnk7H2EZt0UJoJRxlc7daiIvimTjbBLu53yfgzses5Gth0zLCzoih5ffW/H5
+ 1h2tf1ZE4W6AmHjQJc+WE0P3RhBMdl286VT/kc0ko03He0+5/QdxsynqL2e4svB4f3035pzXOEK
+ dUS4nBFSZJXuBkq0d//SizRJgH9egq51A/OVPm8om04qEcOK3x9OmrrborAen5I0iuLaqAMMBXa
+ nlUKQ4fpPRovjAByevo6BIIwB698Nmo72bZcFiWOocONR92lAssB6pFXJnuwOC6VQ7MJE7DKc0x
+ 5UnlyGSMzMAM7cQXuGFk1AK16e6Tu/rC5YA6A4ogDKajrcBGepxGFKcZ+xK4+BwuwgI4Qysv
+X-Authority-Analysis: v=2.4 cv=R7UDGcRX c=1 sm=1 tr=0 ts=682e57a2 cx=c_pps
+ a=ouPCqIW2jiPt+lZRy3xVPw==:117 a=ouPCqIW2jiPt+lZRy3xVPw==:17
+ a=GEpy-HfZoHoA:10 a=dt9VzEwgFbYA:10 a=COk6AnOGAAAA:8 a=WmtfbAKxhnfIJFSrnnQA:9
+ a=TjNXssC_j7lpFel5tvFf:22
+X-Proofpoint-Virus-Version: vendor=baseguard
+ engine=ICAP:2.0.293,Aquarius:18.0.1099,Hydra:6.0.736,FMLib:17.12.80.40
+ definitions=2025-05-21_07,2025-05-20_03,2025-03-28_01
+X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
+ phishscore=0 clxscore=1015 mlxlogscore=999 priorityscore=1501 spamscore=0
+ bulkscore=0 lowpriorityscore=0 malwarescore=0 suspectscore=0 mlxscore=0
+ impostorscore=0 adultscore=0 classifier=spam authscore=0 authtc=n/a authcc=
+ route=outbound adjust=0 reason=mlx scancount=1 engine=8.19.0-2505160000
+ definitions=main-2505210226
+
+Generate rx and tx mcs maps in ath12k_mac_set_hemcsmap() based
+on number of supported tx/rx chains and set them in supported
+mcs/nss for HE capabilities.
+
+Tested-on: QCN9274 hw2.0 PCI WLAN.WBE.1.0.1-00029-QCAHKSWPL_SILICONZ-1
+
+Co-developed-by: Muna Sinada <quic_msinada@quicinc.com>
+Signed-off-by: Muna Sinada <quic_msinada@quicinc.com>
+Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
+---
+ drivers/net/wireless/ath/ath12k/mac.c | 40 ++++++++++++++++++++-------
+ 1 file changed, 30 insertions(+), 10 deletions(-)
+
+--- a/drivers/net/wireless/ath/ath12k/mac.c
++++ b/drivers/net/wireless/ath/ath12k/mac.c
+@@ -6786,20 +6786,40 @@ static __le16 ath12k_mac_setup_he_6ghz_c
+ 	return cpu_to_le16(bcap->he_6ghz_capa);
+ }
+ 
+-static void ath12k_mac_set_hemcsmap(struct ath12k_band_cap *band_cap,
++static void ath12k_mac_set_hemcsmap(struct ath12k *ar,
++				    struct ath12k_pdev_cap *cap,
+ 				    struct ieee80211_sta_he_cap *he_cap)
+ {
+ 	struct ieee80211_he_mcs_nss_supp *mcs_nss = &he_cap->he_mcs_nss_supp;
++	u16 txmcs_map, rxmcs_map;
++	u32 i;
+ 
+-	mcs_nss->rx_mcs_80 = cpu_to_le16(band_cap->he_mcs & 0xffff);
+-	mcs_nss->tx_mcs_80 = cpu_to_le16(band_cap->he_mcs & 0xffff);
+-	mcs_nss->rx_mcs_160 = cpu_to_le16((band_cap->he_mcs >> 16) & 0xffff);
+-	mcs_nss->tx_mcs_160 = cpu_to_le16((band_cap->he_mcs >> 16) & 0xffff);
+-	mcs_nss->rx_mcs_80p80 = cpu_to_le16((band_cap->he_mcs >> 16) & 0xffff);
+-	mcs_nss->tx_mcs_80p80 = cpu_to_le16((band_cap->he_mcs >> 16) & 0xffff);
++	rxmcs_map = 0;
++	txmcs_map = 0;
++	for (i = 0; i < 8; i++) {
++		if (i < ar->num_tx_chains &&
++		    (ar->cfg_tx_chainmask >> cap->tx_chain_mask_shift) & BIT(i))
++			txmcs_map |= IEEE80211_HE_MCS_SUPPORT_0_11 << (i * 2);
++		else
++			txmcs_map |= IEEE80211_HE_MCS_NOT_SUPPORTED << (i * 2);
++
++		if (i < ar->num_rx_chains &&
++		    (ar->cfg_rx_chainmask >> cap->tx_chain_mask_shift) & BIT(i))
++			rxmcs_map |= IEEE80211_HE_MCS_SUPPORT_0_11 << (i * 2);
++		else
++			rxmcs_map |= IEEE80211_HE_MCS_NOT_SUPPORTED << (i * 2);
++	}
++
++	mcs_nss->rx_mcs_80 = cpu_to_le16(rxmcs_map & 0xffff);
++	mcs_nss->tx_mcs_80 = cpu_to_le16(txmcs_map & 0xffff);
++	mcs_nss->rx_mcs_160 = cpu_to_le16(rxmcs_map & 0xffff);
++	mcs_nss->tx_mcs_160 = cpu_to_le16(txmcs_map & 0xffff);
++	mcs_nss->rx_mcs_80p80 = cpu_to_le16(rxmcs_map & 0xffff);
++	mcs_nss->tx_mcs_80p80 = cpu_to_le16(txmcs_map & 0xffff);
+ }
+ 
+-static void ath12k_mac_copy_he_cap(struct ath12k_band_cap *band_cap,
++static void ath12k_mac_copy_he_cap(struct ath12k *ar,
++				   struct ath12k_band_cap *band_cap,
+ 				   int iftype, u8 num_tx_chains,
+ 				   struct ieee80211_sta_he_cap *he_cap)
+ {
+@@ -6841,7 +6861,7 @@ static void ath12k_mac_copy_he_cap(struc
+ 		break;
+ 	}
+ 
+-	ath12k_mac_set_hemcsmap(band_cap, he_cap);
++	ath12k_mac_set_hemcsmap(ar, &ar->pdev->cap, he_cap);
+ 	memset(he_cap->ppe_thres, 0, sizeof(he_cap->ppe_thres));
+ 	if (he_cap_elem->phy_cap_info[6] &
+ 	    IEEE80211_HE_PHY_CAP6_PPE_THRESHOLD_PRESENT)
+@@ -7030,7 +7050,7 @@ static int ath12k_mac_copy_sband_iftype_
+ 
+ 		data[idx].types_mask = BIT(i);
+ 
+-		ath12k_mac_copy_he_cap(band_cap, i, ar->num_tx_chains, he_cap);
++		ath12k_mac_copy_he_cap(ar, band_cap, i, ar->num_tx_chains, he_cap);
+ 		if (band == NL80211_BAND_6GHZ) {
+ 			data[idx].he_6ghz_capa.capa =
+ 				ath12k_mac_setup_he_6ghz_cap(cap, band_cap);
diff --git a/package/kernel/mac80211/patches/ath12k/104-5-wifi-ath12k-fix-TX-and-RX-MCS-rate-configurations-in-HE-mode.patch b/package/kernel/mac80211/patches/ath12k/104-5-wifi-ath12k-fix-TX-and-RX-MCS-rate-configurations-in-HE-mode.patch
new file mode 100644
index 0000000000..dae1682ead
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath12k/104-5-wifi-ath12k-fix-TX-and-RX-MCS-rate-configurations-in-HE-mode.patch
@@ -0,0 +1,152 @@
+From patchwork Wed May 21 22:45:35 2025
+Content-Type: text/plain; charset="utf-8"
+MIME-Version: 1.0
+Content-Transfer-Encoding: 7bit
+X-Patchwork-Submitter: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+X-Patchwork-Id: 14096120
+X-Patchwork-Delegate: quic_jjohnson@quicinc.com
+Received: from mx0b-0031df01.pphosted.com (mx0b-0031df01.pphosted.com
+ [205.220.180.131])
+	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
+	(No client certificate requested)
+	by smtp.subspace.kernel.org (Postfix) with ESMTPS id A3B9F239570
+	for <linux-wireless@vger.kernel.org>; Wed, 21 May 2025 22:45:57 +0000 (UTC)
+Authentication-Results: smtp.subspace.kernel.org;
+ arc=none smtp.client-ip=205.220.180.131
+ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
+	t=1747867560; cv=none;
+ b=GmlOnDZdpnT/77kfeg7qPbZIn+pp+Rv41/WYnHylPZroDHwpWp5rzjObHMVoVIVB8f5dpHJSWNb5ucf0EdCqAqynnnDnAHne0d3j8kMBBH6ZVQr4AnIsYhkIrbmy6o7JffEBF094XVxGwQTjyWSEPi6VY94Md6L1NnuF0J5lJXw=
+ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
+	s=arc-20240116; t=1747867560; c=relaxed/simple;
+	bh=Xdsuttpv57eTzMnRm7g3A0+frkCx/SnGj1xOjVOXHng=;
+	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
+	 MIME-Version:Content-Type;
+ b=DCZ4pyonUsAaIuBQUBu/1NYBINM2V/yqfV+6ngHC6I8x7PP5e0WLPB1zEyJgRG752GtXxlhP3WdI6a+eW/8O0I64lNeSLtCeGZQ2ljn0mAfcuMtjB3rZq3UejFTR8v3I78Chfhv8/eSjfW7gSO+sswpSCXiFykPgseD3Hhz6W/4=
+ARC-Authentication-Results: i=1; smtp.subspace.kernel.org;
+ dmarc=pass (p=none dis=none) header.from=quicinc.com;
+ spf=pass smtp.mailfrom=quicinc.com;
+ dkim=pass (2048-bit key) header.d=quicinc.com header.i=@quicinc.com
+ header.b=n5c8p9dB; arc=none smtp.client-ip=205.220.180.131
+Authentication-Results: smtp.subspace.kernel.org;
+ dmarc=pass (p=none dis=none) header.from=quicinc.com
+Authentication-Results: smtp.subspace.kernel.org;
+ spf=pass smtp.mailfrom=quicinc.com
+Authentication-Results: smtp.subspace.kernel.org;
+	dkim=pass (2048-bit key) header.d=quicinc.com header.i=@quicinc.com
+ header.b="n5c8p9dB"
+Received: from pps.filterd (m0279869.ppops.net [127.0.0.1])
+	by mx0a-0031df01.pphosted.com (8.18.1.2/8.18.1.2) with ESMTP id
+ 54LIhKMc027654;
+	Wed, 21 May 2025 22:45:54 GMT
+DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=quicinc.com; h=
+	cc:content-transfer-encoding:content-type:date:from:in-reply-to
+	:message-id:mime-version:references:subject:to; s=qcppdkim1; bh=
+	igBIHxXxEIGErFGPWQKC8rBeF0DUPvb+tsDy6dmbEUQ=; b=n5c8p9dBo/+917ae
+	iUuuRoUPhgwmxRjEorR4N5thttRSLen0XwHulOSFzfVHZvX/ZX7Xb8qa67RpJUAw
+	jx3TGu38TFybZ9zCbXxa3PoR7FqIyl7TyaU+RpGmjLnDTRjq5ODiDDkcGM8aLJ6C
+	pgH1JDyjAtZODpP3W+kKpoMlU/N8QCB8wVOob4E3+nH0XDeYWh0cSY4dAnFcFYsC
+	dgkUoVt65T3wJptGX80bBT1muPG/3O+IiWrYoP6NVayscmgOnCqKVpuSjYrEn/02
+	HlxMp7yg/I4LhlQquL2SfmAXdKThQLrOF/XiFsCW2VZETvSbXsLI0NXYRbRFUxC4
+	e9SLmw==
+Received: from nalasppmta05.qualcomm.com (Global_NAT1.qualcomm.com
+ [129.46.96.20])
+	by mx0a-0031df01.pphosted.com (PPS) with ESMTPS id 46rwf9cars-1
+	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
+	Wed, 21 May 2025 22:45:54 +0000 (GMT)
+Received: from nalasex01a.na.qualcomm.com (nalasex01a.na.qualcomm.com
+ [10.47.209.196])
+	by NALASPPMTA05.qualcomm.com (8.18.1.2/8.18.1.2) with ESMTPS id
+ 54LMjrc1023294
+	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
+	Wed, 21 May 2025 22:45:53 GMT
+Received: from ath12k-linux2.qualcomm.com (10.80.80.8) by
+ nalasex01a.na.qualcomm.com (10.47.209.196) with Microsoft SMTP Server
+ (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
+ 15.2.1544.9; Wed, 21 May 2025 15:45:53 -0700
+From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+To: <ath12k@lists.infradead.org>
+CC: <linux-wireless@vger.kernel.org>,
+        Pradeep Kumar Chitrapu
+	<quic_pradeepc@quicinc.com>,
+        Jeff Johnson <quic_jjohnson@quicinc.com>
+Subject: [PATCH ath-next V14 5/9] wifi: ath12k: fix TX and RX MCS rate
+ configurations in HE mode
+Date: Wed, 21 May 2025 15:45:35 -0700
+Message-ID: <20250521224539.355985-6-quic_pradeepc@quicinc.com>
+X-Mailer: git-send-email 2.43.0
+In-Reply-To: <20250521224539.355985-1-quic_pradeepc@quicinc.com>
+References: <20250521224539.355985-1-quic_pradeepc@quicinc.com>
+Precedence: bulk
+X-Mailing-List: linux-wireless@vger.kernel.org
+List-Id: <linux-wireless.vger.kernel.org>
+List-Subscribe: <mailto:linux-wireless+subscribe@vger.kernel.org>
+List-Unsubscribe: <mailto:linux-wireless+unsubscribe@vger.kernel.org>
+MIME-Version: 1.0
+X-ClientProxiedBy: nasanex01a.na.qualcomm.com (10.52.223.231) To
+ nalasex01a.na.qualcomm.com (10.47.209.196)
+X-QCInternal: smtphost
+X-Proofpoint-Virus-Version: vendor=nai engine=6200 definitions=5800
+ signatures=585085
+X-Proofpoint-ORIG-GUID: lrtwH7rWiPRFD03fbbD0IavLBLpNgTW-
+X-Proofpoint-Spam-Details-Enc: AW1haW4tMjUwNTIxMDIyNSBTYWx0ZWRfX0HS2wunF/V5Q
+ jQqxwakF2Imrc/4a4WgPSFOFxUyO27D7Yw6gnIBRodgtwOFgflHDfeJMrELW79jrSDvXvRC0nnc
+ lTonRisd7/CZWExy3sM2diYhHrZ5YT1dPhFtq33ItpY8BaOhwiLxc3wn0tlWRX8B/cd+xyEHTZY
+ A4nCDSw77SEdaZfmqAB81LMzQWIuTucnxkms4pM1CIIYZrgAPcBk4XN8tWVQ6JQKCpMpelTF6Hj
+ /XLCY2ByRqjtwd/zSjtcCfLOyKdT+uQtAJU1XZvedwqQW5MFk2GeD7O72PfhAP1V0YcbHdiTxde
+ roRpAlQg48k0Ug5EMIUPb9TYEP15vwtPDTw03C3u7eOhs6znDqvMYNAtXwbxfGeHRwjsbMgpWLG
+ +weN3zziLWlwb66N0xo5nfdJRHrOVDNcSx8/Z/xvCmHBTuVr44Q7It0iW+CGbHNqXrg4h4CH
+X-Authority-Analysis: v=2.4 cv=GawXnRXL c=1 sm=1 tr=0 ts=682e57a2 cx=c_pps
+ a=ouPCqIW2jiPt+lZRy3xVPw==:117 a=ouPCqIW2jiPt+lZRy3xVPw==:17
+ a=GEpy-HfZoHoA:10 a=dt9VzEwgFbYA:10 a=COk6AnOGAAAA:8 a=mu3tZSmwaZwQUXtd2tAA:9
+ a=TjNXssC_j7lpFel5tvFf:22
+X-Proofpoint-GUID: lrtwH7rWiPRFD03fbbD0IavLBLpNgTW-
+X-Proofpoint-Virus-Version: vendor=baseguard
+ engine=ICAP:2.0.293,Aquarius:18.0.1099,Hydra:6.0.736,FMLib:17.12.80.40
+ definitions=2025-05-21_07,2025-05-20_03,2025-03-28_01
+X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
+ mlxscore=0 mlxlogscore=999 lowpriorityscore=0 impostorscore=0
+ priorityscore=1501 clxscore=1015 malwarescore=0 phishscore=0 bulkscore=0
+ spamscore=0 suspectscore=0 adultscore=0 classifier=spam authscore=0
+ authtc=n/a authcc= route=outbound adjust=0 reason=mlx scancount=1
+ engine=8.19.0-2505160000 definitions=main-2505210225
+
+Currently, the TX and RX MCS rate configurations per peer are
+reversed when sent to the firmware. As a result, RX MCS rates
+are configured for TX, and vice versa. This commit rectifies
+the configuration to match what the firmware expects.
+
+Tested-on: QCN9274 hw2.0 PCI WLAN.WBE.1.0.1-00029-QCAHKSWPL_SILICONZ-1
+
+Fixes: d889913205cf ("wifi: ath12k: driver for Qualcomm Wi-Fi 7 devices")
+Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
+---
+ drivers/net/wireless/ath/ath12k/wmi.c | 4 ++--
+ drivers/net/wireless/ath/ath12k/wmi.h | 2 ++
+ 2 files changed, 4 insertions(+), 2 deletions(-)
+
+--- a/drivers/net/wireless/ath/ath12k/wmi.c
++++ b/drivers/net/wireless/ath/ath12k/wmi.c
+@@ -2266,8 +2266,8 @@ int ath12k_wmi_send_peer_assoc_cmd(struc
+ 		he_mcs->tlv_header = ath12k_wmi_tlv_cmd_hdr(WMI_TAG_HE_RATE_SET,
+ 							    sizeof(*he_mcs));
+ 
+-		he_mcs->rx_mcs_set = cpu_to_le32(arg->peer_he_rx_mcs_set[i]);
+-		he_mcs->tx_mcs_set = cpu_to_le32(arg->peer_he_tx_mcs_set[i]);
++		he_mcs->rx_mcs_set = cpu_to_le32(arg->peer_he_tx_mcs_set[i]);
++		he_mcs->tx_mcs_set = cpu_to_le32(arg->peer_he_rx_mcs_set[i]);
+ 		ptr += sizeof(*he_mcs);
+ 	}
+ 
+--- a/drivers/net/wireless/ath/ath12k/wmi.h
++++ b/drivers/net/wireless/ath/ath12k/wmi.h
+@@ -4083,7 +4083,9 @@ struct ath12k_wmi_vht_rate_set_params {
+ 
+ struct ath12k_wmi_he_rate_set_params {
+ 	__le32 tlv_header;
++	/* MCS at which the peer can receive */
+ 	__le32 rx_mcs_set;
++	/* MCS at which the peer can transmit */
+ 	__le32 tx_mcs_set;
+ } __packed;
+ 
diff --git a/package/kernel/mac80211/patches/ath12k/104-6-wifi-ath12k-add-support-for-setting-fixed-HE-rate-GI-LTF.patch b/package/kernel/mac80211/patches/ath12k/104-6-wifi-ath12k-add-support-for-setting-fixed-HE-rate-GI-LTF.patch
new file mode 100644
index 0000000000..3f63eb08d1
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath12k/104-6-wifi-ath12k-add-support-for-setting-fixed-HE-rate-GI-LTF.patch
@@ -0,0 +1,1184 @@
+From patchwork Wed May 21 22:45:36 2025
+Content-Type: text/plain; charset="utf-8"
+MIME-Version: 1.0
+Content-Transfer-Encoding: 7bit
+X-Patchwork-Submitter: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+X-Patchwork-Id: 14096125
+X-Patchwork-Delegate: quic_jjohnson@quicinc.com
+Received: from mx0b-0031df01.pphosted.com (mx0b-0031df01.pphosted.com
+ [205.220.180.131])
+	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
+	(No client certificate requested)
+	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 9A17F1B0F20
+	for <linux-wireless@vger.kernel.org>; Wed, 21 May 2025 22:45:59 +0000 (UTC)
+Authentication-Results: smtp.subspace.kernel.org;
+ arc=none smtp.client-ip=205.220.180.131
+ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
+	t=1747867562; cv=none;
+ b=bEGfSmKJAIERqJyK0yJndcYM+a7cpfrIkMLoGUTFvAkrcwqnlh3F9AqLbcb8fKznhfaQKFVRUdpVGSjFaplFVSp20RuXvPC2NLb0eKZrz5qS/4geTMxY/BeWuVN+i3ouoQzfYz8Vq6sTqLE5d6b650cCVf8hpY+VZ3ZTNWxVvdA=
+ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
+	s=arc-20240116; t=1747867562; c=relaxed/simple;
+	bh=hBxlXRYYCPbv8+evEatym1UfdpOfENFUVDWgibN+XTg=;
+	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
+	 MIME-Version:Content-Type;
+ b=U32JKi6TAoRF/9e1cv0vPGUM6BaRhoFXM0b36j5PBpvKQmRXKDF/UNScd5EJnrFOPlgjPD7GOc+TdHqsFGk/7pNucA1++GU00SZ0q/223zg5dCsYLmfLrRu3G22WZS2hWuNKuUPFJEFFLEJ8UQWKtFB0oWsQcx+Oj1mWPbBrDU8=
+ARC-Authentication-Results: i=1; smtp.subspace.kernel.org;
+ dmarc=pass (p=none dis=none) header.from=quicinc.com;
+ spf=pass smtp.mailfrom=quicinc.com;
+ dkim=pass (2048-bit key) header.d=quicinc.com header.i=@quicinc.com
+ header.b=bzVTzUcl; arc=none smtp.client-ip=205.220.180.131
+Authentication-Results: smtp.subspace.kernel.org;
+ dmarc=pass (p=none dis=none) header.from=quicinc.com
+Authentication-Results: smtp.subspace.kernel.org;
+ spf=pass smtp.mailfrom=quicinc.com
+Authentication-Results: smtp.subspace.kernel.org;
+	dkim=pass (2048-bit key) header.d=quicinc.com header.i=@quicinc.com
+ header.b="bzVTzUcl"
+Received: from pps.filterd (m0279868.ppops.net [127.0.0.1])
+	by mx0a-0031df01.pphosted.com (8.18.1.2/8.18.1.2) with ESMTP id
+ 54LJiK6V032422;
+	Wed, 21 May 2025 22:45:55 GMT
+DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=quicinc.com; h=
+	cc:content-transfer-encoding:content-type:date:from:in-reply-to
+	:message-id:mime-version:references:subject:to; s=qcppdkim1; bh=
+	cpcIGD4iPSOaZzDkHZpoGs5Kor0sF3EnocHYcBOazgM=; b=bzVTzUclt3RkLn9A
+	YI8+MC64RjF5llUqmQ0G53D8sAQZ+95fc92X/ZrZvnyr7X0FBI+gU05yKzNuv4M5
+	XcIWK7Y8gjr55i9w18cWHGW2Q/JGC8pJlx0A/SEAMIMXeeEmgJqdKowT2wMjzIIH
+	wb7JmE9d6z6ZKcgQYx9KICXaaEFQ9uxyRyjlJMMEJ3zb7MjxZPCCGtCI31Aqczpk
+	B3X+1UgRT+OJzV6vIF0kdn/sjU69iZNHoPAUDYqInWCs2lPLMUO5mckhOG3fH8s6
+	jmhgpwlpUYx18jawRUpklvujXfFiDV4daXLeUKzL5b08f5OcSRvd7+iOytudYgr0
+	U9VYkw==
+Received: from nalasppmta03.qualcomm.com (Global_NAT1.qualcomm.com
+ [129.46.96.20])
+	by mx0a-0031df01.pphosted.com (PPS) with ESMTPS id 46rwfb4b3w-1
+	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
+	Wed, 21 May 2025 22:45:55 +0000 (GMT)
+Received: from nalasex01a.na.qualcomm.com (nalasex01a.na.qualcomm.com
+ [10.47.209.196])
+	by NALASPPMTA03.qualcomm.com (8.18.1.2/8.18.1.2) with ESMTPS id
+ 54LMjsC2027097
+	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
+	Wed, 21 May 2025 22:45:54 GMT
+Received: from ath12k-linux2.qualcomm.com (10.80.80.8) by
+ nalasex01a.na.qualcomm.com (10.47.209.196) with Microsoft SMTP Server
+ (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
+ 15.2.1544.9; Wed, 21 May 2025 15:45:53 -0700
+From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+To: <ath12k@lists.infradead.org>
+CC: <linux-wireless@vger.kernel.org>,
+        Pradeep Kumar Chitrapu
+	<quic_pradeepc@quicinc.com>,
+        Muna Sinada <quic_msinada@quicinc.com>
+Subject: [PATCH ath-next V14 6/9] wifi: ath12k: add support for setting fixed
+ HE rate/GI/LTF
+Date: Wed, 21 May 2025 15:45:36 -0700
+Message-ID: <20250521224539.355985-7-quic_pradeepc@quicinc.com>
+X-Mailer: git-send-email 2.43.0
+In-Reply-To: <20250521224539.355985-1-quic_pradeepc@quicinc.com>
+References: <20250521224539.355985-1-quic_pradeepc@quicinc.com>
+Precedence: bulk
+X-Mailing-List: linux-wireless@vger.kernel.org
+List-Id: <linux-wireless.vger.kernel.org>
+List-Subscribe: <mailto:linux-wireless+subscribe@vger.kernel.org>
+List-Unsubscribe: <mailto:linux-wireless+unsubscribe@vger.kernel.org>
+MIME-Version: 1.0
+X-ClientProxiedBy: nasanex01a.na.qualcomm.com (10.52.223.231) To
+ nalasex01a.na.qualcomm.com (10.47.209.196)
+X-QCInternal: smtphost
+X-Proofpoint-Virus-Version: vendor=nai engine=6200 definitions=5800
+ signatures=585085
+X-Proofpoint-ORIG-GUID: 7uuxK_kl_b0JzKZoWIyq_ZYKeKL3it15
+X-Proofpoint-Spam-Details-Enc: AW1haW4tMjUwNTIxMDIyNiBTYWx0ZWRfX7sjoM15po0tB
+ FcR1nwzr8TocaDYnIXgl13rA+kjwsizlMt/N5cu8dCWo9YQKqFNy42Z2VEYmoDRw7dBnYnsMIL/
+ wwv4hQYQslnxilRJaX/MVQ50/xxhSry8NrKA2QXvIg3btmiW4gQfrn3+k1Rm3o/gAGv2Yz4R8lw
+ YBPHVdQkgGJXYgsiB/b+copbnU621GYiYrCW6yUQHHIiwzjMljzzsk+9Koc6yeVByyPj86P80y7
+ 2C8L1vuRAy8gCMSScMB9CyQ6+tLCKa1W2bhA0Oxz/+RGEXbujS4NDXCWz+EqIaYS5HXuD32pODy
+ O2wMURrbgE5PJIjjvpAdtqZL65QVaoVK1LWU6Co0NtHytEjuaZmr1hbb4hVDAtQio2Bw/K8yCM+
+ ikcJ1sGkE78mu/U7gQjG6g0Z71Q/w13jBOz+RIocPFi2FyEjy5KDFmUBzY+jDCIRLi06R8sP
+X-Proofpoint-GUID: 7uuxK_kl_b0JzKZoWIyq_ZYKeKL3it15
+X-Authority-Analysis: v=2.4 cv=dLCmmPZb c=1 sm=1 tr=0 ts=682e57a3 cx=c_pps
+ a=ouPCqIW2jiPt+lZRy3xVPw==:117 a=ouPCqIW2jiPt+lZRy3xVPw==:17
+ a=GEpy-HfZoHoA:10 a=dt9VzEwgFbYA:10 a=COk6AnOGAAAA:8 a=KygRlO7-s-l5tpycOzUA:9
+ a=TjNXssC_j7lpFel5tvFf:22
+X-Proofpoint-Virus-Version: vendor=baseguard
+ engine=ICAP:2.0.293,Aquarius:18.0.1099,Hydra:6.0.736,FMLib:17.12.80.40
+ definitions=2025-05-21_07,2025-05-20_03,2025-03-28_01
+X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
+ mlxscore=0 clxscore=1015 adultscore=0 bulkscore=0 phishscore=0 suspectscore=0
+ impostorscore=0 malwarescore=0 lowpriorityscore=0 mlxlogscore=999 spamscore=0
+ priorityscore=1501 classifier=spam authscore=0 authtc=n/a authcc=
+ route=outbound adjust=0 reason=mlx scancount=1 engine=8.19.0-2505160000
+ definitions=main-2505210226
+
+Add support to set fixed HE rate/GI/LTF values using nl80211.
+Reuse parts of the existing code path already used for HT/VHT
+to implement the new helpers symmetrically, similar to how
+HT/VHT is handled.
+
+Tested-on: QCN9274 hw2.0 PCI WLAN.WBE.1.0.1-00029-QCAHKSWPL_SILICONZ-1
+
+Co-developed-by: Muna Sinada <quic_msinada@quicinc.com>
+Signed-off-by: Muna Sinada <quic_msinada@quicinc.com>
+Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+---
+ drivers/net/wireless/ath/ath12k/mac.c | 650 +++++++++++++++++++++++---
+ drivers/net/wireless/ath/ath12k/wmi.h |  27 ++
+ 2 files changed, 625 insertions(+), 52 deletions(-)
+
+--- a/drivers/net/wireless/ath/ath12k/mac.c
++++ b/drivers/net/wireless/ath/ath12k/mac.c
+@@ -518,6 +518,18 @@ ath12k_mac_max_vht_nss(const u16 *vht_mc
+ 	return 1;
+ }
+ 
++static u32
++ath12k_mac_max_he_nss(const u16 he_mcs_mask[NL80211_HE_NSS_MAX])
++{
++	int nss;
++
++	for (nss = NL80211_HE_NSS_MAX - 1; nss >= 0; nss--)
++		if (he_mcs_mask[nss])
++			return nss + 1;
++
++	return 1;
++}
++
+ static u8 ath12k_parse_mpdudensity(u8 mpdudensity)
+ {
+ /*  From IEEE Std 802.11-2020 defined values for "Minimum MPDU Start Spacing":
+@@ -2135,9 +2147,15 @@ static void ath12k_peer_assoc_h_ht(struc
+ 		arg->peer_rate_caps |= WMI_HOST_RC_CW40_FLAG;
+ 	}
+ 
+-	if (arvif->bitrate_mask.control[band].gi != NL80211_TXRATE_FORCE_LGI) {
+-		if (ht_cap->cap & (IEEE80211_HT_CAP_SGI_20 |
+-		    IEEE80211_HT_CAP_SGI_40))
++	/* As firmware handles these two flags (IEEE80211_HT_CAP_SGI_20
++	 * and IEEE80211_HT_CAP_SGI_40) for enabling SGI, reset both
++	 * flags if guard interval is to force Long GI
++	 */
++	if (arvif->bitrate_mask.control[band].gi == NL80211_TXRATE_FORCE_LGI) {
++		arg->peer_ht_caps &= ~(IEEE80211_HT_CAP_SGI_20 | IEEE80211_HT_CAP_SGI_40);
++	} else {
++		/* Enable SGI flag if either SGI_20 or SGI_40 is supported */
++		if (ht_cap->cap & (IEEE80211_HT_CAP_SGI_20 | IEEE80211_HT_CAP_SGI_40))
+ 			arg->peer_rate_caps |= WMI_HOST_RC_SGI_FLAG;
+ 	}
+ 
+@@ -2260,11 +2278,12 @@ static void ath12k_peer_assoc_h_vht(stru
+ 	struct ieee80211_link_sta *link_sta;
+ 	struct cfg80211_chan_def def;
+ 	enum nl80211_band band;
+-	const u16 *vht_mcs_mask;
++	u16 *vht_mcs_mask;
+ 	u16 tx_mcs_map;
+ 	u8 ampdu_factor;
+ 	u8 max_nss, vht_mcs;
+-	int i;
++	int i, vht_nss, nss_idx;
++	bool user_rate_valid = true;
+ 
+ 	lockdep_assert_wiphy(ath12k_ar_to_hw(ar)->wiphy);
+ 
+@@ -2317,6 +2336,25 @@ static void ath12k_peer_assoc_h_vht(stru
+ 	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_160)
+ 		arg->bw_160 = true;
+ 
++	vht_nss =  ath12k_mac_max_vht_nss(vht_mcs_mask);
++
++	if (vht_nss > link_sta->rx_nss) {
++		user_rate_valid = false;
++		for (nss_idx = link_sta->rx_nss - 1; nss_idx >= 0; nss_idx--) {
++			if (vht_mcs_mask[nss_idx]) {
++				user_rate_valid = true;
++				break;
++			}
++		}
++	}
++
++	if (!user_rate_valid) {
++		ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
++			   "Setting vht range MCS value to peer supported nss:%d for peer %pM\n",
++			   link_sta->rx_nss, arsta->addr);
++		vht_mcs_mask[link_sta->rx_nss - 1] = vht_mcs_mask[vht_nss - 1];
++	}
++
+ 	/* Calculate peer NSS capability from VHT capabilities if STA
+ 	 * supports VHT.
+ 	 */
+@@ -2356,6 +2394,72 @@ static void ath12k_peer_assoc_h_vht(stru
+ 	/* TODO: rxnss_override */
+ }
+ 
++static int ath12k_mac_get_max_he_mcs_map(u16 mcs_map, int nss)
++{
++	switch ((mcs_map >> (2 * nss)) & 0x3) {
++	case IEEE80211_HE_MCS_SUPPORT_0_7: return BIT(8) - 1;
++	case IEEE80211_HE_MCS_SUPPORT_0_9: return BIT(10) - 1;
++	case IEEE80211_HE_MCS_SUPPORT_0_11: return BIT(12) - 1;
++	}
++	return 0;
++}
++
++static u16 ath12k_peer_assoc_h_he_limit(u16 tx_mcs_set,
++					const u16 *he_mcs_limit)
++{
++	int idx_limit;
++	int nss;
++	u16 mcs_map;
++	u16 mcs;
++
++	for (nss = 0; nss < NL80211_HE_NSS_MAX; nss++) {
++		mcs_map = ath12k_mac_get_max_he_mcs_map(tx_mcs_set, nss) &
++			he_mcs_limit[nss];
++
++		if (mcs_map)
++			idx_limit = fls(mcs_map) - 1;
++		else
++			idx_limit = -1;
++
++		switch (idx_limit) {
++		case 0 ... 7:
++			mcs = IEEE80211_HE_MCS_SUPPORT_0_7;
++			break;
++		case 8:
++		case 9:
++			mcs = IEEE80211_HE_MCS_SUPPORT_0_9;
++			break;
++		case 10:
++		case 11:
++			mcs = IEEE80211_HE_MCS_SUPPORT_0_11;
++			break;
++		default:
++			WARN_ON(1);
++			fallthrough;
++		case -1:
++			mcs = IEEE80211_HE_MCS_NOT_SUPPORTED;
++			break;
++		}
++
++		tx_mcs_set &= ~(0x3 << (nss * 2));
++		tx_mcs_set |= mcs << (nss * 2);
++	}
++
++	return tx_mcs_set;
++}
++
++static bool
++ath12k_peer_assoc_h_he_masked(const u16 he_mcs_mask[NL80211_HE_NSS_MAX])
++{
++	int nss;
++
++	for (nss = 0; nss < NL80211_HE_NSS_MAX; nss++)
++		if (he_mcs_mask[nss])
++			return false;
++
++	return true;
++}
++
+ static void ath12k_peer_assoc_h_he(struct ath12k *ar,
+ 				   struct ath12k_link_vif *arvif,
+ 				   struct ath12k_link_sta *arsta,
+@@ -2366,18 +2470,28 @@ static void ath12k_peer_assoc_h_he(struc
+ 	const struct ieee80211_sta_he_cap *he_cap;
+ 	struct ieee80211_bss_conf *link_conf;
+ 	struct ieee80211_link_sta *link_sta;
++	struct cfg80211_chan_def def;
+ 	int i;
+ 	u8 ampdu_factor, max_nss;
+ 	u8 rx_mcs_80 = IEEE80211_HE_MCS_NOT_SUPPORTED;
+ 	u8 rx_mcs_160 = IEEE80211_HE_MCS_NOT_SUPPORTED;
+ 	u16 mcs_160_map, mcs_80_map;
++	u8 link_id = arvif->link_id;
+ 	bool support_160;
+-	u16 v;
++	enum nl80211_band band;
++	u16 *he_mcs_mask;
++	u8 he_mcs;
++	u16 he_tx_mcs = 0, v = 0;
++	int he_nss, nss_idx;
++	bool user_rate_valid = true;
++
++	if (WARN_ON(ath12k_mac_vif_link_chan(vif, link_id, &def)))
++		return;
+ 
+ 	link_conf = ath12k_mac_get_link_bss_conf(arvif);
+ 	if (!link_conf) {
+ 		ath12k_warn(ar->ab, "unable to access bss link conf in peer assoc he for vif %pM link %u",
+-			    vif->addr, arvif->link_id);
++			    vif->addr, link_id);
+ 		return;
+ 	}
+ 
+@@ -2392,6 +2506,12 @@ static void ath12k_peer_assoc_h_he(struc
+ 	if (!he_cap->has_he)
+ 		return;
+ 
++	band = def.chan->band;
++	he_mcs_mask = arvif->bitrate_mask.control[band].he_mcs;
++
++	if (ath12k_peer_assoc_h_he_masked(he_mcs_mask))
++		return;
++
+ 	arg->he_flag = true;
+ 
+ 	support_160 = !!(he_cap->he_cap_elem.phy_cap_info[0] &
+@@ -2497,25 +2617,47 @@ static void ath12k_peer_assoc_h_he(struc
+ 	if (he_cap->he_cap_elem.mac_cap_info[0] & IEEE80211_HE_MAC_CAP0_TWT_REQ)
+ 		arg->twt_requester = true;
+ 
++	he_nss = ath12k_mac_max_he_nss(he_mcs_mask);
++
++	if (he_nss > link_sta->rx_nss) {
++		user_rate_valid = false;
++		for (nss_idx = link_sta->rx_nss - 1; nss_idx >= 0; nss_idx--) {
++			if (he_mcs_mask[nss_idx]) {
++				user_rate_valid = true;
++				break;
++			}
++		}
++	}
++
++	if (!user_rate_valid) {
++		ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
++			   "Setting he range MCS value to peer supported nss:%d for peer %pM\n",
++			   link_sta->rx_nss, arsta->addr);
++		he_mcs_mask[link_sta->rx_nss - 1] = he_mcs_mask[he_nss - 1];
++	}
++
+ 	switch (link_sta->bandwidth) {
+ 	case IEEE80211_STA_RX_BW_160:
+ 		if (he_cap->he_cap_elem.phy_cap_info[0] &
+ 		    IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_80PLUS80_MHZ_IN_5G) {
+-			v = le16_to_cpu(he_cap->he_mcs_nss_supp.rx_mcs_80p80);
++			v = ath12k_peer_assoc_h_he_limit(v, he_mcs_mask);
+ 			arg->peer_he_rx_mcs_set[WMI_HECAP_TXRX_MCS_NSS_IDX_80_80] = v;
+ 
+ 			v = le16_to_cpu(he_cap->he_mcs_nss_supp.tx_mcs_80p80);
+ 			arg->peer_he_tx_mcs_set[WMI_HECAP_TXRX_MCS_NSS_IDX_80_80] = v;
+ 
+ 			arg->peer_he_mcs_count++;
++			he_tx_mcs = v;
+ 		}
+ 		v = le16_to_cpu(he_cap->he_mcs_nss_supp.rx_mcs_160);
+ 		arg->peer_he_rx_mcs_set[WMI_HECAP_TXRX_MCS_NSS_IDX_160] = v;
+ 
+-		v = le16_to_cpu(he_cap->he_mcs_nss_supp.tx_mcs_160);
++		v = ath12k_peer_assoc_h_he_limit(v, he_mcs_mask);
+ 		arg->peer_he_tx_mcs_set[WMI_HECAP_TXRX_MCS_NSS_IDX_160] = v;
+ 
+ 		arg->peer_he_mcs_count++;
++		if (!he_tx_mcs)
++			he_tx_mcs = v;
+ 		fallthrough;
+ 
+ 	default:
+@@ -2523,11 +2665,36 @@ static void ath12k_peer_assoc_h_he(struc
+ 		arg->peer_he_rx_mcs_set[WMI_HECAP_TXRX_MCS_NSS_IDX_80] = v;
+ 
+ 		v = le16_to_cpu(he_cap->he_mcs_nss_supp.tx_mcs_80);
++		v = ath12k_peer_assoc_h_he_limit(v, he_mcs_mask);
+ 		arg->peer_he_tx_mcs_set[WMI_HECAP_TXRX_MCS_NSS_IDX_80] = v;
+ 
+ 		arg->peer_he_mcs_count++;
++		if (!he_tx_mcs)
++			he_tx_mcs = v;
+ 		break;
+ 	}
++
++	/* Calculate peer NSS capability from HE capabilities if STA
++	 * supports HE.
++	 */
++	for (i = 0, max_nss = 0, he_mcs = 0; i < NL80211_HE_NSS_MAX; i++) {
++		he_mcs = he_tx_mcs >> (2 * i) & 3;
++
++		/* In case of fixed rates, MCS Range in he_tx_mcs might have
++		 * unsupported range, with he_mcs_mask set, so check either of them
++		 * to find nss.
++		 */
++		if (he_mcs != IEEE80211_HE_MCS_NOT_SUPPORTED ||
++		    he_mcs_mask[i])
++			max_nss = i + 1;
++	}
++
++	max_nss = min(max_nss, ar->num_tx_chains);
++	arg->peer_nss = min(link_sta->rx_nss, max_nss);
++
++	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
++		   "mac he peer %pM nss %d mcs cnt %d\n",
++		   arsta->addr, arg->peer_nss, arg->peer_he_mcs_count);
+ }
+ 
+ static void ath12k_peer_assoc_h_he_6ghz(struct ath12k *ar,
+@@ -2863,6 +3030,7 @@ static void ath12k_peer_assoc_h_phymode(
+ 	enum nl80211_band band;
+ 	const u8 *ht_mcs_mask;
+ 	const u16 *vht_mcs_mask;
++	const u16 *he_mcs_mask;
+ 	enum wmi_phy_mode phymode = MODE_UNKNOWN;
+ 
+ 	lockdep_assert_wiphy(ath12k_ar_to_hw(ar)->wiphy);
+@@ -2876,6 +3044,7 @@ static void ath12k_peer_assoc_h_phymode(
+ 	band = def.chan->band;
+ 	ht_mcs_mask = arvif->bitrate_mask.control[band].ht_mcs;
+ 	vht_mcs_mask = arvif->bitrate_mask.control[band].vht_mcs;
++	he_mcs_mask = arvif->bitrate_mask.control[band].he_mcs;
+ 
+ 	link_sta = ath12k_mac_get_link_sta(arsta);
+ 	if (!link_sta) {
+@@ -2891,7 +3060,8 @@ static void ath12k_peer_assoc_h_phymode(
+ 				phymode = MODE_11BE_EHT40_2G;
+ 			else
+ 				phymode = MODE_11BE_EHT20_2G;
+-		} else if (link_sta->he_cap.has_he) {
++		} else if (link_sta->he_cap.has_he &&
++			   !ath12k_peer_assoc_h_he_masked(he_mcs_mask)) {
+ 			if (link_sta->bandwidth == IEEE80211_STA_RX_BW_80)
+ 				phymode = MODE_11AX_HE80_2G;
+ 			else if (link_sta->bandwidth == IEEE80211_STA_RX_BW_40)
+@@ -2921,7 +3091,8 @@ static void ath12k_peer_assoc_h_phymode(
+ 		/* Check EHT first */
+ 		if (link_sta->eht_cap.has_eht) {
+ 			phymode = ath12k_mac_get_phymode_eht(ar, link_sta);
+-		} else if (link_sta->he_cap.has_he) {
++		} else if (link_sta->he_cap.has_he &&
++			   !ath12k_peer_assoc_h_he_masked(he_mcs_mask)) {
+ 			phymode = ath12k_mac_get_phymode_he(ar, link_sta);
+ 		} else if (link_sta->vht_cap.vht_supported &&
+ 		    !ath12k_peer_assoc_h_vht_masked(vht_mcs_mask)) {
+@@ -4190,10 +4361,13 @@ static struct ath12k_link_vif *ath12k_ma
+ 
+ 	for (i = 0; i < ARRAY_SIZE(arvif->bitrate_mask.control); i++) {
+ 		arvif->bitrate_mask.control[i].legacy = 0xffffffff;
++		arvif->bitrate_mask.control[i].gi = NL80211_TXRATE_DEFAULT_GI;
+ 		memset(arvif->bitrate_mask.control[i].ht_mcs, 0xff,
+ 		       sizeof(arvif->bitrate_mask.control[i].ht_mcs));
+ 		memset(arvif->bitrate_mask.control[i].vht_mcs, 0xff,
+ 		       sizeof(arvif->bitrate_mask.control[i].vht_mcs));
++		memset(arvif->bitrate_mask.control[i].he_mcs, 0xff,
++		       sizeof(arvif->bitrate_mask.control[i].he_mcs));
+ 	}
+ 
+ 	/* Allocate Default Queue now and reassign during actual vdev create */
+@@ -5083,6 +5257,20 @@ ath12k_mac_bitrate_mask_num_vht_rates(st
+ }
+ 
+ static int
++ath12k_mac_bitrate_mask_num_he_rates(struct ath12k *ar,
++				     enum nl80211_band band,
++				     const struct cfg80211_bitrate_mask *mask)
++{
++	int num_rates = 0;
++	int i;
++
++	for (i = 0; i < ARRAY_SIZE(mask->control[band].he_mcs); i++)
++		num_rates += hweight16(mask->control[band].he_mcs[i]);
++
++	return num_rates;
++}
++
++static int
+ ath12k_mac_set_peer_vht_fixed_rate(struct ath12k_link_vif *arvif,
+ 				   struct ath12k_link_sta *arsta,
+ 				   const struct cfg80211_bitrate_mask *mask,
+@@ -5128,6 +5316,60 @@ ath12k_mac_set_peer_vht_fixed_rate(struc
+ 	return ret;
+ }
+ 
++static int
++ath12k_mac_set_peer_he_fixed_rate(struct ath12k_link_vif *arvif,
++				  struct ath12k_link_sta *arsta,
++				  const struct cfg80211_bitrate_mask *mask,
++				  enum nl80211_band band)
++{
++	struct ath12k *ar = arvif->ar;
++	u8 he_rate, nss;
++	u32 rate_code;
++	int ret, i;
++	struct ath12k_sta *ahsta = arsta->ahsta;
++	struct ieee80211_sta *sta;
++
++	lockdep_assert_wiphy(ath12k_ar_to_hw(ar)->wiphy);
++
++	sta = ath12k_ahsta_to_sta(ahsta);
++	nss = 0;
++
++	for (i = 0; i < ARRAY_SIZE(mask->control[band].he_mcs); i++) {
++		if (hweight16(mask->control[band].he_mcs[i]) == 1) {
++			nss = i + 1;
++			he_rate = ffs(mask->control[band].he_mcs[i]) - 1;
++		}
++	}
++
++	if (!nss) {
++		ath12k_warn(ar->ab, "No single HE Fixed rate found to set for %pM",
++			    arsta->addr);
++		return -EINVAL;
++	}
++
++	/* Avoid updating invalid nss as fixed rate*/
++	if (nss > sta->deflink.rx_nss)
++		return -EINVAL;
++
++	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
++		   "Setting Fixed HE Rate for peer %pM. Device will not switch to any other selected rates",
++		   arsta->addr);
++
++	rate_code = ATH12K_HW_RATE_CODE(he_rate, nss - 1,
++					WMI_RATE_PREAMBLE_HE);
++
++	ret = ath12k_wmi_set_peer_param(ar, arsta->addr,
++					arvif->vdev_id,
++					WMI_PEER_PARAM_FIXED_RATE,
++					rate_code);
++	if (ret)
++		ath12k_warn(ar->ab,
++			    "failed to update STA %pM Fixed Rate %d: %d\n",
++			    arsta->addr, rate_code, ret);
++
++	return ret;
++}
++
+ static int ath12k_mac_station_assoc(struct ath12k *ar,
+ 				    struct ath12k_link_vif *arvif,
+ 				    struct ath12k_link_sta *arsta,
+@@ -5140,7 +5382,7 @@ static int ath12k_mac_station_assoc(stru
+ 	struct cfg80211_chan_def def;
+ 	enum nl80211_band band;
+ 	struct cfg80211_bitrate_mask *mask;
+-	u8 num_vht_rates;
++	u8 num_vht_rates, num_he_rates;
+ 	u8 link_id = arvif->link_id;
+ 
+ 	lockdep_assert_wiphy(ath12k_ar_to_hw(ar)->wiphy);
+@@ -5180,9 +5422,10 @@ static int ath12k_mac_station_assoc(stru
+ 	}
+ 
+ 	num_vht_rates = ath12k_mac_bitrate_mask_num_vht_rates(ar, band, mask);
++	num_he_rates = ath12k_mac_bitrate_mask_num_he_rates(ar, band, mask);
+ 
+-	/* If single VHT rate is configured (by set_bitrate_mask()),
+-	 * peer_assoc will disable VHT. This is now enabled by a peer specific
++	/* If single VHT/HE rate is configured (by set_bitrate_mask()),
++	 * peer_assoc will disable VHT/HE. This is now enabled by a peer specific
+ 	 * fixed param.
+ 	 * Note that all other rates and NSS will be disabled for this peer.
+ 	 */
+@@ -5193,8 +5436,9 @@ static int ath12k_mac_station_assoc(stru
+ 	}
+ 
+ 	if (link_sta->vht_cap.vht_supported && num_vht_rates == 1) {
+-		ret = ath12k_mac_set_peer_vht_fixed_rate(arvif, arsta, mask,
+-							 band);
++		ret = ath12k_mac_set_peer_vht_fixed_rate(arvif, arsta, mask, band);
++	} else if (link_sta->he_cap.has_he && num_he_rates == 1) {
++		ret = ath12k_mac_set_peer_he_fixed_rate(arvif, arsta, mask, band);
+ 		if (ret)
+ 			return ret;
+ 	}
+@@ -5258,8 +5502,9 @@ static void ath12k_sta_rc_update_wk(stru
+ 	enum nl80211_band band;
+ 	const u8 *ht_mcs_mask;
+ 	const u16 *vht_mcs_mask;
+-	u32 changed, bw, nss, smps, bw_prev;
+-	int err, num_vht_rates;
++	const u16 *he_mcs_mask;
++	u32 changed, bw, nss, mac_nss, smps, bw_prev;
++	int err, num_vht_rates, num_he_rates;
+ 	const struct cfg80211_bitrate_mask *mask;
+ 	enum wmi_phy_mode peer_phymode;
+ 	struct ath12k_link_sta *arsta;
+@@ -5279,6 +5524,7 @@ static void ath12k_sta_rc_update_wk(stru
+ 	band = def.chan->band;
+ 	ht_mcs_mask = arvif->bitrate_mask.control[band].ht_mcs;
+ 	vht_mcs_mask = arvif->bitrate_mask.control[band].vht_mcs;
++	he_mcs_mask = arvif->bitrate_mask.control[band].he_mcs;
+ 
+ 	spin_lock_bh(&ar->data_lock);
+ 
+@@ -5293,8 +5539,10 @@ static void ath12k_sta_rc_update_wk(stru
+ 	spin_unlock_bh(&ar->data_lock);
+ 
+ 	nss = max_t(u32, 1, nss);
+-	nss = min(nss, max(ath12k_mac_max_ht_nss(ht_mcs_mask),
+-			   ath12k_mac_max_vht_nss(vht_mcs_mask)));
++	mac_nss = max3(ath12k_mac_max_ht_nss(ht_mcs_mask),
++		       ath12k_mac_max_vht_nss(vht_mcs_mask),
++		       ath12k_mac_max_he_nss(he_mcs_mask));
++	nss = min(nss, mac_nss);
+ 
+ 	struct ath12k_wmi_peer_assoc_arg *peer_arg __free(kfree) =
+ 					kzalloc(sizeof(*peer_arg), GFP_KERNEL);
+@@ -5377,6 +5625,8 @@ static void ath12k_sta_rc_update_wk(stru
+ 		mask = &arvif->bitrate_mask;
+ 		num_vht_rates = ath12k_mac_bitrate_mask_num_vht_rates(ar, band,
+ 								      mask);
++		num_he_rates = ath12k_mac_bitrate_mask_num_he_rates(ar, band,
++								    mask);
+ 
+ 		/* Peer_assoc_prepare will reject vht rates in
+ 		 * bitrate_mask if its not available in range format and
+@@ -5399,11 +5649,24 @@ static void ath12k_sta_rc_update_wk(stru
+ 		if (link_sta->vht_cap.vht_supported && num_vht_rates == 1) {
+ 			ath12k_mac_set_peer_vht_fixed_rate(arvif, arsta, mask,
+ 							   band);
++		} else if (link_sta->he_cap.has_he && num_he_rates == 1) {
++			ath12k_mac_set_peer_he_fixed_rate(arvif, arsta, mask, band);
+ 		} else {
+-			/* If the peer is non-VHT or no fixed VHT rate
++			/* If the peer is non-VHT/HE or no fixed VHT/HE rate
+ 			 * is provided in the new bitrate mask we set the
+-			 * other rates using peer_assoc command.
++			 * other rates using peer_assoc command. Also clear
++			 * the peer fixed rate settings as it has higher proprity
++			 * than peer assoc
+ 			 */
++			err = ath12k_wmi_set_peer_param(ar, arsta->addr,
++							arvif->vdev_id,
++							WMI_PEER_PARAM_FIXED_RATE,
++							WMI_FIXED_RATE_NONE);
++			if (err)
++				ath12k_warn(ar->ab,
++					    "failed to disable peer fixed rate for STA %pM ret %d\n",
++					    arsta->addr, err);
++
+ 			ath12k_peer_assoc_prepare(ar, arvif, arsta,
+ 						  peer_arg, true);
+ 
+@@ -9903,19 +10166,40 @@ ath12k_mac_has_single_legacy_rate(struct
+ 	if (ath12k_mac_bitrate_mask_num_vht_rates(ar, band, mask))
+ 		return false;
+ 
++	if (ath12k_mac_bitrate_mask_num_he_rates(ar, band, mask))
++		return false;
++
+ 	return num_rates == 1;
+ }
+ 
++static __le16
++ath12k_mac_get_tx_mcs_map(const struct ieee80211_sta_he_cap *he_cap)
++{
++	if (he_cap->he_cap_elem.phy_cap_info[0] &
++	    IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_80PLUS80_MHZ_IN_5G)
++		return he_cap->he_mcs_nss_supp.tx_mcs_80p80;
++
++	if (he_cap->he_cap_elem.phy_cap_info[0] &
++	    IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_160MHZ_IN_5G)
++		return he_cap->he_mcs_nss_supp.tx_mcs_160;
++
++	return he_cap->he_mcs_nss_supp.tx_mcs_80;
++}
++
+ static bool
+ ath12k_mac_bitrate_mask_get_single_nss(struct ath12k *ar,
++				       struct ieee80211_vif *vif,
+ 				       enum nl80211_band band,
+ 				       const struct cfg80211_bitrate_mask *mask,
+ 				       int *nss)
+ {
+ 	struct ieee80211_supported_band *sband = &ar->mac.sbands[band];
+ 	u16 vht_mcs_map = le16_to_cpu(sband->vht_cap.vht_mcs.tx_mcs_map);
++	const struct ieee80211_sta_he_cap *he_cap;
++	u16 he_mcs_map = 0;
+ 	u8 ht_nss_mask = 0;
+ 	u8 vht_nss_mask = 0;
++	u8 he_nss_mask = 0;
+ 	int i;
+ 
+ 	/* No need to consider legacy here. Basic rates are always present
+@@ -9942,7 +10226,24 @@ ath12k_mac_bitrate_mask_get_single_nss(s
+ 			return false;
+ 	}
+ 
+-	if (ht_nss_mask != vht_nss_mask)
++	he_cap = ieee80211_get_he_iftype_cap_vif(sband, vif);
++	if (!he_cap)
++		return false;
++
++	he_mcs_map = le16_to_cpu(ath12k_mac_get_tx_mcs_map(he_cap));
++
++	for (i = 0; i < ARRAY_SIZE(mask->control[band].he_mcs); i++) {
++		if (mask->control[band].he_mcs[i] == 0)
++			continue;
++
++		if (mask->control[band].he_mcs[i] ==
++		    ath12k_mac_get_max_he_mcs_map(he_mcs_map, i))
++			he_nss_mask |= BIT(i);
++		else
++			return false;
++	}
++
++	if (ht_nss_mask != vht_nss_mask || ht_nss_mask != he_nss_mask)
+ 		return false;
+ 
+ 	if (ht_nss_mask == 0)
+@@ -9989,54 +10290,182 @@ ath12k_mac_get_single_legacy_rate(struct
+ 	return 0;
+ }
+ 
+-static int ath12k_mac_set_fixed_rate_params(struct ath12k_link_vif *arvif,
+-					    u32 rate, u8 nss, u8 sgi, u8 ldpc)
++static int
++ath12k_mac_set_fixed_rate_gi_ltf(struct ath12k_link_vif *arvif, u8 he_gi, u8 he_ltf)
+ {
+ 	struct ath12k *ar = arvif->ar;
+-	u32 vdev_param;
+ 	int ret;
+ 
+ 	lockdep_assert_wiphy(ath12k_ar_to_hw(ar)->wiphy);
+ 
+-	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "mac set fixed rate params vdev %i rate 0x%02x nss %u sgi %u\n",
+-		   arvif->vdev_id, rate, nss, sgi);
++	/* 0.8 = 0, 1.6 = 2 and 3.2 = 3. */
++	if (he_gi && he_gi != 0xFF)
++		he_gi += 1;
+ 
+-	vdev_param = WMI_VDEV_PARAM_FIXED_RATE;
+ 	ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id,
+-					    vdev_param, rate);
++					    WMI_VDEV_PARAM_SGI, he_gi);
+ 	if (ret) {
+-		ath12k_warn(ar->ab, "failed to set fixed rate param 0x%02x: %d\n",
+-			    rate, ret);
++		ath12k_warn(ar->ab, "failed to set HE GI:%d, error:%d\n",
++			    he_gi, ret);
+ 		return ret;
+ 	}
++	/* start from 1 */
++	if (he_ltf != 0xFF)
++		he_ltf += 1;
+ 
+-	vdev_param = WMI_VDEV_PARAM_NSS;
+ 	ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id,
+-					    vdev_param, nss);
++					    WMI_VDEV_PARAM_HE_LTF, he_ltf);
+ 	if (ret) {
+-		ath12k_warn(ar->ab, "failed to set nss param %d: %d\n",
+-			    nss, ret);
++		ath12k_warn(ar->ab, "failed to set HE LTF:%d, error:%d\n",
++			    he_ltf, ret);
+ 		return ret;
+ 	}
++	return 0;
++}
++
++static int
++ath12k_mac_set_auto_rate_gi_ltf(struct ath12k_link_vif *arvif, u16 he_gi, u8 he_ltf)
++{
++	struct ath12k *ar = arvif->ar;
++	int ret;
++	u32 he_ar_gi_ltf;
++
++	if (he_gi != 0xFF) {
++		switch (he_gi) {
++		case NL80211_RATE_INFO_HE_GI_0_8:
++			he_gi = WMI_AUTORATE_800NS_GI;
++			break;
++		case NL80211_RATE_INFO_HE_GI_1_6:
++			he_gi = WMI_AUTORATE_1600NS_GI;
++			break;
++		case NL80211_RATE_INFO_HE_GI_3_2:
++			he_gi = WMI_AUTORATE_3200NS_GI;
++			break;
++		default:
++			ath12k_warn(ar->ab, "Invalid GI\n");
++			return -EINVAL;
++		}
++	}
++
++	if (he_ltf != 0xFF) {
++		switch (he_ltf) {
++		case NL80211_RATE_INFO_HE_1XLTF:
++			he_ltf = WMI_HE_AUTORATE_LTF_1X;
++			break;
++		case NL80211_RATE_INFO_HE_2XLTF:
++			he_ltf = WMI_HE_AUTORATE_LTF_2X;
++			break;
++		case NL80211_RATE_INFO_HE_4XLTF:
++			he_ltf = WMI_HE_AUTORATE_LTF_4X;
++			break;
++		default:
++			ath12k_warn(ar->ab, "Invalid LTF\n");
++			return -EINVAL;
++		}
++	}
++
++	he_ar_gi_ltf = he_gi | he_ltf;
+ 
+-	vdev_param = WMI_VDEV_PARAM_SGI;
+ 	ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id,
+-					    vdev_param, sgi);
++					    WMI_VDEV_PARAM_AUTORATE_MISC_CFG,
++					    he_ar_gi_ltf);
+ 	if (ret) {
+-		ath12k_warn(ar->ab, "failed to set sgi param %d: %d\n",
+-			    sgi, ret);
++		ath12k_warn(ar->ab,
++			    "failed to set HE autorate GI:%u, LTF:%u params, error:%d\n",
++			    he_gi, he_ltf, ret);
+ 		return ret;
+ 	}
+ 
+-	vdev_param = WMI_VDEV_PARAM_LDPC;
++	return 0;
++}
++
++static u32 ath12k_mac_nlgi_to_wmigi(enum nl80211_txrate_gi gi)
++{
++	switch (gi) {
++	case NL80211_TXRATE_DEFAULT_GI:
++		return WMI_GI_400_NS;
++	case NL80211_TXRATE_FORCE_LGI:
++		return WMI_GI_800_NS;
++	default:
++		return WMI_GI_400_NS;
++	}
++}
++
++static int ath12k_mac_set_rate_params(struct ath12k_link_vif *arvif,
++				      u32 rate, u8 nss, u8 sgi, u8 ldpc,
++				      u8 he_gi, u8 he_ltf, bool he_fixed_rate)
++{
++	struct ieee80211_bss_conf *link_conf;
++	struct ath12k *ar = arvif->ar;
++	u32 vdev_param;
++	u32 param_value;
++	int ret;
++	bool he_support;
++
++	lockdep_assert_wiphy(ath12k_ar_to_hw(ar)->wiphy);
++
++	link_conf = ath12k_mac_get_link_bss_conf(arvif);
++	if (!link_conf)
++		return -EINVAL;
++
++	he_support = link_conf->he_support;
++
++	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
++		   "mac set rate params vdev %i rate 0x%02x nss 0x%02x sgi 0x%02x ldpc 0x%02x\n",
++		   arvif->vdev_id, rate, nss, sgi, ldpc);
++
++	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
++		   "he_gi 0x%02x he_ltf 0x%02x he_fixed_rate %d\n", he_gi,
++		   he_ltf, he_fixed_rate);
++
++	if (!he_support) {
++		vdev_param = WMI_VDEV_PARAM_FIXED_RATE;
++		ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id,
++						    vdev_param, rate);
++		if (ret) {
++			ath12k_warn(ar->ab, "failed to set fixed rate param 0x%02x: %d\n",
++				    rate, ret);
++			return ret;
++		}
++	}
++
++	vdev_param = WMI_VDEV_PARAM_NSS;
++
+ 	ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id,
+-					    vdev_param, ldpc);
++					    vdev_param, nss);
++	if (ret) {
++		ath12k_warn(ar->ab, "failed to set nss param %d: %d\n",
++			    nss, ret);
++		return ret;
++	}
++
++	ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id,
++					    WMI_VDEV_PARAM_LDPC, ldpc);
+ 	if (ret) {
+ 		ath12k_warn(ar->ab, "failed to set ldpc param %d: %d\n",
+ 			    ldpc, ret);
+ 		return ret;
+ 	}
+ 
++	if (he_support) {
++		if (he_fixed_rate)
++			ret = ath12k_mac_set_fixed_rate_gi_ltf(arvif, he_gi, he_ltf);
++		else
++			ret = ath12k_mac_set_auto_rate_gi_ltf(arvif, he_gi, he_ltf);
++		if (ret)
++			return ret;
++	} else {
++		vdev_param = WMI_VDEV_PARAM_SGI;
++		param_value = ath12k_mac_nlgi_to_wmigi(sgi);
++		ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id,
++						    vdev_param, param_value);
++		if (ret) {
++			ath12k_warn(ar->ab, "failed to set sgi param %d: %d\n",
++				    sgi, ret);
++			return ret;
++		}
++	}
++
+ 	return 0;
+ }
+ 
+@@ -10065,6 +10494,31 @@ ath12k_mac_vht_mcs_range_present(struct
+ 	return true;
+ }
+ 
++static bool
++ath12k_mac_he_mcs_range_present(struct ath12k *ar,
++				enum nl80211_band band,
++				const struct cfg80211_bitrate_mask *mask)
++{
++	int i;
++	u16 he_mcs;
++
++	for (i = 0; i < NL80211_HE_NSS_MAX; i++) {
++		he_mcs = mask->control[band].he_mcs[i];
++
++		switch (he_mcs) {
++		case 0:
++		case BIT(8) - 1:
++		case BIT(10) - 1:
++		case BIT(12) - 1:
++			break;
++		default:
++			return false;
++		}
++	}
++
++	return true;
++}
++
+ static void ath12k_mac_set_bitrate_mask_iter(void *data,
+ 					     struct ieee80211_sta *sta)
+ {
+@@ -10073,7 +10527,10 @@ static void ath12k_mac_set_bitrate_mask_
+ 	struct ath12k_link_sta *arsta;
+ 	struct ath12k *ar = arvif->ar;
+ 
+-	arsta = rcu_dereference(ahsta->link[arvif->link_id]);
++	lockdep_assert_wiphy(ath12k_ar_to_hw(ar)->wiphy);
++
++	arsta = wiphy_dereference(ath12k_ar_to_hw(ar)->wiphy,
++				  ahsta->link[arvif->link_id]);
+ 	if (!arsta || arsta->arvif != arvif)
+ 		return;
+ 
+@@ -10111,6 +10568,61 @@ static void ath12k_mac_disable_peer_fixe
+ 			    arsta->addr, ret);
+ }
+ 
++static bool
++ath12k_mac_validate_fixed_rate_settings(struct ath12k *ar, enum nl80211_band band,
++					const struct cfg80211_bitrate_mask *mask,
++					unsigned int link_id)
++{
++	bool he_fixed_rate = false, vht_fixed_rate = false;
++	const u16 *vht_mcs_mask, *he_mcs_mask;
++	struct ieee80211_link_sta *link_sta;
++	struct ath12k_peer *peer, *tmp;
++	u8 vht_nss, he_nss;
++	int ret = true;
++
++	vht_mcs_mask = mask->control[band].vht_mcs;
++	he_mcs_mask = mask->control[band].he_mcs;
++
++	if (ath12k_mac_bitrate_mask_num_vht_rates(ar, band, mask) == 1)
++		vht_fixed_rate = true;
++
++	if (ath12k_mac_bitrate_mask_num_he_rates(ar, band, mask) == 1)
++		he_fixed_rate = true;
++
++	if (!vht_fixed_rate && !he_fixed_rate)
++		return true;
++
++	vht_nss = ath12k_mac_max_vht_nss(vht_mcs_mask);
++	he_nss =  ath12k_mac_max_he_nss(he_mcs_mask);
++
++	rcu_read_lock();
++	spin_lock_bh(&ar->ab->base_lock);
++	list_for_each_entry_safe(peer, tmp, &ar->ab->peers, list) {
++		if (peer->sta) {
++			link_sta = rcu_dereference(peer->sta->link[link_id]);
++			if (!link_sta) {
++				ret = false;
++				goto exit;
++			}
++
++			if (vht_fixed_rate && (!link_sta->vht_cap.vht_supported ||
++					       link_sta->rx_nss < vht_nss)) {
++				ret = false;
++				goto exit;
++			}
++			if (he_fixed_rate && (!link_sta->he_cap.has_he ||
++					      link_sta->rx_nss < he_nss)) {
++				ret = false;
++				goto exit;
++			}
++		}
++	}
++exit:
++	spin_unlock_bh(&ar->ab->base_lock);
++	rcu_read_unlock();
++	return ret;
++}
++
+ static int
+ ath12k_mac_op_set_bitrate_mask(struct ieee80211_hw *hw,
+ 			       struct ieee80211_vif *vif,
+@@ -10123,13 +10635,17 @@ ath12k_mac_op_set_bitrate_mask(struct ie
+ 	enum nl80211_band band;
+ 	const u8 *ht_mcs_mask;
+ 	const u16 *vht_mcs_mask;
++	const u16 *he_mcs_mask;
++	u8 he_ltf = 0;
++	u8 he_gi = 0;
+ 	u32 rate;
+-	u8 nss;
++	u8 nss, mac_nss;
+ 	u8 sgi;
+ 	u8 ldpc;
+ 	int single_nss;
+ 	int ret;
+ 	int num_rates;
++	bool he_fixed_rate = false;
+ 
+ 	lockdep_assert_wiphy(hw->wiphy);
+ 
+@@ -10144,14 +10660,18 @@ ath12k_mac_op_set_bitrate_mask(struct ie
+ 	band = def.chan->band;
+ 	ht_mcs_mask = mask->control[band].ht_mcs;
+ 	vht_mcs_mask = mask->control[band].vht_mcs;
++	he_mcs_mask = mask->control[band].he_mcs;
+ 	ldpc = !!(ar->ht_cap_info & WMI_HT_CAP_LDPC);
+ 
+ 	sgi = mask->control[band].gi;
+-	if (sgi == NL80211_TXRATE_FORCE_LGI) {
++	if (sgi == NL80211_TXRATE_FORCE_SGI) {
+ 		ret = -EINVAL;
+ 		goto out;
+ 	}
+ 
++	he_gi = mask->control[band].he_gi;
++	he_ltf = mask->control[band].he_ltf;
++
+ 	/* mac80211 doesn't support sending a fixed HT/VHT MCS alone, rather it
+ 	 * requires passing at least one of used basic rates along with them.
+ 	 * Fixed rate setting across different preambles(legacy, HT, VHT) is
+@@ -10168,18 +10688,31 @@ ath12k_mac_op_set_bitrate_mask(struct ie
+ 				    arvif->vdev_id, ret);
+ 			goto out;
+ 		}
++
+ 		ieee80211_iterate_stations_mtx(hw,
+ 					       ath12k_mac_disable_peer_fixed_rate,
+ 					       arvif);
+-	} else if (ath12k_mac_bitrate_mask_get_single_nss(ar, band, mask,
++	} else if (ath12k_mac_bitrate_mask_get_single_nss(ar, vif, band, mask,
+ 							  &single_nss)) {
+ 		rate = WMI_FIXED_RATE_NONE;
+ 		nss = single_nss;
++		arvif->bitrate_mask = *mask;
++
++		ieee80211_iterate_stations_atomic(hw,
++						  ath12k_mac_set_bitrate_mask_iter,
++						  arvif);
+ 	} else {
+ 		rate = WMI_FIXED_RATE_NONE;
+-		nss = min_t(u32, ar->num_tx_chains,
+-			    max(ath12k_mac_max_ht_nss(ht_mcs_mask),
+-				ath12k_mac_max_vht_nss(vht_mcs_mask)));
++
++		if (!ath12k_mac_validate_fixed_rate_settings(ar, band,
++							     mask, arvif->link_id))
++			ath12k_warn(ar->ab,
++				    "failed to update fixed rate settings due to mcs/nss incompatibility\n");
++
++		mac_nss = max3(ath12k_mac_max_ht_nss(ht_mcs_mask),
++			       ath12k_mac_max_vht_nss(vht_mcs_mask),
++			       ath12k_mac_max_he_nss(he_mcs_mask));
++		nss = min_t(u32, ar->num_tx_chains, mac_nss);
+ 
+ 		/* If multiple rates across different preambles are given
+ 		 * we can reconfigure this info with all peers using PEER_ASSOC
+@@ -10211,9 +10744,21 @@ ath12k_mac_op_set_bitrate_mask(struct ie
+ 			 */
+ 			ath12k_warn(ar->ab,
+ 				    "Setting more than one MCS Value in bitrate mask not supported\n");
+-			return -EINVAL;
++			ret = -EINVAL;
++			goto out;
+ 		}
+ 
++		num_rates = ath12k_mac_bitrate_mask_num_he_rates(ar, band, mask);
++		if (num_rates == 1)
++			he_fixed_rate = true;
++
++		if (!ath12k_mac_he_mcs_range_present(ar, band, mask) &&
++		    num_rates > 1) {
++			ath12k_warn(ar->ab,
++				    "Setting more than one HE MCS Value in bitrate mask not supported\n");
++			ret = -EINVAL;
++			goto out;
++		}
+ 		ieee80211_iterate_stations_mtx(hw,
+ 					       ath12k_mac_disable_peer_fixed_rate,
+ 					       arvif);
+@@ -10224,9 +10769,10 @@ ath12k_mac_op_set_bitrate_mask(struct ie
+ 					       arvif);
+ 	}
+ 
+-	ret = ath12k_mac_set_fixed_rate_params(arvif, rate, nss, sgi, ldpc);
++	ret = ath12k_mac_set_rate_params(arvif, rate, nss, sgi, ldpc, he_gi,
++					 he_ltf, he_fixed_rate);
+ 	if (ret) {
+-		ath12k_warn(ar->ab, "failed to set fixed rate params on vdev %i: %d\n",
++		ath12k_warn(ar->ab, "failed to set rate params on vdev %i: %d\n",
+ 			    arvif->vdev_id, ret);
+ 	}
+ 
+--- a/drivers/net/wireless/ath/ath12k/wmi.h
++++ b/drivers/net/wireless/ath/ath12k/wmi.h
+@@ -220,6 +220,22 @@ enum WMI_HOST_WLAN_BAND {
+ 	WMI_HOST_WLAN_2G_5G_CAP	= 3,
+ };
+ 
++/* Parameters used for WMI_VDEV_PARAM_AUTORATE_MISC_CFG command.
++ * Used only for HE auto rate mode.
++ */
++enum {
++	/* HE LTF related configuration */
++	WMI_HE_AUTORATE_LTF_1X = BIT(0),
++	WMI_HE_AUTORATE_LTF_2X = BIT(1),
++	WMI_HE_AUTORATE_LTF_4X = BIT(2),
++
++	/* HE GI related configuration */
++	WMI_AUTORATE_400NS_GI = BIT(8),
++	WMI_AUTORATE_800NS_GI = BIT(9),
++	WMI_AUTORATE_1600NS_GI = BIT(10),
++	WMI_AUTORATE_3200NS_GI = BIT(11),
++};
++
+ enum wmi_cmd_group {
+ 	/* 0 to 2 are reserved */
+ 	WMI_GRP_START = 0x3,
+@@ -1145,7 +1161,9 @@ enum wmi_tlv_vdev_param {
+ 	WMI_VDEV_PARAM_HE_RANGE_EXT,
+ 	WMI_VDEV_PARAM_ENABLE_BCAST_PROBE_RESPONSE,
+ 	WMI_VDEV_PARAM_FILS_MAX_CHANNEL_GUARD_TIME,
++	WMI_VDEV_PARAM_HE_LTF = 0x74,
+ 	WMI_VDEV_PARAM_BA_MODE = 0x7e,
++	WMI_VDEV_PARAM_AUTORATE_MISC_CFG = 0x80,
+ 	WMI_VDEV_PARAM_SET_HE_SOUNDING_MODE = 0x87,
+ 	WMI_VDEV_PARAM_6GHZ_PARAMS = 0x99,
+ 	WMI_VDEV_PARAM_PROTOTYPE = 0x8000,
+@@ -3579,6 +3597,15 @@ struct wmi_force_fw_hang_cmd {
+ 	__le32 delay_time_ms;
+ } __packed;
+ 
++/* Param values to be sent for WMI_VDEV_PARAM_SGI param_id
++ * which are used in 11n, 11ac systems
++ * @WMI_GI_800_NS - Always uses 0.8us (Long GI)
++ * @WMI_GI_400_NS - Firmware switches between 0.4us (Short GI)
++ *			and 0.8us (Long GI) based on packet error rate.
++ */
++#define WMI_GI_800_NS 0
++#define WMI_GI_400_NS 1
++
+ struct wmi_vdev_set_param_cmd {
+ 	__le32 tlv_header;
+ 	__le32 vdev_id;
diff --git a/package/kernel/mac80211/patches/ath12k/104-7-wifi-ath12k-clean-up-80P80-support.patch b/package/kernel/mac80211/patches/ath12k/104-7-wifi-ath12k-clean-up-80P80-support.patch
new file mode 100644
index 0000000000..922cdf17fd
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath12k/104-7-wifi-ath12k-clean-up-80P80-support.patch
@@ -0,0 +1,262 @@
+From patchwork Wed May 21 22:45:37 2025
+Content-Type: text/plain; charset="utf-8"
+MIME-Version: 1.0
+Content-Transfer-Encoding: 7bit
+X-Patchwork-Submitter: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+X-Patchwork-Id: 14096121
+X-Patchwork-Delegate: quic_jjohnson@quicinc.com
+Received: from mx0b-0031df01.pphosted.com (mx0b-0031df01.pphosted.com
+ [205.220.180.131])
+	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
+	(No client certificate requested)
+	by smtp.subspace.kernel.org (Postfix) with ESMTPS id ED55023958A
+	for <linux-wireless@vger.kernel.org>; Wed, 21 May 2025 22:45:58 +0000 (UTC)
+Authentication-Results: smtp.subspace.kernel.org;
+ arc=none smtp.client-ip=205.220.180.131
+ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
+	t=1747867560; cv=none;
+ b=R6R1l/0hUMYWkLzVM4w8Z2s3aU01ujlrdBV4IEYLrqQ3CzuP8xd2fnZMcdbVAFvXd/hepJKOZrFod6RG43u2TuGCQ5wM3SKIqyk0c/MlskZk+jnUnvm9WtrezJS82phw1G2mJ8NiYsKzmcJGMQtaYfl3jWA4o+BGMGyOg0Keb/M=
+ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
+	s=arc-20240116; t=1747867560; c=relaxed/simple;
+	bh=HUqzq2V1sSbcLZxqxveNb5xXvMg5sfyIhSzn4mKsdms=;
+	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
+	 MIME-Version:Content-Type;
+ b=G9poRT2jwhhAC0htiaG4SIE8b1DuTf63uDCDCGj5WoQ4B/v/NWtaqtzBWJF4c7UuQBso4JO4X9auJyfxJ4SxUBrULdlJq7mvAs7nxFOPEBDBltLKWCZznLwuuuo690MjvUQ5mfKt/Oy+uREyur4vXsQtfSBZc0DSZUlC5R+Z2Mc=
+ARC-Authentication-Results: i=1; smtp.subspace.kernel.org;
+ dmarc=pass (p=none dis=none) header.from=quicinc.com;
+ spf=pass smtp.mailfrom=quicinc.com;
+ dkim=pass (2048-bit key) header.d=quicinc.com header.i=@quicinc.com
+ header.b=cu63IdMd; arc=none smtp.client-ip=205.220.180.131
+Authentication-Results: smtp.subspace.kernel.org;
+ dmarc=pass (p=none dis=none) header.from=quicinc.com
+Authentication-Results: smtp.subspace.kernel.org;
+ spf=pass smtp.mailfrom=quicinc.com
+Authentication-Results: smtp.subspace.kernel.org;
+	dkim=pass (2048-bit key) header.d=quicinc.com header.i=@quicinc.com
+ header.b="cu63IdMd"
+Received: from pps.filterd (m0279871.ppops.net [127.0.0.1])
+	by mx0a-0031df01.pphosted.com (8.18.1.2/8.18.1.2) with ESMTP id
+ 54LJgw7Z025025;
+	Wed, 21 May 2025 22:45:56 GMT
+DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=quicinc.com; h=
+	cc:content-transfer-encoding:content-type:date:from:in-reply-to
+	:message-id:mime-version:references:subject:to; s=qcppdkim1; bh=
+	90lF32RvbNU2yyxl2mGBEewKfDvRJ7MRRLe6DgCwXFs=; b=cu63IdMdS+nJIsqy
+	ktY/ZQ/qTTWf2MpubSMC9UftiwnI9Xj6K8LFE0q+NvCN2EgZKzf+OzyW9wbbRepN
+	Q3ZYBAR3lFyw40J6AZgpAuPiq7Y+eqt7l8jc+/2bb2+imOzvWHwFkXSvc8nijnHX
+	ZLEU29M0xloyHeJ7xLbumzRdfcCJ6357/HKp9U3mLvEfpLY97t5/H3yEJWHQmnvE
+	aHkFaLM6Ru2R2+nzPDylKcY+TZsqv306oEqydWI33ANyvfDkWJqbQjtQ+geTkJxC
+	syi9ZifD5zPdOjb9YWNn0V8mWUBRx6hW8ZKU/L3gWGXjkvyRHneZ4AOz83Tp9Ym4
+	L34jSQ==
+Received: from nalasppmta04.qualcomm.com (Global_NAT1.qualcomm.com
+ [129.46.96.20])
+	by mx0a-0031df01.pphosted.com (PPS) with ESMTPS id 46rwf6vbsf-1
+	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
+	Wed, 21 May 2025 22:45:55 +0000 (GMT)
+Received: from nalasex01a.na.qualcomm.com (nalasex01a.na.qualcomm.com
+ [10.47.209.196])
+	by NALASPPMTA04.qualcomm.com (8.18.1.2/8.18.1.2) with ESMTPS id
+ 54LMjsWN022226
+	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
+	Wed, 21 May 2025 22:45:54 GMT
+Received: from ath12k-linux2.qualcomm.com (10.80.80.8) by
+ nalasex01a.na.qualcomm.com (10.47.209.196) with Microsoft SMTP Server
+ (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
+ 15.2.1544.9; Wed, 21 May 2025 15:45:54 -0700
+From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+To: <ath12k@lists.infradead.org>
+CC: <linux-wireless@vger.kernel.org>,
+        Pradeep Kumar Chitrapu
+	<quic_pradeepc@quicinc.com>,
+        Jeff Johnson <quic_jjohnson@quicinc.com>
+Subject: [PATCH ath-next V14 7/9] wifi: ath12k: clean up 80P80 support
+Date: Wed, 21 May 2025 15:45:37 -0700
+Message-ID: <20250521224539.355985-8-quic_pradeepc@quicinc.com>
+X-Mailer: git-send-email 2.43.0
+In-Reply-To: <20250521224539.355985-1-quic_pradeepc@quicinc.com>
+References: <20250521224539.355985-1-quic_pradeepc@quicinc.com>
+Precedence: bulk
+X-Mailing-List: linux-wireless@vger.kernel.org
+List-Id: <linux-wireless.vger.kernel.org>
+List-Subscribe: <mailto:linux-wireless+subscribe@vger.kernel.org>
+List-Unsubscribe: <mailto:linux-wireless+unsubscribe@vger.kernel.org>
+MIME-Version: 1.0
+X-ClientProxiedBy: nasanex01a.na.qualcomm.com (10.52.223.231) To
+ nalasex01a.na.qualcomm.com (10.47.209.196)
+X-QCInternal: smtphost
+X-Proofpoint-Virus-Version: vendor=nai engine=6200 definitions=5800
+ signatures=585085
+X-Proofpoint-GUID: xDBdjIlSrmWJZkBfMwcImhxnyTIR4551
+X-Proofpoint-Spam-Details-Enc: AW1haW4tMjUwNTIxMDIyNiBTYWx0ZWRfX75XKL//oF16a
+ YMA/60ZSduIYMzTQ+PpEhRfS8BSEJ3JAYNLLDjp3b1hmrHJmdqMnxgbya6RQ+qeAISgkr8ZWIMx
+ fGx/btrlFP2SbXd0JWwSMOApD3LJewBu/ZeBWBDEWbbO00LOGnR0aFqmCeym6YSeYyakVcNd8nQ
+ 0JnPxxBLeXeYPpIZTFMD6TpVFyfvtCG9jpMOI27FLBdHLednVW2yrOx5b62xwy181re5iN4XOki
+ 1M/HJRMACpfQJImHpO9X3rRh2j79oKIKVwa3UjV8A7vD3noV/pV0SOTZP0awMYQH/Pn91nji685
+ auXzHG2pai3Byw89+jYZIG2xfiqBcBwIEARvw52XSv3glk0tSvLDxNo8nyFNPsZ63g70USl1IlC
+ AKhW+QOw9/zkn3oCB+3fZZ/y+F4vlu4OzN4gETU+6p3798YiFGWMvocQnI/Ig7Unex9rmOP5
+X-Authority-Analysis: v=2.4 cv=fZOty1QF c=1 sm=1 tr=0 ts=682e57a3 cx=c_pps
+ a=ouPCqIW2jiPt+lZRy3xVPw==:117 a=ouPCqIW2jiPt+lZRy3xVPw==:17
+ a=GEpy-HfZoHoA:10 a=dt9VzEwgFbYA:10 a=COk6AnOGAAAA:8 a=QHHbJxpVzSBZVvfXPLwA:9
+ a=TjNXssC_j7lpFel5tvFf:22
+X-Proofpoint-ORIG-GUID: xDBdjIlSrmWJZkBfMwcImhxnyTIR4551
+X-Proofpoint-Virus-Version: vendor=baseguard
+ engine=ICAP:2.0.293,Aquarius:18.0.1099,Hydra:6.0.736,FMLib:17.12.80.40
+ definitions=2025-05-21_07,2025-05-20_03,2025-03-28_01
+X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
+ clxscore=1015 mlxscore=0 adultscore=0 spamscore=0 bulkscore=0 suspectscore=0
+ malwarescore=0 priorityscore=1501 impostorscore=0 mlxlogscore=999
+ lowpriorityscore=0 phishscore=0 classifier=spam authscore=0 authtc=n/a
+ authcc= route=outbound adjust=0 reason=mlx scancount=1
+ engine=8.19.0-2505160000 definitions=main-2505210226
+
+Clean up unused 80P80 references as hardware does not support
+it. This is applicable to both QCN9274 and WCN7850.
+
+Tested-on: QCN9274 hw2.0 PCI WLAN.WBE.1.0.1-00029-QCAHKSWPL_SILICONZ-1
+
+Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
+---
+ drivers/net/wireless/ath/ath12k/mac.c | 48 ++++++---------------------
+ drivers/net/wireless/ath/ath12k/wmi.c |  2 --
+ drivers/net/wireless/ath/ath12k/wmi.h |  1 -
+ 3 files changed, 10 insertions(+), 41 deletions(-)
+
+--- a/drivers/net/wireless/ath/ath12k/mac.c
++++ b/drivers/net/wireless/ath/ath12k/mac.c
+@@ -207,7 +207,7 @@ ath12k_phymodes[NUM_NL80211_BANDS][ATH12
+ 			[NL80211_CHAN_WIDTH_40] = MODE_11BE_EHT40,
+ 			[NL80211_CHAN_WIDTH_80] = MODE_11BE_EHT80,
+ 			[NL80211_CHAN_WIDTH_160] = MODE_11BE_EHT160,
+-			[NL80211_CHAN_WIDTH_80P80] = MODE_11BE_EHT80_80,
++			[NL80211_CHAN_WIDTH_80P80] = MODE_UNKNOWN,
+ 			[NL80211_CHAN_WIDTH_320] = MODE_11BE_EHT320,
+ 	},
+ 	[NL80211_BAND_6GHZ] = {
+@@ -218,7 +218,7 @@ ath12k_phymodes[NUM_NL80211_BANDS][ATH12
+ 			[NL80211_CHAN_WIDTH_40] = MODE_11BE_EHT40,
+ 			[NL80211_CHAN_WIDTH_80] = MODE_11BE_EHT80,
+ 			[NL80211_CHAN_WIDTH_160] = MODE_11BE_EHT160,
+-			[NL80211_CHAN_WIDTH_80P80] = MODE_11BE_EHT80_80,
++			[NL80211_CHAN_WIDTH_80P80] = MODE_UNKNOWN,
+ 			[NL80211_CHAN_WIDTH_320] = MODE_11BE_EHT320,
+ 	},
+ 
+@@ -2638,17 +2638,6 @@ static void ath12k_peer_assoc_h_he(struc
+ 
+ 	switch (link_sta->bandwidth) {
+ 	case IEEE80211_STA_RX_BW_160:
+-		if (he_cap->he_cap_elem.phy_cap_info[0] &
+-		    IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_80PLUS80_MHZ_IN_5G) {
+-			v = ath12k_peer_assoc_h_he_limit(v, he_mcs_mask);
+-			arg->peer_he_rx_mcs_set[WMI_HECAP_TXRX_MCS_NSS_IDX_80_80] = v;
+-
+-			v = le16_to_cpu(he_cap->he_mcs_nss_supp.tx_mcs_80p80);
+-			arg->peer_he_tx_mcs_set[WMI_HECAP_TXRX_MCS_NSS_IDX_80_80] = v;
+-
+-			arg->peer_he_mcs_count++;
+-			he_tx_mcs = v;
+-		}
+ 		v = le16_to_cpu(he_cap->he_mcs_nss_supp.rx_mcs_160);
+ 		arg->peer_he_rx_mcs_set[WMI_HECAP_TXRX_MCS_NSS_IDX_160] = v;
+ 
+@@ -2935,16 +2924,11 @@ static enum wmi_phy_mode ath12k_mac_get_
+ 						    struct ieee80211_link_sta *link_sta)
+ {
+ 	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_160) {
+-		switch (link_sta->vht_cap.cap &
+-			IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_MASK) {
+-		case IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_160MHZ:
++		if (link_sta->vht_cap.cap & IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_160MHZ)
+ 			return MODE_11AC_VHT160;
+-		case IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_160_80PLUS80MHZ:
+-			return MODE_11AC_VHT80_80;
+-		default:
+-			/* not sure if this is a valid case? */
+-			return MODE_11AC_VHT160;
+-		}
++
++		/* not sure if this is a valid case? */
++		return MODE_11AC_VHT160;
+ 	}
+ 
+ 	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_80)
+@@ -2966,11 +2950,8 @@ static enum wmi_phy_mode ath12k_mac_get_
+ 		if (link_sta->he_cap.he_cap_elem.phy_cap_info[0] &
+ 		     IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_160MHZ_IN_5G)
+ 			return MODE_11AX_HE160;
+-		else if (link_sta->he_cap.he_cap_elem.phy_cap_info[0] &
+-		     IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_80PLUS80_MHZ_IN_5G)
+-			return MODE_11AX_HE80_80;
+-		/* not sure if this is a valid case? */
+-		return MODE_11AX_HE160;
++
++		return MODE_UNKNOWN;
+ 	}
+ 
+ 	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_80)
+@@ -2998,14 +2979,10 @@ static enum wmi_phy_mode ath12k_mac_get_
+ 		    IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_160MHZ_IN_5G)
+ 			return MODE_11BE_EHT160;
+ 
+-		if (link_sta->he_cap.he_cap_elem.phy_cap_info[0] &
+-			 IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_80PLUS80_MHZ_IN_5G)
+-			return MODE_11BE_EHT80_80;
+-
+ 		ath12k_warn(ar->ab, "invalid EHT PHY capability info for 160 Mhz: %d\n",
+ 			    link_sta->he_cap.he_cap_elem.phy_cap_info[0]);
+ 
+-		return MODE_11BE_EHT160;
++		return MODE_UNKNOWN;
+ 	}
+ 
+ 	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_80)
+@@ -7077,8 +7054,6 @@ static void ath12k_mac_set_hemcsmap(stru
+ 	mcs_nss->tx_mcs_80 = cpu_to_le16(txmcs_map & 0xffff);
+ 	mcs_nss->rx_mcs_160 = cpu_to_le16(rxmcs_map & 0xffff);
+ 	mcs_nss->tx_mcs_160 = cpu_to_le16(txmcs_map & 0xffff);
+-	mcs_nss->rx_mcs_80p80 = cpu_to_le16(rxmcs_map & 0xffff);
+-	mcs_nss->tx_mcs_80p80 = cpu_to_le16(txmcs_map & 0xffff);
+ }
+ 
+ static void ath12k_mac_copy_he_cap(struct ath12k *ar,
+@@ -7100,6 +7075,7 @@ static void ath12k_mac_copy_he_cap(struc
+ 		IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_40MHZ_IN_2G |
+ 		IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_40MHZ_80MHZ_IN_5G |
+ 		IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_160MHZ_IN_5G;
++	/* 80PLUS80 is not supported */
+ 	he_cap_elem->phy_cap_info[0] &=
+ 		~IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_80PLUS80_MHZ_IN_5G;
+ 	he_cap_elem->phy_cap_info[5] &=
+@@ -10176,10 +10152,6 @@ static __le16
+ ath12k_mac_get_tx_mcs_map(const struct ieee80211_sta_he_cap *he_cap)
+ {
+ 	if (he_cap->he_cap_elem.phy_cap_info[0] &
+-	    IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_80PLUS80_MHZ_IN_5G)
+-		return he_cap->he_mcs_nss_supp.tx_mcs_80p80;
+-
+-	if (he_cap->he_cap_elem.phy_cap_info[0] &
+ 	    IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_160MHZ_IN_5G)
+ 		return he_cap->he_mcs_nss_supp.tx_mcs_160;
+ 
+--- a/drivers/net/wireless/ath/ath12k/wmi.c
++++ b/drivers/net/wireless/ath/ath12k/wmi.c
+@@ -1021,8 +1021,6 @@ static void ath12k_wmi_put_wmi_channel(s
+ 			chan->band_center_freq1 = cpu_to_le32(center_freq1 - 40);
+ 
+ 		chan->band_center_freq2 = cpu_to_le32(center_freq1);
+-	} else if (arg->mode == MODE_11BE_EHT80_80) {
+-		chan->band_center_freq2 = cpu_to_le32(arg->band_center_freq2);
+ 	} else {
+ 		chan->band_center_freq2 = 0;
+ 	}
+--- a/drivers/net/wireless/ath/ath12k/wmi.h
++++ b/drivers/net/wireless/ath/ath12k/wmi.h
+@@ -3726,7 +3726,6 @@ struct wmi_vdev_install_key_arg {
+ #define WMI_HOST_MAX_HE_RATE_SET		3
+ #define WMI_HECAP_TXRX_MCS_NSS_IDX_80		0
+ #define WMI_HECAP_TXRX_MCS_NSS_IDX_160		1
+-#define WMI_HECAP_TXRX_MCS_NSS_IDX_80_80	2
+ 
+ #define ATH12K_WMI_MLO_MAX_PARTNER_LINKS \
+ 	(ATH12K_WMI_MLO_MAX_LINKS + ATH12K_MAX_NUM_BRIDGE_LINKS - 1)
diff --git a/package/kernel/mac80211/patches/ath12k/104-8-wifi-ath12k-add-support-for-160-MHz-bandwidth.patch b/package/kernel/mac80211/patches/ath12k/104-8-wifi-ath12k-add-support-for-160-MHz-bandwidth.patch
new file mode 100644
index 0000000000..24114e92ac
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath12k/104-8-wifi-ath12k-add-support-for-160-MHz-bandwidth.patch
@@ -0,0 +1,393 @@
+From patchwork Wed May 21 22:45:38 2025
+Content-Type: text/plain; charset="utf-8"
+MIME-Version: 1.0
+Content-Transfer-Encoding: 7bit
+X-Patchwork-Submitter: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+X-Patchwork-Id: 14096124
+X-Patchwork-Delegate: quic_jjohnson@quicinc.com
+Received: from mx0b-0031df01.pphosted.com (mx0b-0031df01.pphosted.com
+ [205.220.180.131])
+	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
+	(No client certificate requested)
+	by smtp.subspace.kernel.org (Postfix) with ESMTPS id DEE9223A9AA
+	for <linux-wireless@vger.kernel.org>; Wed, 21 May 2025 22:45:59 +0000 (UTC)
+Authentication-Results: smtp.subspace.kernel.org;
+ arc=none smtp.client-ip=205.220.180.131
+ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
+	t=1747867561; cv=none;
+ b=qWgm5H8L0Zhrc5crkCw7SBoGEQ8yf+aC0TSWOzfiTwcAddeStpjorEa3XaBl0GOhHPRaECOhMSNqu88tQ5CzCGmumBQ3QLC6mod6Tb0Y0PdeUJm3YoGKcI+F0oE3g5kCHaU9LRKKnmMZQS72kE7dO+lEBfwMIuCX/VwV066B1p8=
+ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
+	s=arc-20240116; t=1747867561; c=relaxed/simple;
+	bh=61S52HJJJauXcXkg3NpFqkwtGSPNO+bmTpNYu1v9AKM=;
+	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
+	 MIME-Version:Content-Type;
+ b=gi5WIxM8SYlljyfdAVTdIK6JQ5jJHPGGfdxPkwbtEaPElRA55vurxkaaJ0RktTtDYYJEn7KLZFieBHAv5/nEcrDjL4NGvgT3wiAoGcbsd+TIF6w5J2RSmAwhAP008N5swveLHDzJ0M9TrtQj2HHndc8JPD4oGWbcEqKQqHSq8ck=
+ARC-Authentication-Results: i=1; smtp.subspace.kernel.org;
+ dmarc=pass (p=none dis=none) header.from=quicinc.com;
+ spf=pass smtp.mailfrom=quicinc.com;
+ dkim=pass (2048-bit key) header.d=quicinc.com header.i=@quicinc.com
+ header.b=lMYw009C; arc=none smtp.client-ip=205.220.180.131
+Authentication-Results: smtp.subspace.kernel.org;
+ dmarc=pass (p=none dis=none) header.from=quicinc.com
+Authentication-Results: smtp.subspace.kernel.org;
+ spf=pass smtp.mailfrom=quicinc.com
+Authentication-Results: smtp.subspace.kernel.org;
+	dkim=pass (2048-bit key) header.d=quicinc.com header.i=@quicinc.com
+ header.b="lMYw009C"
+Received: from pps.filterd (m0279868.ppops.net [127.0.0.1])
+	by mx0a-0031df01.pphosted.com (8.18.1.2/8.18.1.2) with ESMTP id
+ 54LJgEPE029249;
+	Wed, 21 May 2025 22:45:56 GMT
+DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=quicinc.com; h=
+	cc:content-transfer-encoding:content-type:date:from:in-reply-to
+	:message-id:mime-version:references:subject:to; s=qcppdkim1; bh=
+	ph+yJaIkwYsZzzEsymzTjupgmHjdwFMJhbEzuPrYvfY=; b=lMYw009CSvZqDxkz
+	+HCEzcZhy6QO8G2ut93TJxHdCbVLlRaMNReXGlGqx2KRNracyLRkAQsC16i+QcpJ
+	aHBvIE2c0/TEtBiyv3HzBf3/89R0POT080sz81P6go3m8w9bcIE+Q2DqjdhVNqu3
+	AlV8qb6pj/QUVvDbJQxO1M9eCXSO6g2BBDjgRCktOu+x2TlxhdBZ/tJP+h0AUk+j
+	YsH1LhcLOZYCFTJyB6IFmHWvtGk5Ef6i6D/tXyCL7nQiDP/R1v2PcdlLlI5e5/PO
+	FhKB2+RCmSyJUtyaAHHi/mVen5yqFX2K3/vL3BtprRAJINhFxQrLs6xLIQabELzj
+	KCstuQ==
+Received: from nalasppmta04.qualcomm.com (Global_NAT1.qualcomm.com
+ [129.46.96.20])
+	by mx0a-0031df01.pphosted.com (PPS) with ESMTPS id 46rwfb4b3x-1
+	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
+	Wed, 21 May 2025 22:45:55 +0000 (GMT)
+Received: from nalasex01a.na.qualcomm.com (nalasex01a.na.qualcomm.com
+ [10.47.209.196])
+	by NALASPPMTA04.qualcomm.com (8.18.1.2/8.18.1.2) with ESMTPS id
+ 54LMjtX2022238
+	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
+	Wed, 21 May 2025 22:45:55 GMT
+Received: from ath12k-linux2.qualcomm.com (10.80.80.8) by
+ nalasex01a.na.qualcomm.com (10.47.209.196) with Microsoft SMTP Server
+ (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
+ 15.2.1544.9; Wed, 21 May 2025 15:45:54 -0700
+From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+To: <ath12k@lists.infradead.org>
+CC: <linux-wireless@vger.kernel.org>,
+        Pradeep Kumar Chitrapu
+	<quic_pradeepc@quicinc.com>,
+        P Praneesh <quic_ppranees@quicinc.com>,
+        "Jeff
+ Johnson" <quic_jjohnson@quicinc.com>
+Subject: [PATCH ath-next V14 8/9] wifi: ath12k: add support for 160 MHz
+ bandwidth
+Date: Wed, 21 May 2025 15:45:38 -0700
+Message-ID: <20250521224539.355985-9-quic_pradeepc@quicinc.com>
+X-Mailer: git-send-email 2.43.0
+In-Reply-To: <20250521224539.355985-1-quic_pradeepc@quicinc.com>
+References: <20250521224539.355985-1-quic_pradeepc@quicinc.com>
+Precedence: bulk
+X-Mailing-List: linux-wireless@vger.kernel.org
+List-Id: <linux-wireless.vger.kernel.org>
+List-Subscribe: <mailto:linux-wireless+subscribe@vger.kernel.org>
+List-Unsubscribe: <mailto:linux-wireless+unsubscribe@vger.kernel.org>
+MIME-Version: 1.0
+X-ClientProxiedBy: nasanex01a.na.qualcomm.com (10.52.223.231) To
+ nalasex01a.na.qualcomm.com (10.47.209.196)
+X-QCInternal: smtphost
+X-Proofpoint-Virus-Version: vendor=nai engine=6200 definitions=5800
+ signatures=585085
+X-Proofpoint-ORIG-GUID: T9MbsOp4F8M93FD6ZEyfm1BTh5tEiCIl
+X-Proofpoint-Spam-Details-Enc: AW1haW4tMjUwNTIxMDIyNiBTYWx0ZWRfX0EeEFBAyVxZV
+ WX6jh2dkCn4P+eViI8Gvz/6S+yZ+Avx9/8To2mbulh5j1kDm92bEDu7iQtI17ILPnOgbUXWAjjt
+ Z2LvemtbMzJe0lY0EjJNWWunihdlsXPAdOnZFjV0rOtakq8Xx4y8K45/1cGY9dQOApxDFC9HiLZ
+ +FK9apopZ2DyP6haLf5HQI+6DC3wwgbEQlE+89g69hXEM8UePlFlsf0fpfIVgiWG73gfzHkrRPM
+ 8ByVGmKpFSXIBmvY+EZZOPuPsQHt/91pIisXw5Joxdbl6Qf2anjuC0X4LPrTgTxgXWhljS4JdXo
+ djhNt09IBnNuagxN9aMx/frUhqQPNL54kp/cXbpgcLQX0XQg8SOvwyxJs+CALQUyymluDLHyH9w
+ UQUznCXFrps86AX/Fpnhrl9hqR5NO0/6oR340zsS7mvryRucOqzT7vc3WPMJEhW68VMCAl5Z
+X-Proofpoint-GUID: T9MbsOp4F8M93FD6ZEyfm1BTh5tEiCIl
+X-Authority-Analysis: v=2.4 cv=dLCmmPZb c=1 sm=1 tr=0 ts=682e57a4 cx=c_pps
+ a=ouPCqIW2jiPt+lZRy3xVPw==:117 a=ouPCqIW2jiPt+lZRy3xVPw==:17
+ a=GEpy-HfZoHoA:10 a=dt9VzEwgFbYA:10 a=COk6AnOGAAAA:8 a=dOJm2eNAaUnF9U8lSB4A:9
+ a=TjNXssC_j7lpFel5tvFf:22
+X-Proofpoint-Virus-Version: vendor=baseguard
+ engine=ICAP:2.0.293,Aquarius:18.0.1099,Hydra:6.0.736,FMLib:17.12.80.40
+ definitions=2025-05-21_07,2025-05-20_03,2025-03-28_01
+X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
+ mlxscore=0 clxscore=1015 adultscore=0 bulkscore=0 phishscore=0 suspectscore=0
+ impostorscore=0 malwarescore=0 lowpriorityscore=0 mlxlogscore=999 spamscore=0
+ priorityscore=1501 classifier=spam authscore=0 authtc=n/a authcc=
+ route=outbound adjust=0 reason=mlx scancount=1 engine=8.19.0-2505160000
+ definitions=main-2505210226
+
+Add support to configure maximum NSS in 160 MHz bandwidth.
+Firmware advertises support for handling NSS ratio information
+as a part of service ready ext event using nss_ratio_enabled
+flag. Save this information in ath12k_pdev_cap to calculate
+NSS ratio.
+
+Additionally, reorder the code by moving
+ath12k_peer_assoc_h_phymode() before ath12k_peer_assoc_h_vht()
+to ensure that arg->peer_phymode correctly reflects the bandwidth
+in the max NSS calculation.
+
+Tested-on: QCN9274 hw2.0 PCI WLAN.WBE.1.0.1-00029-QCAHKSWPL_SILICONZ-1
+
+Co-developed-by: P Praneesh <quic_ppranees@quicinc.com>
+Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
+Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
+---
+ drivers/net/wireless/ath/ath12k/core.h |  2 +
+ drivers/net/wireless/ath/ath12k/mac.c  | 89 ++++++++++++++++++++++----
+ drivers/net/wireless/ath/ath12k/mac.h  |  2 +
+ drivers/net/wireless/ath/ath12k/wmi.c  |  7 +-
+ drivers/net/wireless/ath/ath12k/wmi.h  | 28 ++++++++
+ 5 files changed, 115 insertions(+), 13 deletions(-)
+
+--- a/drivers/net/wireless/ath/ath12k/core.h
++++ b/drivers/net/wireless/ath/ath12k/core.h
+@@ -789,6 +789,8 @@ struct ath12k_pdev_cap {
+ 	struct ath12k_band_cap band[NUM_NL80211_BANDS];
+ 	u32 eml_cap;
+ 	u32 mld_cap;
++	bool nss_ratio_enabled;
++	u8 nss_ratio_info;
+ };
+ 
+ struct mlo_timestamp {
+--- a/drivers/net/wireless/ath/ath12k/mac.c
++++ b/drivers/net/wireless/ath/ath12k/mac.c
+@@ -2267,6 +2267,34 @@ ath12k_peer_assoc_h_vht_limit(u16 tx_mcs
+ 	return tx_mcs_set;
+ }
+ 
++static u8 ath12k_get_nss_160mhz(struct ath12k *ar,
++				u8 max_nss)
++{
++	u8 nss_ratio_info = ar->pdev->cap.nss_ratio_info;
++	u8 max_sup_nss = 0;
++
++	switch (nss_ratio_info) {
++	case WMI_NSS_RATIO_1BY2_NSS:
++		max_sup_nss = max_nss >> 1;
++		break;
++	case WMI_NSS_RATIO_3BY4_NSS:
++		ath12k_warn(ar->ab, "WMI_NSS_RATIO_3BY4_NSS not supported\n");
++		break;
++	case WMI_NSS_RATIO_1_NSS:
++		max_sup_nss = max_nss;
++		break;
++	case WMI_NSS_RATIO_2_NSS:
++		ath12k_warn(ar->ab, "WMI_NSS_RATIO_2_NSS not supported\n");
++		break;
++	default:
++		ath12k_warn(ar->ab, "invalid nss ratio received from fw: %d\n",
++			    nss_ratio_info);
++		break;
++	}
++
++	return max_sup_nss;
++}
++
+ static void ath12k_peer_assoc_h_vht(struct ath12k *ar,
+ 				    struct ath12k_link_vif *arvif,
+ 				    struct ath12k_link_sta *arsta,
+@@ -2284,6 +2312,7 @@ static void ath12k_peer_assoc_h_vht(stru
+ 	u8 max_nss, vht_mcs;
+ 	int i, vht_nss, nss_idx;
+ 	bool user_rate_valid = true;
++	u32 rx_nss, tx_nss, nss_160;
+ 
+ 	lockdep_assert_wiphy(ath12k_ar_to_hw(ar)->wiphy);
+ 
+@@ -2388,10 +2417,24 @@ static void ath12k_peer_assoc_h_vht(stru
+ 	/* TODO:  Check */
+ 	arg->tx_max_mcs_nss = 0xFF;
+ 
+-	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "mac vht peer %pM max_mpdu %d flags 0x%x\n",
+-		   arsta->addr, arg->peer_max_mpdu, arg->peer_flags);
++	if (arg->peer_phymode == MODE_11AC_VHT160) {
++		tx_nss = ath12k_get_nss_160mhz(ar, max_nss);
++		rx_nss = min(arg->peer_nss, tx_nss);
++		arg->peer_bw_rxnss_override = ATH12K_BW_NSS_MAP_ENABLE;
++
++		if (!rx_nss) {
++			ath12k_warn(ar->ab, "invalid max_nss\n");
++			return;
++		}
++
++		nss_160 = u32_encode_bits(rx_nss - 1, ATH12K_PEER_RX_NSS_160MHZ);
++		arg->peer_bw_rxnss_override |= nss_160;
++	}
+ 
+-	/* TODO: rxnss_override */
++	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
++		   "mac vht peer %pM max_mpdu %d flags 0x%x nss_override 0x%x\n",
++		   arsta->addr, arg->peer_max_mpdu, arg->peer_flags,
++		   arg->peer_bw_rxnss_override);
+ }
+ 
+ static int ath12k_mac_get_max_he_mcs_map(u16 mcs_map, int nss)
+@@ -2484,6 +2527,7 @@ static void ath12k_peer_assoc_h_he(struc
+ 	u16 he_tx_mcs = 0, v = 0;
+ 	int he_nss, nss_idx;
+ 	bool user_rate_valid = true;
++	u32 rx_nss, tx_nss, nss_160;
+ 
+ 	if (WARN_ON(ath12k_mac_vif_link_chan(vif, link_id, &def)))
+ 		return;
+@@ -2681,9 +2725,25 @@ static void ath12k_peer_assoc_h_he(struc
+ 	max_nss = min(max_nss, ar->num_tx_chains);
+ 	arg->peer_nss = min(link_sta->rx_nss, max_nss);
+ 
++	if (arg->peer_phymode == MODE_11AX_HE160) {
++		tx_nss = ath12k_get_nss_160mhz(ar, max_nss);
++		rx_nss = min(arg->peer_nss, tx_nss);
++		arg->peer_bw_rxnss_override = ATH12K_BW_NSS_MAP_ENABLE;
++
++		if (!rx_nss) {
++			ath12k_warn(ar->ab, "invalid max_nss\n");
++			return;
++		}
++
++		nss_160 = u32_encode_bits(rx_nss - 1, ATH12K_PEER_RX_NSS_160MHZ);
++		arg->peer_bw_rxnss_override |= nss_160;
++	}
++
+ 	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
+-		   "mac he peer %pM nss %d mcs cnt %d\n",
+-		   arsta->addr, arg->peer_nss, arg->peer_he_mcs_count);
++		   "mac he peer %pM nss %d mcs cnt %d nss_override 0x%x\n",
++		   arsta->addr, arg->peer_nss,
++		   arg->peer_he_mcs_count,
++		   arg->peer_bw_rxnss_override);
+ }
+ 
+ static void ath12k_peer_assoc_h_he_6ghz(struct ath12k *ar,
+@@ -2924,10 +2984,13 @@ static enum wmi_phy_mode ath12k_mac_get_
+ 						    struct ieee80211_link_sta *link_sta)
+ {
+ 	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_160) {
+-		if (link_sta->vht_cap.cap & IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_160MHZ)
++		if (link_sta->vht_cap.cap & (IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_160MHZ |
++		    IEEE80211_VHT_CAP_EXT_NSS_BW_MASK))
+ 			return MODE_11AC_VHT160;
+ 
+-		/* not sure if this is a valid case? */
++		/* Allow STA to connect even if it does not explicitly advertise 160 MHz
++		 * support
++		 */
+ 		return MODE_11AC_VHT160;
+ 	}
+ 
+@@ -6826,10 +6889,8 @@ ath12k_create_vht_cap(struct ath12k *ar,
+ 
+ 	ath12k_set_vht_txbf_cap(ar, &vht_cap.cap);
+ 
+-	/* TODO: Enable back VHT160 mode once association issues are fixed */
+-	/* Disabling VHT160 and VHT80+80 modes */
+-	vht_cap.cap &= ~IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_MASK;
+-	vht_cap.cap &= ~IEEE80211_VHT_CAP_SHORT_GI_160;
++	/* 80P80 is not supported */
++	vht_cap.cap &= ~IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_160_80PLUS80MHZ;
+ 
+ 	rxmcs_map = 0;
+ 	txmcs_map = 0;
+@@ -11437,7 +11498,8 @@ ath12k_mac_setup_radio_iface_comb(struct
+ 	comb[0].radar_detect_widths = BIT(NL80211_CHAN_WIDTH_20_NOHT) |
+ 					BIT(NL80211_CHAN_WIDTH_20) |
+ 					BIT(NL80211_CHAN_WIDTH_40) |
+-					BIT(NL80211_CHAN_WIDTH_80);
++					BIT(NL80211_CHAN_WIDTH_80) |
++					BIT(NL80211_CHAN_WIDTH_160);
+ 
+ 	return 0;
+ }
+@@ -11811,6 +11873,9 @@ static int ath12k_mac_hw_register(struct
+ 	ieee80211_hw_set(hw, SUPPORTS_TX_FRAG);
+ 	ieee80211_hw_set(hw, REPORTS_LOW_ACK);
+ 
++	if (cap->nss_ratio_enabled)
++		ieee80211_hw_set(hw, SUPPORTS_VHT_EXT_NSS_BW);
++
+ 	if ((ht_cap & WMI_HT_CAP_ENABLED) || is_6ghz) {
+ 		ieee80211_hw_set(hw, AMPDU_AGGREGATION);
+ 		ieee80211_hw_set(hw, TX_AMPDU_SETUP_IN_HW);
+--- a/drivers/net/wireless/ath/ath12k/mac.h
++++ b/drivers/net/wireless/ath/ath12k/mac.h
+@@ -38,6 +38,8 @@ struct ath12k_generic_iter {
+ #define IEEE80211_DISABLE_VHT_MCS_SUPPORT_0_11	BIT(24)
+ 
+ #define ATH12K_CHAN_WIDTH_NUM			14
++#define ATH12K_BW_NSS_MAP_ENABLE		BIT(31)
++#define ATH12K_PEER_RX_NSS_160MHZ		GENMASK(2, 0)
+ 
+ #define ATH12K_TX_POWER_MAX_VAL	70
+ #define ATH12K_TX_POWER_MIN_VAL	0
+--- a/drivers/net/wireless/ath/ath12k/wmi.c
++++ b/drivers/net/wireless/ath/ath12k/wmi.c
+@@ -525,6 +525,10 @@ ath12k_pull_mac_phy_cap_svc_ready_ext(st
+ 		pdev_cap->he_mcs = le32_to_cpu(mac_caps->he_supp_mcs_5g);
+ 		pdev_cap->tx_chain_mask = le32_to_cpu(mac_caps->tx_chain_mask_5g);
+ 		pdev_cap->rx_chain_mask = le32_to_cpu(mac_caps->rx_chain_mask_5g);
++		pdev_cap->nss_ratio_enabled =
++			WMI_NSS_RATIO_EN_DIS_GET(mac_caps->nss_ratio);
++		pdev_cap->nss_ratio_info =
++			WMI_NSS_RATIO_INFO_GET(mac_caps->nss_ratio);
+ 	} else {
+ 		return -EINVAL;
+ 	}
+@@ -1014,7 +1018,8 @@ static void ath12k_wmi_put_wmi_channel(s
+ 
+ 		chan->band_center_freq2 = cpu_to_le32(center_freq1);
+ 
+-	} else if (arg->mode == MODE_11BE_EHT160) {
++	} else if (arg->mode == MODE_11BE_EHT160 ||
++		   arg->mode == MODE_11AX_HE160) {
+ 		if (arg->freq > center_freq1)
+ 			chan->band_center_freq1 = cpu_to_le32(center_freq1 + 40);
+ 		else
+--- a/drivers/net/wireless/ath/ath12k/wmi.h
++++ b/drivers/net/wireless/ath/ath12k/wmi.h
+@@ -2290,6 +2290,21 @@ enum wmi_direct_buffer_module {
+ 	WMI_DIRECT_BUF_MAX
+ };
+ 
++/**
++ * enum wmi_nss_ratio - NSS ratio received from FW during service ready ext event
++ * @WMI_NSS_RATIO_1BY2_NSS: Max nss of 160MHz is equals to half of the max nss of 80MHz
++ * @WMI_NSS_RATIO_3BY4_NSS: Max nss of 160MHz is equals to 3/4 of the max nss of 80MHz
++ * @WMI_NSS_RATIO_1_NSS: Max nss of 160MHz is equals to the max nss of 80MHz
++ * @WMI_NSS_RATIO_2_NSS: Max nss of 160MHz is equals to two times the max nss of 80MHz
++ */
++
++enum wmi_nss_ratio {
++	WMI_NSS_RATIO_1BY2_NSS,
++	WMI_NSS_RATIO_3BY4_NSS,
++	WMI_NSS_RATIO_1_NSS,
++	WMI_NSS_RATIO_2_NSS
++};
++
+ struct ath12k_wmi_pdev_band_arg {
+ 	u32 pdev_id;
+ 	u32 start_freq;
+@@ -2606,6 +2621,12 @@ struct ath12k_wmi_hw_mode_cap_params {
+ } __packed;
+ 
+ #define WMI_MAX_HECAP_PHY_SIZE                 (3)
++#define WMI_NSS_RATIO_EN_DIS_BITPOS    BIT(0)
++#define WMI_NSS_RATIO_EN_DIS_GET(_val) \
++	le32_get_bits(_val, WMI_NSS_RATIO_EN_DIS_BITPOS)
++#define WMI_NSS_RATIO_INFO_BITPOS              GENMASK(4, 1)
++#define WMI_NSS_RATIO_INFO_GET(_val) \
++	le32_get_bits(_val, WMI_NSS_RATIO_INFO_BITPOS)
+ 
+ /* pdev_id is present in lower 16 bits of pdev_and_hw_link_ids in
+  * ath12k_wmi_mac_phy_caps_params & ath12k_wmi_caps_ext_params.
+@@ -2647,6 +2668,13 @@ struct ath12k_wmi_mac_phy_caps_params {
+ 	__le32 he_cap_info_2g_ext;
+ 	__le32 he_cap_info_5g_ext;
+ 	__le32 he_cap_info_internal;
++	__le32 wireless_modes;
++	__le32 low_2ghz_chan_freq;
++	__le32 high_2ghz_chan_freq;
++	__le32 low_5ghz_chan_freq;
++	__le32 high_5ghz_chan_freq;
++	__le32 nss_ratio;
++
+ } __packed;
+ 
+ struct ath12k_wmi_hal_reg_caps_ext_params {
diff --git a/package/kernel/mac80211/patches/ath12k/104-9-wifi-ath12k-add-extended-NSS-bandwidth-support-for-160-MHz.patch b/package/kernel/mac80211/patches/ath12k/104-9-wifi-ath12k-add-extended-NSS-bandwidth-support-for-160-MHz.patch
new file mode 100644
index 0000000000..fbace1f705
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath12k/104-9-wifi-ath12k-add-extended-NSS-bandwidth-support-for-160-MHz.patch
@@ -0,0 +1,202 @@
+From patchwork Wed May 21 22:45:39 2025
+Content-Type: text/plain; charset="utf-8"
+MIME-Version: 1.0
+Content-Transfer-Encoding: 7bit
+X-Patchwork-Submitter: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+X-Patchwork-Id: 14096122
+X-Patchwork-Delegate: quic_jjohnson@quicinc.com
+Received: from mx0b-0031df01.pphosted.com (mx0b-0031df01.pphosted.com
+ [205.220.180.131])
+	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
+	(No client certificate requested)
+	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 9A1E9239E85
+	for <linux-wireless@vger.kernel.org>; Wed, 21 May 2025 22:45:59 +0000 (UTC)
+Authentication-Results: smtp.subspace.kernel.org;
+ arc=none smtp.client-ip=205.220.180.131
+ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
+	t=1747867561; cv=none;
+ b=YNQGoLeTsEUX0an1dYT8uFrTBxczoxLPoB0nXP+MEP3YMcemaxVf4zoi5GMSuKPLe4yeLz/R7AB090SrXrBTbY6MmwXLrUJGFBQUGwr05KQ5BnedSLyVE+PtNo01ZVjrjprsc5LC4z0vYHmQdBsqIfqP+bb+ATVkdkkKWV4Kg3A=
+ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
+	s=arc-20240116; t=1747867561; c=relaxed/simple;
+	bh=WkoD1wqfpiPds2ZNAwn7TY38LnC6cJOAuobqk3tWbSk=;
+	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
+	 MIME-Version:Content-Type;
+ b=aAO1mDb/PrwqKRHoeS0PAxgJAvDLPWPPBkzRX0hwJbFzcXtKdtWHDE83rjGbjR1bnM7lhkAU4SwoT87sOuciveNqdywUe6+9XTB2oWM/j0Tza/ZRKKRZFeByh7ib8Aibzc4y0ACg7Oaz/QhmWmPObPjc4oKuVzaH/P8Tub0rBcI=
+ARC-Authentication-Results: i=1; smtp.subspace.kernel.org;
+ dmarc=pass (p=none dis=none) header.from=quicinc.com;
+ spf=pass smtp.mailfrom=quicinc.com;
+ dkim=pass (2048-bit key) header.d=quicinc.com header.i=@quicinc.com
+ header.b=o3M+Sjyr; arc=none smtp.client-ip=205.220.180.131
+Authentication-Results: smtp.subspace.kernel.org;
+ dmarc=pass (p=none dis=none) header.from=quicinc.com
+Authentication-Results: smtp.subspace.kernel.org;
+ spf=pass smtp.mailfrom=quicinc.com
+Authentication-Results: smtp.subspace.kernel.org;
+	dkim=pass (2048-bit key) header.d=quicinc.com header.i=@quicinc.com
+ header.b="o3M+Sjyr"
+Received: from pps.filterd (m0279871.ppops.net [127.0.0.1])
+	by mx0a-0031df01.pphosted.com (8.18.1.2/8.18.1.2) with ESMTP id
+ 54LJHZNq001758;
+	Wed, 21 May 2025 22:45:56 GMT
+DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=quicinc.com; h=
+	cc:content-transfer-encoding:content-type:date:from:in-reply-to
+	:message-id:mime-version:references:subject:to; s=qcppdkim1; bh=
+	wh8AVrVaz3Wne8xUCnRodQGPYbrNE8Rm9/NepU3KoQA=; b=o3M+SjyriKBrU+dH
+	+Uwb/f5RzskxDlOAgOvwNH7O5p766ueJYE/nAazyAuVI1fbDT1gkgvOM4VOLQAPP
+	zg9tDUD5Mz80GzBzSnheYbeedz7RgpaN14Qr6Gz/+1yrP4wWTh2quGduIAXBFDZR
+	QpWsQh2DxVOvXqoLRm64iurJNhvpq+YIAwpAxEA9Fp46SrXsFefc82nza6qgdk5P
+	pUjalFWnwLLxaSHJj2EoJhFDAf99q9N5KNKW/UCNY8A2CwQXqL9KmggTLRK1OC+S
+	ueHigeV9ydoGGD1W6zmEdydGv5JSaQRhjAxtJokUtrlUwn8mbpJyokm+Ie4GZV5v
+	tie1qQ==
+Received: from nalasppmta04.qualcomm.com (Global_NAT1.qualcomm.com
+ [129.46.96.20])
+	by mx0a-0031df01.pphosted.com (PPS) with ESMTPS id 46rwf6vbsg-1
+	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
+	Wed, 21 May 2025 22:45:56 +0000 (GMT)
+Received: from nalasex01a.na.qualcomm.com (nalasex01a.na.qualcomm.com
+ [10.47.209.196])
+	by NALASPPMTA04.qualcomm.com (8.18.1.2/8.18.1.2) with ESMTPS id
+ 54LMjtcB022245
+	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
+	Wed, 21 May 2025 22:45:55 GMT
+Received: from ath12k-linux2.qualcomm.com (10.80.80.8) by
+ nalasex01a.na.qualcomm.com (10.47.209.196) with Microsoft SMTP Server
+ (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
+ 15.2.1544.9; Wed, 21 May 2025 15:45:54 -0700
+From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+To: <ath12k@lists.infradead.org>
+CC: <linux-wireless@vger.kernel.org>,
+        Pradeep Kumar Chitrapu
+	<quic_pradeepc@quicinc.com>,
+        Jeff Johnson <quic_jjohnson@quicinc.com>
+Subject: [PATCH ath-next V14 9/9] wifi: ath12k: add extended NSS bandwidth
+ support for 160 MHz
+Date: Wed, 21 May 2025 15:45:39 -0700
+Message-ID: <20250521224539.355985-10-quic_pradeepc@quicinc.com>
+X-Mailer: git-send-email 2.43.0
+In-Reply-To: <20250521224539.355985-1-quic_pradeepc@quicinc.com>
+References: <20250521224539.355985-1-quic_pradeepc@quicinc.com>
+Precedence: bulk
+X-Mailing-List: linux-wireless@vger.kernel.org
+List-Id: <linux-wireless.vger.kernel.org>
+List-Subscribe: <mailto:linux-wireless+subscribe@vger.kernel.org>
+List-Unsubscribe: <mailto:linux-wireless+unsubscribe@vger.kernel.org>
+MIME-Version: 1.0
+X-ClientProxiedBy: nasanex01a.na.qualcomm.com (10.52.223.231) To
+ nalasex01a.na.qualcomm.com (10.47.209.196)
+X-QCInternal: smtphost
+X-Proofpoint-Virus-Version: vendor=nai engine=6200 definitions=5800
+ signatures=585085
+X-Proofpoint-GUID: 3XlPaBNySyE2wx5TC6p1DVWVXzadsV9U
+X-Proofpoint-Spam-Details-Enc: AW1haW4tMjUwNTIxMDIyNiBTYWx0ZWRfX4g8vKznbpwuH
+ ZKoHe/eZESaXJ/nU0MF27s2mZH9kbhxkG1nYDBAxgIAR6HSB4Ir8V8BP9wvETNPaaV4xpgjbT6m
+ sDGIplm3HpwbpmQYiBtQIsOrs/s1B2t7uVdhqW02FHlFu/UIBLwZc7J8sLJcsYdxHYcx7MQ3nEe
+ tDoPrPTEwHw7n1CnzcfVsEUAuxuJ5iFaxBATgZF+LuAhijNvhyaoEWRUO2KUcBJaFHq/QbCYfpY
+ JBXWUNl+mlZxfQe4pogCpRmvEOONRvpKgZLFdEAxf2Fx0Z7OhaIV84gi99TYTjfe1aihjorJ/cp
+ cv78Jzcd3Pe3GwTFD0ZOqI30oSiaUyJS3E9XIjfDGLAVMK6FeM+KOYgnqo95ImgBH8HRshrA4LJ
+ qTKv2kKP1y4zPtpf7lmI2mcl7emiLGQx+t0d7Z8upCbYseoNAGHUkFJ45HF940Za9ZkEYTRq
+X-Authority-Analysis: v=2.4 cv=fZOty1QF c=1 sm=1 tr=0 ts=682e57a4 cx=c_pps
+ a=ouPCqIW2jiPt+lZRy3xVPw==:117 a=ouPCqIW2jiPt+lZRy3xVPw==:17
+ a=GEpy-HfZoHoA:10 a=dt9VzEwgFbYA:10 a=COk6AnOGAAAA:8 a=Opr4SxZhII4Vei-TI5AA:9
+ a=TjNXssC_j7lpFel5tvFf:22
+X-Proofpoint-ORIG-GUID: 3XlPaBNySyE2wx5TC6p1DVWVXzadsV9U
+X-Proofpoint-Virus-Version: vendor=baseguard
+ engine=ICAP:2.0.293,Aquarius:18.0.1099,Hydra:6.0.736,FMLib:17.12.80.40
+ definitions=2025-05-21_07,2025-05-20_03,2025-03-28_01
+X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
+ clxscore=1015 mlxscore=0 adultscore=0 spamscore=0 bulkscore=0 suspectscore=0
+ malwarescore=0 priorityscore=1501 impostorscore=0 mlxlogscore=999
+ lowpriorityscore=0 phishscore=0 classifier=spam authscore=0 authtc=n/a
+ authcc= route=outbound adjust=0 reason=mlx scancount=1
+ engine=8.19.0-2505160000 definitions=main-2505210226
+
+Currently rx and tx MCS map for 160 MHz under HE capabilities
+are not updating properly, when 160 MHz is configured with NSS
+lesser than max NSS support. Fix this by utilizing
+nss_ratio_enabled and nss_ratio_info fields sent by firmware
+in service ready event.
+
+However, if firmware advertises EXT NSS BW support in VHT caps
+as 1(1x2) and when nss_ratio_info indicates 1:1, reset the EXT
+NSS BW Support in VHT caps to 0 which indicates 1x1. This is
+to avoid incorrectly choosing 1:2 NSS ratio when using the
+default VHT caps advertised by firmware.
+
+Tested-on: QCN9274 hw2.0 PCI WLAN.WBE.1.0.1-00029-QCAHKSWPL_SILICONZ-1
+
+Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
+Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
+---
+ drivers/net/wireless/ath/ath12k/mac.c | 33 ++++++++++++++++++++++-----
+ 1 file changed, 27 insertions(+), 6 deletions(-)
+
+--- a/drivers/net/wireless/ath/ath12k/mac.c
++++ b/drivers/net/wireless/ath/ath12k/mac.c
+@@ -2726,8 +2726,10 @@ static void ath12k_peer_assoc_h_he(struc
+ 	arg->peer_nss = min(link_sta->rx_nss, max_nss);
+ 
+ 	if (arg->peer_phymode == MODE_11AX_HE160) {
+-		tx_nss = ath12k_get_nss_160mhz(ar, max_nss);
++		tx_nss = ath12k_get_nss_160mhz(ar, ar->num_tx_chains);
+ 		rx_nss = min(arg->peer_nss, tx_nss);
++
++		arg->peer_nss = min(link_sta->rx_nss, ar->num_rx_chains);
+ 		arg->peer_bw_rxnss_override = ATH12K_BW_NSS_MAP_ENABLE;
+ 
+ 		if (!rx_nss) {
+@@ -6912,6 +6914,12 @@ ath12k_create_vht_cap(struct ath12k *ar,
+ 	vht_cap.vht_mcs.rx_mcs_map = cpu_to_le16(rxmcs_map);
+ 	vht_cap.vht_mcs.tx_mcs_map = cpu_to_le16(txmcs_map);
+ 
++	/* Check if the HW supports 1:1 NSS ratio and reset
++	 * EXT NSS BW Support field to 0 to indicate 1:1 ratio
++	 */
++	if (ar->pdev->cap.nss_ratio_info == WMI_NSS_RATIO_1_NSS)
++		vht_cap.cap &= ~IEEE80211_VHT_CAP_EXT_NSS_BW_MASK;
++
+ 	return vht_cap;
+ }
+ 
+@@ -7092,11 +7100,12 @@ static void ath12k_mac_set_hemcsmap(stru
+ 				    struct ieee80211_sta_he_cap *he_cap)
+ {
+ 	struct ieee80211_he_mcs_nss_supp *mcs_nss = &he_cap->he_mcs_nss_supp;
+-	u16 txmcs_map, rxmcs_map;
++	u8 maxtxnss_160 = ath12k_get_nss_160mhz(ar, ar->num_tx_chains);
++	u8 maxrxnss_160 = ath12k_get_nss_160mhz(ar, ar->num_rx_chains);
++	u16 txmcs_map_160 = 0, rxmcs_map_160 = 0;
++	u16 txmcs_map = 0, rxmcs_map = 0;
+ 	u32 i;
+ 
+-	rxmcs_map = 0;
+-	txmcs_map = 0;
+ 	for (i = 0; i < 8; i++) {
+ 		if (i < ar->num_tx_chains &&
+ 		    (ar->cfg_tx_chainmask >> cap->tx_chain_mask_shift) & BIT(i))
+@@ -7109,12 +7118,24 @@ static void ath12k_mac_set_hemcsmap(stru
+ 			rxmcs_map |= IEEE80211_HE_MCS_SUPPORT_0_11 << (i * 2);
+ 		else
+ 			rxmcs_map |= IEEE80211_HE_MCS_NOT_SUPPORTED << (i * 2);
++
++		if (i < maxtxnss_160 &&
++		    (ar->cfg_tx_chainmask >> cap->tx_chain_mask_shift) & BIT(i))
++			txmcs_map_160 |= IEEE80211_HE_MCS_SUPPORT_0_11 << (i * 2);
++		else
++			txmcs_map_160 |= IEEE80211_HE_MCS_NOT_SUPPORTED << (i * 2);
++
++		if (i < maxrxnss_160 &&
++		    (ar->cfg_tx_chainmask >> cap->tx_chain_mask_shift) & BIT(i))
++			rxmcs_map_160 |= IEEE80211_HE_MCS_SUPPORT_0_11 << (i * 2);
++		else
++			rxmcs_map_160 |= IEEE80211_HE_MCS_NOT_SUPPORTED << (i * 2);
+ 	}
+ 
+ 	mcs_nss->rx_mcs_80 = cpu_to_le16(rxmcs_map & 0xffff);
+ 	mcs_nss->tx_mcs_80 = cpu_to_le16(txmcs_map & 0xffff);
+-	mcs_nss->rx_mcs_160 = cpu_to_le16(rxmcs_map & 0xffff);
+-	mcs_nss->tx_mcs_160 = cpu_to_le16(txmcs_map & 0xffff);
++	mcs_nss->rx_mcs_160 = cpu_to_le16(rxmcs_map_160 & 0xffff);
++	mcs_nss->tx_mcs_160 = cpu_to_le16(txmcs_map_160 & 0xffff);
+ }
+ 
+ static void ath12k_mac_copy_he_cap(struct ath12k *ar,
diff --git a/package/kernel/mac80211/patches/ath12k/200-Revert-wifi-ath12k-convert-tasklet-to-BH-workqueue-f.patch b/package/kernel/mac80211/patches/ath12k/200-Revert-wifi-ath12k-convert-tasklet-to-BH-workqueue-f.patch
new file mode 100644
index 0000000000..fb9cfd8891
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath12k/200-Revert-wifi-ath12k-convert-tasklet-to-BH-workqueue-f.patch
@@ -0,0 +1,82 @@
+From cd911185014f773f0e227cabfb760b30968c3bca Mon Sep 17 00:00:00 2001
+From: Mantas Pucka <mantas@8devices.com>
+Date: Tue, 27 May 2025 14:13:27 +0300
+Subject: [PATCH] Revert "wifi: ath12k: convert tasklet to BH workqueue for CE
+ interrupts"
+
+This reverts commit cdad737160571a98cc4933a62c9f2728e965ab27.
+---
+ drivers/net/wireless/ath/ath12k/ce.h  |  2 +-
+ drivers/net/wireless/ath/ath12k/pci.c | 14 +++++++-------
+ 2 files changed, 8 insertions(+), 8 deletions(-)
+
+--- a/drivers/net/wireless/ath/ath12k/ce.h
++++ b/drivers/net/wireless/ath/ath12k/ce.h
+@@ -148,7 +148,7 @@ struct ath12k_ce_pipe {
+ 	void (*send_cb)(struct ath12k_ce_pipe *pipe);
+ 	void (*recv_cb)(struct ath12k_base *ab, struct sk_buff *skb);
+ 
+-	struct work_struct intr_wq;
++	struct tasklet_struct intr_tq;
+ 	struct ath12k_ce_ring *src_ring;
+ 	struct ath12k_ce_ring *dest_ring;
+ 	struct ath12k_ce_ring *status_ring;
+--- a/drivers/net/wireless/ath/ath12k/pci.c
++++ b/drivers/net/wireless/ath/ath12k/pci.c
+@@ -430,9 +430,9 @@ static void ath12k_pci_sync_ce_irqs(stru
+ 	}
+ }
+ 
+-static void ath12k_pci_ce_workqueue(struct work_struct *work)
++static void ath12k_pci_ce_tasklet(struct tasklet_struct *t)
+ {
+-	struct ath12k_ce_pipe *ce_pipe = from_work(ce_pipe, work, intr_wq);
++	struct ath12k_ce_pipe *ce_pipe = from_tasklet(ce_pipe, t, intr_tq);
+ 	int irq_idx = ATH12K_PCI_IRQ_CE0_OFFSET + ce_pipe->pipe_num;
+ 
+ 	ath12k_ce_per_engine_service(ce_pipe->ab, ce_pipe->pipe_num);
+@@ -454,7 +454,7 @@ static irqreturn_t ath12k_pci_ce_interru
+ 
+ 	disable_irq_nosync(ab->irq_num[irq_idx]);
+ 
+-	queue_work(system_bh_wq, &ce_pipe->intr_wq);
++	tasklet_schedule(&ce_pipe->intr_tq);
+ 
+ 	return IRQ_HANDLED;
+ }
+@@ -683,7 +683,7 @@ static int ath12k_pci_config_irq(struct
+ 
+ 		irq_idx = ATH12K_PCI_IRQ_CE0_OFFSET + i;
+ 
+-		INIT_WORK(&ce_pipe->intr_wq, ath12k_pci_ce_workqueue);
++		tasklet_setup(&ce_pipe->intr_tq, ath12k_pci_ce_tasklet);
+ 
+ 		ret = request_irq(irq, ath12k_pci_ce_interrupt_handler,
+ 				  ab_pci->irq_flags, irq_name[irq_idx],
+@@ -970,7 +970,7 @@ static void ath12k_pci_aspm_restore(stru
+ 						   PCI_EXP_LNKCTL_ASPMC);
+ }
+ 
+-static void ath12k_pci_cancel_workqueue(struct ath12k_base *ab)
++static void ath12k_pci_kill_tasklets(struct ath12k_base *ab)
+ {
+ 	int i;
+ 
+@@ -980,7 +980,7 @@ static void ath12k_pci_cancel_workqueue(
+ 		if (ath12k_ce_get_attr_flags(ab, i) & CE_ATTR_DIS_INTR)
+ 			continue;
+ 
+-		cancel_work_sync(&ce_pipe->intr_wq);
++		tasklet_kill(&ce_pipe->intr_tq);
+ 	}
+ }
+ 
+@@ -988,7 +988,7 @@ static void ath12k_pci_ce_irq_disable_sy
+ {
+ 	ath12k_pci_ce_irqs_disable(ab);
+ 	ath12k_pci_sync_ce_irqs(ab);
+-	ath12k_pci_cancel_workqueue(ab);
++	ath12k_pci_kill_tasklets(ab);
+ }
+ 
+ int ath12k_pci_map_service_to_pipe(struct ath12k_base *ab, u16 service_id,
diff --git a/package/kernel/mac80211/patches/ath9k/341-wifi-ath9k-obtain-system-gpios.patch b/package/kernel/mac80211/patches/ath9k/341-wifi-ath9k-obtain-system-gpios.patch
new file mode 100644
index 0000000000..a14ed55ee9
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath9k/341-wifi-ath9k-obtain-system-gpios.patch
@@ -0,0 +1,273 @@
+From patchwork Tue Apr 23 12:12:33 2024
+Content-Type: text/plain; charset="utf-8"
+MIME-Version: 1.0
+Content-Transfer-Encoding: 7bit
+X-Patchwork-Submitter: Linus Walleij <linus.walleij@linaro.org>
+X-Patchwork-Id: 1926515
+Return-Path: 
+ <linux-gpio+bounces-5755-incoming=patchwork.ozlabs.org@vger.kernel.org>
+X-Original-To: incoming@patchwork.ozlabs.org
+Delivered-To: patchwork-incoming@legolas.ozlabs.org
+Authentication-Results: legolas.ozlabs.org;
+	dkim=pass (2048-bit key;
+ unprotected) header.d=linaro.org header.i=@linaro.org header.a=rsa-sha256
+ header.s=google header.b=qX99TQMM;
+	dkim-atps=neutral
+Authentication-Results: legolas.ozlabs.org;
+ spf=pass (sender SPF authorized) smtp.mailfrom=vger.kernel.org
+ (client-ip=2604:1380:45e3:2400::1; helo=sv.mirrors.kernel.org;
+ envelope-from=linux-gpio+bounces-5755-incoming=patchwork.ozlabs.org@vger.kernel.org;
+ receiver=patchwork.ozlabs.org)
+Received: from sv.mirrors.kernel.org (sv.mirrors.kernel.org
+ [IPv6:2604:1380:45e3:2400::1])
+	(using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
+	 key-exchange X25519 server-signature ECDSA (secp384r1))
+	(No client certificate requested)
+	by legolas.ozlabs.org (Postfix) with ESMTPS id 4VP1Gc6RZKz1yZP
+	for <incoming@patchwork.ozlabs.org>; Tue, 23 Apr 2024 22:12:56 +1000 (AEST)
+Received: from smtp.subspace.kernel.org (wormhole.subspace.kernel.org
+ [52.25.139.140])
+	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
+	(No client certificate requested)
+	by sv.mirrors.kernel.org (Postfix) with ESMTPS id 5BB9C28522A
+	for <incoming@patchwork.ozlabs.org>; Tue, 23 Apr 2024 12:12:55 +0000 (UTC)
+Received: from localhost.localdomain (localhost.localdomain [127.0.0.1])
+	by smtp.subspace.kernel.org (Postfix) with ESMTP id 2F83B8563D;
+	Tue, 23 Apr 2024 12:12:41 +0000 (UTC)
+Authentication-Results: smtp.subspace.kernel.org;
+	dkim=pass (2048-bit key) header.d=linaro.org header.i=@linaro.org
+ header.b="qX99TQMM"
+X-Original-To: linux-gpio@vger.kernel.org
+Received: from mail-lj1-f179.google.com (mail-lj1-f179.google.com
+ [209.85.208.179])
+	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
+	(No client certificate requested)
+	by smtp.subspace.kernel.org (Postfix) with ESMTPS id A8F3C82865
+	for <linux-gpio@vger.kernel.org>; Tue, 23 Apr 2024 12:12:37 +0000 (UTC)
+Authentication-Results: smtp.subspace.kernel.org;
+ arc=none smtp.client-ip=209.85.208.179
+ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
+	t=1713874361; cv=none;
+ b=d6RcvcAu8hBYAK8Io489ZHQpJVXPwuokP6iMcAkbvElCerbXD6jAdqdi+RjDlo5C49GHGO4FQ19UwQn/VE//qSwiK1ulTSBp3OkvAmyb7yYAFnDs9AVNWRw+5/NxeFNn3fj5PyvqVymIbaJKabfrOVNwkz/5JMHxEIJtr6Crmog=
+ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
+	s=arc-20240116; t=1713874361; c=relaxed/simple;
+	bh=0eXJ5AIjzz1TBGZ8SlshIPrEHZaZwZfYEdof+dSpu4Y=;
+	h=From:Date:Subject:MIME-Version:Content-Type:Message-Id:To:Cc;
+ b=EfFtruUxRIGy+jylEiJ2rPEyPCjGCc8ptT9FVxe6s0O/kW38Y6196xVQeiSV2tSKVCEOIO+9HoqmpgdKsJE7gU9++EcrasP96MYpsklYpc2zsWW3b8QEhfxfZ9Ai/idyYihE2u9dQ7a143P/Ij/twDrZTt24wO/mtHDrE5XcCFI=
+ARC-Authentication-Results: i=1; smtp.subspace.kernel.org;
+ dmarc=pass (p=none dis=none) header.from=linaro.org;
+ spf=pass smtp.mailfrom=linaro.org;
+ dkim=pass (2048-bit key) header.d=linaro.org header.i=@linaro.org
+ header.b=qX99TQMM; arc=none smtp.client-ip=209.85.208.179
+Authentication-Results: smtp.subspace.kernel.org;
+ dmarc=pass (p=none dis=none) header.from=linaro.org
+Authentication-Results: smtp.subspace.kernel.org;
+ spf=pass smtp.mailfrom=linaro.org
+Received: by mail-lj1-f179.google.com with SMTP id
+ 38308e7fff4ca-2dd041acff1so40839131fa.1
+        for <linux-gpio@vger.kernel.org>;
+ Tue, 23 Apr 2024 05:12:37 -0700 (PDT)
+DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
+        d=linaro.org; s=google; t=1713874356; x=1714479156;
+ darn=vger.kernel.org;
+        h=cc:to:message-id:content-transfer-encoding:mime-version:subject
+         :date:from:from:to:cc:subject:date:message-id:reply-to;
+        bh=vysJsMiH5IVqdTs4yMwZxZ7nUmt2aG7eBhkn8qm8hvI=;
+        b=qX99TQMMdHbskFYUaw8c93sIJsUhKmj/WPdyahHcupUhwn5wol4aVoPczkOKYwJZhE
+         eoInxzjAHIl3UNKyvPPrD4MrbLcSoFT6mTFMsgRQYUghsLattmGcqIebu9XT556dBhsf
+         DydmpqGgnTOIa+IEknFxg24mo8Xn2LVmDC7LSGEYykUy1xLHd1NSq56YEaYXC7641xeZ
+         9TOL0rZszeGld5cCS3013EmEeXQGCC3lAP83Eb48vbFXjPojkN0s40rZ2s8YpVsGT0iP
+         LeLVtP/E8XJqi4YipKryKSgbgOvQ1Bclle5+s+2qcJQNnSEjekMwR59BIRs3OZH2SRfN
+         gQdQ==
+X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
+        d=1e100.net; s=20230601; t=1713874356; x=1714479156;
+        h=cc:to:message-id:content-transfer-encoding:mime-version:subject
+         :date:from:x-gm-message-state:from:to:cc:subject:date:message-id
+         :reply-to;
+        bh=vysJsMiH5IVqdTs4yMwZxZ7nUmt2aG7eBhkn8qm8hvI=;
+        b=jEBH4NQ7SzFi2tnb1lgL06IchnBJoscNgKesjlorvou6X/9wDE/VbgxNFKR0zWwdTk
+         BEjG/ifFJxLmM9jdaCKu5cJc4yiDNXp7yZd48D71V34zJ4aINAGAx4hcOKqf95neFknx
+         nsFPpBFnTYFEpCLF0TebVoL6h6ehPzSojmkArzsrMppNvW2cwJ5gDlkqy2y4SezLanmM
+         6iU0ksnwE0bb2iLkahhgo00Ejt33yqxwa+3xBfhOe9oYKSSZYnY7qVq055SSwt9IAq+H
+         REGyJN+GrvupTHagiioYe3LPXDPdOui9ZixXXDllw1t1yGUy+TkJu8xSqtvHEfg81FHP
+         AxtA==
+X-Forwarded-Encrypted: i=1;
+ AJvYcCUbxzPklfPYrLgyY1I0ycuj7Dh04dcGVonYocA2mzxzlAEV107o0ELlFqr3O9Td+tV/t0eV9ly9YAbTY6n1XPnFXS5dsYYAZw6RHw==
+X-Gm-Message-State: AOJu0YxsC7zdakTzntbiRFnN2A7yTrR0x+IpR6ce6eGn5kHeqIBi1km+
+	zTVpRulbch3JsmzVDbCbbAAYoBkNgEA568YL6zdjVARnvFwNz1cqatOrR1AXUm0=
+X-Google-Smtp-Source: 
+ AGHT+IHBRMGvaJM98f86Z6m/RfVhK2XejjNGF3EvcRq/4x3oGM0DKpd2PbeCJdgmzHjLPVVbdsNzJg==
+X-Received: by 2002:a2e:9852:0:b0:2d8:a98d:18e with SMTP id
+ e18-20020a2e9852000000b002d8a98d018emr7955886ljj.8.1713874355700;
+        Tue, 23 Apr 2024 05:12:35 -0700 (PDT)
+Received: from [192.168.1.140] ([85.235.12.238])
+        by smtp.gmail.com with ESMTPSA id
+ x6-20020a2e7c06000000b002da179d8d25sm1628982ljc.64.2024.04.23.05.12.33
+        (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
+        Tue, 23 Apr 2024 05:12:35 -0700 (PDT)
+From: Linus Walleij <linus.walleij@linaro.org>
+Date: Tue, 23 Apr 2024 14:12:33 +0200
+Subject: [PATCH v2] wifi: ath9k: Obtain system GPIOS from descriptors
+Precedence: bulk
+X-Mailing-List: linux-gpio@vger.kernel.org
+List-Id: <linux-gpio.vger.kernel.org>
+List-Subscribe: <mailto:linux-gpio+subscribe@vger.kernel.org>
+List-Unsubscribe: <mailto:linux-gpio+unsubscribe@vger.kernel.org>
+MIME-Version: 1.0
+Message-Id: <20240423-descriptors-wireless-v2-1-6d1d03b30bfa@linaro.org>
+X-B4-Tracking: v=1; b=H4sIALClJ2YC/22Nyw6CMBBFf4XM2hpanrLyPwyL0o4wCaFkxqCG9
+ N+txKXLc5Nz7g6CTCjQZTswbiQUlgTmlIGb7DKiIp8YTG7KXBujPIpjWh+BRT2JcUYRNbTeXir
+ v7FBUkNSV8U6vI3vrE08kSXgfL5v+rr9gof8HN61yhdo1rvJ125T1dabFcjgHHqGPMX4Ao4iiN
+ LkAAAA=
+To: Kalle Valo <kvalo@kernel.org>,
+  Andy Shevchenko <andriy.shevchenko@linux.intel.com>,
+  Arnd Bergmann <arnd@arndb.de>, Alban Bedel <albeu@free.fr>,
+  Bartosz Golaszewski <brgl@bgdev.pl>, =?utf-8?q?Toke_H=C3=B8iland-J=C3=B8rg?=
+	=?utf-8?q?ensen?= <toke@toke.dk>
+Cc: linux-wireless@vger.kernel.org, brcm80211-dev-list.pdl@broadcom.com,
+ linux-gpio@vger.kernel.org, Linus Walleij <linus.walleij@linaro.org>
+X-Mailer: b4 0.13.0
+
+The ath9k has an odd use of system-wide GPIOs: if the chip
+does not have internal GPIO capability, it will try to obtain a
+GPIO line from the system GPIO controller:
+
+  if (BIT(gpio) & ah->caps.gpio_mask)
+        ath9k_hw_gpio_cfg_wmac(...);
+  else if (AR_SREV_SOC(ah))
+        ath9k_hw_gpio_cfg_soc(ah, gpio, out, label);
+
+Where ath9k_hw_gpio_cfg_soc() will attempt to issue
+gpio_request_one() passing the local GPIO number of the controller
+(0..31) to gpio_request_one().
+
+This is somewhat peculiar and possibly even dangerous: there is
+nowadays no guarantee of the numbering of these system-wide
+GPIOs, and assuming that GPIO 0..31 as used by ath9k would
+correspond to GPIOs 0..31 on the system as a whole seems a bit
+wild.
+
+Register all 32 GPIOs at index 0..31 directly in the ATH79K
+GPIO driver and associate with WIFI if and only if we are probing
+ATH79K wifi from the AHB bus (used for SoCs).
+
+Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
+---
+Changes in v2:
+- Define all the descriptors directly in the ATH79K
+  GPIO driver in case the driver want to request them directly.
+- Link to v1: https://lore.kernel.org/r/20240131-descriptors-wireless-v1-0-e1c7c5d68746@linaro.org
+---
+ drivers/net/wireless/ath/ath9k/hw.c | 29 ++++++++++++-----------
+ drivers/net/wireless/ath/ath9k/hw.h |  3 ++-
+ 2 files changed, 32 insertions(+), 15 deletions(-)
+
+
+---
+base-commit: 4cece764965020c22cff7665b18a012006359095
+change-id: 20240122-descriptors-wireless-b8da95dcab35
+
+Best regards,
+
+--- a/drivers/net/wireless/ath/ath9k/hw.c
++++ b/drivers/net/wireless/ath/ath9k/hw.c
+@@ -20,7 +20,7 @@
+ #include <linux/time.h>
+ #include <linux/bitops.h>
+ #include <linux/etherdevice.h>
+-#include <linux/gpio.h>
++#include <linux/gpio/consumer.h>
+ #include <linux/unaligned.h>
+ 
+ #include "hw.h"
+@@ -2718,19 +2718,25 @@ static void ath9k_hw_gpio_cfg_output_mux
+ static void ath9k_hw_gpio_cfg_soc(struct ath_hw *ah, u32 gpio, bool out,
+ 				  const char *label)
+ {
++	enum gpiod_flags flags = out ? GPIOD_OUT_LOW : GPIOD_IN;
++	struct gpio_desc *gpiod;
+ 	int err;
+ 
+-	if (ah->caps.gpio_requested & BIT(gpio))
++	if (ah->gpiods[gpio])
+ 		return;
+ 
+-	err = devm_gpio_request_one(ah->dev, gpio, out ? GPIOF_OUT_INIT_LOW : GPIOF_IN, label);
+-	if (err) {
++	/* Obtains a system specific GPIO descriptor from another GPIO controller */
++	gpiod = gpiod_get_index(NULL, "ath9k", gpio, flags);
++
++	if (IS_ERR(gpiod)) {
++		err = PTR_ERR(gpiod);
+ 		ath_err(ath9k_hw_common(ah), "request GPIO%d failed:%d\n",
+ 			gpio, err);
+ 		return;
+ 	}
+ 
+-	ah->caps.gpio_requested |= BIT(gpio);
++	gpiod_set_consumer_name(gpiod, label);
++	ah->gpiods[gpio] = gpiod;
+ }
+ 
+ static void ath9k_hw_gpio_cfg_wmac(struct ath_hw *ah, u32 gpio, bool out,
+@@ -2792,8 +2798,10 @@ void ath9k_hw_gpio_free(struct ath_hw *a
+ 
+ 	WARN_ON(gpio >= ah->caps.num_gpio_pins);
+ 
+-	if (ah->caps.gpio_requested & BIT(gpio))
+-		ah->caps.gpio_requested &= ~BIT(gpio);
++	if (ah->gpiods[gpio]) {
++		gpiod_put(ah->gpiods[gpio]);
++		ah->gpiods[gpio] = NULL;
++	}
+ }
+ EXPORT_SYMBOL(ath9k_hw_gpio_free);
+ 
+@@ -2821,8 +2829,8 @@ u32 ath9k_hw_gpio_get(struct ath_hw *ah,
+ 			val = REG_READ(ah, AR_GPIO_IN(ah)) & BIT(gpio);
+ 		else
+ 			val = MS_REG_READ(AR, gpio);
+-	} else if (BIT(gpio) & ah->caps.gpio_requested) {
+-		val = gpio_get_value(gpio) & BIT(gpio);
++	} else if (ah->gpiods[gpio]) {
++		val = gpiod_get_value(ah->gpiods[gpio]);
+ 	} else {
+ 		WARN_ON(1);
+ 	}
+@@ -2845,8 +2853,8 @@ void ath9k_hw_set_gpio(struct ath_hw *ah
+ 			AR7010_GPIO_OUT : AR_GPIO_IN_OUT(ah);
+ 
+ 		REG_RMW(ah, out_addr, val << gpio, BIT(gpio));
+-	} else if (BIT(gpio) & ah->caps.gpio_requested) {
+-		gpio_set_value(gpio, val);
++	} else if (ah->gpiods[gpio]) {
++		gpiod_set_value(ah->gpiods[gpio], val);
+ 	} else {
+ 		WARN_ON(1);
+ 	}
+--- a/drivers/net/wireless/ath/ath9k/hw.h
++++ b/drivers/net/wireless/ath/ath9k/hw.h
+@@ -19,6 +19,7 @@
+ 
+ #include <linux/if_ether.h>
+ #include <linux/delay.h>
++#include <linux/gpio/consumer.h>
+ #include <linux/io.h>
+ #include <linux/firmware.h>
+ 
+@@ -302,7 +303,6 @@ struct ath9k_hw_capabilities {
+ 	u8 max_rxchains;
+ 	u8 num_gpio_pins;
+ 	u32 gpio_mask;
+-	u32 gpio_requested;
+ 	u8 rx_hp_qdepth;
+ 	u8 rx_lp_qdepth;
+ 	u8 rx_status_len;
+@@ -783,6 +783,7 @@ struct ath_hw {
+ 	struct ath9k_hw_capabilities caps;
+ 	struct ath9k_channel channels[ATH9K_NUM_CHANNELS];
+ 	struct ath9k_channel *curchan;
++	struct gpio_desc *gpiods[32];
+ 
+ 	union {
+ 		struct ar5416_eeprom_def def;
diff --git a/package/kernel/mac80211/patches/ath9k/356-Revert-ath9k-interpret-requested-txpower-in-EIRP-dom.patch b/package/kernel/mac80211/patches/ath9k/356-Revert-ath9k-interpret-requested-txpower-in-EIRP-dom.patch
index 9016da963b..5cb891ed35 100644
--- a/package/kernel/mac80211/patches/ath9k/356-Revert-ath9k-interpret-requested-txpower-in-EIRP-dom.patch
+++ b/package/kernel/mac80211/patches/ath9k/356-Revert-ath9k-interpret-requested-txpower-in-EIRP-dom.patch
@@ -8,7 +8,7 @@ This reverts commit 71f5137bf010c6faffab50c0ec15374c59c4a411.
 
 --- a/drivers/net/wireless/ath/ath9k/hw.c
 +++ b/drivers/net/wireless/ath/ath9k/hw.c
-@@ -2975,7 +2975,8 @@ void ath9k_hw_apply_txpower(struct ath_h
+@@ -2974,7 +2974,8 @@ void ath9k_hw_apply_txpower(struct ath_h
  {
  	struct ath_regulatory *reg = ath9k_hw_regulatory(ah);
  	struct ieee80211_channel *channel;
@@ -18,7 +18,7 @@ This reverts commit 71f5137bf010c6faffab50c0ec15374c59c4a411.
  	u16 ctl = NO_CTL;
  
  	if (!chan)
-@@ -2987,9 +2988,14 @@ void ath9k_hw_apply_txpower(struct ath_h
+@@ -2986,9 +2987,14 @@ void ath9k_hw_apply_txpower(struct ath_h
  	channel = chan->chan;
  	chan_pwr = min_t(int, channel->max_power * 2, MAX_COMBINED_POWER);
  	new_pwr = min_t(int, chan_pwr, reg->power_limit);
diff --git a/package/kernel/mac80211/patches/ath9k/365-ath9k-adjust-tx-power-reduction-for-US-regulatory-do.patch b/package/kernel/mac80211/patches/ath9k/365-ath9k-adjust-tx-power-reduction-for-US-regulatory-do.patch
index 5e5f3e4f10..14abb4035a 100644
--- a/package/kernel/mac80211/patches/ath9k/365-ath9k-adjust-tx-power-reduction-for-US-regulatory-do.patch
+++ b/package/kernel/mac80211/patches/ath9k/365-ath9k-adjust-tx-power-reduction-for-US-regulatory-do.patch
@@ -11,7 +11,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
 
 --- a/drivers/net/wireless/ath/ath9k/hw.c
 +++ b/drivers/net/wireless/ath/ath9k/hw.c
-@@ -2994,6 +2994,10 @@ void ath9k_hw_apply_txpower(struct ath_h
+@@ -2993,6 +2993,10 @@ void ath9k_hw_apply_txpower(struct ath_h
  	if (ant_gain > max_gain)
  		ant_reduction = ant_gain - max_gain;
  
diff --git a/package/kernel/mac80211/patches/ath9k/401-ath9k_blink_default.patch b/package/kernel/mac80211/patches/ath9k/401-ath9k_blink_default.patch
index 3eb57bb1cf..7405e594fe 100644
--- a/package/kernel/mac80211/patches/ath9k/401-ath9k_blink_default.patch
+++ b/package/kernel/mac80211/patches/ath9k/401-ath9k_blink_default.patch
@@ -1,6 +1,6 @@
 --- a/drivers/net/wireless/ath/ath9k/init.c
 +++ b/drivers/net/wireless/ath/ath9k/init.c
-@@ -48,7 +48,7 @@ int ath9k_modparam_nohwcrypt;
+@@ -47,7 +47,7 @@ int ath9k_modparam_nohwcrypt;
  module_param_named(nohwcrypt, ath9k_modparam_nohwcrypt, int, 0444);
  MODULE_PARM_DESC(nohwcrypt, "Disable hardware encryption");
  
diff --git a/package/kernel/mac80211/patches/ath9k/410-ath9k_allow_adhoc_and_ap.patch b/package/kernel/mac80211/patches/ath9k/410-ath9k_allow_adhoc_and_ap.patch
index b2f2763e8e..978d915c54 100644
--- a/package/kernel/mac80211/patches/ath9k/410-ath9k_allow_adhoc_and_ap.patch
+++ b/package/kernel/mac80211/patches/ath9k/410-ath9k_allow_adhoc_and_ap.patch
@@ -1,6 +1,6 @@
 --- a/drivers/net/wireless/ath/ath9k/init.c
 +++ b/drivers/net/wireless/ath/ath9k/init.c
-@@ -882,6 +882,7 @@ static const struct ieee80211_iface_limi
+@@ -836,6 +836,7 @@ static const struct ieee80211_iface_limi
  				 BIT(NL80211_IFTYPE_AP) },
  	{ .max = 1,	.types = BIT(NL80211_IFTYPE_P2P_CLIENT) |
  				 BIT(NL80211_IFTYPE_P2P_GO) },
diff --git a/package/kernel/mac80211/patches/ath9k/450-ath9k-enabled-MFP-capability-unconditionally.patch b/package/kernel/mac80211/patches/ath9k/450-ath9k-enabled-MFP-capability-unconditionally.patch
index f424ca530b..dffeb32611 100644
--- a/package/kernel/mac80211/patches/ath9k/450-ath9k-enabled-MFP-capability-unconditionally.patch
+++ b/package/kernel/mac80211/patches/ath9k/450-ath9k-enabled-MFP-capability-unconditionally.patch
@@ -14,7 +14,7 @@ Signed-off-by: David Bauer <mail@david-bauer.net>
 
 --- a/drivers/net/wireless/ath/ath9k/init.c
 +++ b/drivers/net/wireless/ath/ath9k/init.c
-@@ -963,6 +963,7 @@ static void ath9k_set_hw_capab(struct at
+@@ -917,6 +917,7 @@ static void ath9k_set_hw_capab(struct at
  	ieee80211_hw_set(hw, HOST_BROADCAST_PS_BUFFERING);
  	ieee80211_hw_set(hw, SUPPORT_FAST_XMIT);
  	ieee80211_hw_set(hw, SUPPORTS_CLONED_SKBS);
@@ -22,7 +22,7 @@ Signed-off-by: David Bauer <mail@david-bauer.net>
  
  	if (ath9k_ps_enable)
  		ieee80211_hw_set(hw, SUPPORTS_PS);
-@@ -975,9 +976,6 @@ static void ath9k_set_hw_capab(struct at
+@@ -929,9 +930,6 @@ static void ath9k_set_hw_capab(struct at
  				IEEE80211_RADIOTAP_MCS_HAVE_STBC;
  	}
  
diff --git a/package/kernel/mac80211/patches/ath9k/500-ath9k_eeprom_debugfs.patch b/package/kernel/mac80211/patches/ath9k/500-ath9k_eeprom_debugfs.patch
index f1431526bc..8c139ac553 100644
--- a/package/kernel/mac80211/patches/ath9k/500-ath9k_eeprom_debugfs.patch
+++ b/package/kernel/mac80211/patches/ath9k/500-ath9k_eeprom_debugfs.patch
@@ -1,6 +1,6 @@
 --- a/drivers/net/wireless/ath/ath9k/debug.c
 +++ b/drivers/net/wireless/ath/ath9k/debug.c
-@@ -1429,6 +1429,7 @@ int ath9k_init_debug(struct ath_hw *ah)
+@@ -1430,6 +1430,7 @@ int ath9k_init_debug(struct ath_hw *ah)
  
  	ath9k_cmn_debug_base_eeprom(sc->debug.debugfs_phy, sc->sc_ah);
  	ath9k_cmn_debug_modal_eeprom(sc->debug.debugfs_phy, sc->sc_ah);
diff --git a/package/kernel/mac80211/patches/ath9k/501-ath9k_ahb_init.patch b/package/kernel/mac80211/patches/ath9k/501-ath9k_ahb_init.patch
index 740ddc39dc..2aee171608 100644
--- a/package/kernel/mac80211/patches/ath9k/501-ath9k_ahb_init.patch
+++ b/package/kernel/mac80211/patches/ath9k/501-ath9k_ahb_init.patch
@@ -1,6 +1,6 @@
 --- a/drivers/net/wireless/ath/ath9k/init.c
 +++ b/drivers/net/wireless/ath/ath9k/init.c
-@@ -1178,25 +1178,25 @@ static int __init ath9k_init(void)
+@@ -1132,25 +1132,25 @@ static int __init ath9k_init(void)
  {
  	int error;
  
diff --git a/package/kernel/mac80211/patches/ath9k/509-ath9k-use-devm-for-irq-and-ioremap-resource.patch b/package/kernel/mac80211/patches/ath9k/509-ath9k-use-devm-for-irq-and-ioremap-resource.patch
new file mode 100644
index 0000000000..864238912a
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath9k/509-ath9k-use-devm-for-irq-and-ioremap-resource.patch
@@ -0,0 +1,50 @@
+From 454255e44bf48d8498ac3413389513138ab57bf6 Mon Sep 17 00:00:00 2001
+From: Rosen Penev <rosenp@gmail.com>
+Date: Sat, 4 Jan 2025 14:24:46 -0800
+Subject: [PATCH] wifi: ath9k: ahb: do ioremap resource in one step
+
+Simplifies probe slightly and adds extra error codes.
+
+Switching from devm_ioremap to the platform variant ends up calling
+devm_request_mem_region, which reserves the memory region for the
+various wmacs. Per board, there is only one wmac and after some fairly
+thorough analysis, there are no overlapping memory regions between wmacs
+and other devices on the ahb.
+
+Tested on a TP-Link Archer C7v2.
+
+Signed-off-by: Rosen Penev <rosenp@gmail.com>
+---
+ drivers/net/wireless/ath/ath9k/ahb.c | 13 +++----------
+ 1 file changed, 3 insertions(+), 10 deletions(-)
+
+--- a/drivers/net/wireless/ath/ath9k/ahb.c
++++ b/drivers/net/wireless/ath/ath9k/ahb.c
+@@ -74,7 +74,6 @@ static int ath_ahb_probe(struct platform
+ 	void __iomem *mem;
+ 	struct ath_softc *sc;
+ 	struct ieee80211_hw *hw;
+-	struct resource *res;
+ 	const struct platform_device_id *id = platform_get_device_id(pdev);
+ 	int irq;
+ 	int ret = 0;
+@@ -86,16 +85,10 @@ static int ath_ahb_probe(struct platform
+ 		return -EINVAL;
+ 	}
+ 
+-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+-	if (res == NULL) {
+-		dev_err(&pdev->dev, "no memory resource found\n");
+-		return -ENXIO;
+-	}
+-
+-	mem = devm_ioremap(&pdev->dev, res->start, resource_size(res));
+-	if (mem == NULL) {
++	mem = devm_platform_ioremap_resource(pdev, 0);
++	if (IS_ERR(mem)) {
+ 		dev_err(&pdev->dev, "ioremap failed\n");
+-		return -ENOMEM;
++		return PTR_ERR(mem);
+ 	}
+ 
+ 	irq = platform_get_irq(pdev, 0);
diff --git a/package/kernel/mac80211/patches/ath9k/512-ath9k_channelbw_debugfs.patch b/package/kernel/mac80211/patches/ath9k/512-ath9k_channelbw_debugfs.patch
index 87d18626da..9a6063173c 100644
--- a/package/kernel/mac80211/patches/ath9k/512-ath9k_channelbw_debugfs.patch
+++ b/package/kernel/mac80211/patches/ath9k/512-ath9k_channelbw_debugfs.patch
@@ -1,6 +1,6 @@
 --- a/drivers/net/wireless/ath/ath9k/debug.c
 +++ b/drivers/net/wireless/ath/ath9k/debug.c
-@@ -1430,6 +1430,7 @@ int ath9k_init_debug(struct ath_hw *ah)
+@@ -1431,6 +1431,7 @@ int ath9k_init_debug(struct ath_hw *ah)
  	ath9k_cmn_debug_base_eeprom(sc->debug.debugfs_phy, sc->sc_ah);
  	ath9k_cmn_debug_modal_eeprom(sc->debug.debugfs_phy, sc->sc_ah);
  	ath9k_cmn_debug_eeprom(sc->debug.debugfs_phy, sc->sc_ah);
@@ -181,7 +181,7 @@
  	hw->max_listen_interval = 1;
 --- a/drivers/net/wireless/ath/ath9k/init.c
 +++ b/drivers/net/wireless/ath/ath9k/init.c
-@@ -733,6 +733,7 @@ static int ath9k_init_softc(u16 devid, s
+@@ -691,6 +691,7 @@ static int ath9k_init_softc(u16 devid, s
  	if (!ath9k_is_chanctx_enabled())
  		sc->cur_chan->hw_queue_base = 0;
  
diff --git a/package/kernel/mac80211/patches/ath9k/513-ath9k_add_pci_ids.patch b/package/kernel/mac80211/patches/ath9k/513-ath9k_add_pci_ids.patch
index 6b60d3c089..9e3f867344 100644
--- a/package/kernel/mac80211/patches/ath9k/513-ath9k_add_pci_ids.patch
+++ b/package/kernel/mac80211/patches/ath9k/513-ath9k_add_pci_ids.patch
@@ -10,7 +10,7 @@
  	case AR5416_AR9100_DEVID:
 --- a/drivers/net/wireless/ath/ath9k/hw.h
 +++ b/drivers/net/wireless/ath/ath9k/hw.h
-@@ -36,6 +36,7 @@
+@@ -37,6 +37,7 @@
  
  #define ATHEROS_VENDOR_ID	0x168c
  
diff --git a/package/kernel/mac80211/patches/ath9k/530-ath9k_extra_leds.patch b/package/kernel/mac80211/patches/ath9k/530-ath9k_extra_leds.patch
index 4bb27d558c..4149e86e45 100644
--- a/package/kernel/mac80211/patches/ath9k/530-ath9k_extra_leds.patch
+++ b/package/kernel/mac80211/patches/ath9k/530-ath9k_extra_leds.patch
@@ -24,7 +24,7 @@
  struct ath_softc {
  	struct ieee80211_hw *hw;
  	struct device *dev;
-@@ -1034,9 +1044,8 @@ struct ath_softc {
+@@ -1036,9 +1046,8 @@ struct ath_softc {
  	spinlock_t chan_lock;
  
  #ifdef CPTCFG_MAC80211_LEDS
@@ -181,7 +181,7 @@
  
 --- a/drivers/net/wireless/ath/ath9k/init.c
 +++ b/drivers/net/wireless/ath/ath9k/init.c
-@@ -1089,7 +1089,7 @@ int ath9k_init_device(u16 devid, struct
+@@ -1043,7 +1043,7 @@ int ath9k_init_device(u16 devid, struct
  
  #ifdef CPTCFG_MAC80211_LEDS
  	/* must be initialized before ieee80211_register_hw */
@@ -254,7 +254,7 @@
  
  static ssize_t read_file_ani(struct file *file, char __user *user_buf,
  			     size_t count, loff_t *ppos)
-@@ -1390,6 +1445,10 @@ int ath9k_init_debug(struct ath_hw *ah)
+@@ -1391,6 +1446,10 @@ int ath9k_init_debug(struct ath_hw *ah)
  	ath9k_tx99_init_debug(sc);
  	ath9k_cmn_spectral_init_debug(&sc->spec_priv, sc->debug.debugfs_phy);
  
diff --git a/package/kernel/mac80211/patches/ath9k/531-ath9k_extra_platform_leds.patch b/package/kernel/mac80211/patches/ath9k/531-ath9k_extra_platform_leds.patch
deleted file mode 100644
index 1055bd335c..0000000000
--- a/package/kernel/mac80211/patches/ath9k/531-ath9k_extra_platform_leds.patch
+++ /dev/null
@@ -1,64 +0,0 @@
---- a/drivers/net/wireless/ath/ath9k/gpio.c
-+++ b/drivers/net/wireless/ath/ath9k/gpio.c
-@@ -15,6 +15,7 @@
-  */
- 
- #include "ath9k.h"
-+#include <linux/ath9k_platform.h>
- 
- /********************************/
- /*	 LED functions		*/
-@@ -108,6 +109,24 @@ int ath_create_gpio_led(struct ath_softc
- 	return ret;
- }
- 
-+static int ath_create_platform_led(struct ath_softc *sc,
-+				   const struct gpio_led *gpio)
-+{
-+	struct ath_led *led;
-+	int ret;
-+
-+	led = kzalloc(sizeof(*led), GFP_KERNEL);
-+	if (!led)
-+		return -ENOMEM;
-+
-+	led->gpio = gpio;
-+	ret = ath_add_led(sc, led);
-+	if (ret < 0)
-+		kfree(led);
-+
-+	return ret;
-+}
-+
- void ath_deinit_leds(struct ath_softc *sc)
- {
- 	struct ath_led *led;
-@@ -124,8 +143,10 @@ void ath_deinit_leds(struct ath_softc *s
- 
- void ath_init_leds(struct ath_softc *sc)
- {
-+	struct ath9k_platform_data *pdata = sc->dev->platform_data;
- 	char led_name[32];
- 	const char *trigger;
-+	int i;
- 
- 	INIT_LIST_HEAD(&sc->leds);
- 
-@@ -134,6 +155,17 @@ void ath_init_leds(struct ath_softc *sc)
- 
- 	ath_fill_led_pin(sc);
- 
-+	if (pdata && pdata->leds && pdata->num_leds)
-+		for (i = 0; i < pdata->num_leds; i++) {
-+			if (pdata->leds[i].gpio == sc->sc_ah->led_pin)
-+				sc->sc_ah->led_pin = -1;
-+
-+			ath_create_platform_led(sc, &pdata->leds[i]);
-+		}
-+
-+	if (sc->sc_ah->led_pin < 0)
-+		return;
-+
- 	snprintf(led_name, sizeof(led_name), "ath9k-%s",
- 		 wiphy_name(sc->hw->wiphy));
- 
diff --git a/package/kernel/mac80211/patches/ath9k/542-ath9k_debugfs_diag.patch b/package/kernel/mac80211/patches/ath9k/542-ath9k_debugfs_diag.patch
index f08301c7f4..4b8834ad28 100644
--- a/package/kernel/mac80211/patches/ath9k/542-ath9k_debugfs_diag.patch
+++ b/package/kernel/mac80211/patches/ath9k/542-ath9k_debugfs_diag.patch
@@ -1,6 +1,6 @@
 --- a/drivers/net/wireless/ath/ath9k/debug.c
 +++ b/drivers/net/wireless/ath/ath9k/debug.c
-@@ -1428,6 +1428,50 @@ void ath9k_deinit_debug(struct ath_softc
+@@ -1429,6 +1429,50 @@ void ath9k_deinit_debug(struct ath_softc
  	ath9k_cmn_spectral_deinit_debug(&sc->spec_priv);
  }
  
@@ -51,7 +51,7 @@
  int ath9k_init_debug(struct ath_hw *ah)
  {
  	struct ath_common *common = ath9k_hw_common(ah);
-@@ -1449,6 +1493,8 @@ int ath9k_init_debug(struct ath_hw *ah)
+@@ -1450,6 +1494,8 @@ int ath9k_init_debug(struct ath_hw *ah)
  	debugfs_create_file("gpio_led", S_IWUSR,
  			   sc->debug.debugfs_phy, sc, &fops_gpio_led);
  #endif
@@ -75,7 +75,7 @@
  struct ath9k_hw_version {
  	u32 magic;
  	u16 devid;
-@@ -810,6 +816,8 @@ struct ath_hw {
+@@ -811,6 +817,8 @@ struct ath_hw {
  	u32 ah_flags;
  	s16 nf_override;
  
@@ -84,7 +84,7 @@
  	bool reset_power_on;
  	bool htc_reset_init;
  
-@@ -1079,6 +1087,7 @@ void ath9k_hw_check_nav(struct ath_hw *a
+@@ -1080,6 +1088,7 @@ void ath9k_hw_check_nav(struct ath_hw *a
  bool ath9k_hw_check_alive(struct ath_hw *ah);
  
  bool ath9k_hw_setpower(struct ath_hw *ah, enum ath9k_power_mode mode);
@@ -94,7 +94,7 @@
  struct ath_gen_timer *ath_gen_timer_alloc(struct ath_hw *ah,
 --- a/drivers/net/wireless/ath/ath9k/hw.c
 +++ b/drivers/net/wireless/ath/ath9k/hw.c
-@@ -1881,6 +1881,20 @@ u32 ath9k_hw_get_tsf_offset(struct times
+@@ -1872,6 +1872,20 @@ u32 ath9k_hw_get_tsf_offset(ktime_t last
  }
  EXPORT_SYMBOL(ath9k_hw_get_tsf_offset);
  
@@ -115,7 +115,7 @@
  int ath9k_hw_reset(struct ath_hw *ah, struct ath9k_channel *chan,
  		   struct ath9k_hw_cal_data *caldata, bool fastcc)
  {
-@@ -2089,6 +2103,7 @@ int ath9k_hw_reset(struct ath_hw *ah, st
+@@ -2080,6 +2094,7 @@ int ath9k_hw_reset(struct ath_hw *ah, st
  		ar9003_hw_disable_phy_restart(ah);
  
  	ath9k_hw_apply_gpio_override(ah);
diff --git a/package/kernel/mac80211/patches/ath9k/543-ath9k_entropy_from_adc.patch b/package/kernel/mac80211/patches/ath9k/543-ath9k_entropy_from_adc.patch
index 0fedc71270..8966cca2b6 100644
--- a/package/kernel/mac80211/patches/ath9k/543-ath9k_entropy_from_adc.patch
+++ b/package/kernel/mac80211/patches/ath9k/543-ath9k_entropy_from_adc.patch
@@ -55,7 +55,7 @@
  	ops->spectral_scan_config = ar9003_hw_spectral_scan_config;
 --- a/drivers/net/wireless/ath/ath9k/init.c
 +++ b/drivers/net/wireless/ath/ath9k/init.c
-@@ -871,7 +871,8 @@ static void ath9k_init_txpower_limits(st
+@@ -825,7 +825,8 @@ static void ath9k_init_txpower_limits(st
  	if (ah->caps.hw_caps & ATH9K_HW_CAP_5GHZ)
  		ath9k_init_band_txpower(sc, NL80211_BAND_5GHZ);
  
@@ -65,7 +65,7 @@
  }
  
  static const struct ieee80211_iface_limit if_limits[] = {
-@@ -1049,6 +1050,18 @@ static void ath9k_set_hw_capab(struct at
+@@ -1003,6 +1004,18 @@ static void ath9k_set_hw_capab(struct at
  	wiphy_ext_feature_set(hw->wiphy, NL80211_EXT_FEATURE_CAN_REPLACE_PTK0);
  }
  
@@ -84,7 +84,7 @@
  int ath9k_init_device(u16 devid, struct ath_softc *sc,
  		    const struct ath_bus_ops *bus_ops)
  {
-@@ -1096,6 +1109,8 @@ int ath9k_init_device(u16 devid, struct
+@@ -1050,6 +1063,8 @@ int ath9k_init_device(u16 devid, struct
  
  	wiphy_read_of_freq_limits(hw->wiphy);
  
diff --git a/package/kernel/mac80211/patches/ath9k/544-ath9k-ar933x-usb-hang-workaround.patch b/package/kernel/mac80211/patches/ath9k/544-ath9k-ar933x-usb-hang-workaround.patch
index 23a81864fa..926fbac988 100644
--- a/package/kernel/mac80211/patches/ath9k/544-ath9k-ar933x-usb-hang-workaround.patch
+++ b/package/kernel/mac80211/patches/ath9k/544-ath9k-ar933x-usb-hang-workaround.patch
@@ -55,7 +55,7 @@
  	return -EINVAL;
  }
  
-@@ -2114,6 +2139,9 @@ int ath9k_hw_reset(struct ath_hw *ah, st
+@@ -2105,6 +2130,9 @@ int ath9k_hw_reset(struct ath_hw *ah, st
  		ath9k_hw_set_radar_params(ah);
  	}
  
diff --git a/package/kernel/mac80211/patches/ath9k/547-ath9k_led_defstate_fix.patch b/package/kernel/mac80211/patches/ath9k/547-ath9k_led_defstate_fix.patch
index 5d84cf0c42..d633c051b0 100644
--- a/package/kernel/mac80211/patches/ath9k/547-ath9k_led_defstate_fix.patch
+++ b/package/kernel/mac80211/patches/ath9k/547-ath9k_led_defstate_fix.patch
@@ -13,7 +13,7 @@ Signed-off-by: Michal Cieslakiewicz <michal.cieslakiewicz@wp.pl>
 
 --- a/drivers/net/wireless/ath/ath9k/gpio.c
 +++ b/drivers/net/wireless/ath/ath9k/gpio.c
-@@ -74,8 +74,11 @@ static int ath_add_led(struct ath_softc
+@@ -73,8 +73,11 @@ static int ath_add_led(struct ath_softc
  	ath9k_hw_gpio_request_out(sc->sc_ah, gpio->gpio, gpio->name,
  				  AR_GPIO_OUTPUT_MUX_AS_OUTPUT);
  
diff --git a/package/kernel/mac80211/patches/ath9k/548-ath9k_enable_gpio_chip.patch b/package/kernel/mac80211/patches/ath9k/548-ath9k_enable_gpio_chip.patch
index 9fb549cc19..d7fe5b79f0 100644
--- a/package/kernel/mac80211/patches/ath9k/548-ath9k_enable_gpio_chip.patch
+++ b/package/kernel/mac80211/patches/ath9k/548-ath9k_enable_gpio_chip.patch
@@ -10,47 +10,32 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
 ---
 --- a/drivers/net/wireless/ath/ath9k/ath9k.h
 +++ b/drivers/net/wireless/ath/ath9k/ath9k.h
-@@ -25,6 +25,7 @@
+@@ -25,6 +25,8 @@
  #include <linux/completion.h>
  #include <linux/time.h>
  #include <linux/hw_random.h>
 +#include <linux/gpio/driver.h>
++#include <linux/gpio/consumer.h>
  
  #include "common.h"
  #include "debug.h"
-@@ -991,6 +992,14 @@ struct ath_led {
- 	struct led_classdev cdev;
- };
- 
-+#ifdef CONFIG_GPIOLIB
-+struct ath9k_gpio_chip {
-+	struct ath_softc *sc;
-+	char label[32];
-+	struct gpio_chip gchip;
-+};
-+#endif
-+
- struct ath_softc {
- 	struct ieee80211_hw *hw;
- 	struct device *dev;
-@@ -1046,6 +1055,9 @@ struct ath_softc {
+@@ -1048,6 +1050,10 @@ struct ath_softc {
  #ifdef CPTCFG_MAC80211_LEDS
  	const char *led_default_trigger;
  	struct list_head leds;
 +#ifdef CONFIG_GPIOLIB
-+	struct ath9k_gpio_chip *gpiochip;
++	struct gpio_chip *gpiochip;
++	struct gpio_desc *gpiodesc;
 +#endif
  #endif
  
  #ifdef CPTCFG_ATH9K_DEBUGFS
 --- a/drivers/net/wireless/ath/ath9k/gpio.c
 +++ b/drivers/net/wireless/ath/ath9k/gpio.c
-@@ -16,13 +16,135 @@
+@@ -16,12 +16,120 @@
  
  #include "ath9k.h"
- #include <linux/ath9k_platform.h>
-+#include <linux/gpio.h>
-+
+ 
 +#ifdef CPTCFG_MAC80211_LEDS
 +
 +#ifdef CONFIG_GPIOLIB
@@ -62,10 +47,9 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
 +/* gpio_chip handler : set GPIO to input */
 +static int ath9k_gpio_pin_cfg_input(struct gpio_chip *chip, unsigned offset)
 +{
-+	struct ath9k_gpio_chip *gc = container_of(chip, struct ath9k_gpio_chip,
-+						  gchip);
++	struct ath_softc *sc = gpiochip_get_data(chip);
 +
-+	ath9k_hw_gpio_request_in(gc->sc->sc_ah, offset, "ath9k-gpio");
++	ath9k_hw_gpio_request_in(sc->sc_ah, offset, "ath9k-gpio");
 +
 +	return 0;
 +}
@@ -74,12 +58,11 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
 +static int ath9k_gpio_pin_cfg_output(struct gpio_chip *chip, unsigned offset,
 +				     int value)
 +{
-+	struct ath9k_gpio_chip *gc = container_of(chip, struct ath9k_gpio_chip,
-+						  gchip);
++	struct ath_softc *sc = gpiochip_get_data(chip);
 +
-+	ath9k_hw_gpio_request_out(gc->sc->sc_ah, offset, "ath9k-gpio",
++	ath9k_hw_gpio_request_out(sc->sc_ah, offset, "ath9k-gpio",
 +				  AR_GPIO_OUTPUT_MUX_AS_OUTPUT);
-+	ath9k_hw_set_gpio(gc->sc->sc_ah, offset, value);
++	ath9k_hw_set_gpio(sc->sc_ah, offset, value);
 +
 +	return 0;
 +}
@@ -87,9 +70,8 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
 +/* gpio_chip handler : query GPIO direction (0=out, 1=in) */
 +static int ath9k_gpio_pin_get_dir(struct gpio_chip *chip, unsigned offset)
 +{
-+	struct ath9k_gpio_chip *gc = container_of(chip, struct ath9k_gpio_chip,
-+						  gchip);
-+	struct ath_hw *ah = gc->sc->sc_ah;
++	struct ath_softc *sc = gpiochip_get_data(chip);
++	struct ath_hw *ah = sc->sc_ah;
 +
 +	return !((REG_READ(ah, AR_GPIO_OE_OUT(ah)) >> (offset * 2)) & 3);
 +}
@@ -97,69 +79,59 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
 +/* gpio_chip handler : get GPIO pin value */
 +static int ath9k_gpio_pin_get(struct gpio_chip *chip, unsigned offset)
 +{
-+	struct ath9k_gpio_chip *gc = container_of(chip, struct ath9k_gpio_chip,
-+						  gchip);
++	struct ath_softc *sc = gpiochip_get_data(chip);
 +
-+	return ath9k_hw_gpio_get(gc->sc->sc_ah, offset);
++	return ath9k_hw_gpio_get(sc->sc_ah, offset);
 +}
 +
 +/* gpio_chip handler : set GPIO pin to value */
 +static void ath9k_gpio_pin_set(struct gpio_chip *chip, unsigned offset,
 +			       int value)
 +{
-+	struct ath9k_gpio_chip *gc = container_of(chip, struct ath9k_gpio_chip,
-+						  gchip);
++	struct ath_softc *sc = gpiochip_get_data(chip);
 +
-+	ath9k_hw_set_gpio(gc->sc->sc_ah, offset, value);
++	ath9k_hw_set_gpio(sc->sc_ah, offset, value);
 +}
 +
 +/* register GPIO chip */
 +static void ath9k_register_gpio_chip(struct ath_softc *sc)
 +{
-+	struct ath9k_gpio_chip *gc;
++	struct gpio_chip *gc = sc->gpiochip;
 +	struct ath_hw *ah = sc->sc_ah;
 +
-+	gc = kzalloc(sizeof(struct ath9k_gpio_chip), GFP_KERNEL);
++	gc = kzalloc(sizeof(struct gpio_chip), GFP_KERNEL);
 +	if (!gc)
 +		return;
 +
-+	gc->sc = sc;
-+	snprintf(gc->label, sizeof(gc->label), "ath9k-%s",
-+		 wiphy_name(sc->hw->wiphy));
-+#ifdef CONFIG_OF
-+	gc->gchip.parent = sc->dev;
-+#endif
-+	gc->gchip.label = gc->label;
-+	gc->gchip.base = -1;	/* determine base automatically */
-+	gc->gchip.ngpio = ah->caps.num_gpio_pins;
-+	gc->gchip.direction_input = ath9k_gpio_pin_cfg_input;
-+	gc->gchip.direction_output = ath9k_gpio_pin_cfg_output;
-+	gc->gchip.get_direction = ath9k_gpio_pin_get_dir;
-+	gc->gchip.get = ath9k_gpio_pin_get;
-+	gc->gchip.set = ath9k_gpio_pin_set;
-+
-+	if (gpiochip_add(&gc->gchip)) {
++	gc->label = kasprintf(GFP_KERNEL, "ath9k-%s",
++			wiphy_name(sc->hw->wiphy));
++	gc->parent = sc->dev;
++	gc->base = -1;	/* determine base automatically */
++	gc->ngpio = ah->caps.num_gpio_pins;
++	gc->direction_input = ath9k_gpio_pin_cfg_input;
++	gc->direction_output = ath9k_gpio_pin_cfg_output;
++	gc->get_direction = ath9k_gpio_pin_get_dir;
++	gc->get = ath9k_gpio_pin_get;
++	gc->set = ath9k_gpio_pin_set;
++
++	if (gpiochip_add_data(gc, sc)) {
++		kfree(gc->label);
 +		kfree(gc);
 +		return;
 +	}
-+
-+#ifdef CONFIG_OF
-+	gc->gchip.owner = NULL;
-+#endif
-+	sc->gpiochip = gc;
 +}
 +
 +/* remove GPIO chip */
 +static void ath9k_unregister_gpio_chip(struct ath_softc *sc)
 +{
-+	struct ath9k_gpio_chip *gc = sc->gpiochip;
++	struct gpio_chip *gc = sc->gpiochip;
 +
 +	if (!gc)
 +		return;
 +
-+	gpiochip_remove(&gc->gchip);
++	gpiochip_remove(gc);
++	kfree(gc->label);
 +	kfree(gc);
-+	sc->gpiochip = NULL;
 +}
 +
 +#else /* CONFIG_GPIOLIB */
@@ -173,7 +145,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
 +}
 +
 +#endif /* CONFIG_GPIOLIB */
- 
++
  /********************************/
  /*	 LED functions		*/
  /********************************/
@@ -183,27 +155,27 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  static void ath_fill_led_pin(struct ath_softc *sc)
  {
  	struct ath_hw *ah = sc->sc_ah;
-@@ -80,6 +202,12 @@ static int ath_add_led(struct ath_softc
+@@ -79,6 +187,12 @@ static int ath_add_led(struct ath_softc
  	else
  		ath9k_hw_set_gpio(sc->sc_ah, gpio->gpio, gpio->active_low);
  
 +#ifdef CONFIG_GPIOLIB
 +	/* If there is GPIO chip configured, reserve LED pin */
 +	if (sc->gpiochip)
-+		gpio_request(sc->gpiochip->gchip.base + gpio->gpio, gpio->name);
++		sc->gpiodesc = gpiod_get(sc->dev, gpio->name, GPIOD_ASIS);
 +#endif
 +
  	return 0;
  }
  
-@@ -136,17 +264,24 @@ void ath_deinit_leds(struct ath_softc *s
+@@ -117,16 +231,23 @@ void ath_deinit_leds(struct ath_softc *s
  
  	while (!list_empty(&sc->leds)) {
  		led = list_first_entry(&sc->leds, struct ath_led, list);
 +#ifdef CONFIG_GPIOLIB
 +		/* If there is GPIO chip configured, free LED pin */
 +		if (sc->gpiochip)
-+			gpio_free(sc->gpiochip->gchip.base + led->gpio->gpio);
++			gpiod_put(sc->gpiodesc);
 +#endif
  		list_del(&led->list);
  		ath_led_brightness(&led->cdev, LED_OFF);
@@ -216,12 +188,11 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  
  void ath_init_leds(struct ath_softc *sc)
  {
- 	struct ath9k_platform_data *pdata = sc->dev->platform_data;
 +	struct device_node *np = sc->dev->of_node;
  	char led_name[32];
  	const char *trigger;
- 	int i;
-@@ -156,6 +291,15 @@ void ath_init_leds(struct ath_softc *sc)
+ 
+@@ -135,6 +256,15 @@ void ath_init_leds(struct ath_softc *sc)
  	if (AR_SREV_9100(sc->sc_ah))
  		return;
  
@@ -236,12 +207,4 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
 +
  	ath_fill_led_pin(sc);
  
- 	if (pdata && pdata->leds && pdata->num_leds)
-@@ -180,6 +324,7 @@ void ath_init_leds(struct ath_softc *sc)
- 	ath_create_gpio_led(sc, sc->sc_ah->led_pin, led_name, trigger,
- 			   !sc->sc_ah->config.led_active_high);
- }
-+
- #endif
- 
- /*******************/
+ 	snprintf(led_name, sizeof(led_name), "ath9k-%s",
diff --git a/package/kernel/mac80211/patches/ath9k/549-ath9k_enable_gpio_buttons.patch b/package/kernel/mac80211/patches/ath9k/549-ath9k_enable_gpio_buttons.patch
deleted file mode 100644
index d164d89031..0000000000
--- a/package/kernel/mac80211/patches/ath9k/549-ath9k_enable_gpio_buttons.patch
+++ /dev/null
@@ -1,130 +0,0 @@
-From: Michal Cieslakiewicz <michal.cieslakiewicz@wp.pl>
-Subject: [PATCH v5 5/8] mac80211: ath9k: enable GPIO buttons
-
-Enable platform-defined GPIO button support for ath9k device.
-Key poller is activated for attached platform buttons.
-Requires ath9k GPIO chip access.
-
-Signed-off-by: Michal Cieslakiewicz <michal.cieslakiewicz@wp.pl>
-Signed-off-by: Felix Fietkau <nbd@nbd.name>
----
---- a/drivers/net/wireless/ath/ath9k/ath9k.h
-+++ b/drivers/net/wireless/ath/ath9k/ath9k.h
-@@ -1057,6 +1057,7 @@ struct ath_softc {
- 	struct list_head leds;
- #ifdef CONFIG_GPIOLIB
- 	struct ath9k_gpio_chip *gpiochip;
-+	struct platform_device *btnpdev;	/* gpio-keys-polled */
- #endif
- #endif
- 
---- a/drivers/net/wireless/ath/ath9k/gpio.c
-+++ b/drivers/net/wireless/ath/ath9k/gpio.c
-@@ -17,6 +17,8 @@
- #include "ath9k.h"
- #include <linux/ath9k_platform.h>
- #include <linux/gpio.h>
-+#include <linux/platform_device.h>
-+#include <linux/gpio_keys.h>
- 
- #ifdef CPTCFG_MAC80211_LEDS
- 
-@@ -129,6 +131,67 @@ static void ath9k_unregister_gpio_chip(s
- 	sc->gpiochip = NULL;
- }
- 
-+/******************/
-+/*  GPIO Buttons  */
-+/******************/
-+
-+/* add GPIO buttons */
-+static void ath9k_init_buttons(struct ath_softc *sc)
-+{
-+	struct ath9k_platform_data *pdata = sc->dev->platform_data;
-+	struct platform_device *pdev;
-+	struct gpio_keys_platform_data gkpdata;
-+	struct gpio_keys_button *bt;
-+	int i;
-+
-+	if (!sc->gpiochip)
-+		return;
-+
-+	if (!pdata || !pdata->btns || !pdata->num_btns)
-+		return;
-+
-+	bt = devm_kmemdup(sc->dev, pdata->btns,
-+			  pdata->num_btns * sizeof(struct gpio_keys_button),
-+			  GFP_KERNEL);
-+	if (!bt)
-+		return;
-+
-+	for (i = 0; i < pdata->num_btns; i++) {
-+		if (pdata->btns[i].gpio == sc->sc_ah->led_pin)
-+				sc->sc_ah->led_pin = -1;
-+
-+		ath9k_hw_gpio_request_in(sc->sc_ah, pdata->btns[i].gpio,
-+					 "ath9k-gpio");
-+		bt[i].gpio = sc->gpiochip->gchip.base + pdata->btns[i].gpio;
-+	}
-+
-+	memset(&gkpdata, 0, sizeof(struct gpio_keys_platform_data));
-+	gkpdata.buttons = bt;
-+	gkpdata.nbuttons = pdata->num_btns;
-+	gkpdata.poll_interval = pdata->btn_poll_interval;
-+
-+	pdev = platform_device_register_data(sc->dev, "gpio-keys-polled",
-+					     PLATFORM_DEVID_AUTO, &gkpdata,
-+					     sizeof(gkpdata));
-+	if (!IS_ERR_OR_NULL(pdev))
-+		sc->btnpdev = pdev;
-+	else {
-+		sc->btnpdev = NULL;
-+		devm_kfree(sc->dev, bt);
-+	}
-+}
-+
-+/* remove GPIO buttons */
-+static void ath9k_deinit_buttons(struct ath_softc *sc)
-+{
-+	if (!sc->gpiochip || !sc->btnpdev)
-+		return;
-+
-+	platform_device_unregister(sc->btnpdev);
-+
-+	sc->btnpdev = NULL;
-+}
-+
- #else /* CONFIG_GPIOLIB */
- 
- static inline void ath9k_register_gpio_chip(struct ath_softc *sc)
-@@ -139,6 +202,14 @@ static inline void ath9k_unregister_gpio
- {
- }
- 
-+static inline void ath9k_init_buttons(struct ath_softc *sc)
-+{
-+}
-+
-+static inline void ath9k_deinit_buttons(struct ath_softc *sc)
-+{
-+}
-+
- #endif /* CONFIG_GPIOLIB */
- 
- /********************************/
-@@ -262,6 +333,7 @@ void ath_deinit_leds(struct ath_softc *s
- {
- 	struct ath_led *led;
- 
-+	ath9k_deinit_buttons(sc);
- 	while (!list_empty(&sc->leds)) {
- 		led = list_first_entry(&sc->leds, struct ath_led, list);
- #ifdef CONFIG_GPIOLIB
-@@ -301,6 +373,7 @@ void ath_init_leds(struct ath_softc *sc)
- 	}
- 
- 	ath_fill_led_pin(sc);
-+	ath9k_init_buttons(sc);
- 
- 	if (pdata && pdata->leds && pdata->num_leds)
- 		for (i = 0; i < pdata->num_leds; i++) {
diff --git a/package/kernel/mac80211/patches/ath9k/550-ath9k-of.patch b/package/kernel/mac80211/patches/ath9k/550-ath9k-of.patch
new file mode 100644
index 0000000000..2db6177b28
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath9k/550-ath9k-of.patch
@@ -0,0 +1,166 @@
+--- a/drivers/net/wireless/ath/ath9k/init.c
++++ b/drivers/net/wireless/ath/ath9k/init.c
+@@ -28,6 +28,11 @@
+ 
+ #include "ath9k.h"
+ 
++#ifdef CONFIG_ATH79
++#include <asm/mach-ath79/ath79.h>
++#include <asm/mach-ath79/ar71xx_regs.h>
++#endif
++ 
+ struct ath9k_eeprom_ctx {
+ 	struct completion complete;
+ 	struct ath_hw *ah;
+@@ -242,6 +247,81 @@ static unsigned int ath9k_reg_rmw(void *
+ 	return val;
+ }
+ 
++#ifdef CONFIG_ATH79
++#define QCA955X_DDR_CTL_CONFIG          0x108
++#define QCA955X_DDR_CTL_CONFIG_ACT_WMAC BIT(23)
++
++static int ar913x_wmac_reset(void)
++{
++	ath79_device_reset_set(AR913X_RESET_AMBA2WMAC);
++	mdelay(10);
++
++	ath79_device_reset_clear(AR913X_RESET_AMBA2WMAC);
++	mdelay(10);
++
++	return 0;
++}
++
++static int ar933x_wmac_reset(void)
++{
++	int retries = 20;
++
++	ath79_device_reset_set(AR933X_RESET_WMAC);
++	ath79_device_reset_clear(AR933X_RESET_WMAC);
++
++	while (1) {
++		u32 bootstrap;
++
++		bootstrap = ath79_reset_rr(AR933X_RESET_REG_BOOTSTRAP);
++		if ((bootstrap & AR933X_BOOTSTRAP_EEPBUSY) == 0)
++			return 0;
++
++		if (retries-- == 0)
++			break;
++
++		udelay(10000);
++	}
++
++	pr_err("ar933x: WMAC reset timed out");
++	return -ETIMEDOUT;
++}
++
++static int qca955x_wmac_reset(void)
++{
++	int i;
++
++	/* Try to wait for WMAC DDR activity to stop */
++	for (i = 0; i < 10; i++) {
++		if (!(__raw_readl(ath79_ddr_base + QCA955X_DDR_CTL_CONFIG) &
++		    QCA955X_DDR_CTL_CONFIG_ACT_WMAC))
++			break;
++
++		udelay(10);
++	}
++
++	ath79_device_reset_set(QCA955X_RESET_RTC);
++	udelay(10);
++	ath79_device_reset_clear(QCA955X_RESET_RTC);
++	udelay(10);
++
++	return 0;
++}
++
++
++static int ar9330_get_soc_revision(void)
++{
++	if (ath79_soc_rev == 1)
++		return ath79_soc_rev;
++
++	return 0;
++}
++
++static int ath79_get_soc_revision(void)
++{
++	return ath79_soc_rev;
++}
++#endif
++
+ /**************************/
+ /*     Initialization     */
+ /**************************/
+@@ -626,6 +706,7 @@ static int ath9k_of_init(struct ath_soft
+ 	struct ath_common *common = ath9k_hw_common(ah);
+ 	enum ath_bus_type bus_type = common->bus_ops->ath_bus_type;
+ 	char eeprom_name[100];
++	u32 mask;
+ 	int ret;
+ 
+ 	if (!of_device_is_available(np))
+@@ -633,6 +714,43 @@ static int ath9k_of_init(struct ath_soft
+ 
+ 	ath_dbg(common, CONFIG, "parsing configuration from OF node\n");
+ 
++	if (!of_property_read_u32(np, "qca,gpio-mask", &mask))
++		ah->caps.gpio_mask = mask;
++
++	if (of_property_read_bool(np, "qca,tx-gain-buffalo"))
++		ah->config.tx_gain_buffalo = true;
++
++#ifdef CONFIG_ATH79
++	if (ah->hw_version.devid == AR5416_AR9100_DEVID) {
++		ah->external_reset = ar913x_wmac_reset;
++	} else if (ah->hw_version.devid == AR9300_DEVID_AR9330) {
++		ah->get_mac_revision = ar9330_get_soc_revision;
++		u32 t = ath79_reset_rr(AR933X_RESET_REG_BOOTSTRAP);
++		ah->is_clk_25mhz = !(t & AR933X_BOOTSTRAP_REF_CLK_40);
++		ah->external_reset = ar933x_wmac_reset;
++	} else if (ah->hw_version.devid == AR9300_DEVID_AR9340) {
++		ah->get_mac_revision = ath79_get_soc_revision;
++		u32 t = ath79_reset_rr(AR934X_RESET_REG_BOOTSTRAP);
++		ah->is_clk_25mhz = !(t & AR934X_BOOTSTRAP_REF_CLK_40);
++	} else if (ah->hw_version.devid == AR9300_DEVID_AR953X) {
++		ah->get_mac_revision = ath79_get_soc_revision;
++		/*
++		 * QCA953x only supports 25MHz refclk.
++		 * Some vendors have an invalid bootstrap option
++		 * set, which would break the WMAC here.
++		 */
++		ah->is_clk_25mhz = true;
++	} else if (ah->hw_version.devid == AR9300_DEVID_QCA955X) {
++		u32 t = ath79_reset_rr(QCA955X_RESET_REG_BOOTSTRAP);
++		ah->is_clk_25mhz = !(t & QCA955X_BOOTSTRAP_REF_CLK_40);
++		ah->external_reset = qca955x_wmac_reset;
++	} else if (ah->hw_version.devid == AR9300_DEVID_QCA956X) {
++		ah->get_mac_revision = ath79_get_soc_revision;
++		u32 t = ath79_reset_rr(QCA956X_RESET_REG_BOOTSTRAP);
++		ah->is_clk_25mhz = !(t & QCA956X_BOOTSTRAP_REF_CLK_40);
++	}
++#endif
++
+ 	if (of_property_read_bool(np, "qca,no-eeprom")) {
+ 		/* ath9k-eeprom-<bus>-<id>.bin */
+ 		scnprintf(eeprom_name, sizeof(eeprom_name),
+@@ -651,6 +769,17 @@ static int ath9k_of_init(struct ath_soft
+ 	if (ret == -EPROBE_DEFER)
+ 		return ret;
+ 
++	np = of_get_child_by_name(np, "led");
++	if (np && of_device_is_available(np)) {
++		u32 led_pin;
++
++		if (!of_property_read_u32(np, "led-sources", &led_pin))
++			ah->led_pin = led_pin;
++
++		ah->config.led_active_high = !of_property_read_bool(np, "led-active-low");
++		of_node_put(np);
++	}
++
+ 	return 0;
+ }
+ 
diff --git a/package/kernel/mac80211/patches/ath9k/551-ath9k_ubnt_uap_plus_hsr.patch b/package/kernel/mac80211/patches/ath9k/551-ath9k_ubnt_uap_plus_hsr.patch
index 3ccd3fc487..7f826b8a53 100644
--- a/package/kernel/mac80211/patches/ath9k/551-ath9k_ubnt_uap_plus_hsr.patch
+++ b/package/kernel/mac80211/patches/ath9k/551-ath9k_ubnt_uap_plus_hsr.patch
@@ -7,7 +7,7 @@
 +#include "hsr.h"
  
  /* Set/change channels.  If the channel is really being changed, it's done
-  * by reseting the chip.  To accomplish this we must first cleanup any pending
+  * by resetting the chip.  To accomplish this we must first cleanup any pending
 @@ -22,6 +23,7 @@
   */
  static int ath_set_channel(struct ath_softc *sc)
@@ -30,7 +30,7 @@
  	ath_update_survey_stats(sc);
 --- /dev/null
 +++ b/drivers/net/wireless/ath/ath9k/hsr.c
-@@ -0,0 +1,247 @@
+@@ -0,0 +1,248 @@
 +/*
 + *
 + * The MIT License (MIT)
@@ -68,6 +68,7 @@
 +
 +#include "hw.h"
 +#include "ath9k.h"
++#include "hsr.h"
 +
 +#define HSR_GPIO_CSN 8
 +#define HSR_GPIO_CLK 6
@@ -280,7 +281,7 @@
 +}
 --- /dev/null
 +++ b/drivers/net/wireless/ath/ath9k/hsr.h
-@@ -0,0 +1,48 @@
+@@ -0,0 +1,50 @@
 +/*
 + * The MIT License (MIT)
 + *
@@ -308,6 +309,8 @@
 +#ifndef HSR_H
 +#define HSR_H
 +
++ struct ath_hw;
++
 +#ifdef CPTCFG_ATH9K_UBNTHSR
 +
 +void ath9k_hsr_init(struct ath_hw *ah);
@@ -371,7 +374,7 @@
  
 --- a/local-symbols
 +++ b/local-symbols
-@@ -123,6 +123,7 @@ ATH9K_WOW=
+@@ -117,6 +117,7 @@ ATH9K_WOW=
  ATH9K_RFKILL=
  ATH9K_CHANNEL_CONTEXT=
  ATH9K_PCOEM=
diff --git a/package/kernel/mac80211/patches/ath9k/552-ath9k-ahb_of.patch b/package/kernel/mac80211/patches/ath9k/552-ath9k-ahb_of.patch
index 3adc8bb8d6..04c821a97b 100644
--- a/package/kernel/mac80211/patches/ath9k/552-ath9k-ahb_of.patch
+++ b/package/kernel/mac80211/patches/ath9k/552-ath9k-ahb_of.patch
@@ -1,284 +1,100 @@
 --- a/drivers/net/wireless/ath/ath9k/ahb.c
 +++ b/drivers/net/wireless/ath/ath9k/ahb.c
-@@ -20,7 +20,15 @@
+@@ -16,37 +16,21 @@
+  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+  */
+ 
++#include <linux/mod_devicetable.h>
++#include <linux/module.h>
+ #include <linux/nl80211.h>
++#include <linux/of.h>
  #include <linux/platform_device.h>
- #include <linux/module.h>
- #include <linux/mod_devicetable.h>
-+#include <linux/of_device.h>
- #include "ath9k.h"
-+#include <linux/ath9k_platform.h>
+-#include <linux/module.h>
+-#include <linux/mod_devicetable.h>
 +
-+#ifdef CONFIG_OF
-+#include <asm/mach-ath79/ath79.h>
-+#include <asm/mach-ath79/ar71xx_regs.h>
-+#include <linux/mtd/mtd.h>
-+#endif
+ #include "ath9k.h"
  
- static const struct platform_device_id ath9k_platform_id_table[] = {
- 	{
-@@ -69,6 +77,192 @@ static const struct ath_bus_ops ath_ahb_
- 	.eeprom_read = ath_ahb_eeprom_read,
+-static const struct platform_device_id ath9k_platform_id_table[] = {
+-	{
+-		.name = "ath9k",
+-		.driver_data = AR5416_AR9100_DEVID,
+-	},
+-	{
+-		.name = "ar933x_wmac",
+-		.driver_data = AR9300_DEVID_AR9330,
+-	},
+-	{
+-		.name = "ar934x_wmac",
+-		.driver_data = AR9300_DEVID_AR9340,
+-	},
+-	{
+-		.name = "qca955x_wmac",
+-		.driver_data = AR9300_DEVID_QCA955X,
+-	},
+-	{
+-		.name = "qca953x_wmac",
+-		.driver_data = AR9300_DEVID_AR953X,
+-	},
+-	{
+-		.name = "qca956x_wmac",
+-		.driver_data = AR9300_DEVID_QCA956X,
+-	},
++static const struct of_device_id ath9k_of_match_table[] = {
++	{ .compatible = "qca,ar9130-wifi", .data = (void *)AR5416_AR9100_DEVID },
++	{ .compatible = "qca,ar9330-wifi", .data = (void *)AR9300_DEVID_AR9330 },
++	{ .compatible = "qca,ar9340-wifi", .data = (void *)AR9300_DEVID_AR9340 },
++	{ .compatible = "qca,qca9530-wifi", .data = (void *)AR9300_DEVID_AR953X },
++	{ .compatible = "qca,qca9550-wifi", .data = (void *)AR9300_DEVID_QCA955X },
++	{ .compatible = "qca,qca9560-wifi", .data = (void *)AR9300_DEVID_QCA956X },
+ 	{},
  };
  
-+#ifdef CONFIG_OF
-+
-+#define QCA955X_DDR_CTL_CONFIG          0x108
-+#define QCA955X_DDR_CTL_CONFIG_ACT_WMAC BIT(23)
-+
-+static int ar913x_wmac_reset(void)
-+{
-+	ath79_device_reset_set(AR913X_RESET_AMBA2WMAC);
-+	mdelay(10);
-+
-+	ath79_device_reset_clear(AR913X_RESET_AMBA2WMAC);
-+	mdelay(10);
-+
-+	return 0;
-+}
-+
-+static int ar933x_wmac_reset(void)
-+{
-+	int retries = 20;
-+
-+	ath79_device_reset_set(AR933X_RESET_WMAC);
-+	ath79_device_reset_clear(AR933X_RESET_WMAC);
-+
-+	while (1) {
-+		u32 bootstrap;
-+
-+		bootstrap = ath79_reset_rr(AR933X_RESET_REG_BOOTSTRAP);
-+		if ((bootstrap & AR933X_BOOTSTRAP_EEPBUSY) == 0)
-+			return 0;
-+
-+		if (retries-- == 0)
-+			break;
-+
-+		udelay(10000);
-+	}
-+
-+	pr_err("ar933x: WMAC reset timed out");
-+	return -ETIMEDOUT;
-+}
-+
-+static int qca955x_wmac_reset(void)
-+{
-+	int i;
-+
-+	/* Try to wait for WMAC DDR activity to stop */
-+	for (i = 0; i < 10; i++) {
-+		if (!(__raw_readl(ath79_ddr_base + QCA955X_DDR_CTL_CONFIG) &
-+		    QCA955X_DDR_CTL_CONFIG_ACT_WMAC))
-+			break;
-+
-+		udelay(10);
-+	}
-+
-+	ath79_device_reset_set(QCA955X_RESET_RTC);
-+	udelay(10);
-+	ath79_device_reset_clear(QCA955X_RESET_RTC);
-+	udelay(10);
-+
-+	return 0;
-+}
-+
-+enum {
-+	AR913X_WMAC = 0,
-+	AR933X_WMAC,
-+	AR934X_WMAC,
-+	QCA953X_WMAC,
-+	QCA955X_WMAC,
-+	QCA956X_WMAC,
-+};
-+
-+static int ar9330_get_soc_revision(void)
-+{
-+	if (ath79_soc_rev == 1)
-+		return ath79_soc_rev;
-+
-+	return 0;
-+}
-+
-+static int ath79_get_soc_revision(void)
-+{
-+	return ath79_soc_rev;
-+}
-+
-+static const struct of_ath_ahb_data {
-+	u16 dev_id;
-+	u32 bootstrap_reg;
-+	u32 bootstrap_ref;
-+
-+	int (*soc_revision)(void);
-+	int (*wmac_reset)(void);
-+} of_ath_ahb_data[] = {
-+	[AR913X_WMAC] = {
-+		.dev_id = AR5416_AR9100_DEVID,
-+		.wmac_reset = ar913x_wmac_reset,
-+
-+	},
-+	[AR933X_WMAC] = {
-+		.dev_id = AR9300_DEVID_AR9330,
-+		.bootstrap_reg = AR933X_RESET_REG_BOOTSTRAP,
-+		.bootstrap_ref = AR933X_BOOTSTRAP_REF_CLK_40,
-+		.soc_revision = ar9330_get_soc_revision,
-+		.wmac_reset = ar933x_wmac_reset,
-+	},
-+	[AR934X_WMAC] = {
-+		.dev_id = AR9300_DEVID_AR9340,
-+		.bootstrap_reg = AR934X_RESET_REG_BOOTSTRAP,
-+		.bootstrap_ref = AR934X_BOOTSTRAP_REF_CLK_40,
-+		.soc_revision = ath79_get_soc_revision,
-+	},
-+	[QCA953X_WMAC] = {
-+		.dev_id = AR9300_DEVID_AR953X,
-+		.bootstrap_reg = QCA953X_RESET_REG_BOOTSTRAP,
-+		.bootstrap_ref = QCA953X_BOOTSTRAP_REF_CLK_40,
-+		.soc_revision = ath79_get_soc_revision,
-+	},
-+	[QCA955X_WMAC] = {
-+		.dev_id = AR9300_DEVID_QCA955X,
-+		.bootstrap_reg = QCA955X_RESET_REG_BOOTSTRAP,
-+		.bootstrap_ref = QCA955X_BOOTSTRAP_REF_CLK_40,
-+		.wmac_reset = qca955x_wmac_reset,
-+	},
-+	[QCA956X_WMAC] = {
-+		.dev_id = AR9300_DEVID_QCA956X,
-+		.bootstrap_reg = QCA956X_RESET_REG_BOOTSTRAP,
-+		.bootstrap_ref = QCA956X_BOOTSTRAP_REF_CLK_40,
-+		.soc_revision = ath79_get_soc_revision,
-+	},
-+};
-+
-+const struct of_device_id of_ath_ahb_match[] = {
-+	{ .compatible = "qca,ar9130-wmac", .data = &of_ath_ahb_data[AR913X_WMAC] },
-+	{ .compatible = "qca,ar9330-wmac", .data = &of_ath_ahb_data[AR933X_WMAC] },
-+	{ .compatible = "qca,ar9340-wmac", .data = &of_ath_ahb_data[AR934X_WMAC] },
-+	{ .compatible = "qca,qca9530-wmac", .data = &of_ath_ahb_data[QCA953X_WMAC] },
-+	{ .compatible = "qca,qca9550-wmac", .data = &of_ath_ahb_data[QCA955X_WMAC] },
-+	{ .compatible = "qca,qca9560-wmac", .data = &of_ath_ahb_data[QCA956X_WMAC] },
-+	{},
-+};
-+MODULE_DEVICE_TABLE(of, of_ath_ahb_match);
-+
-+static int of_ath_ahb_probe(struct platform_device *pdev)
-+{
-+	struct ath9k_platform_data *pdata;
-+	const struct of_device_id *match;
-+	const struct of_ath_ahb_data *data;
-+	u8 led_pin;
-+
-+	match = of_match_device(of_ath_ahb_match, &pdev->dev);
-+	data = (const struct of_ath_ahb_data *)match->data;
-+
-+	pdata = dev_get_platdata(&pdev->dev);
-+
-+	if (!of_property_read_u8(pdev->dev.of_node, "qca,led-pin", &led_pin))
-+		pdata->led_pin = led_pin;
-+	else
-+		pdata->led_pin = -1;
-+
-+	if (of_property_read_bool(pdev->dev.of_node, "qca,tx-gain-buffalo"))
-+		pdata->tx_gain_buffalo = true;
-+
-+	if (data->wmac_reset) {
-+		data->wmac_reset();
-+		pdata->external_reset = data->wmac_reset;
-+	}
-+
-+	if (data->dev_id == AR9300_DEVID_AR953X) {
-+		/*
-+		 * QCA953x only supports 25MHz refclk.
-+		 * Some vendors have an invalid bootstrap option
-+		 * set, which would break the WMAC here.
-+		 */
-+		pdata->is_clk_25mhz = true;
-+	} else if (data->bootstrap_reg && data->bootstrap_ref) {
-+		u32 t = ath79_reset_rr(data->bootstrap_reg);
-+		if (t & data->bootstrap_ref)
-+			pdata->is_clk_25mhz = false;
-+		else
-+			pdata->is_clk_25mhz = true;
-+	}
-+
-+	pdata->get_mac_revision = data->soc_revision;
-+
-+	return data->dev_id;
-+}
-+#endif
-+
+@@ -71,19 +55,14 @@ static const struct ath_bus_ops ath_ahb_
+ 
  static int ath_ahb_probe(struct platform_device *pdev)
  {
- 	void __iomem *mem;
-@@ -80,6 +274,17 @@ static int ath_ahb_probe(struct platform
- 	int ret = 0;
+-	void __iomem *mem;
+-	struct ath_softc *sc;
+ 	struct ieee80211_hw *hw;
+-	const struct platform_device_id *id = platform_get_device_id(pdev);
+-	int irq;
+-	int ret = 0;
++	struct ath_softc *sc;
  	struct ath_hw *ah;
++	void __iomem *mem;
  	char hw_name[64];
+-
+-	if (!dev_get_platdata(&pdev->dev)) {
+-		dev_err(&pdev->dev, "no platform data specified\n");
+-		return -EINVAL;
+-	}
 +	u16 dev_id;
-+
-+	if (id)
-+		dev_id = id->driver_data;
-+
-+#ifdef CONFIG_OF
-+	if (pdev->dev.of_node)
-+		pdev->dev.platform_data = devm_kzalloc(&pdev->dev,
-+					sizeof(struct ath9k_platform_data),
-+					GFP_KERNEL);
-+#endif
- 
- 	if (!dev_get_platdata(&pdev->dev)) {
- 		dev_err(&pdev->dev, "no platform data specified\n");
-@@ -118,17 +323,23 @@ static int ath_ahb_probe(struct platform
- 	sc->mem = mem;
- 	sc->irq = irq;
++	int irq;
++	int ret;
  
-+#ifdef CONFIG_OF
-+	dev_id = of_ath_ahb_probe(pdev);
-+#endif
- 	ret = request_irq(irq, ath_isr, IRQF_SHARED, "ath9k", sc);
- 	if (ret) {
- 		dev_err(&pdev->dev, "request_irq failed\n");
+ 	mem = devm_platform_ioremap_resource(pdev, 0);
+ 	if (IS_ERR(mem)) {
+@@ -117,7 +96,8 @@ static int ath_ahb_probe(struct platform
  		goto err_free_hw;
  	}
  
 -	ret = ath9k_init_device(id->driver_data, sc, &ath_ahb_bus_ops);
++	dev_id = (u16)(kernel_ulong_t)of_device_get_match_data(&pdev->dev);
 +	ret = ath9k_init_device(dev_id, sc, &ath_ahb_bus_ops);
  	if (ret) {
  		dev_err(&pdev->dev, "failed to initialize device\n");
  		goto err_irq;
- 	}
-+#ifdef CONFIG_OF
-+	pdev->dev.platform_data = NULL;
-+#endif
- 
- 	ah = sc->sc_ah;
- 	ath9k_hw_name(ah, hw_name, sizeof(hw_name));
-@@ -162,6 +373,9 @@ static struct platform_driver ath_ahb_dr
- 	.remove_new = ath_ahb_remove,
- 	.driver		= {
- 		.name	= "ath9k",
-+#ifdef CONFIG_OF
-+		.of_match_table = of_ath_ahb_match,
-+#endif
+@@ -167,11 +147,11 @@ static struct platform_driver ath_ahb_dr
+ 	
+ 	.driver = {
+ 		.name = "ath9k",
++		.of_match_table = ath9k_of_match_table,
  	},
- 	.id_table    = ath9k_platform_id_table,
+-	.id_table = ath9k_platform_id_table,
  };
---- a/drivers/net/wireless/ath/ath9k/ath9k.h
-+++ b/drivers/net/wireless/ath/ath9k/ath9k.h
-@@ -26,6 +26,7 @@
- #include <linux/time.h>
- #include <linux/hw_random.h>
- #include <linux/gpio/driver.h>
-+#include <linux/reset.h>
  
- #include "common.h"
- #include "debug.h"
-@@ -1013,6 +1014,9 @@ struct ath_softc {
- 	struct ath_hw *sc_ah;
- 	void __iomem *mem;
- 	int irq;
-+#ifdef CONFIG_OF
-+	struct reset_control *reset;
-+#endif
- 	spinlock_t sc_serial_rw;
- 	spinlock_t sc_pm_lock;
- 	spinlock_t sc_pcu_lock;
+-MODULE_DEVICE_TABLE(platform, ath9k_platform_id_table);
++MODULE_DEVICE_TABLE(of, ath9k_of_match_table);
+ 
+ int ath_ahb_init(void)
+ {
diff --git a/package/kernel/mac80211/patches/ath9k/553-ath9k-ahb_of_compat.patch b/package/kernel/mac80211/patches/ath9k/553-ath9k-ahb_of_compat.patch
new file mode 100644
index 0000000000..20e351d203
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath9k/553-ath9k-ahb_of_compat.patch
@@ -0,0 +1,16 @@
+--- a/drivers/net/wireless/ath/ath9k/ahb.c
++++ b/drivers/net/wireless/ath/ath9k/ahb.c
+@@ -31,6 +31,13 @@ static const struct of_device_id ath9k_o
+ 	{ .compatible = "qca,qca9530-wifi", .data = (void *)AR9300_DEVID_AR953X },
+ 	{ .compatible = "qca,qca9550-wifi", .data = (void *)AR9300_DEVID_QCA955X },
+ 	{ .compatible = "qca,qca9560-wifi", .data = (void *)AR9300_DEVID_QCA956X },
++	/* backwards compat, remove if no longer needed: */
++	{ .compatible = "qca,ar9130-wmac", .data = (void *)AR5416_AR9100_DEVID },
++	{ .compatible = "qca,ar9330-wmac", .data = (void *)AR9300_DEVID_AR9330 },
++	{ .compatible = "qca,ar9340-wmac", .data = (void *)AR9300_DEVID_AR9340 },
++	{ .compatible = "qca,qca9530-wmac", .data = (void *)AR9300_DEVID_AR953X },
++	{ .compatible = "qca,qca9550-wmac", .data = (void *)AR9300_DEVID_QCA955X },
++	{ .compatible = "qca,qca9560-wmac", .data = (void *)AR9300_DEVID_QCA956X },
+ 	{},
+ };
+ 
diff --git a/package/kernel/mac80211/patches/ath9k/553-ath9k_of_gpio_mask.patch b/package/kernel/mac80211/patches/ath9k/553-ath9k_of_gpio_mask.patch
deleted file mode 100644
index 752a4980a4..0000000000
--- a/package/kernel/mac80211/patches/ath9k/553-ath9k_of_gpio_mask.patch
+++ /dev/null
@@ -1,25 +0,0 @@
---- a/drivers/net/wireless/ath/ath9k/init.c
-+++ b/drivers/net/wireless/ath/ath9k/init.c
-@@ -696,6 +696,12 @@ static int ath9k_of_init(struct ath_soft
- 	return 0;
- }
- 
-+static void ath9k_of_gpio_mask(struct ath_softc *sc)
-+{
-+	of_property_read_u32(sc->dev->of_node, "qca,gpio-mask",
-+			     &sc->sc_ah->caps.gpio_mask);
-+}
-+
- static int ath9k_init_softc(u16 devid, struct ath_softc *sc,
- 			    const struct ath_bus_ops *bus_ops)
- {
-@@ -804,6 +810,9 @@ static int ath9k_init_softc(u16 devid, s
- 	if (ret)
- 		goto err_hw;
- 
-+	/* GPIO mask quirk */
-+	ath9k_of_gpio_mask(sc);
-+
- 	ret = ath9k_init_queues(sc);
- 	if (ret)
- 		goto err_queues;
diff --git a/package/kernel/mac80211/patches/brcm/860-brcmfmac-workaround-bug-with-some-inconsistent-BSSes.patch b/package/kernel/mac80211/patches/brcm/860-brcmfmac-workaround-bug-with-some-inconsistent-BSSes.patch
index 84b989d858..fe471923d2 100644
--- a/package/kernel/mac80211/patches/brcm/860-brcmfmac-workaround-bug-with-some-inconsistent-BSSes.patch
+++ b/package/kernel/mac80211/patches/brcm/860-brcmfmac-workaround-bug-with-some-inconsistent-BSSes.patch
@@ -10,7 +10,7 @@ Signed-off-by: Rafał Miłecki <zajec5@gmail.com>
 
 --- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
 +++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
-@@ -980,8 +980,36 @@ static struct wireless_dev *brcmf_cfg802
+@@ -984,8 +984,36 @@ static struct wireless_dev *brcmf_cfg802
  	struct brcmf_cfg80211_info *cfg = wiphy_to_cfg(wiphy);
  	struct brcmf_pub *drvr = cfg->pub;
  	struct wireless_dev *wdev;
diff --git a/package/kernel/mac80211/patches/brcm/861-brcmfmac-add-in-driver-tables-with-country-codes.patch b/package/kernel/mac80211/patches/brcm/861-brcmfmac-add-in-driver-tables-with-country-codes.patch
index 1f0609e348..2f07212c56 100644
--- a/package/kernel/mac80211/patches/brcm/861-brcmfmac-add-in-driver-tables-with-country-codes.patch
+++ b/package/kernel/mac80211/patches/brcm/861-brcmfmac-add-in-driver-tables-with-country-codes.patch
@@ -12,7 +12,7 @@ Signed-off-by: Rafał Miłecki <rafal@milecki.pl>
 
 --- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/of.c
 +++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/of.c
-@@ -65,6 +65,36 @@ static int brcmf_of_get_country_codes(st
+@@ -66,6 +66,36 @@ static int brcmf_of_get_country_codes(st
  	return 0;
  }
  
@@ -46,15 +46,15 @@ Signed-off-by: Rafał Miłecki <rafal@milecki.pl>
 +	}
 +}
 +
- void brcmf_of_probe(struct device *dev, enum brcmf_bus_type bus_type,
- 		    struct brcmf_mp_device *settings)
+ int brcmf_of_probe(struct device *dev, enum brcmf_bus_type bus_type,
+ 		   struct brcmf_mp_device *settings)
  {
-@@ -113,6 +143,8 @@ void brcmf_of_probe(struct device *dev,
- 	}
- 	of_node_put(root);
+@@ -121,6 +151,8 @@ int brcmf_of_probe(struct device *dev, e
+ 
+ 	brcmf_dbg(INFO, "%s LPO clock\n", clk ? "enable" : "no");
  
 +	brcmf_of_probe_cc(dev, settings);
 +
  	if (!np || !of_device_is_compatible(np, "brcm,bcm4329-fmac"))
- 		return;
+ 		return 0;
  
diff --git a/package/kernel/mac80211/patches/brcm/870-02-rpi-6.12-brcmfmac-Prefer-a-ccode-from-OTP-over-nvram-file.patch b/package/kernel/mac80211/patches/brcm/870-02-rpi-6.12-brcmfmac-Prefer-a-ccode-from-OTP-over-nvram-file.patch
index 9a7f9eb266..b9907f6129 100644
--- a/package/kernel/mac80211/patches/brcm/870-02-rpi-6.12-brcmfmac-Prefer-a-ccode-from-OTP-over-nvram-file.patch
+++ b/package/kernel/mac80211/patches/brcm/870-02-rpi-6.12-brcmfmac-Prefer-a-ccode-from-OTP-over-nvram-file.patch
@@ -22,7 +22,7 @@ Signed-off-by: Phil Elwell <phil@raspberrypi.com>
  #include <net/cfg80211.h>
  #include <net/netlink.h>
  #include <uapi/linux/if_arp.h>
-@@ -8212,31 +8213,45 @@ static void brcmf_cfg80211_reg_notifier(
+@@ -8215,31 +8216,45 @@ static void brcmf_cfg80211_reg_notifier(
  	struct brcmf_if *ifp = brcmf_get_ifp(cfg->pub, 0);
  	struct brcmf_pub *drvr = cfg->pub;
  	struct brcmf_fil_country_le ccreq;
diff --git a/package/kernel/mac80211/patches/brcm/870-03-rpi-6.12-brcmfmac-Increase-power-saving-delay-to-2s.patch b/package/kernel/mac80211/patches/brcm/870-03-rpi-6.12-brcmfmac-Increase-power-saving-delay-to-2s.patch
index f197e89026..a05171be48 100644
--- a/package/kernel/mac80211/patches/brcm/870-03-rpi-6.12-brcmfmac-Increase-power-saving-delay-to-2s.patch
+++ b/package/kernel/mac80211/patches/brcm/870-03-rpi-6.12-brcmfmac-Increase-power-saving-delay-to-2s.patch
@@ -14,7 +14,7 @@ Signed-off-by: Phil Elwell <phil@raspberrypi.com>
 
 --- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
 +++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
-@@ -3338,6 +3338,7 @@ brcmf_cfg80211_set_power_mgmt(struct wip
+@@ -3342,6 +3342,7 @@ brcmf_cfg80211_set_power_mgmt(struct wip
  			bphy_err(drvr, "error (%d)\n", err);
  	}
  
diff --git a/package/kernel/mac80211/patches/brcm/870-04-rpi-6.12-brcmfmac-non-upstream-support-DS1-exit-firmware-re-download.patch b/package/kernel/mac80211/patches/brcm/870-04-rpi-6.12-brcmfmac-non-upstream-support-DS1-exit-firmware-re-download.patch
index 1e2016bcad..54cf073229 100644
--- a/package/kernel/mac80211/patches/brcm/870-04-rpi-6.12-brcmfmac-non-upstream-support-DS1-exit-firmware-re-download.patch
+++ b/package/kernel/mac80211/patches/brcm/870-04-rpi-6.12-brcmfmac-non-upstream-support-DS1-exit-firmware-re-download.patch
@@ -112,7 +112,7 @@ JIRA: SWWLAN-136577
  				    BRCMF_DEFAULT_SCAN_CHANNEL_TIME);
 --- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/core.c
 +++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/core.c
-@@ -1317,7 +1317,7 @@ int brcmf_alloc(struct device *dev, stru
+@@ -1322,7 +1322,7 @@ int brcmf_alloc(struct device *dev, stru
  	return 0;
  }
  
@@ -121,7 +121,7 @@ JIRA: SWWLAN-136577
  {
  	struct brcmf_bus *bus_if = dev_get_drvdata(dev);
  	struct brcmf_pub *drvr = bus_if->drvr;
-@@ -1358,10 +1358,13 @@ int brcmf_attach(struct device *dev)
+@@ -1363,10 +1363,13 @@ int brcmf_attach(struct device *dev)
  	brcmf_fweh_register(drvr, BRCMF_E_PSM_WATCHDOG,
  			    brcmf_psm_watchdog_notify);
  
@@ -205,7 +205,7 @@ JIRA: SWWLAN-136577
  				    void *data);
 --- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/pcie.c
 +++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/pcie.c
-@@ -2207,7 +2207,7 @@ static void brcmf_pcie_setup(struct devi
+@@ -2210,7 +2210,7 @@ static void brcmf_pcie_setup(struct devi
  
  	init_waitqueue_head(&devinfo->mbdata_resp_wait);
  
@@ -482,7 +482,7 @@ JIRA: SWWLAN-136577
  	bus->tx_hdrlen = SDPCM_HWHDR_LEN + SDPCM_SWHDR_LEN;
  	if (sdiodev->sg_support) {
  		bus->txglom = false;
-@@ -4215,7 +4413,7 @@ static void brcmf_sdio_firmware_callback
+@@ -4217,7 +4415,7 @@ static void brcmf_sdio_firmware_callback
  	u8 saveclk, bpreq;
  	u8 devctl;
  
@@ -491,7 +491,7 @@ JIRA: SWWLAN-136577
  
  	if (err)
  		goto fail;
-@@ -4392,12 +4590,25 @@ static void brcmf_sdio_firmware_callback
+@@ -4394,12 +4592,25 @@ static void brcmf_sdio_firmware_callback
  	}
  
  	/* Attach to the common layer, reserve hdr space */
@@ -518,7 +518,7 @@ JIRA: SWWLAN-136577
  	/* ready */
  	return;
  
-@@ -4640,3 +4851,40 @@ int brcmf_sdio_sleep(struct brcmf_sdio *
+@@ -4646,3 +4857,40 @@ int brcmf_sdio_sleep(struct brcmf_sdio *
  
  	return ret;
  }
@@ -692,7 +692,7 @@ JIRA: SWWLAN-136577
  #endif /* BRCMFMAC_SDIO_H */
 --- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/usb.c
 +++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/usb.c
-@@ -1200,7 +1200,7 @@ static void brcmf_usb_probe_phase2(struc
+@@ -1202,7 +1202,7 @@ static void brcmf_usb_probe_phase2(struc
  		goto error;
  
  	/* Attach to the common driver interface */
@@ -701,7 +701,7 @@ JIRA: SWWLAN-136577
  	if (ret)
  		goto error;
  
-@@ -1277,7 +1277,7 @@ static int brcmf_usb_probe_cb(struct brc
+@@ -1282,7 +1282,7 @@ static int brcmf_usb_probe_cb(struct brc
  		ret = brcmf_alloc(devinfo->dev, devinfo->settings);
  		if (ret)
  			goto fail;
diff --git a/package/kernel/mac80211/patches/brcm/870-05-rpi-6.12-brcmfmac-Fix-interoperating-DPP-and-other-encryption.patch b/package/kernel/mac80211/patches/brcm/870-05-rpi-6.12-brcmfmac-Fix-interoperating-DPP-and-other-encryption.patch
index 080ce2bb86..285eb99fac 100644
--- a/package/kernel/mac80211/patches/brcm/870-05-rpi-6.12-brcmfmac-Fix-interoperating-DPP-and-other-encryption.patch
+++ b/package/kernel/mac80211/patches/brcm/870-05-rpi-6.12-brcmfmac-Fix-interoperating-DPP-and-other-encryption.patch
@@ -25,7 +25,7 @@ Signed-off-by: Chi-hsien Lin <chi-hsien.lin@cypress.com>
 
 --- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
 +++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
-@@ -2491,43 +2491,50 @@ brcmf_cfg80211_connect(struct wiphy *wip
+@@ -2495,43 +2495,50 @@ brcmf_cfg80211_connect(struct wiphy *wip
  		goto done;
  	}
  
diff --git a/package/kernel/mac80211/patches/brcm/871-brcmfmac-disable-dump_survey-on-bcm2835.patch b/package/kernel/mac80211/patches/brcm/871-brcmfmac-disable-dump_survey-on-bcm2835.patch
index 0dd0d11c18..be9e39e71a 100644
--- a/package/kernel/mac80211/patches/brcm/871-brcmfmac-disable-dump_survey-on-bcm2835.patch
+++ b/package/kernel/mac80211/patches/brcm/871-brcmfmac-disable-dump_survey-on-bcm2835.patch
@@ -9,7 +9,7 @@ Signed-off-by: Álvaro Fernández Rojas <noltari@gmail.com>
 
 --- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
 +++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
-@@ -7991,6 +7991,7 @@ static s32 brcmf_translate_country_code(
+@@ -7994,6 +7994,7 @@ static s32 brcmf_translate_country_code(
  	return 0;
  }
  
@@ -17,7 +17,7 @@ Signed-off-by: Álvaro Fernández Rojas <noltari@gmail.com>
  static int
  brcmf_parse_dump_obss(char *buf, struct brcmf_dump_survey *survey)
  {
-@@ -8213,6 +8214,7 @@ exit:
+@@ -8216,6 +8217,7 @@ exit:
  		brcmf_set_mpc(ifp, 1);
  	return err;
  }
@@ -25,7 +25,7 @@ Signed-off-by: Álvaro Fernández Rojas <noltari@gmail.com>
  
  static void brcmf_cfg80211_reg_notifier(struct wiphy *wiphy,
  					struct regulatory_request *req)
-@@ -8379,8 +8381,10 @@ struct brcmf_cfg80211_info *brcmf_cfg802
+@@ -8382,8 +8384,10 @@ struct brcmf_cfg80211_info *brcmf_cfg802
  	if (brcmf_feat_is_enabled(ifp, BRCMF_FEAT_WOWL_GTK))
  		ops->set_rekey_data = brcmf_cfg80211_set_rekey_data;
  #endif
diff --git a/package/kernel/mac80211/patches/build/100-backports-drop-QRTR-and-MHI.patch b/package/kernel/mac80211/patches/build/100-backports-drop-QRTR-and-MHI.patch
index f4dc5508b1..52060f434b 100644
--- a/package/kernel/mac80211/patches/build/100-backports-drop-QRTR-and-MHI.patch
+++ b/package/kernel/mac80211/patches/build/100-backports-drop-QRTR-and-MHI.patch
@@ -59,7 +59,7 @@ Signed-off-by: Robert Marko <robimarko@gmail.com>
  	  This module adds support for PCIE bus
 --- a/local-symbols
 +++ b/local-symbols
-@@ -59,14 +59,6 @@ MAC80211_MESH_PS_DEBUG=
+@@ -53,14 +53,6 @@ MAC80211_MESH_PS_DEBUG=
  MAC80211_TDLS_DEBUG=
  MAC80211_DEBUG_COUNTERS=
  MAC80211_STA_HASH_MAX_SIZE=
diff --git a/package/kernel/mac80211/patches/build/120-backport-fix-unaligned.h-header-location.patch b/package/kernel/mac80211/patches/build/120-backport-fix-unaligned.h-header-location.patch
new file mode 100644
index 0000000000..1fe6ab25fc
--- /dev/null
+++ b/package/kernel/mac80211/patches/build/120-backport-fix-unaligned.h-header-location.patch
@@ -0,0 +1,26 @@
+From: Shiji Yang <yangshiji66@outlook.com>
+Date: Mon, 28 Apr 2025 22:03:18 +0800
+Subject: [PATCH] backport: fix unaligned.h header location
+
+unaligned.h was moved from include/asm-generic/ to include/linux/
+in 6.12-rc2 kernel.
+
+Link: https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?h=linux-6.12.y&id=5f60d5f6bbc12e782fac78110b0ee62698f3b576
+Signed-off-by: Shiji Yang <yangshiji66@outlook.com>
+---
+ backport-include/asm/unaligned.h | 4 ++++
+ 1 file changed, 4 insertions(+)
+
+--- a/backport-include/asm/unaligned.h
++++ b/backport-include/asm/unaligned.h
+@@ -1,6 +1,10 @@
+ #ifndef __BACKPORT_ASM_GENERIC_UNALIGNED_H
+ #define __BACKPORT_ASM_GENERIC_UNALIGNED_H
++#if LINUX_VERSION_IS_GEQ(6,12,0)
++#include_next <linux/unaligned.h>
++#else
+ #include_next <asm/unaligned.h>
++#endif
+ 
+ #if LINUX_VERSION_IS_LESS(5,7,0)
+ static inline u32 __get_unaligned_be24(const u8 *p)
diff --git a/package/kernel/mac80211/patches/build/140-trace_backport.patch b/package/kernel/mac80211/patches/build/140-trace_backport.patch
index 8b77b7e83d..2d25f1c5c3 100644
--- a/package/kernel/mac80211/patches/build/140-trace_backport.patch
+++ b/package/kernel/mac80211/patches/build/140-trace_backport.patch
@@ -1,541 +1,694 @@
 --- a/drivers/bus/mhi/host/trace.h
 +++ b/drivers/bus/mhi/host/trace.h
-@@ -104,7 +104,7 @@ TRACE_EVENT(mhi_gen_tre,
+@@ -104,7 +104,11 @@ TRACE_EVENT(mhi_gen_tre,
  	),
  
  	TP_fast_assign(
--		__assign_str(name);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(name);
++#else
 +		__assign_str(name, mhi_cntrl->mhi_dev->name);
++#endif
  		__entry->ch_num = mhi_chan->chan;
  		__entry->wp = mhi_tre;
  		__entry->tre_ptr = le64_to_cpu(mhi_tre->ptr);
-@@ -132,7 +132,7 @@ TRACE_EVENT(mhi_intvec_states,
+@@ -132,7 +136,11 @@ TRACE_EVENT(mhi_intvec_states,
  	),
  
  	TP_fast_assign(
--		__assign_str(name);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(name);
++#else
 +		__assign_str(name, mhi_cntrl->mhi_dev->name);
++#endif
  		__entry->local_ee = mhi_cntrl->ee;
  		__entry->state = mhi_cntrl->dev_state;
  		__entry->dev_ee = dev_ee;
-@@ -159,7 +159,7 @@ TRACE_EVENT(mhi_tryset_pm_state,
+@@ -159,7 +167,11 @@ TRACE_EVENT(mhi_tryset_pm_state,
  	),
  
  	TP_fast_assign(
--		__assign_str(name);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(name);
++#else
 +		__assign_str(name, mhi_cntrl->mhi_dev->name);
++#endif
  		if (pm_state)
  			pm_state = __fls(pm_state);
  		__entry->pm_state = pm_state;
-@@ -185,7 +185,7 @@ DECLARE_EVENT_CLASS(mhi_process_event_ri
+@@ -185,7 +197,11 @@ DECLARE_EVENT_CLASS(mhi_process_event_ri
  	),
  
  	TP_fast_assign(
--		__assign_str(name);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(name);
++#else
 +		__assign_str(name, mhi_cntrl->mhi_dev->name);
++#endif
  		__entry->rp = rp;
  		__entry->ptr = le64_to_cpu(rp->ptr);
  		__entry->dword0 = le32_to_cpu(rp->dword[0]);
-@@ -227,7 +227,7 @@ DECLARE_EVENT_CLASS(mhi_update_channel_s
+@@ -227,7 +243,11 @@ DECLARE_EVENT_CLASS(mhi_update_channel_s
  	),
  
  	TP_fast_assign(
--		__assign_str(name);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(name);
++#else
 +		__assign_str(name, mhi_cntrl->mhi_dev->name);
++#endif
  		__entry->ch_num = mhi_chan->chan;
  		__entry->state = state;
  		__entry->reason = reason;
-@@ -266,7 +266,7 @@ TRACE_EVENT(mhi_pm_st_transition,
+@@ -266,7 +286,11 @@ TRACE_EVENT(mhi_pm_st_transition,
  	),
  
  	TP_fast_assign(
--		__assign_str(name);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(name);
++#else
 +		__assign_str(name, mhi_cntrl->mhi_dev->name);
++#endif
  		__entry->state = state;
  	),
  
 --- a/drivers/net/wireless/ath/ath10k/trace.h
 +++ b/drivers/net/wireless/ath/ath10k/trace.h
-@@ -55,8 +55,8 @@ DECLARE_EVENT_CLASS(ath10k_log_event,
+@@ -55,8 +55,13 @@ DECLARE_EVENT_CLASS(ath10k_log_event,
  		__vstring(msg, vaf->fmt, vaf->va)
  	),
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ar->dev));
 +		__assign_str(driver, dev_driver_string(ar->dev));
++#endif
  		__assign_vstr(msg, vaf->fmt, vaf->va);
  	),
  	TP_printk(
-@@ -92,8 +92,8 @@ TRACE_EVENT(ath10k_log_dbg,
+@@ -92,8 +97,13 @@ TRACE_EVENT(ath10k_log_dbg,
  		__vstring(msg, vaf->fmt, vaf->va)
  	),
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ar->dev));
 +		__assign_str(driver, dev_driver_string(ar->dev));
++#endif
  		__entry->level = level;
  		__assign_vstr(msg, vaf->fmt, vaf->va);
  	),
-@@ -121,10 +121,10 @@ TRACE_EVENT(ath10k_log_dbg_dump,
+@@ -121,10 +131,17 @@ TRACE_EVENT(ath10k_log_dbg_dump,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
--		__assign_str(msg);
--		__assign_str(prefix);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
+ 		__assign_str(msg);
+ 		__assign_str(prefix);
++#else
 +		__assign_str(device, dev_name(ar->dev));
 +		__assign_str(driver, dev_driver_string(ar->dev));
 +		__assign_str(msg, msg);
 +		__assign_str(prefix, prefix);
++#endif
  		__entry->buf_len = buf_len;
  		memcpy(__get_dynamic_array(buf), buf, buf_len);
  	),
-@@ -152,8 +152,8 @@ TRACE_EVENT(ath10k_wmi_cmd,
+@@ -152,8 +169,13 @@ TRACE_EVENT(ath10k_wmi_cmd,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ar->dev));
 +		__assign_str(driver, dev_driver_string(ar->dev));
++#endif
  		__entry->id = id;
  		__entry->buf_len = buf_len;
  		memcpy(__get_dynamic_array(buf), buf, buf_len);
-@@ -182,8 +182,8 @@ TRACE_EVENT(ath10k_wmi_event,
+@@ -182,8 +204,13 @@ TRACE_EVENT(ath10k_wmi_event,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ar->dev));
 +		__assign_str(driver, dev_driver_string(ar->dev));
++#endif
  		__entry->id = id;
  		__entry->buf_len = buf_len;
  		memcpy(__get_dynamic_array(buf), buf, buf_len);
-@@ -211,8 +211,8 @@ TRACE_EVENT(ath10k_htt_stats,
+@@ -211,8 +238,13 @@ TRACE_EVENT(ath10k_htt_stats,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ar->dev));
 +		__assign_str(driver, dev_driver_string(ar->dev));
++#endif
  		__entry->buf_len = buf_len;
  		memcpy(__get_dynamic_array(buf), buf, buf_len);
  	),
-@@ -239,8 +239,8 @@ TRACE_EVENT(ath10k_wmi_dbglog,
+@@ -239,8 +271,13 @@ TRACE_EVENT(ath10k_wmi_dbglog,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ar->dev));
 +		__assign_str(driver, dev_driver_string(ar->dev));
++#endif
  		__entry->hw_type = ar->hw_rev;
  		__entry->buf_len = buf_len;
  		memcpy(__get_dynamic_array(buf), buf, buf_len);
-@@ -269,8 +269,8 @@ TRACE_EVENT(ath10k_htt_pktlog,
+@@ -269,8 +306,13 @@ TRACE_EVENT(ath10k_htt_pktlog,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ar->dev));
 +		__assign_str(driver, dev_driver_string(ar->dev));
++#endif
  		__entry->hw_type = ar->hw_rev;
  		__entry->buf_len = buf_len;
  		memcpy(__get_dynamic_array(pktlog), buf, buf_len);
-@@ -301,8 +301,8 @@ TRACE_EVENT(ath10k_htt_tx,
+@@ -301,8 +343,13 @@ TRACE_EVENT(ath10k_htt_tx,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ar->dev));
 +		__assign_str(driver, dev_driver_string(ar->dev));
++#endif
  		__entry->msdu_id = msdu_id;
  		__entry->msdu_len = msdu_len;
  		__entry->vdev_id = vdev_id;
-@@ -332,8 +332,8 @@ TRACE_EVENT(ath10k_txrx_tx_unref,
+@@ -332,8 +379,13 @@ TRACE_EVENT(ath10k_txrx_tx_unref,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ar->dev));
 +		__assign_str(driver, dev_driver_string(ar->dev));
++#endif
  		__entry->msdu_id = msdu_id;
  	),
  
-@@ -358,8 +358,8 @@ DECLARE_EVENT_CLASS(ath10k_hdr_event,
+@@ -358,8 +410,13 @@ DECLARE_EVENT_CLASS(ath10k_hdr_event,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ar->dev));
 +		__assign_str(driver, dev_driver_string(ar->dev));
++#endif
  		__entry->len = ath10k_frm_hdr_len(data, len);
  		memcpy(__get_dynamic_array(data), data, __entry->len);
  	),
-@@ -386,8 +386,8 @@ DECLARE_EVENT_CLASS(ath10k_payload_event
+@@ -386,8 +443,13 @@ DECLARE_EVENT_CLASS(ath10k_payload_event
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ar->dev));
 +		__assign_str(driver, dev_driver_string(ar->dev));
++#endif
  		__entry->len = len - ath10k_frm_hdr_len(data, len);
  		memcpy(__get_dynamic_array(payload),
  		       data + ath10k_frm_hdr_len(data, len), __entry->len);
-@@ -435,8 +435,8 @@ TRACE_EVENT(ath10k_htt_rx_desc,
+@@ -435,8 +497,13 @@ TRACE_EVENT(ath10k_htt_rx_desc,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ar->dev));
 +		__assign_str(driver, dev_driver_string(ar->dev));
++#endif
  		__entry->hw_type = ar->hw_rev;
  		__entry->len = len;
  		memcpy(__get_dynamic_array(rxdesc), data, len);
-@@ -472,8 +472,8 @@ TRACE_EVENT(ath10k_wmi_diag_container,
+@@ -472,8 +539,13 @@ TRACE_EVENT(ath10k_wmi_diag_container,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ar->dev));
 +		__assign_str(driver, dev_driver_string(ar->dev));
++#endif
  		__entry->type = type;
  		__entry->timestamp = timestamp;
  		__entry->code = code;
-@@ -505,8 +505,8 @@ TRACE_EVENT(ath10k_wmi_diag,
+@@ -505,8 +577,13 @@ TRACE_EVENT(ath10k_wmi_diag,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ar->dev));
 +		__assign_str(driver, dev_driver_string(ar->dev));
++#endif
  		__entry->len = len;
  		memcpy(__get_dynamic_array(data), data, len);
  	),
 --- a/drivers/net/wireless/ath/ath11k/trace.h
 +++ b/drivers/net/wireless/ath/ath11k/trace.h
-@@ -48,8 +48,8 @@ TRACE_EVENT(ath11k_htt_pktlog,
+@@ -48,8 +48,13 @@ TRACE_EVENT(ath11k_htt_pktlog,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ar->ab->dev));
 +		__assign_str(driver, dev_driver_string(ar->ab->dev));
++#endif
  		__entry->buf_len = buf_len;
  		__entry->pktlog_checksum = pktlog_checksum;
  		memcpy(__get_dynamic_array(pktlog), buf, buf_len);
-@@ -77,8 +77,8 @@ TRACE_EVENT(ath11k_htt_ppdu_stats,
+@@ -77,8 +82,13 @@ TRACE_EVENT(ath11k_htt_ppdu_stats,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ar->ab->dev));
 +		__assign_str(driver, dev_driver_string(ar->ab->dev));
++#endif
  		__entry->len = len;
  		memcpy(__get_dynamic_array(ppdu), data, len);
  	),
-@@ -105,8 +105,8 @@ TRACE_EVENT(ath11k_htt_rxdesc,
+@@ -105,8 +115,13 @@ TRACE_EVENT(ath11k_htt_rxdesc,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ar->ab->dev));
 +		__assign_str(driver, dev_driver_string(ar->ab->dev));
++#endif
  		__entry->len = len;
  		__entry->log_type = log_type;
  		memcpy(__get_dynamic_array(rxdesc), data, len);
-@@ -130,8 +130,8 @@ DECLARE_EVENT_CLASS(ath11k_log_event,
+@@ -130,8 +145,13 @@ DECLARE_EVENT_CLASS(ath11k_log_event,
  		__vstring(msg, vaf->fmt, vaf->va)
  	),
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ab->dev));
 +		__assign_str(driver, dev_driver_string(ab->dev));
++#endif
  		__assign_vstr(msg, vaf->fmt, vaf->va);
  	),
  	TP_printk(
-@@ -171,8 +171,8 @@ TRACE_EVENT(ath11k_wmi_cmd,
+@@ -171,8 +191,13 @@ TRACE_EVENT(ath11k_wmi_cmd,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ab->dev));
 +		__assign_str(driver, dev_driver_string(ab->dev));
++#endif
  		__entry->id = id;
  		__entry->buf_len = buf_len;
  		memcpy(__get_dynamic_array(buf), buf, buf_len);
-@@ -201,8 +201,8 @@ TRACE_EVENT(ath11k_wmi_event,
+@@ -201,8 +226,13 @@ TRACE_EVENT(ath11k_wmi_event,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ab->dev));
 +		__assign_str(driver, dev_driver_string(ab->dev));
++#endif
  		__entry->id = id;
  		__entry->buf_len = buf_len;
  		memcpy(__get_dynamic_array(buf), buf, buf_len);
-@@ -230,8 +230,8 @@ TRACE_EVENT(ath11k_log_dbg,
+@@ -230,8 +260,13 @@ TRACE_EVENT(ath11k_log_dbg,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ab->dev));
 +		__assign_str(driver, dev_driver_string(ab->dev));
++#endif
  		__entry->level = level;
  		WARN_ON_ONCE(vsnprintf(__get_dynamic_array(msg),
  				       ATH11K_MSG_MAX, vaf->fmt,
-@@ -262,10 +262,10 @@ TRACE_EVENT(ath11k_log_dbg_dump,
+@@ -262,10 +297,17 @@ TRACE_EVENT(ath11k_log_dbg_dump,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
--		__assign_str(msg);
--		__assign_str(prefix);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
+ 		__assign_str(msg);
+ 		__assign_str(prefix);
++#else
 +		__assign_str(device, dev_name(ab->dev));
 +		__assign_str(driver, dev_driver_string(ab->dev));
 +		__assign_str(msg, msg);
 +		__assign_str(prefix, prefix);
++#endif
  		__entry->buf_len = buf_len;
  		memcpy(__get_dynamic_array(buf), buf, buf_len);
  	),
-@@ -292,8 +292,8 @@ TRACE_EVENT(ath11k_wmi_diag,
+@@ -292,8 +334,13 @@ TRACE_EVENT(ath11k_wmi_diag,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ab->dev));
 +		__assign_str(driver, dev_driver_string(ab->dev));
++#endif
  		__entry->len = len;
  		memcpy(__get_dynamic_array(data), data, len);
  	),
-@@ -318,8 +318,8 @@ TRACE_EVENT(ath11k_ps_timekeeper,
+@@ -318,8 +365,14 @@ TRACE_EVENT(ath11k_ps_timekeeper,
  			 __field(u32, peer_ps_timestamp)
  	),
  
 -	TP_fast_assign(__assign_str(device);
--		       __assign_str(driver);
-+	TP_fast_assign(__assign_str(device, dev_name(ar->ab->dev));
++	TP_fast_assign(
++#if LINUX_VERSION_IS_GEQ(6,10,0)
++		       __assign_str(device);
+ 		       __assign_str(driver);
++#else
++		       __assign_str(device, dev_name(ar->ab->dev));
 +		       __assign_str(driver, dev_driver_string(ar->ab->dev));
++#endif
  		       memcpy(__get_dynamic_array(peer_addr), peer_addr,
  			      ETH_ALEN);
  		       __entry->peer_ps_state = peer_ps_state;
 --- a/drivers/net/wireless/ath/ath12k/trace.h
 +++ b/drivers/net/wireless/ath/ath12k/trace.h
-@@ -36,8 +36,8 @@ TRACE_EVENT(ath12k_htt_pktlog,
+@@ -36,8 +36,13 @@ TRACE_EVENT(ath12k_htt_pktlog,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ar->ab->dev));
 +		__assign_str(driver, dev_driver_string(ar->ab->dev));
++#endif
  		__entry->buf_len = buf_len;
  		__entry->pktlog_checksum = pktlog_checksum;
  		memcpy(__get_dynamic_array(pktlog), buf, buf_len);
-@@ -73,8 +73,8 @@ TRACE_EVENT(ath12k_htt_ppdu_stats,
+@@ -73,8 +78,13 @@ TRACE_EVENT(ath12k_htt_ppdu_stats,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ar->ab->dev));
 +		__assign_str(driver, dev_driver_string(ar->ab->dev));
++#endif
  		__entry->len = len;
  		__entry->info = ar->pdev->timestamp.info;
  		__entry->sync_tstmp_lo_us = ar->pdev->timestamp.sync_timestamp_hi_us;
-@@ -117,8 +117,8 @@ TRACE_EVENT(ath12k_htt_rxdesc,
+@@ -117,8 +127,13 @@ TRACE_EVENT(ath12k_htt_rxdesc,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ar->ab->dev));
 +		__assign_str(driver, dev_driver_string(ar->ab->dev));
++#endif
  		__entry->len = len;
  		__entry->type = type;
  		__entry->info = ar->pdev->timestamp.info;
-@@ -153,8 +153,8 @@ TRACE_EVENT(ath12k_wmi_diag,
+@@ -153,8 +168,13 @@ TRACE_EVENT(ath12k_wmi_diag,
  	),
  
  	TP_fast_assign(
--		__assign_str(device);
--		__assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(device);
+ 		__assign_str(driver);
++#else
 +		__assign_str(device, dev_name(ab->dev));
 +		__assign_str(driver, dev_driver_string(ab->dev));
++#endif
  		__entry->len = len;
  		memcpy(__get_dynamic_array(data), data, len);
  	),
 --- a/drivers/net/wireless/ath/ath6kl/trace.h
 +++ b/drivers/net/wireless/ath/ath6kl/trace.h
-@@ -304,8 +304,8 @@ TRACE_EVENT(ath6kl_log_dbg_dump,
+@@ -304,8 +304,13 @@ TRACE_EVENT(ath6kl_log_dbg_dump,
  	),
  
  	TP_fast_assign(
--		__assign_str(msg);
--		__assign_str(prefix);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(msg);
+ 		__assign_str(prefix);
++#else
 +		__assign_str(msg, msg);
 +		__assign_str(prefix, prefix);
++#endif
  		__entry->buf_len = buf_len;
  		memcpy(__get_dynamic_array(buf), buf, buf_len);
  	),
 --- a/drivers/net/wireless/ath/trace.h
 +++ b/drivers/net/wireless/ath/trace.h
-@@ -44,8 +44,8 @@ TRACE_EVENT(ath_log,
+@@ -44,8 +44,13 @@ TRACE_EVENT(ath_log,
  	    ),
  
  	    TP_fast_assign(
--		    __assign_str(device);
--		    __assign_str(driver);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		    __assign_str(device);
+ 		    __assign_str(driver);
++#else
 +		    __assign_str(device, wiphy_name(wiphy));
 +		    __assign_str(driver, KBUILD_MODNAME);
++#endif
  		    __assign_vstr(msg, vaf->fmt, vaf->va);
  	    ),
  
 --- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/tracepoint.h
 +++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/tracepoint.h
-@@ -41,7 +41,7 @@ TRACE_EVENT(brcmf_err,
+@@ -41,7 +41,11 @@ TRACE_EVENT(brcmf_err,
  		__vstring(msg, vaf->fmt, vaf->va)
  	),
  	TP_fast_assign(
--		__assign_str(func);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(func);
++#else
 +		__assign_str(func, func);
++#endif
  		__assign_vstr(msg, vaf->fmt, vaf->va);
  	),
  	TP_printk("%s: %s", __get_str(func), __get_str(msg))
-@@ -57,7 +57,7 @@ TRACE_EVENT(brcmf_dbg,
+@@ -57,7 +61,11 @@ TRACE_EVENT(brcmf_dbg,
  	),
  	TP_fast_assign(
  		__entry->level = level;
--		__assign_str(func);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(func);
++#else
 +		__assign_str(func, func);
++#endif
  		__assign_vstr(msg, vaf->fmt, vaf->va);
  	),
  	TP_printk("%s: %s", __get_str(func), __get_str(msg))
 --- a/drivers/net/wireless/broadcom/brcm80211/brcmsmac/brcms_trace_brcmsmac.h
 +++ b/drivers/net/wireless/broadcom/brcm80211/brcmsmac/brcms_trace_brcmsmac.h
-@@ -81,7 +81,7 @@ TRACE_EVENT(brcms_macintstatus,
+@@ -81,7 +81,11 @@ TRACE_EVENT(brcms_macintstatus,
  		__field(u32, mask)
  	),
  	TP_fast_assign(
--		__assign_str(dev);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(dev);
++#else
 +		__assign_str(dev, dev_name(dev));
++#endif
  		__entry->in_isr = in_isr;
  		__entry->macintstatus = macintstatus;
  		__entry->mask = mask;
 --- a/drivers/net/wireless/broadcom/brcm80211/brcmsmac/brcms_trace_brcmsmac_msg.h
 +++ b/drivers/net/wireless/broadcom/brcm80211/brcmsmac/brcms_trace_brcmsmac_msg.h
-@@ -71,7 +71,7 @@ TRACE_EVENT(brcms_dbg,
+@@ -71,7 +71,11 @@ TRACE_EVENT(brcms_dbg,
  	),
  	TP_fast_assign(
  		__entry->level = level;
--		__assign_str(func);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(func);
++#else
 +		__assign_str(func, func);
++#endif
  		__assign_vstr(msg, vaf->fmt, vaf->va);
  	),
  	TP_printk("%s: %s", __get_str(func), __get_str(msg))
 --- a/drivers/net/wireless/broadcom/brcm80211/brcmsmac/brcms_trace_brcmsmac_tx.h
 +++ b/drivers/net/wireless/broadcom/brcm80211/brcmsmac/brcms_trace_brcmsmac_tx.h
-@@ -31,7 +31,7 @@ TRACE_EVENT(brcms_txdesc,
+@@ -31,7 +31,11 @@ TRACE_EVENT(brcms_txdesc,
  		__dynamic_array(u8, txh, txh_len)
  	),
  	TP_fast_assign(
--		__assign_str(dev);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(dev);
++#else
 +		__assign_str(dev, dev_name(dev));
++#endif
  		memcpy(__get_dynamic_array(txh), txh, txh_len);
  	),
  	TP_printk("[%s] txdesc", __get_str(dev))
-@@ -54,7 +54,7 @@ TRACE_EVENT(brcms_txstatus,
+@@ -54,7 +58,11 @@ TRACE_EVENT(brcms_txstatus,
  		__field(u16, ackphyrxsh)
  	),
  	TP_fast_assign(
--		__assign_str(dev);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(dev);
++#else
 +		__assign_str(dev, dev_name(dev));
++#endif
  		__entry->framelen = framelen;
  		__entry->frameid = frameid;
  		__entry->status = status;
-@@ -85,7 +85,7 @@ TRACE_EVENT(brcms_ampdu_session,
+@@ -85,7 +93,11 @@ TRACE_EVENT(brcms_ampdu_session,
  		__field(u16, dma_len)
  	),
  	TP_fast_assign(
--		__assign_str(dev);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(dev);
++#else
 +		__assign_str(dev, dev_name(dev));
++#endif
  		__entry->max_ampdu_len = max_ampdu_len;
  		__entry->max_ampdu_frames = max_ampdu_frames;
  		__entry->ampdu_len = ampdu_len;
 --- a/drivers/net/wireless/intel/iwlwifi/iwl-devtrace-msg.h
 +++ b/drivers/net/wireless/intel/iwlwifi/iwl-devtrace-msg.h
-@@ -57,7 +57,7 @@ TRACE_EVENT(iwlwifi_dbg,
+@@ -57,7 +57,11 @@ TRACE_EVENT(iwlwifi_dbg,
  	),
  	TP_fast_assign(
  		__entry->level = level;
--		__assign_str(function);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(function);
++#else
 +		__assign_str(function, function);
++#endif
  		__assign_vstr(msg, vaf->fmt, vaf->va);
  	),
  	TP_printk("%s", __get_str(msg))
 --- a/drivers/net/wireless/intel/iwlwifi/iwl-devtrace.h
 +++ b/drivers/net/wireless/intel/iwlwifi/iwl-devtrace.h
-@@ -87,7 +87,7 @@ static inline void trace_ ## name(proto)
+@@ -87,7 +87,11 @@ static inline void trace_ ## name(proto)
  #endif
  
  #define DEV_ENTRY	__string(dev, dev_name(dev))
--#define DEV_ASSIGN	__assign_str(dev)
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ #define DEV_ASSIGN	__assign_str(dev)
++#else
 +#define DEV_ASSIGN	__assign_str(dev, dev_name(dev))
++#endif
  
  #include "iwl-devtrace-io.h"
  #include "iwl-devtrace-ucode.h"
 --- a/include/trace/events/qrtr.h
 +++ b/include/trace/events/qrtr.h
-@@ -102,7 +102,7 @@ TRACE_EVENT(qrtr_ns_message,
+@@ -102,7 +102,11 @@ TRACE_EVENT(qrtr_ns_message,
  	),
  
  	TP_fast_assign(
--		__assign_str(ctrl_pkt_str);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(ctrl_pkt_str);
++#else
 +		__assign_str(ctrl_pkt_str, ctrl_pkt_str);
++#endif
  		__entry->sq_node = sq_node;
  		__entry->sq_port = sq_port;
  	),
 --- a/net/mac80211/trace.h
 +++ b/net/mac80211/trace.h
-@@ -33,7 +33,7 @@
+@@ -31,9 +31,15 @@
+ #define VIF_ENTRY	__field(enum nl80211_iftype, vif_type) __field(void *, sdata)	\
+ 			__field(bool, p2p)						\
  			__string(vif_name, sdata->name)
++#if LINUX_VERSION_IS_GEQ(6,10,0)
  #define VIF_ASSIGN	__entry->vif_type = sdata->vif.type; __entry->sdata = sdata;	\
  			__entry->p2p = sdata->vif.p2p;					\
--			__assign_str(vif_name)
+ 			__assign_str(vif_name)
++#else
++#define VIF_ASSIGN	__entry->vif_type = sdata->vif.type; __entry->sdata = sdata;	\
++			__entry->p2p = sdata->vif.p2p;					\
 +			__assign_str(vif_name, sdata->name)
++#endif
  #define VIF_PR_FMT	" vif:%s(%d%s)"
  #define VIF_PR_ARG	__get_str(vif_name), __entry->vif_type, __entry->p2p ? "/p2p" : ""
  
 --- a/net/wireless/trace.h
 +++ b/net/wireless/trace.h
-@@ -446,7 +446,7 @@ TRACE_EVENT(rdev_add_virtual_intf,
+@@ -446,7 +446,11 @@ TRACE_EVENT(rdev_add_virtual_intf,
  	),
  	TP_fast_assign(
  		WIPHY_ASSIGN;
--		__assign_str(vir_intf_name);
++#if LINUX_VERSION_IS_GEQ(6,10,0)
+ 		__assign_str(vir_intf_name);
++#else
 +		__assign_str(vir_intf_name, name ? name : "<noname>");
++#endif
  		__entry->type = type;
  	),
  	TP_printk(WIPHY_PR_FMT ", virtual intf name: %s, type: %d",
diff --git a/package/kernel/mac80211/patches/build/210-wireless_netns_local_backport.patch b/package/kernel/mac80211/patches/build/210-wireless_netns_local_backport.patch
index 9b0e95e845..031cc183ca 100644
--- a/package/kernel/mac80211/patches/build/210-wireless_netns_local_backport.patch
+++ b/package/kernel/mac80211/patches/build/210-wireless_netns_local_backport.patch
@@ -1,6 +1,6 @@
 --- a/net/wireless/core.c
 +++ b/net/wireless/core.c
-@@ -165,11 +165,15 @@ int cfg80211_switch_netns(struct cfg8021
+@@ -162,11 +162,15 @@ int cfg80211_switch_netns(struct cfg8021
  	list_for_each_entry(wdev, &rdev->wiphy.wdev_list, list) {
  		if (!wdev->netdev)
  			continue;
@@ -16,7 +16,7 @@
  	}
  
  	if (err) {
-@@ -181,11 +185,15 @@ int cfg80211_switch_netns(struct cfg8021
+@@ -178,11 +182,15 @@ int cfg80211_switch_netns(struct cfg8021
  						     list) {
  			if (!wdev->netdev)
  				continue;
@@ -32,7 +32,7 @@
  		}
  
  		return err;
-@@ -1518,7 +1526,9 @@ static int cfg80211_netdev_notifier_call
+@@ -1520,7 +1528,9 @@ static int cfg80211_netdev_notifier_call
  		SET_NETDEV_DEVTYPE(dev, &wiphy_type);
  		wdev->netdev = dev;
  		/* can only change netns with wiphy */
diff --git a/package/kernel/mac80211/patches/build/220-brcmfmac_usb_driver_backport.patch b/package/kernel/mac80211/patches/build/220-brcmfmac_usb_driver_backport.patch
index 25dab46905..1a093a77d9 100644
--- a/package/kernel/mac80211/patches/build/220-brcmfmac_usb_driver_backport.patch
+++ b/package/kernel/mac80211/patches/build/220-brcmfmac_usb_driver_backport.patch
@@ -1,6 +1,6 @@
 --- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/usb.c
 +++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/usb.c
-@@ -1574,7 +1574,11 @@ static int brcmf_usb_reset_device(struct
+@@ -1579,7 +1579,11 @@ static int brcmf_usb_reset_device(struct
  
  void brcmf_usb_exit(void)
  {
diff --git a/package/kernel/mac80211/patches/build/230-fix-init_vqs-build-error-on-kernel-6.6.patch b/package/kernel/mac80211/patches/build/230-fix-init_vqs-build-error-on-kernel-6.6.patch
index 4b0fe6003f..73a082a10c 100644
--- a/package/kernel/mac80211/patches/build/230-fix-init_vqs-build-error-on-kernel-6.6.patch
+++ b/package/kernel/mac80211/patches/build/230-fix-init_vqs-build-error-on-kernel-6.6.patch
@@ -1,6 +1,6 @@
 --- a/drivers/net/wireless/virtual/mac80211_hwsim.c
 +++ b/drivers/net/wireless/virtual/mac80211_hwsim.c
-@@ -6629,6 +6629,7 @@ static void hwsim_virtio_rx_done(struct
+@@ -6670,6 +6670,7 @@ static void hwsim_virtio_rx_done(struct
  
  static int init_vqs(struct virtio_device *vdev)
  {
@@ -8,7 +8,7 @@
  	struct virtqueue_info vqs_info[HWSIM_NUM_VQS] = {
  		[HWSIM_VQ_TX] = { "tx", hwsim_virtio_tx_done },
  		[HWSIM_VQ_RX] = { "rx", hwsim_virtio_rx_done },
-@@ -6636,6 +6637,19 @@ static int init_vqs(struct virtio_device
+@@ -6677,6 +6678,19 @@ static int init_vqs(struct virtio_device
  
  	return virtio_find_vqs(vdev, HWSIM_NUM_VQS,
  			       hwsim_vqs, vqs_info, NULL);
diff --git a/package/kernel/mac80211/patches/build/240-realtek-rtw88-BH-workqueue.patch b/package/kernel/mac80211/patches/build/240-realtek-rtw88-BH-workqueue.patch
new file mode 100644
index 0000000000..0fb34e83cb
--- /dev/null
+++ b/package/kernel/mac80211/patches/build/240-realtek-rtw88-BH-workqueue.patch
@@ -0,0 +1,14 @@
+--- a/drivers/net/wireless/realtek/rtw88/usb.c
++++ b/drivers/net/wireless/realtek/rtw88/usb.c
+@@ -909,7 +909,11 @@ static int rtw_usb_init_rx(struct rtw_de
+ 	struct sk_buff *rx_skb;
+ 	int i;
+ 
++#if LINUX_VERSION_IS_GEQ(6,9,0)
+ 	rtwusb->rxwq = alloc_workqueue("rtw88_usb: rx wq", WQ_BH, 0);
++#else
++	rtwusb->rxwq = create_singlethread_workqueue("rtw88_usb: rx wq");
++#endif
+ 	if (!rtwusb->rxwq) {
+ 		rtw_err(rtwdev, "failed to create RX work queue\n");
+ 		return -ENOMEM;
diff --git a/package/kernel/mac80211/patches/build/360-change-read_new-to-read.patch b/package/kernel/mac80211/patches/build/360-change-read_new-to-read.patch
new file mode 100644
index 0000000000..6387a8990f
--- /dev/null
+++ b/package/kernel/mac80211/patches/build/360-change-read_new-to-read.patch
@@ -0,0 +1,20 @@
+--- a/drivers/net/wireless/ti/wlcore/sysfs.c
++++ b/drivers/net/wireless/ti/wlcore/sysfs.c
+@@ -88,7 +88,7 @@ static ssize_t hw_pg_ver_show(struct dev
+ static DEVICE_ATTR_RO(hw_pg_ver);
+ 
+ static ssize_t wl1271_sysfs_read_fwlog(struct file *filp, struct kobject *kobj,
+-				       const struct bin_attribute *bin_attr,
++				       struct bin_attribute *bin_attr,
+ 				       char *buffer, loff_t pos, size_t count)
+ {
+ 	struct device *dev = kobj_to_dev(kobj);
+@@ -121,7 +121,7 @@ static ssize_t wl1271_sysfs_read_fwlog(s
+ 
+ static const struct bin_attribute fwlog_attr = {
+ 	.attr = { .name = "fwlog", .mode = 0400 },
+-	.read_new = wl1271_sysfs_read_fwlog,
++	.read = wl1271_sysfs_read_fwlog,
+ };
+ 
+ int wlcore_sysfs_init(struct wl1271 *wl)
diff --git a/package/kernel/mac80211/patches/build/400-restore-old-debugfs_fops.patch b/package/kernel/mac80211/patches/build/400-restore-old-debugfs_fops.patch
new file mode 100644
index 0000000000..14a707b7ef
--- /dev/null
+++ b/package/kernel/mac80211/patches/build/400-restore-old-debugfs_fops.patch
@@ -0,0 +1,252 @@
+--- a/drivers/net/wireless/ath/carl9170/debug.c
++++ b/drivers/net/wireless/ath/carl9170/debug.c
+@@ -54,6 +54,7 @@ struct carl9170_debugfs_fops {
+ 	char *(*read)(struct ar9170 *ar, char *buf, size_t bufsize,
+ 		      ssize_t *len);
+ 	ssize_t (*write)(struct ar9170 *aru, const char *buf, size_t size);
++	const struct file_operations fops;
+ 
+ 	enum carl9170_device_state req_dev_state;
+ };
+@@ -61,7 +62,7 @@ struct carl9170_debugfs_fops {
+ static ssize_t carl9170_debugfs_read(struct file *file, char __user *userbuf,
+ 				     size_t count, loff_t *ppos)
+ {
+-	const struct carl9170_debugfs_fops *dfops;
++	struct carl9170_debugfs_fops *dfops;
+ 	struct ar9170 *ar;
+ 	char *buf = NULL, *res_buf = NULL;
+ 	ssize_t ret = 0;
+@@ -74,7 +75,8 @@ static ssize_t carl9170_debugfs_read(str
+ 
+ 	if (!ar)
+ 		return -ENODEV;
+-	dfops = debugfs_get_aux(file);
++	dfops = container_of(debugfs_real_fops(file),
++			     struct carl9170_debugfs_fops, fops);
+ 
+ 	if (!dfops->read)
+ 		return -ENOSYS;
+@@ -111,7 +113,7 @@ out_free:
+ static ssize_t carl9170_debugfs_write(struct file *file,
+ 	const char __user *userbuf, size_t count, loff_t *ppos)
+ {
+-	const struct carl9170_debugfs_fops *dfops;
++	struct carl9170_debugfs_fops *dfops;
+ 	struct ar9170 *ar;
+ 	char *buf = NULL;
+ 	int err = 0;
+@@ -126,7 +128,8 @@ static ssize_t carl9170_debugfs_write(st
+ 
+ 	if (!ar)
+ 		return -ENODEV;
+-	dfops = debugfs_get_aux(file);
++	dfops = container_of(debugfs_real_fops(file),
++			     struct carl9170_debugfs_fops, fops);
+ 
+ 	if (!dfops->write)
+ 		return -ENOSYS;
+@@ -162,11 +165,6 @@ out_free:
+ 	return err;
+ }
+ 
+-static struct debugfs_short_fops debugfs_fops = {
+-	.read	= carl9170_debugfs_read,
+-	.write	= carl9170_debugfs_write,
+-};
+-
+ #define __DEBUGFS_DECLARE_FILE(name, _read, _write, _read_bufsize,	\
+ 			       _attr, _dstate)				\
+ static const struct carl9170_debugfs_fops carl_debugfs_##name ##_ops = {\
+@@ -175,6 +173,12 @@ static const struct carl9170_debugfs_fop
+ 	.write = _write,						\
+ 	.attr = _attr,							\
+ 	.req_dev_state = _dstate,					\
++	.fops = {							\
++		.open	= simple_open,					\
++		.read	= carl9170_debugfs_read,			\
++		.write	= carl9170_debugfs_write,			\
++		.owner	= THIS_MODULE					\
++	},								\
+ }
+ 
+ #define DEBUGFS_DECLARE_FILE(name, _read, _write, _read_bufsize, _attr)	\
+@@ -812,9 +816,9 @@ void carl9170_debugfs_register(struct ar
+ 		ar->hw->wiphy->debugfsdir);
+ 
+ #define DEBUGFS_ADD(name)						\
+-	debugfs_create_file_aux(#name, carl_debugfs_##name ##_ops.attr,	\
+-			    ar->debug_dir, ar, &carl_debugfs_##name ## _ops, \
+-			    &debugfs_fops)
++	debugfs_create_file(#name, carl_debugfs_##name ##_ops.attr,	\
++			    ar->debug_dir, ar,				\
++			    &carl_debugfs_##name ## _ops.fops)
+ 
+ 	DEBUGFS_ADD(usb_tx_anch_urbs);
+ 	DEBUGFS_ADD(usb_rx_pool_urbs);
+--- a/drivers/net/wireless/broadcom/b43/debugfs.c
++++ b/drivers/net/wireless/broadcom/b43/debugfs.c
+@@ -30,6 +30,7 @@ static struct dentry *rootdir;
+ struct b43_debugfs_fops {
+ 	ssize_t (*read)(struct b43_wldev *dev, char *buf, size_t bufsize);
+ 	int (*write)(struct b43_wldev *dev, const char *buf, size_t count);
++	struct file_operations fops;
+ 	/* Offset of struct b43_dfs_file in struct b43_dfsentry */
+ 	size_t file_struct_offset;
+ };
+@@ -490,7 +491,7 @@ static ssize_t b43_debugfs_read(struct f
+ 				size_t count, loff_t *ppos)
+ {
+ 	struct b43_wldev *dev;
+-	const struct b43_debugfs_fops *dfops;
++	struct b43_debugfs_fops *dfops;
+ 	struct b43_dfs_file *dfile;
+ 	ssize_t ret;
+ 	char *buf;
+@@ -510,7 +511,8 @@ static ssize_t b43_debugfs_read(struct f
+ 		goto out_unlock;
+ 	}
+ 
+-	dfops = debugfs_get_aux(file);
++	dfops = container_of(debugfs_real_fops(file),
++			     struct b43_debugfs_fops, fops);
+ 	if (!dfops->read) {
+ 		err = -ENOSYS;
+ 		goto out_unlock;
+@@ -553,7 +555,7 @@ static ssize_t b43_debugfs_write(struct
+ 				 size_t count, loff_t *ppos)
+ {
+ 	struct b43_wldev *dev;
+-	const struct b43_debugfs_fops *dfops;
++	struct b43_debugfs_fops *dfops;
+ 	char *buf;
+ 	int err = 0;
+ 
+@@ -571,7 +573,8 @@ static ssize_t b43_debugfs_write(struct
+ 		goto out_unlock;
+ 	}
+ 
+-	dfops = debugfs_get_aux(file);
++	dfops = container_of(debugfs_real_fops(file),
++			     struct b43_debugfs_fops, fops);
+ 	if (!dfops->write) {
+ 		err = -ENOSYS;
+ 		goto out_unlock;
+@@ -599,16 +602,16 @@ out_unlock:
+ }
+ 
+ 
+-static struct debugfs_short_fops debugfs_ops = {
+-	.read	= b43_debugfs_read,
+-	.write	= b43_debugfs_write,
+-	.llseek = generic_file_llseek,
+-};
+-
+ #define B43_DEBUGFS_FOPS(name, _read, _write)			\
+ 	static struct b43_debugfs_fops fops_##name = {		\
+ 		.read	= _read,				\
+ 		.write	= _write,				\
++		.fops	= {					\
++			.open	= simple_open,			\
++			.read	= b43_debugfs_read,		\
++			.write	= b43_debugfs_write,		\
++			.llseek = generic_file_llseek,		\
++		},						\
+ 		.file_struct_offset = offsetof(struct b43_dfsentry, \
+ 					       file_##name),	\
+ 	}
+@@ -700,9 +703,9 @@ void b43_debugfs_add_device(struct b43_w
+ 
+ #define ADD_FILE(name, mode)	\
+ 	do {							\
+-		debugfs_create_file_aux(__stringify(name),	\
++		debugfs_create_file(__stringify(name),		\
+ 				mode, e->subdir, dev,		\
+-				&fops_##name, &debugfs_ops);	\
++				&fops_##name.fops);		\
+ 	} while (0)
+ 
+ 
+--- a/drivers/net/wireless/broadcom/b43legacy/debugfs.c
++++ b/drivers/net/wireless/broadcom/b43legacy/debugfs.c
+@@ -31,6 +31,7 @@ static struct dentry *rootdir;
+ struct b43legacy_debugfs_fops {
+ 	ssize_t (*read)(struct b43legacy_wldev *dev, char *buf, size_t bufsize);
+ 	int (*write)(struct b43legacy_wldev *dev, const char *buf, size_t count);
++	struct file_operations fops;
+ 	/* Offset of struct b43legacy_dfs_file in struct b43legacy_dfsentry */
+ 	size_t file_struct_offset;
+ 	/* Take wl->irq_lock before calling read/write? */
+@@ -187,7 +188,7 @@ static ssize_t b43legacy_debugfs_read(st
+ 				size_t count, loff_t *ppos)
+ {
+ 	struct b43legacy_wldev *dev;
+-	const struct b43legacy_debugfs_fops *dfops;
++	struct b43legacy_debugfs_fops *dfops;
+ 	struct b43legacy_dfs_file *dfile;
+ 	ssize_t ret;
+ 	char *buf;
+@@ -207,7 +208,8 @@ static ssize_t b43legacy_debugfs_read(st
+ 		goto out_unlock;
+ 	}
+ 
+-	dfops = debugfs_get_aux(file);
++	dfops = container_of(debugfs_real_fops(file),
++			     struct b43legacy_debugfs_fops, fops);
+ 	if (!dfops->read) {
+ 		err = -ENOSYS;
+ 		goto out_unlock;
+@@ -255,7 +257,7 @@ static ssize_t b43legacy_debugfs_write(s
+ 				 size_t count, loff_t *ppos)
+ {
+ 	struct b43legacy_wldev *dev;
+-	const struct b43legacy_debugfs_fops *dfops;
++	struct b43legacy_debugfs_fops *dfops;
+ 	char *buf;
+ 	int err = 0;
+ 
+@@ -273,7 +275,8 @@ static ssize_t b43legacy_debugfs_write(s
+ 		goto out_unlock;
+ 	}
+ 
+-	dfops = debugfs_get_aux(file);
++	dfops = container_of(debugfs_real_fops(file),
++			     struct b43legacy_debugfs_fops, fops);
+ 	if (!dfops->write) {
+ 		err = -ENOSYS;
+ 		goto out_unlock;
+@@ -305,16 +308,17 @@ out_unlock:
+ 	return err ? err : count;
+ }
+ 
+-static struct debugfs_short_fops debugfs_ops = {
+-	.read	= b43legacy_debugfs_read,
+-	.write	= b43legacy_debugfs_write,
+-	.llseek = generic_file_llseek
+-};
+ 
+ #define B43legacy_DEBUGFS_FOPS(name, _read, _write, _take_irqlock)	\
+ 	static struct b43legacy_debugfs_fops fops_##name = {		\
+ 		.read	= _read,				\
+ 		.write	= _write,				\
++		.fops	= {					\
++			.open	= simple_open,				\
++			.read	= b43legacy_debugfs_read,		\
++			.write	= b43legacy_debugfs_write,		\
++			.llseek = generic_file_llseek,			\
++		},						\
+ 		.file_struct_offset = offsetof(struct b43legacy_dfsentry, \
+ 					       file_##name),	\
+ 		.take_irqlock	= _take_irqlock,		\
+@@ -382,9 +386,9 @@ void b43legacy_debugfs_add_device(struct
+ 
+ #define ADD_FILE(name, mode)	\
+ 	do {							\
+-		debugfs_create_file_aux(__stringify(name), mode,	\
++		debugfs_create_file(__stringify(name), mode,	\
+ 				    e->subdir, dev,		\
+-				    &fops_##name, &debugfs_ops);	\
++				    &fops_##name.fops);		\
+ 	} while (0)
+ 
+ 
diff --git a/package/kernel/mac80211/patches/build/410-mac80211-convert-short-fops-to-debugfs-files.patch b/package/kernel/mac80211/patches/build/410-mac80211-convert-short-fops-to-debugfs-files.patch
new file mode 100644
index 0000000000..dcaa086cf5
--- /dev/null
+++ b/package/kernel/mac80211/patches/build/410-mac80211-convert-short-fops-to-debugfs-files.patch
@@ -0,0 +1,210 @@
+--- a/net/mac80211/debugfs.c
++++ b/net/mac80211/debugfs.c
+@@ -42,8 +42,9 @@ static ssize_t name## _read(struct file
+ }
+ 
+ #define DEBUGFS_READONLY_FILE_OPS(name)			\
+-static const struct debugfs_short_fops name## _ops = {				\
++static const struct file_operations name## _ops = {			\
+ 	.read = name## _read,						\
++	.open = simple_open,						\
+ 	.llseek = generic_file_llseek,					\
+ };
+ 
+@@ -141,9 +142,10 @@ static ssize_t aqm_write(struct file *fi
+ 	return -EINVAL;
+ }
+ 
+-static const struct debugfs_short_fops aqm_ops = {
++static const struct file_operations aqm_ops = {
+ 	.write = aqm_write,
+ 	.read = aqm_read,
++	.open = simple_open,
+ 	.llseek = default_llseek,
+ };
+ 
+@@ -192,9 +194,10 @@ static ssize_t airtime_flags_write(struc
+ 	return count;
+ }
+ 
+-static const struct debugfs_short_fops airtime_flags_ops = {
++static const struct file_operations airtime_flags_ops = {
+ 	.write = airtime_flags_write,
+ 	.read = airtime_flags_read,
++	.open = simple_open,
+ 	.llseek = default_llseek,
+ };
+ 
+@@ -222,8 +225,9 @@ static ssize_t aql_pending_read(struct f
+ 				       buf, len);
+ }
+ 
+-static const struct debugfs_short_fops aql_pending_ops = {
++static const struct file_operations aql_pending_ops = {
+ 	.read = aql_pending_read,
++	.open = simple_open,
+ 	.llseek = default_llseek,
+ };
+ 
+@@ -301,9 +305,10 @@ static ssize_t aql_txq_limit_write(struc
+ 	return count;
+ }
+ 
+-static const struct debugfs_short_fops aql_txq_limit_ops = {
++static const struct file_operations aql_txq_limit_ops = {
+ 	.write = aql_txq_limit_write,
+ 	.read = aql_txq_limit_read,
++	.open = simple_open,
+ 	.llseek = default_llseek,
+ };
+ 
+@@ -350,9 +355,10 @@ static ssize_t aql_enable_write(struct f
+ 	return count;
+ }
+ 
+-static const struct debugfs_short_fops aql_enable_ops = {
++static const struct file_operations aql_enable_ops = {
+ 	.write = aql_enable_write,
+ 	.read = aql_enable_read,
++	.open = simple_open,
+ 	.llseek = default_llseek,
+ };
+ 
+@@ -400,9 +406,10 @@ static ssize_t force_tx_status_write(str
+ 	return count;
+ }
+ 
+-static const struct debugfs_short_fops force_tx_status_ops = {
++static const struct file_operations force_tx_status_ops = {
+ 	.write = force_tx_status_write,
+ 	.read = force_tx_status_read,
++	.open = simple_open,
+ 	.llseek = default_llseek,
+ };
+ 
+@@ -427,8 +434,9 @@ static ssize_t reset_write(struct file *
+ 	return count;
+ }
+ 
+-static const struct debugfs_short_fops reset_ops = {
++static const struct file_operations reset_ops = {
+ 	.write = reset_write,
++	.open = simple_open,
+ 	.llseek = noop_llseek,
+ };
+ #endif
+@@ -656,8 +664,9 @@ static ssize_t stats_ ##name## _read(str
+ 				      print_devstats_##name);		\
+ }									\
+ 									\
+-static const struct debugfs_short_fops stats_ ##name## _ops = {			\
++static const struct file_operations stats_ ##name## _ops = {		\
+ 	.read = stats_ ##name## _read,					\
++	.open = simple_open,						\
+ 	.llseek = generic_file_llseek,					\
+ };
+ 
+--- a/net/mac80211/debugfs_key.c
++++ b/net/mac80211/debugfs_key.c
+@@ -26,15 +26,17 @@ static ssize_t key_##name##_read(struct
+ #define KEY_READ_X(name) KEY_READ(name, name, "0x%x\n")
+ 
+ #define KEY_OPS(name)							\
+-static const struct debugfs_short_fops key_ ##name## _ops = {		\
++static const struct file_operations key_ ##name## _ops = {		\
+ 	.read = key_##name##_read,					\
++	.open = simple_open,						\
+ 	.llseek = generic_file_llseek,					\
+ }
+ 
+ #define KEY_OPS_W(name)							\
+-static const struct debugfs_short_fops key_ ##name## _ops = {		\
++static const struct file_operations key_ ##name## _ops = {		\
+ 	.read = key_##name##_read,					\
+ 	.write = key_##name##_write,					\
++	.open = simple_open,						\
+ 	.llseek = generic_file_llseek,					\
+ }
+ 
+@@ -47,8 +49,9 @@ static const struct debugfs_short_fops k
+ #define KEY_CONF_READ_D(name) KEY_CONF_READ(name, "%d\n")
+ 
+ #define KEY_CONF_OPS(name)						\
+-static const struct debugfs_short_fops key_ ##name## _ops = {		\
++static const struct file_operations key_ ##name## _ops = {		\
+ 	.read = key_conf_##name##_read,					\
++	.open = simple_open,						\
+ 	.llseek = generic_file_llseek,					\
+ }
+ 
+--- a/net/mac80211/debugfs_netdev.c
++++ b/net/mac80211/debugfs_netdev.c
+@@ -221,9 +221,10 @@ static ssize_t ieee80211_if_fmt_##name(
+ }
+ 
+ #define _IEEE80211_IF_FILE_OPS(name, _read, _write)			\
+-static const struct debugfs_short_fops name##_ops = {				\
++static const struct file_operations name##_ops = {			\
+ 	.read = (_read),						\
+ 	.write = (_write),						\
++	.open = simple_open,						\
+ 	.llseek = generic_file_llseek,					\
+ }
+ 
+--- a/net/mac80211/debugfs_sta.c
++++ b/net/mac80211/debugfs_sta.c
+@@ -30,15 +30,17 @@ static ssize_t sta_ ##name## _read(struc
+ #define STA_READ_D(name, field) STA_READ(name, field, "%d\n")
+ 
+ #define STA_OPS(name)							\
+-static const struct debugfs_short_fops sta_ ##name## _ops = {		\
++static const struct file_operations sta_ ##name## _ops = {		\
+ 	.read = sta_##name##_read,					\
++	.open = simple_open,						\
+ 	.llseek = generic_file_llseek,					\
+ }
+ 
+ #define STA_OPS_RW(name)						\
+-static const struct debugfs_short_fops sta_ ##name## _ops = {		\
++static const struct file_operations sta_ ##name## _ops = {		\
+ 	.read = sta_##name##_read,					\
+ 	.write = sta_##name##_write,					\
++	.open = simple_open,						\
+ 	.llseek = generic_file_llseek,					\
+ }
+ 
+@@ -448,8 +450,9 @@ STA_OPS_RW(agg_status);
+ 
+ /* link sta attributes */
+ #define LINK_STA_OPS(name)						\
+-static const struct debugfs_short_fops link_sta_ ##name## _ops = {		\
++static const struct file_operations link_sta_ ##name## _ops = {		\
+ 	.read = link_sta_##name##_read,					\
++	.open = simple_open,						\
+ 	.llseek = generic_file_llseek,					\
+ }
+ 
+--- a/net/mac80211/rate.c
++++ b/net/mac80211/rate.c
+@@ -249,8 +249,9 @@ static ssize_t rcname_read(struct file *
+ 				       ref->ops->name, len);
+ }
+ 
+-const struct debugfs_short_fops rcname_ops = {
++const struct file_operations rcname_ops = {
+ 	.read = rcname_read,
++	.open = simple_open,
+ 	.llseek = default_llseek,
+ };
+ #endif
+--- a/net/mac80211/rate.h
++++ b/net/mac80211/rate.h
+@@ -62,7 +62,7 @@ static inline void rate_control_add_sta_
+ #endif
+ }
+ 
+-extern const struct debugfs_short_fops rcname_ops;
++extern const struct file_operations rcname_ops;
+ 
+ static inline void rate_control_add_debugfs(struct ieee80211_local *local)
+ {
diff --git a/package/kernel/mac80211/patches/mwl/950-mwifiex-Print-stringified-name-of-command-in-error-l.patch b/package/kernel/mac80211/patches/mwl/950-mwifiex-Print-stringified-name-of-command-in-error-l.patch
index 93a213265c..1a3be12de0 100644
--- a/package/kernel/mac80211/patches/mwl/950-mwifiex-Print-stringified-name-of-command-in-error-l.patch
+++ b/package/kernel/mac80211/patches/mwl/950-mwifiex-Print-stringified-name-of-command-in-error-l.patch
@@ -152,7 +152,7 @@ Signed-off-by: Pali Rohár <pali@kernel.org>
  
 --- a/drivers/net/wireless/marvell/mwifiex/main.h
 +++ b/drivers/net/wireless/marvell/mwifiex/main.h
-@@ -1100,6 +1100,8 @@ void mwifiex_cancel_all_pending_cmd(stru
+@@ -1096,6 +1096,8 @@ void mwifiex_cancel_all_pending_cmd(stru
  void mwifiex_cancel_pending_scan_cmd(struct mwifiex_adapter *adapter);
  void mwifiex_cancel_scan(struct mwifiex_adapter *adapter);
  
diff --git a/package/kernel/mac80211/patches/rt2x00/110-wifi-rt2x00-fix-remove-callback-type-mismatch.patch b/package/kernel/mac80211/patches/rt2x00/110-wifi-rt2x00-fix-remove-callback-type-mismatch.patch
new file mode 100644
index 0000000000..0c9bb76cb5
--- /dev/null
+++ b/package/kernel/mac80211/patches/rt2x00/110-wifi-rt2x00-fix-remove-callback-type-mismatch.patch
@@ -0,0 +1,42 @@
+From: Felix Fietkau <nbd@nbd.name>
+Date: Sun, 6 Jul 2025 11:15:13 +0200
+Subject: [PATCH] wifi: rt2x00: fix remove callback type mismatch
+
+The function is used as remove callback for a platform driver.
+It was missed during the conversion from int to void
+
+Fixes: 0edb555a65d1 ("platform: Make platform_driver::remove() return void")
+Signed-off-by: Felix Fietkau <nbd@nbd.name>
+---
+
+--- a/drivers/net/wireless/ralink/rt2x00/rt2x00soc.c
++++ b/drivers/net/wireless/ralink/rt2x00/rt2x00soc.c
+@@ -108,7 +108,7 @@ exit_free_device:
+ }
+ EXPORT_SYMBOL_GPL(rt2x00soc_probe);
+ 
+-int rt2x00soc_remove(struct platform_device *pdev)
++void rt2x00soc_remove(struct platform_device *pdev)
+ {
+ 	struct ieee80211_hw *hw = platform_get_drvdata(pdev);
+ 	struct rt2x00_dev *rt2x00dev = hw->priv;
+@@ -119,8 +119,6 @@ int rt2x00soc_remove(struct platform_dev
+ 	rt2x00lib_remove_dev(rt2x00dev);
+ 	rt2x00soc_free_reg(rt2x00dev);
+ 	ieee80211_free_hw(hw);
+-
+-	return 0;
+ }
+ EXPORT_SYMBOL_GPL(rt2x00soc_remove);
+ 
+--- a/drivers/net/wireless/ralink/rt2x00/rt2x00soc.h
++++ b/drivers/net/wireless/ralink/rt2x00/rt2x00soc.h
+@@ -17,7 +17,7 @@
+  * SoC driver handlers.
+  */
+ int rt2x00soc_probe(struct platform_device *pdev, const struct rt2x00_ops *ops);
+-int rt2x00soc_remove(struct platform_device *pdev);
++void rt2x00soc_remove(struct platform_device *pdev);
+ #ifdef CONFIG_PM
+ int rt2x00soc_suspend(struct platform_device *pdev, pm_message_t state);
+ int rt2x00soc_resume(struct platform_device *pdev);
diff --git a/package/kernel/mac80211/patches/rt2x00/602-01-wifi-rt2x00-Add-support-for-loading-EEPROM-from-user.patch b/package/kernel/mac80211/patches/rt2x00/602-01-wifi-rt2x00-Add-support-for-loading-EEPROM-from-user.patch
index f3c8ddd4f6..957da81d05 100644
--- a/package/kernel/mac80211/patches/rt2x00/602-01-wifi-rt2x00-Add-support-for-loading-EEPROM-from-user.patch
+++ b/package/kernel/mac80211/patches/rt2x00/602-01-wifi-rt2x00-Add-support-for-loading-EEPROM-from-user.patch
@@ -21,7 +21,7 @@ Signed-off-by: Christian Marangi <ansuelsmth@gmail.com>
 
 --- a/local-symbols
 +++ b/local-symbols
-@@ -339,6 +339,7 @@ RT2X00_LIB_FIRMWARE=
+@@ -334,6 +334,7 @@ RT2X00_LIB_FIRMWARE=
  RT2X00_LIB_CRYPTO=
  RT2X00_LIB_LEDS=
  RT2X00_LIB_DEBUGFS=
@@ -108,6 +108,20 @@ Signed-off-by: Christian Marangi <ansuelsmth@gmail.com>
  
  	/*
  	 * Capabilities
+@@ -1505,4 +1506,13 @@ void rt2x00lib_remove_dev(struct rt2x00_
+ int rt2x00lib_suspend(struct rt2x00_dev *rt2x00dev);
+ int rt2x00lib_resume(struct rt2x00_dev *rt2x00dev);
+ 
++/*
++ * EEPROM file handlers.
++ */
++#ifdef CPTCFG_RT2X00_LIB_EEPROM
++int rt2x00lib_read_eeprom(struct rt2x00_dev *rt2x00dev);
++#else
++#define rt2x00lib_read_eeprom	NULL
++#endif /* CPTCFG_RT2X00_LIB_EEPROM */
++ 
+ #endif /* RT2X00_H */
 --- /dev/null
 +++ b/drivers/net/wireless/ralink/rt2x00/rt2x00eeprom.c
 @@ -0,0 +1,77 @@
@@ -210,19 +224,3 @@ Signed-off-by: Christian Marangi <ansuelsmth@gmail.com>
  	if (rt2800pci_efuse_detect(rt2x00dev))
  		retval = rt2800pci_read_eeprom_efuse(rt2x00dev);
  	else
---- a/drivers/net/wireless/ralink/rt2x00/rt2800lib.h
-+++ b/drivers/net/wireless/ralink/rt2x00/rt2800lib.h
-@@ -270,4 +270,13 @@ void rt2800_get_txwi_rxwi_size(struct rt
- 			       unsigned short *rxwi_size);
- void rt2800_pre_reset_hw(struct rt2x00_dev *rt2x00dev);
- 
-+/*
-+ * EEPROM file handlers.
-+ */
-+#ifdef CPTCFG_RT2X00_LIB_EEPROM
-+int rt2x00lib_read_eeprom(struct rt2x00_dev *rt2x00dev);
-+#else
-+#define rt2x00lib_read_eeprom	NULL
-+#endif /* CPTCFG_RT2X00_LIB_EEPROM */
-+
- #endif /* RT2800LIB_H */
diff --git a/package/kernel/mac80211/patches/rt2x00/609-rt2x00-make-wmac-loadable-via-OF-on-rt288x-305x-SoC.patch b/package/kernel/mac80211/patches/rt2x00/609-rt2x00-make-wmac-loadable-via-OF-on-rt288x-305x-SoC.patch
index de2cf2dca7..570b18d442 100644
--- a/package/kernel/mac80211/patches/rt2x00/609-rt2x00-make-wmac-loadable-via-OF-on-rt288x-305x-SoC.patch
+++ b/package/kernel/mac80211/patches/rt2x00/609-rt2x00-make-wmac-loadable-via-OF-on-rt288x-305x-SoC.patch
@@ -13,10 +13,11 @@ Signed-off-by: John Crispin <blogic@openwrt.org>
 
 --- a/drivers/net/wireless/ralink/rt2x00/rt2800soc.c
 +++ b/drivers/net/wireless/ralink/rt2x00/rt2800soc.c
-@@ -230,10 +230,17 @@ static int rt2800soc_probe(struct platfo
- 	return rt2x00soc_probe(pdev, &rt2800soc_ops);
+@@ -237,10 +237,18 @@ static int bp_rt2x00soc_remove(struct pl
+ 	return 0;
  }
- 
+ #endif
++
 +static const struct of_device_id rt2880_wmac_match[] = {
 +	{ .compatible = "ralink,rt2880-wmac" },
 +	{},
@@ -30,4 +31,4 @@ Signed-off-by: John Crispin <blogic@openwrt.org>
 +		.of_match_table	= rt2880_wmac_match,
  	},
  	.probe		= rt2800soc_probe,
- 	.remove		= rt2x00soc_remove,
+ #if LINUX_VERSION_IS_GEQ(6,11,0)
diff --git a/package/kernel/mac80211/patches/rt2x00/610-rt2x00-change-led-polarity-from-OF.patch b/package/kernel/mac80211/patches/rt2x00/610-rt2x00-change-led-polarity-from-OF.patch
index 4a819039da..3adf74faa2 100644
--- a/package/kernel/mac80211/patches/rt2x00/610-rt2x00-change-led-polarity-from-OF.patch
+++ b/package/kernel/mac80211/patches/rt2x00/610-rt2x00-change-led-polarity-from-OF.patch
@@ -8,7 +8,7 @@
  
  #include "rt2x00.h"
  #include "rt2800lib.h"
-@@ -11282,6 +11283,17 @@ static int rt2800_init_eeprom(struct rt2
+@@ -11276,6 +11277,17 @@ static int rt2800_init_eeprom(struct rt2
  	rt2800_init_led(rt2x00dev, &rt2x00dev->led_assoc, LED_TYPE_ASSOC);
  	rt2800_init_led(rt2x00dev, &rt2x00dev->led_qual, LED_TYPE_QUALITY);
  
diff --git a/package/kernel/mac80211/patches/rt2x00/620-01-rt2x00-respect-rt2800-hardware-TX-queue-index.patch b/package/kernel/mac80211/patches/rt2x00/620-01-rt2x00-respect-rt2800-hardware-TX-queue-index.patch
index e2c75979df..1d88ac7c60 100644
--- a/package/kernel/mac80211/patches/rt2x00/620-01-rt2x00-respect-rt2800-hardware-TX-queue-index.patch
+++ b/package/kernel/mac80211/patches/rt2x00/620-01-rt2x00-respect-rt2800-hardware-TX-queue-index.patch
@@ -114,7 +114,7 @@ Signed-off-by: Shiji Yang <yangshiji66@outlook.com>
  		queue = rt2x00queue_get_tx_queue(rt2x00dev, qid);
  
  		if (unlikely(rt2x00queue_empty(queue))) {
-@@ -12188,8 +12197,9 @@ int rt2800_conf_tx(struct ieee80211_hw *
+@@ -12182,8 +12191,9 @@ int rt2800_conf_tx(struct ieee80211_hw *
  	queue = rt2x00queue_get_tx_queue(rt2x00dev, queue_idx);
  
  	/* Update WMM TXOP register */
@@ -126,7 +126,7 @@ Signed-off-by: Shiji Yang <yangshiji66@outlook.com>
  	field.bit_mask = 0xffff << field.bit_offset;
  
  	reg = rt2800_register_read(rt2x00dev, offset);
-@@ -12197,7 +12207,7 @@ int rt2800_conf_tx(struct ieee80211_hw *
+@@ -12191,7 +12201,7 @@ int rt2800_conf_tx(struct ieee80211_hw *
  	rt2800_register_write(rt2x00dev, offset, reg);
  
  	/* Update WMM registers */
@@ -135,7 +135,7 @@ Signed-off-by: Shiji Yang <yangshiji66@outlook.com>
  	field.bit_mask = 0xf << field.bit_offset;
  
  	reg = rt2800_register_read(rt2x00dev, WMM_AIFSN_CFG);
-@@ -12213,7 +12223,7 @@ int rt2800_conf_tx(struct ieee80211_hw *
+@@ -12207,7 +12217,7 @@ int rt2800_conf_tx(struct ieee80211_hw *
  	rt2800_register_write(rt2x00dev, WMM_CWMAX_CFG, reg);
  
  	/* Update EDCA registers */
diff --git a/package/kernel/mac80211/patches/rt2x00/621-01-rt2x00-always-calibrate-MT7620-when-switching-channe.patch b/package/kernel/mac80211/patches/rt2x00/621-01-rt2x00-always-calibrate-MT7620-when-switching-channe.patch
index e66fbd4369..01ae04e6e2 100644
--- a/package/kernel/mac80211/patches/rt2x00/621-01-rt2x00-always-calibrate-MT7620-when-switching-channe.patch
+++ b/package/kernel/mac80211/patches/rt2x00/621-01-rt2x00-always-calibrate-MT7620-when-switching-channe.patch
@@ -42,7 +42,7 @@ Signed-off-by: Shiji Yang <yangshiji66@outlook.com>
  	}
  	if (flags & IEEE80211_CONF_CHANGE_POWER)
  		rt2800_config_txpower(rt2x00dev, libconf->conf->chandef.chan,
-@@ -10427,15 +10438,19 @@ static void rt2800_restore_rf_bbp_rt6352
+@@ -10421,15 +10432,19 @@ static void rt2800_restore_rf_bbp_rt6352
  	}
  }
  
@@ -65,7 +65,7 @@ Signed-off-by: Shiji Yang <yangshiji66@outlook.com>
  	rt2800_rf_self_txdc_cal(rt2x00dev);
  	rt2800_rxdcoc_calibration(rt2x00dev);
  	rt2800_bw_filter_calibration(rt2x00dev, true);
-@@ -10766,9 +10781,6 @@ static void rt2800_init_rfcsr_6352(struc
+@@ -10760,9 +10775,6 @@ static void rt2800_init_rfcsr_6352(struc
  
  	rt2800_rfcsr_write_dccal(rt2x00dev, 5, 0x00);
  	rt2800_rfcsr_write_dccal(rt2x00dev, 17, 0x7C);
diff --git a/package/kernel/mac80211/patches/rt2x00/621-04-rt2x00-fix-register-operation-on-RXIQ-calibration.patch b/package/kernel/mac80211/patches/rt2x00/621-04-rt2x00-fix-register-operation-on-RXIQ-calibration.patch
index aa6f9c437c..0e0245e492 100644
--- a/package/kernel/mac80211/patches/rt2x00/621-04-rt2x00-fix-register-operation-on-RXIQ-calibration.patch
+++ b/package/kernel/mac80211/patches/rt2x00/621-04-rt2x00-fix-register-operation-on-RXIQ-calibration.patch
@@ -24,37 +24,3 @@ Signed-off-by: Shiji Yang <yangshiji66@outlook.com>
  	rt2800_bbp_write(rt2x00dev, 4, bbpval);
  
  	bbpval = rt2800_bbp_read(rt2x00dev, 21);
-@@ -8928,13 +8928,13 @@ static void rt2800_rxiq_calibration(stru
- 	for (ch_idx = 0; ch_idx < 2; ch_idx = ch_idx + 1) {
- 		if (ch_idx == 0) {
- 			rfval = rfb0r1 & (~0x3);
--			rfval = rfb0r1 | 0x1;
-+			rfval = rfval | 0x1;
- 			rt2800_rfcsr_write_bank(rt2x00dev, 0, 1, rfval);
- 			rfval = rfb0r2 & (~0x33);
--			rfval = rfb0r2 | 0x11;
-+			rfval = rfval | 0x11;
- 			rt2800_rfcsr_write_bank(rt2x00dev, 0, 2, rfval);
- 			rfval = rfb0r42 & (~0x50);
--			rfval = rfb0r42 | 0x10;
-+			rfval = rfval | 0x10;
- 			rt2800_rfcsr_write_bank(rt2x00dev, 0, 42, rfval);
- 
- 			rt2800_register_write(rt2x00dev, RF_CONTROL0, 0x00001006);
-@@ -8947,13 +8947,13 @@ static void rt2800_rxiq_calibration(stru
- 			rt2800_bbp_dcoc_write(rt2x00dev, 1, 0x00);
- 		} else {
- 			rfval = rfb0r1 & (~0x3);
--			rfval = rfb0r1 | 0x2;
-+			rfval = rfval | 0x2;
- 			rt2800_rfcsr_write_bank(rt2x00dev, 0, 1, rfval);
- 			rfval = rfb0r2 & (~0x33);
--			rfval = rfb0r2 | 0x22;
-+			rfval = rfval | 0x22;
- 			rt2800_rfcsr_write_bank(rt2x00dev, 0, 2, rfval);
- 			rfval = rfb0r42 & (~0x50);
--			rfval = rfb0r42 | 0x40;
-+			rfval = rfval | 0x40;
- 			rt2800_rfcsr_write_bank(rt2x00dev, 0, 42, rfval);
- 
- 			rt2800_register_write(rt2x00dev, RF_CONTROL0, 0x00002006);
diff --git a/package/kernel/mac80211/patches/rt2x00/622-01-rt2x00-fix-RFCSR-register-init-values-for-RT5592.patch b/package/kernel/mac80211/patches/rt2x00/622-01-rt2x00-fix-RFCSR-register-init-values-for-RT5592.patch
index 15d1601eef..72a8f0073d 100644
--- a/package/kernel/mac80211/patches/rt2x00/622-01-rt2x00-fix-RFCSR-register-init-values-for-RT5592.patch
+++ b/package/kernel/mac80211/patches/rt2x00/622-01-rt2x00-fix-RFCSR-register-init-values-for-RT5592.patch
@@ -77,7 +77,7 @@ Signed-off-by: Shiji Yang <yangshiji66@outlook.com>
 +			rt2800_rfcsr_write(rt2x00dev, 59, 0x7C);
 +
  			if (rf->channel <= 50) {
--				rt2800_rfcsr_write(rt2x00dev, 55, 0x06),
+-				rt2800_rfcsr_write(rt2x00dev, 55, 0x06);
 -				rt2800_rfcsr_write(rt2x00dev, 56, 0xD3);
 +				rt2800_rfcsr_write(rt2x00dev, 44, 0X32);
 +				rt2800_rfcsr_write(rt2x00dev, 54, 0xF9);
diff --git a/package/kernel/mac80211/patches/rt2x00/994-rt2x00-import-support-for-external-LNA-on-MT7620.patch b/package/kernel/mac80211/patches/rt2x00/994-rt2x00-import-support-for-external-LNA-on-MT7620.patch
index 88a72fd03e..7b63c7ab5f 100644
--- a/package/kernel/mac80211/patches/rt2x00/994-rt2x00-import-support-for-external-LNA-on-MT7620.patch
+++ b/package/kernel/mac80211/patches/rt2x00/994-rt2x00-import-support-for-external-LNA-on-MT7620.patch
@@ -31,7 +31,7 @@ Signed-off-by: Daniel Golle <daniel@makrotopia.org>
  	mutex_unlock(&rt2x00dev->csr_mutex);
  }
  
-+void rt6352_enable_pa_pin(struct rt2x00_dev *rt2x00dev, int enable)
++static void rt6352_enable_pa_pin(struct rt2x00_dev *rt2x00dev, int enable)
 +{
 +	if (!rt2x00dev->pinctrl)
 +		return;
@@ -52,7 +52,7 @@ Signed-off-by: Daniel Golle <daniel@makrotopia.org>
  static const unsigned int rt2800_eeprom_map[EEPROM_WORD_COUNT] = {
  	[EEPROM_CHIP_ID]		= 0x0000,
  	[EEPROM_VERSION]		= 0x0001,
-@@ -10428,8 +10446,10 @@ static void rt2800_restore_rf_bbp_rt6352
+@@ -10422,8 +10440,10 @@ static void rt2800_restore_rf_bbp_rt6352
  static void rt2800_calibration_rt6352_stage1(struct rt2x00_dev *rt2x00dev)
  {
  	if (rt2x00_has_cap_external_pa(rt2x00dev) ||
@@ -64,7 +64,7 @@ Signed-off-by: Daniel Golle <daniel@makrotopia.org>
  
  	rt2800_r_calibration(rt2x00dev);
  }
-@@ -10453,6 +10473,8 @@ static void rt2800_calibration_rt6352_st
+@@ -10447,6 +10467,8 @@ static void rt2800_calibration_rt6352_st
  	    !rt2x00_has_cap_external_lna_bg(rt2x00dev))
  		return;
  
diff --git a/package/kernel/mac80211/patches/rt2x00/996-rt2x00-mt7620-differentiate-based-on-SoC-CHIP_VER.patch b/package/kernel/mac80211/patches/rt2x00/996-rt2x00-mt7620-differentiate-based-on-SoC-CHIP_VER.patch
index eb0237a389..0b2e7313dd 100644
--- a/package/kernel/mac80211/patches/rt2x00/996-rt2x00-mt7620-differentiate-based-on-SoC-CHIP_VER.patch
+++ b/package/kernel/mac80211/patches/rt2x00/996-rt2x00-mt7620-differentiate-based-on-SoC-CHIP_VER.patch
@@ -203,7 +203,7 @@
  
  	/* BBP for G band GLRT function (BBP_128 ~ BBP_221) */
  	rt2800_bbp_glrt_write(rt2x00dev, 0, 0x00);
-@@ -10404,6 +10434,9 @@ static void rt2800_restore_rf_bbp_rt6352
+@@ -10398,6 +10428,9 @@ static void rt2800_restore_rf_bbp_rt6352
  		rt2800_register_write(rt2x00dev, RF_BYPASS3, 0x0);
  	}
  
@@ -213,7 +213,7 @@
  	if (rt2x00_has_cap_external_lna_bg(rt2x00dev)) {
  		rt2800_rfcsr_write_chanreg(rt2x00dev, 14, 0x16);
  		rt2800_rfcsr_write_chanreg(rt2x00dev, 17, 0x23);
-@@ -10485,6 +10518,9 @@ static void rt2800_calibration_rt6352_st
+@@ -10479,6 +10512,9 @@ static void rt2800_calibration_rt6352_st
  		rt2800_register_write(rt2x00dev, RF_BYPASS3, reg);
  	}
  
@@ -223,7 +223,7 @@
  	if (rt2x00_has_cap_external_lna_bg(rt2x00dev)) {
  		rt2800_rfcsr_write_chanreg(rt2x00dev, 14, 0x66);
  		rt2800_rfcsr_write_chanreg(rt2x00dev, 17, 0x20);
-@@ -10575,31 +10611,36 @@ static void rt2800_init_rfcsr_6352(struc
+@@ -10569,31 +10605,36 @@ static void rt2800_init_rfcsr_6352(struc
  	rt2800_rfcsr_write(rt2x00dev, 42, 0x5B);
  	rt2800_rfcsr_write(rt2x00dev, 43, 0x00);
  
@@ -285,7 +285,7 @@
  
  	/* Initialize RF channel register to default value */
  	rt2800_rfcsr_write_chanreg(rt2x00dev, 0, 0x03);
-@@ -10665,63 +10706,71 @@ static void rt2800_init_rfcsr_6352(struc
+@@ -10659,63 +10700,71 @@ static void rt2800_init_rfcsr_6352(struc
  
  	rt2800_rfcsr_write_bank(rt2x00dev, 6, 45, 0xC5);
  
@@ -412,7 +412,7 @@
  
  	/* Initialize RF DC calibration register to default value */
  	rt2800_rfcsr_write_dccal(rt2x00dev, 0, 0x47);
-@@ -10784,12 +10833,17 @@ static void rt2800_init_rfcsr_6352(struc
+@@ -10778,12 +10827,17 @@ static void rt2800_init_rfcsr_6352(struc
  	rt2800_rfcsr_write_dccal(rt2x00dev, 62, 0x00);
  	rt2800_rfcsr_write_dccal(rt2x00dev, 63, 0x00);
  
diff --git a/package/kernel/mac80211/patches/rtl/017-v6.13-wifi-rtw88-Constify-some-arrays-and-structs.patch b/package/kernel/mac80211/patches/rtl/017-v6.13-wifi-rtw88-Constify-some-arrays-and-structs.patch
deleted file mode 100644
index 8d2bb9aa7a..0000000000
--- a/package/kernel/mac80211/patches/rtl/017-v6.13-wifi-rtw88-Constify-some-arrays-and-structs.patch
+++ /dev/null
@@ -1,374 +0,0 @@
-From 140403599b74839b0a57c5397b7e8579e5332364 Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 18 Sep 2024 01:53:55 +0300
-Subject: [PATCH] wifi: rtw88: Constify some arrays and structs
-
-These are never modified, so make them const:
-
-card_enable_flow_8703b
-card_disable_flow_8703b
-rtw8703b_ops
-
-rtw8723d_ops
-card_enable_flow_8723d
-card_disable_flow_8723d
-
-trans_carddis_to_cardemu_8821c
-trans_cardemu_to_act_8821c
-trans_act_to_cardemu_8821c
-trans_cardemu_to_carddis_8821c
-card_enable_flow_8821c
-card_disable_flow_8821c
-rtw8821c_dig
-page_table_8821c
-rqpn_table_8821c
-prioq_addrs_8821c
-rtw8821c_ops
-
-card_enable_flow_8822b
-card_disable_flow_8822b
-prioq_addrs_8822b
-rtw8822b_ops
-rtw8822b_edcca_th
-
-card_enable_flow_8822c
-card_disable_flow_8822c
-prioq_addrs_8822c
-rtw8822c_ops
-rtw8822c_edcca_th
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Acked-by: Ping-Ke Shih <pkshih@realtek.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/dae7994f-3491-40de-b537-ebf68df084bb@gmail.com
----
- drivers/net/wireless/realtek/rtw88/fw.c       |  2 +-
- drivers/net/wireless/realtek/rtw88/mac.c      |  4 ++--
- drivers/net/wireless/realtek/rtw88/main.h     |  8 +++----
- drivers/net/wireless/realtek/rtw88/phy.c      |  2 +-
- drivers/net/wireless/realtek/rtw88/rtw8703b.c |  6 ++---
- drivers/net/wireless/realtek/rtw88/rtw8723d.c |  6 ++---
- drivers/net/wireless/realtek/rtw88/rtw8821c.c | 22 +++++++++----------
- drivers/net/wireless/realtek/rtw88/rtw8822b.c | 10 ++++-----
- drivers/net/wireless/realtek/rtw88/rtw8822c.c | 10 ++++-----
- 9 files changed, 35 insertions(+), 35 deletions(-)
-
---- a/drivers/net/wireless/realtek/rtw88/fw.c
-+++ b/drivers/net/wireless/realtek/rtw88/fw.c
-@@ -267,7 +267,7 @@ static void rtw_fw_scan_result(struct rt
- static void rtw_fw_adaptivity_result(struct rtw_dev *rtwdev, u8 *payload,
- 				     u8 length)
- {
--	struct rtw_hw_reg_offset *edcca_th = rtwdev->chip->edcca_th;
-+	const struct rtw_hw_reg_offset *edcca_th = rtwdev->chip->edcca_th;
- 	struct rtw_c2h_adaptivity *result = (struct rtw_c2h_adaptivity *)payload;
- 
- 	rtw_dbg(rtwdev, RTW_DBG_ADAPTIVITY,
---- a/drivers/net/wireless/realtek/rtw88/mac.c
-+++ b/drivers/net/wireless/realtek/rtw88/mac.c
-@@ -228,7 +228,7 @@ static int rtw_sub_pwr_seq_parser(struct
- }
- 
- static int rtw_pwr_seq_parser(struct rtw_dev *rtwdev,
--			      const struct rtw_pwr_seq_cmd **cmd_seq)
-+			      const struct rtw_pwr_seq_cmd * const *cmd_seq)
- {
- 	u8 cut_mask;
- 	u8 intf_mask;
-@@ -271,7 +271,7 @@ static int rtw_pwr_seq_parser(struct rtw
- static int rtw_mac_power_switch(struct rtw_dev *rtwdev, bool pwr_on)
- {
- 	const struct rtw_chip_info *chip = rtwdev->chip;
--	const struct rtw_pwr_seq_cmd **pwr_seq;
-+	const struct rtw_pwr_seq_cmd * const *pwr_seq;
- 	u32 imr = 0;
- 	u8 rpwm;
- 	bool cur_pwr;
---- a/drivers/net/wireless/realtek/rtw88/main.h
-+++ b/drivers/net/wireless/realtek/rtw88/main.h
-@@ -1167,7 +1167,7 @@ enum rtw_fwcd_item {
- 
- /* hardware configuration for each IC */
- struct rtw_chip_info {
--	struct rtw_chip_ops *ops;
-+	const struct rtw_chip_ops *ops;
- 	u8 id;
- 
- 	const char *fw_name;
-@@ -1209,8 +1209,8 @@ struct rtw_chip_info {
- 
- 	/* init values */
- 	u8 sys_func_en;
--	const struct rtw_pwr_seq_cmd **pwr_on_seq;
--	const struct rtw_pwr_seq_cmd **pwr_off_seq;
-+	const struct rtw_pwr_seq_cmd * const *pwr_on_seq;
-+	const struct rtw_pwr_seq_cmd * const *pwr_off_seq;
- 	const struct rtw_rqpn *rqpn_table;
- 	const struct rtw_prioq_addrs *prioq_addrs;
- 	const struct rtw_page_table *page_table;
-@@ -1242,7 +1242,7 @@ struct rtw_chip_info {
- 	u8 bfer_su_max_num;
- 	u8 bfer_mu_max_num;
- 
--	struct rtw_hw_reg_offset *edcca_th;
-+	const struct rtw_hw_reg_offset *edcca_th;
- 	s8 l2h_th_ini_cs;
- 	s8 l2h_th_ini_ad;
- 
---- a/drivers/net/wireless/realtek/rtw88/phy.c
-+++ b/drivers/net/wireless/realtek/rtw88/phy.c
-@@ -123,7 +123,7 @@ static void rtw_phy_cck_pd_init(struct r
- 
- void rtw_phy_set_edcca_th(struct rtw_dev *rtwdev, u8 l2h, u8 h2l)
- {
--	struct rtw_hw_reg_offset *edcca_th = rtwdev->chip->edcca_th;
-+	const struct rtw_hw_reg_offset *edcca_th = rtwdev->chip->edcca_th;
- 
- 	rtw_write32_mask(rtwdev,
- 			 edcca_th[EDCCA_TH_L2H_IDX].hw_reg.addr,
---- a/drivers/net/wireless/realtek/rtw88/rtw8703b.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8703b.c
-@@ -481,14 +481,14 @@ static const struct rtw_pwr_seq_cmd tran
- 	{TRANS_SEQ_END},
- };
- 
--static const struct rtw_pwr_seq_cmd *card_enable_flow_8703b[] = {
-+static const struct rtw_pwr_seq_cmd * const card_enable_flow_8703b[] = {
- 	trans_pre_enable_8703b,
- 	trans_carddis_to_cardemu_8703b,
- 	trans_cardemu_to_act_8703b,
- 	NULL
- };
- 
--static const struct rtw_pwr_seq_cmd *card_disable_flow_8703b[] = {
-+static const struct rtw_pwr_seq_cmd * const card_disable_flow_8703b[] = {
- 	trans_act_to_lps_8703b,
- 	trans_act_to_reset_mcu_8703b,
- 	trans_act_to_cardemu_8703b,
-@@ -1941,7 +1941,7 @@ static const struct coex_tdma_para tdma_
- 	{ {0x61, 0x08, 0x03, 0x11, 0x11} },
- };
- 
--static struct rtw_chip_ops rtw8703b_ops = {
-+static const struct rtw_chip_ops rtw8703b_ops = {
- 	.mac_init		= rtw8723x_mac_init,
- 	.dump_fw_crash		= NULL,
- 	.shutdown		= NULL,
---- a/drivers/net/wireless/realtek/rtw88/rtw8723d.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8723d.c
-@@ -1430,7 +1430,7 @@ static void rtw8723d_pwr_track(struct rt
- 	dm_info->pwr_trk_triggered = false;
- }
- 
--static struct rtw_chip_ops rtw8723d_ops = {
-+static const struct rtw_chip_ops rtw8723d_ops = {
- 	.phy_set_param		= rtw8723d_phy_set_param,
- 	.read_efuse		= rtw8723x_read_efuse,
- 	.query_rx_desc		= rtw8723d_query_rx_desc,
-@@ -1788,7 +1788,7 @@ static const struct rtw_pwr_seq_cmd tran
- 	 RTW_PWR_CMD_END, 0, 0},
- };
- 
--static const struct rtw_pwr_seq_cmd *card_enable_flow_8723d[] = {
-+static const struct rtw_pwr_seq_cmd * const card_enable_flow_8723d[] = {
- 	trans_carddis_to_cardemu_8723d,
- 	trans_cardemu_to_act_8723d,
- 	NULL
-@@ -2004,7 +2004,7 @@ static const struct rtw_pwr_seq_cmd tran
- 	 RTW_PWR_CMD_END, 0, 0},
- };
- 
--static const struct rtw_pwr_seq_cmd *card_disable_flow_8723d[] = {
-+static const struct rtw_pwr_seq_cmd * const card_disable_flow_8723d[] = {
- 	trans_act_to_lps_8723d,
- 	trans_act_to_pre_carddis_8723d,
- 	trans_act_to_cardemu_8723d,
---- a/drivers/net/wireless/realtek/rtw88/rtw8821c.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8821c.c
-@@ -1254,7 +1254,7 @@ static void rtw8821c_fill_txdesc_checksu
- 	fill_txdesc_checksum_common(txdesc, 16);
- }
- 
--static struct rtw_pwr_seq_cmd trans_carddis_to_cardemu_8821c[] = {
-+static const struct rtw_pwr_seq_cmd trans_carddis_to_cardemu_8821c[] = {
- 	{0x0086,
- 	 RTW_PWR_CUT_ALL_MSK,
- 	 RTW_PWR_INTF_SDIO_MSK,
-@@ -1292,7 +1292,7 @@ static struct rtw_pwr_seq_cmd trans_card
- 	 RTW_PWR_CMD_END, 0, 0},
- };
- 
--static struct rtw_pwr_seq_cmd trans_cardemu_to_act_8821c[] = {
-+static const struct rtw_pwr_seq_cmd trans_cardemu_to_act_8821c[] = {
- 	{0x0020,
- 	 RTW_PWR_CUT_ALL_MSK,
- 	 RTW_PWR_INTF_USB_MSK | RTW_PWR_INTF_SDIO_MSK,
-@@ -1396,7 +1396,7 @@ static struct rtw_pwr_seq_cmd trans_card
- 	 RTW_PWR_CMD_END, 0, 0},
- };
- 
--static struct rtw_pwr_seq_cmd trans_act_to_cardemu_8821c[] = {
-+static const struct rtw_pwr_seq_cmd trans_act_to_cardemu_8821c[] = {
- 	{0x0093,
- 	 RTW_PWR_CUT_ALL_MSK,
- 	 RTW_PWR_INTF_ALL_MSK,
-@@ -1454,7 +1454,7 @@ static struct rtw_pwr_seq_cmd trans_act_
- 	 RTW_PWR_CMD_END, 0, 0},
- };
- 
--static struct rtw_pwr_seq_cmd trans_cardemu_to_carddis_8821c[] = {
-+static const struct rtw_pwr_seq_cmd trans_cardemu_to_carddis_8821c[] = {
- 	{0x0007,
- 	 RTW_PWR_CUT_ALL_MSK,
- 	 RTW_PWR_INTF_USB_MSK | RTW_PWR_INTF_SDIO_MSK,
-@@ -1567,13 +1567,13 @@ static struct rtw_pwr_seq_cmd trans_card
- 	 RTW_PWR_CMD_END, 0, 0},
- };
- 
--static const struct rtw_pwr_seq_cmd *card_enable_flow_8821c[] = {
-+static const struct rtw_pwr_seq_cmd * const card_enable_flow_8821c[] = {
- 	trans_carddis_to_cardemu_8821c,
- 	trans_cardemu_to_act_8821c,
- 	NULL
- };
- 
--static const struct rtw_pwr_seq_cmd *card_disable_flow_8821c[] = {
-+static const struct rtw_pwr_seq_cmd * const card_disable_flow_8821c[] = {
- 	trans_act_to_cardemu_8821c,
- 	trans_cardemu_to_carddis_8821c,
- 	NULL
-@@ -1629,7 +1629,7 @@ static const struct rtw_rfe_def rtw8821c
- 	[6] = RTW_DEF_RFE(8821c, 0, 0),
- };
- 
--static struct rtw_hw_reg rtw8821c_dig[] = {
-+static const struct rtw_hw_reg rtw8821c_dig[] = {
- 	[0] = { .addr = 0xc50, .mask = 0x7f },
- };
- 
-@@ -1639,7 +1639,7 @@ static const struct rtw_ltecoex_addr rtw
- 	.rdata = LTECOEX_READ_DATA,
- };
- 
--static struct rtw_page_table page_table_8821c[] = {
-+static const struct rtw_page_table page_table_8821c[] = {
- 	/* not sure what [0] stands for */
- 	{16, 16, 16, 14, 1},
- 	{16, 16, 16, 14, 1},
-@@ -1648,7 +1648,7 @@ static struct rtw_page_table page_table_
- 	{16, 16, 16, 14, 1},
- };
- 
--static struct rtw_rqpn rqpn_table_8821c[] = {
-+static const struct rtw_rqpn rqpn_table_8821c[] = {
- 	/* not sure what [0] stands for */
- 	{RTW_DMA_MAPPING_NORMAL, RTW_DMA_MAPPING_NORMAL,
- 	 RTW_DMA_MAPPING_LOW, RTW_DMA_MAPPING_LOW,
-@@ -1667,7 +1667,7 @@ static struct rtw_rqpn rqpn_table_8821c[
- 	 RTW_DMA_MAPPING_EXTRA, RTW_DMA_MAPPING_HIGH},
- };
- 
--static struct rtw_prioq_addrs prioq_addrs_8821c = {
-+static const struct rtw_prioq_addrs prioq_addrs_8821c = {
- 	.prio[RTW_DMA_MAPPING_EXTRA] = {
- 		.rsvd = REG_FIFOPAGE_INFO_4, .avail = REG_FIFOPAGE_INFO_4 + 2,
- 	},
-@@ -1683,7 +1683,7 @@ static struct rtw_prioq_addrs prioq_addr
- 	.wsize = true,
- };
- 
--static struct rtw_chip_ops rtw8821c_ops = {
-+static const struct rtw_chip_ops rtw8821c_ops = {
- 	.phy_set_param		= rtw8821c_phy_set_param,
- 	.read_efuse		= rtw8821c_read_efuse,
- 	.query_rx_desc		= rtw8821c_query_rx_desc,
---- a/drivers/net/wireless/realtek/rtw88/rtw8822b.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8822b.c
-@@ -1978,13 +1978,13 @@ static const struct rtw_pwr_seq_cmd tran
- 	 RTW_PWR_CMD_END, 0, 0},
- };
- 
--static const struct rtw_pwr_seq_cmd *card_enable_flow_8822b[] = {
-+static const struct rtw_pwr_seq_cmd * const card_enable_flow_8822b[] = {
- 	trans_carddis_to_cardemu_8822b,
- 	trans_cardemu_to_act_8822b,
- 	NULL
- };
- 
--static const struct rtw_pwr_seq_cmd *card_disable_flow_8822b[] = {
-+static const struct rtw_pwr_seq_cmd * const card_disable_flow_8822b[] = {
- 	trans_act_to_cardemu_8822b,
- 	trans_cardemu_to_carddis_8822b,
- 	NULL
-@@ -2156,7 +2156,7 @@ static const struct rtw_rqpn rqpn_table_
- 	 RTW_DMA_MAPPING_EXTRA, RTW_DMA_MAPPING_HIGH},
- };
- 
--static struct rtw_prioq_addrs prioq_addrs_8822b = {
-+static const struct rtw_prioq_addrs prioq_addrs_8822b = {
- 	.prio[RTW_DMA_MAPPING_EXTRA] = {
- 		.rsvd = REG_FIFOPAGE_INFO_4, .avail = REG_FIFOPAGE_INFO_4 + 2,
- 	},
-@@ -2172,7 +2172,7 @@ static struct rtw_prioq_addrs prioq_addr
- 	.wsize = true,
- };
- 
--static struct rtw_chip_ops rtw8822b_ops = {
-+static const struct rtw_chip_ops rtw8822b_ops = {
- 	.phy_set_param		= rtw8822b_phy_set_param,
- 	.read_efuse		= rtw8822b_read_efuse,
- 	.query_rx_desc		= rtw8822b_query_rx_desc,
-@@ -2521,7 +2521,7 @@ static const struct rtw_reg_domain coex_
- 	{0xc50,  MASKBYTE0, RTW_REG_DOMAIN_MAC8},
- };
- 
--static struct rtw_hw_reg_offset rtw8822b_edcca_th[] = {
-+static const struct rtw_hw_reg_offset rtw8822b_edcca_th[] = {
- 	[EDCCA_TH_L2H_IDX] = {{.addr = 0x8a4, .mask = MASKBYTE0}, .offset = 0},
- 	[EDCCA_TH_H2L_IDX] = {{.addr = 0x8a4, .mask = MASKBYTE1}, .offset = 0},
- };
---- a/drivers/net/wireless/realtek/rtw88/rtw8822c.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8822c.c
-@@ -4874,13 +4874,13 @@ static const struct rtw_pwr_seq_cmd tran
- 	 RTW_PWR_CMD_END, 0, 0},
- };
- 
--static const struct rtw_pwr_seq_cmd *card_enable_flow_8822c[] = {
-+static const struct rtw_pwr_seq_cmd * const card_enable_flow_8822c[] = {
- 	trans_carddis_to_cardemu_8822c,
- 	trans_cardemu_to_act_8822c,
- 	NULL
- };
- 
--static const struct rtw_pwr_seq_cmd *card_disable_flow_8822c[] = {
-+static const struct rtw_pwr_seq_cmd * const card_disable_flow_8822c[] = {
- 	trans_act_to_cardemu_8822c,
- 	trans_cardemu_to_carddis_8822c,
- 	NULL
-@@ -4972,7 +4972,7 @@ static const struct rtw_rqpn rqpn_table_
- 	 RTW_DMA_MAPPING_EXTRA, RTW_DMA_MAPPING_HIGH},
- };
- 
--static struct rtw_prioq_addrs prioq_addrs_8822c = {
-+static const struct rtw_prioq_addrs prioq_addrs_8822c = {
- 	.prio[RTW_DMA_MAPPING_EXTRA] = {
- 		.rsvd = REG_FIFOPAGE_INFO_4, .avail = REG_FIFOPAGE_INFO_4 + 2,
- 	},
-@@ -4988,7 +4988,7 @@ static struct rtw_prioq_addrs prioq_addr
- 	.wsize = true,
- };
- 
--static struct rtw_chip_ops rtw8822c_ops = {
-+static const struct rtw_chip_ops rtw8822c_ops = {
- 	.phy_set_param		= rtw8822c_phy_set_param,
- 	.read_efuse		= rtw8822c_read_efuse,
- 	.query_rx_desc		= rtw8822c_query_rx_desc,
-@@ -5301,7 +5301,7 @@ static const struct rtw_pwr_track_tbl rt
- 	.pwrtrk_2g_ccka_p = rtw8822c_pwrtrk_2g_cck_a_p,
- };
- 
--static struct rtw_hw_reg_offset rtw8822c_edcca_th[] = {
-+static const struct rtw_hw_reg_offset rtw8822c_edcca_th[] = {
- 	[EDCCA_TH_L2H_IDX] = {
- 		{.addr = 0x84c, .mask = MASKBYTE2}, .offset = 0x80
- 	},
diff --git a/package/kernel/mac80211/patches/rtl/019-v6.13-wifi-rtw88-Parse-the-RX-descriptor-with-a-single-fun.patch b/package/kernel/mac80211/patches/rtl/019-v6.13-wifi-rtw88-Parse-the-RX-descriptor-with-a-single-fun.patch
deleted file mode 100644
index 4a32831ea3..0000000000
--- a/package/kernel/mac80211/patches/rtl/019-v6.13-wifi-rtw88-Parse-the-RX-descriptor-with-a-single-fun.patch
+++ /dev/null
@@ -1,560 +0,0 @@
-From bbb6f9be7f99464d5ab7e2f321fa728d33eeec9a Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Fri, 20 Sep 2024 22:27:30 +0300
-Subject: [PATCH] wifi: rtw88: Parse the RX descriptor with a single function
-
-rtw8703b_query_rx_desc(), rtw8723d_query_rx_desc(),
-rtw8821c_query_rx_desc(), rtw8822b_query_rx_desc(), and
-rtw8822c_query_rx_desc() are almost identical, so replace them all with
-a single function, rtw_rx_query_rx_desc().
-
-Also, access the RX descriptor using a struct with __le32 members and
-le32_get_bits().
-
-Tested with RTL8811CU, RTL8811AU, and RTL8812AU.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Tested-by: Ping-Ke Shih <pkshih@realtek.com> # RTL8723DE and RTL8822CE
-Acked-by: Ping-Ke Shih <pkshih@realtek.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/913f1747-38fc-4409-85a4-57bb9cee506b@gmail.com
----
- drivers/net/wireless/realtek/rtw88/main.h     |  5 +-
- drivers/net/wireless/realtek/rtw88/pci.c      |  2 +-
- drivers/net/wireless/realtek/rtw88/rtw8703b.c | 56 +--------------
- drivers/net/wireless/realtek/rtw88/rtw8723d.c | 43 +-----------
- drivers/net/wireless/realtek/rtw88/rtw8821c.c | 43 +-----------
- drivers/net/wireless/realtek/rtw88/rtw8822b.c | 43 +-----------
- drivers/net/wireless/realtek/rtw88/rtw8822c.c | 44 +-----------
- drivers/net/wireless/realtek/rtw88/rx.c       | 70 +++++++++++++++++--
- drivers/net/wireless/realtek/rtw88/rx.h       | 64 ++++++++---------
- drivers/net/wireless/realtek/rtw88/sdio.c     |  3 +-
- drivers/net/wireless/realtek/rtw88/usb.c      |  4 +-
- 11 files changed, 106 insertions(+), 271 deletions(-)
-
---- a/drivers/net/wireless/realtek/rtw88/main.h
-+++ b/drivers/net/wireless/realtek/rtw88/main.h
-@@ -848,9 +848,8 @@ struct rtw_chip_ops {
- 	void (*phy_set_param)(struct rtw_dev *rtwdev);
- 	void (*set_channel)(struct rtw_dev *rtwdev, u8 channel,
- 			    u8 bandwidth, u8 primary_chan_idx);
--	void (*query_rx_desc)(struct rtw_dev *rtwdev, u8 *rx_desc,
--			      struct rtw_rx_pkt_stat *pkt_stat,
--			      struct ieee80211_rx_status *rx_status);
-+	void (*query_phy_status)(struct rtw_dev *rtwdev, u8 *phy_status,
-+				 struct rtw_rx_pkt_stat *pkt_stat);
- 	u32 (*read_rf)(struct rtw_dev *rtwdev, enum rtw_rf_path rf_path,
- 		       u32 addr, u32 mask);
- 	bool (*write_rf)(struct rtw_dev *rtwdev, enum rtw_rf_path rf_path,
---- a/drivers/net/wireless/realtek/rtw88/pci.c
-+++ b/drivers/net/wireless/realtek/rtw88/pci.c
-@@ -1065,7 +1065,7 @@ static u32 rtw_pci_rx_napi(struct rtw_de
- 		dma_sync_single_for_cpu(rtwdev->dev, dma, RTK_PCI_RX_BUF_SIZE,
- 					DMA_FROM_DEVICE);
- 		rx_desc = skb->data;
--		chip->ops->query_rx_desc(rtwdev, rx_desc, &pkt_stat, &rx_status);
-+		rtw_rx_query_rx_desc(rtwdev, rx_desc, &pkt_stat, &rx_status);
- 
- 		/* offset from rx_desc to payload */
- 		pkt_offset = pkt_desc_sz + pkt_stat.drv_info_sz +
---- a/drivers/net/wireless/realtek/rtw88/rtw8703b.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8703b.c
-@@ -29,9 +29,6 @@
- #define TBTT_PROHIBIT_HOLD_TIME 0x80
- #define TBTT_PROHIBIT_HOLD_TIME_STOP_BCN 0x64
- 
--/* raw pkt_stat->drv_info_sz is in unit of 8-bytes */
--#define RX_DRV_INFO_SZ_UNIT_8703B 8
--
- #define TRANS_SEQ_END			\
- 	0xFFFF,				\
- 	RTW_PWR_CUT_ALL_MSK,		\
-@@ -1032,57 +1029,6 @@ static void query_phy_status(struct rtw_
- 		query_phy_status_ofdm(rtwdev, phy_status, pkt_stat);
- }
- 
--static void rtw8703b_query_rx_desc(struct rtw_dev *rtwdev, u8 *rx_desc,
--				   struct rtw_rx_pkt_stat *pkt_stat,
--				   struct ieee80211_rx_status *rx_status)
--{
--	struct ieee80211_hdr *hdr;
--	u32 desc_sz = rtwdev->chip->rx_pkt_desc_sz;
--	u8 *phy_status = NULL;
--
--	memset(pkt_stat, 0, sizeof(*pkt_stat));
--
--	pkt_stat->phy_status = GET_RX_DESC_PHYST(rx_desc);
--	pkt_stat->icv_err = GET_RX_DESC_ICV_ERR(rx_desc);
--	pkt_stat->crc_err = GET_RX_DESC_CRC32(rx_desc);
--	pkt_stat->decrypted = !GET_RX_DESC_SWDEC(rx_desc) &&
--			      GET_RX_DESC_ENC_TYPE(rx_desc) != RX_DESC_ENC_NONE;
--	pkt_stat->is_c2h = GET_RX_DESC_C2H(rx_desc);
--	pkt_stat->pkt_len = GET_RX_DESC_PKT_LEN(rx_desc);
--	pkt_stat->drv_info_sz = GET_RX_DESC_DRV_INFO_SIZE(rx_desc);
--	pkt_stat->shift = GET_RX_DESC_SHIFT(rx_desc);
--	pkt_stat->rate = GET_RX_DESC_RX_RATE(rx_desc);
--	pkt_stat->cam_id = GET_RX_DESC_MACID(rx_desc);
--	pkt_stat->ppdu_cnt = 0;
--	pkt_stat->tsf_low = GET_RX_DESC_TSFL(rx_desc);
--
--	pkt_stat->drv_info_sz *= RX_DRV_INFO_SZ_UNIT_8703B;
--
--	if (pkt_stat->is_c2h)
--		return;
--
--	hdr = (struct ieee80211_hdr *)(rx_desc + desc_sz + pkt_stat->shift +
--				       pkt_stat->drv_info_sz);
--
--	pkt_stat->bw = GET_RX_DESC_BW(rx_desc);
--
--	if (pkt_stat->phy_status) {
--		phy_status = rx_desc + desc_sz + pkt_stat->shift;
--		query_phy_status(rtwdev, phy_status, pkt_stat);
--	}
--
--	rtw_rx_fill_rx_status(rtwdev, pkt_stat, hdr, rx_status, phy_status);
--
--	/* Rtl8723cs driver checks for size < 14 or size > 8192 and
--	 * simply drops the packet. Maybe this should go into
--	 * rtw_rx_fill_rx_status()?
--	 */
--	if (pkt_stat->pkt_len == 0) {
--		rx_status->flag |= RX_FLAG_NO_PSDU;
--		rtw_dbg(rtwdev, RTW_DBG_RX, "zero length packet");
--	}
--}
--
- #define ADDA_ON_VAL_8703B 0x03c00014
- 
- static
-@@ -1948,7 +1894,7 @@ static const struct rtw_chip_ops rtw8703
- 	.read_efuse		= rtw8703b_read_efuse,
- 	.phy_set_param		= rtw8703b_phy_set_param,
- 	.set_channel		= rtw8703b_set_channel,
--	.query_rx_desc		= rtw8703b_query_rx_desc,
-+	.query_phy_status	= query_phy_status,
- 	.read_rf		= rtw_phy_read_rf_sipi,
- 	.write_rf		= rtw_phy_write_rf_reg_sipi,
- 	.set_tx_power_index	= rtw8723x_set_tx_power_index,
---- a/drivers/net/wireless/realtek/rtw88/rtw8723d.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8723d.c
-@@ -227,47 +227,6 @@ static void query_phy_status(struct rtw_
- 	}
- }
- 
--static void rtw8723d_query_rx_desc(struct rtw_dev *rtwdev, u8 *rx_desc,
--				   struct rtw_rx_pkt_stat *pkt_stat,
--				   struct ieee80211_rx_status *rx_status)
--{
--	struct ieee80211_hdr *hdr;
--	u32 desc_sz = rtwdev->chip->rx_pkt_desc_sz;
--	u8 *phy_status = NULL;
--
--	memset(pkt_stat, 0, sizeof(*pkt_stat));
--
--	pkt_stat->phy_status = GET_RX_DESC_PHYST(rx_desc);
--	pkt_stat->icv_err = GET_RX_DESC_ICV_ERR(rx_desc);
--	pkt_stat->crc_err = GET_RX_DESC_CRC32(rx_desc);
--	pkt_stat->decrypted = !GET_RX_DESC_SWDEC(rx_desc) &&
--			      GET_RX_DESC_ENC_TYPE(rx_desc) != RX_DESC_ENC_NONE;
--	pkt_stat->is_c2h = GET_RX_DESC_C2H(rx_desc);
--	pkt_stat->pkt_len = GET_RX_DESC_PKT_LEN(rx_desc);
--	pkt_stat->drv_info_sz = GET_RX_DESC_DRV_INFO_SIZE(rx_desc);
--	pkt_stat->shift = GET_RX_DESC_SHIFT(rx_desc);
--	pkt_stat->rate = GET_RX_DESC_RX_RATE(rx_desc);
--	pkt_stat->cam_id = GET_RX_DESC_MACID(rx_desc);
--	pkt_stat->ppdu_cnt = 0;
--	pkt_stat->tsf_low = GET_RX_DESC_TSFL(rx_desc);
--
--	/* drv_info_sz is in unit of 8-bytes */
--	pkt_stat->drv_info_sz *= 8;
--
--	/* c2h cmd pkt's rx/phy status is not interested */
--	if (pkt_stat->is_c2h)
--		return;
--
--	hdr = (struct ieee80211_hdr *)(rx_desc + desc_sz + pkt_stat->shift +
--				       pkt_stat->drv_info_sz);
--	if (pkt_stat->phy_status) {
--		phy_status = rx_desc + desc_sz + pkt_stat->shift;
--		query_phy_status(rtwdev, phy_status, pkt_stat);
--	}
--
--	rtw_rx_fill_rx_status(rtwdev, pkt_stat, hdr, rx_status, phy_status);
--}
--
- static bool rtw8723d_check_spur_ov_thres(struct rtw_dev *rtwdev,
- 					 u8 channel, u32 thres)
- {
-@@ -1433,7 +1392,7 @@ static void rtw8723d_pwr_track(struct rt
- static const struct rtw_chip_ops rtw8723d_ops = {
- 	.phy_set_param		= rtw8723d_phy_set_param,
- 	.read_efuse		= rtw8723x_read_efuse,
--	.query_rx_desc		= rtw8723d_query_rx_desc,
-+	.query_phy_status	= query_phy_status,
- 	.set_channel		= rtw8723d_set_channel,
- 	.mac_init		= rtw8723x_mac_init,
- 	.shutdown		= rtw8723d_shutdown,
---- a/drivers/net/wireless/realtek/rtw88/rtw8821c.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8821c.c
-@@ -679,47 +679,6 @@ static void query_phy_status(struct rtw_
- 	}
- }
- 
--static void rtw8821c_query_rx_desc(struct rtw_dev *rtwdev, u8 *rx_desc,
--				   struct rtw_rx_pkt_stat *pkt_stat,
--				   struct ieee80211_rx_status *rx_status)
--{
--	struct ieee80211_hdr *hdr;
--	u32 desc_sz = rtwdev->chip->rx_pkt_desc_sz;
--	u8 *phy_status = NULL;
--
--	memset(pkt_stat, 0, sizeof(*pkt_stat));
--
--	pkt_stat->phy_status = GET_RX_DESC_PHYST(rx_desc);
--	pkt_stat->icv_err = GET_RX_DESC_ICV_ERR(rx_desc);
--	pkt_stat->crc_err = GET_RX_DESC_CRC32(rx_desc);
--	pkt_stat->decrypted = !GET_RX_DESC_SWDEC(rx_desc) &&
--			      GET_RX_DESC_ENC_TYPE(rx_desc) != RX_DESC_ENC_NONE;
--	pkt_stat->is_c2h = GET_RX_DESC_C2H(rx_desc);
--	pkt_stat->pkt_len = GET_RX_DESC_PKT_LEN(rx_desc);
--	pkt_stat->drv_info_sz = GET_RX_DESC_DRV_INFO_SIZE(rx_desc);
--	pkt_stat->shift = GET_RX_DESC_SHIFT(rx_desc);
--	pkt_stat->rate = GET_RX_DESC_RX_RATE(rx_desc);
--	pkt_stat->cam_id = GET_RX_DESC_MACID(rx_desc);
--	pkt_stat->ppdu_cnt = GET_RX_DESC_PPDU_CNT(rx_desc);
--	pkt_stat->tsf_low = GET_RX_DESC_TSFL(rx_desc);
--
--	/* drv_info_sz is in unit of 8-bytes */
--	pkt_stat->drv_info_sz *= 8;
--
--	/* c2h cmd pkt's rx/phy status is not interested */
--	if (pkt_stat->is_c2h)
--		return;
--
--	hdr = (struct ieee80211_hdr *)(rx_desc + desc_sz + pkt_stat->shift +
--				       pkt_stat->drv_info_sz);
--	if (pkt_stat->phy_status) {
--		phy_status = rx_desc + desc_sz + pkt_stat->shift;
--		query_phy_status(rtwdev, phy_status, pkt_stat);
--	}
--
--	rtw_rx_fill_rx_status(rtwdev, pkt_stat, hdr, rx_status, phy_status);
--}
--
- static void
- rtw8821c_set_tx_power_index_by_rate(struct rtw_dev *rtwdev, u8 path, u8 rs)
- {
-@@ -1686,7 +1645,7 @@ static const struct rtw_prioq_addrs prio
- static const struct rtw_chip_ops rtw8821c_ops = {
- 	.phy_set_param		= rtw8821c_phy_set_param,
- 	.read_efuse		= rtw8821c_read_efuse,
--	.query_rx_desc		= rtw8821c_query_rx_desc,
-+	.query_phy_status	= query_phy_status,
- 	.set_channel		= rtw8821c_set_channel,
- 	.mac_init		= rtw8821c_mac_init,
- 	.read_rf		= rtw_phy_read_rf,
---- a/drivers/net/wireless/realtek/rtw88/rtw8822b.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8822b.c
-@@ -934,47 +934,6 @@ static void query_phy_status(struct rtw_
- 	}
- }
- 
--static void rtw8822b_query_rx_desc(struct rtw_dev *rtwdev, u8 *rx_desc,
--				   struct rtw_rx_pkt_stat *pkt_stat,
--				   struct ieee80211_rx_status *rx_status)
--{
--	struct ieee80211_hdr *hdr;
--	u32 desc_sz = rtwdev->chip->rx_pkt_desc_sz;
--	u8 *phy_status = NULL;
--
--	memset(pkt_stat, 0, sizeof(*pkt_stat));
--
--	pkt_stat->phy_status = GET_RX_DESC_PHYST(rx_desc);
--	pkt_stat->icv_err = GET_RX_DESC_ICV_ERR(rx_desc);
--	pkt_stat->crc_err = GET_RX_DESC_CRC32(rx_desc);
--	pkt_stat->decrypted = !GET_RX_DESC_SWDEC(rx_desc) &&
--			      GET_RX_DESC_ENC_TYPE(rx_desc) != RX_DESC_ENC_NONE;
--	pkt_stat->is_c2h = GET_RX_DESC_C2H(rx_desc);
--	pkt_stat->pkt_len = GET_RX_DESC_PKT_LEN(rx_desc);
--	pkt_stat->drv_info_sz = GET_RX_DESC_DRV_INFO_SIZE(rx_desc);
--	pkt_stat->shift = GET_RX_DESC_SHIFT(rx_desc);
--	pkt_stat->rate = GET_RX_DESC_RX_RATE(rx_desc);
--	pkt_stat->cam_id = GET_RX_DESC_MACID(rx_desc);
--	pkt_stat->ppdu_cnt = GET_RX_DESC_PPDU_CNT(rx_desc);
--	pkt_stat->tsf_low = GET_RX_DESC_TSFL(rx_desc);
--
--	/* drv_info_sz is in unit of 8-bytes */
--	pkt_stat->drv_info_sz *= 8;
--
--	/* c2h cmd pkt's rx/phy status is not interested */
--	if (pkt_stat->is_c2h)
--		return;
--
--	hdr = (struct ieee80211_hdr *)(rx_desc + desc_sz + pkt_stat->shift +
--				       pkt_stat->drv_info_sz);
--	if (pkt_stat->phy_status) {
--		phy_status = rx_desc + desc_sz + pkt_stat->shift;
--		query_phy_status(rtwdev, phy_status, pkt_stat);
--	}
--
--	rtw_rx_fill_rx_status(rtwdev, pkt_stat, hdr, rx_status, phy_status);
--}
--
- static void
- rtw8822b_set_tx_power_index_by_rate(struct rtw_dev *rtwdev, u8 path, u8 rs)
- {
-@@ -2175,7 +2134,7 @@ static const struct rtw_prioq_addrs prio
- static const struct rtw_chip_ops rtw8822b_ops = {
- 	.phy_set_param		= rtw8822b_phy_set_param,
- 	.read_efuse		= rtw8822b_read_efuse,
--	.query_rx_desc		= rtw8822b_query_rx_desc,
-+	.query_phy_status	= query_phy_status,
- 	.set_channel		= rtw8822b_set_channel,
- 	.mac_init		= rtw8822b_mac_init,
- 	.read_rf		= rtw_phy_read_rf,
---- a/drivers/net/wireless/realtek/rtw88/rtw8822c.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8822c.c
-@@ -2690,48 +2690,6 @@ static void query_phy_status(struct rtw_
- 	}
- }
- 
--static void rtw8822c_query_rx_desc(struct rtw_dev *rtwdev, u8 *rx_desc,
--				   struct rtw_rx_pkt_stat *pkt_stat,
--				   struct ieee80211_rx_status *rx_status)
--{
--	struct ieee80211_hdr *hdr;
--	u32 desc_sz = rtwdev->chip->rx_pkt_desc_sz;
--	u8 *phy_status = NULL;
--
--	memset(pkt_stat, 0, sizeof(*pkt_stat));
--
--	pkt_stat->phy_status = GET_RX_DESC_PHYST(rx_desc);
--	pkt_stat->icv_err = GET_RX_DESC_ICV_ERR(rx_desc);
--	pkt_stat->crc_err = GET_RX_DESC_CRC32(rx_desc);
--	pkt_stat->decrypted = !GET_RX_DESC_SWDEC(rx_desc) &&
--			      GET_RX_DESC_ENC_TYPE(rx_desc) != RX_DESC_ENC_NONE;
--	pkt_stat->is_c2h = GET_RX_DESC_C2H(rx_desc);
--	pkt_stat->pkt_len = GET_RX_DESC_PKT_LEN(rx_desc);
--	pkt_stat->drv_info_sz = GET_RX_DESC_DRV_INFO_SIZE(rx_desc);
--	pkt_stat->shift = GET_RX_DESC_SHIFT(rx_desc);
--	pkt_stat->rate = GET_RX_DESC_RX_RATE(rx_desc);
--	pkt_stat->cam_id = GET_RX_DESC_MACID(rx_desc);
--	pkt_stat->ppdu_cnt = GET_RX_DESC_PPDU_CNT(rx_desc);
--	pkt_stat->tsf_low = GET_RX_DESC_TSFL(rx_desc);
--
--	/* drv_info_sz is in unit of 8-bytes */
--	pkt_stat->drv_info_sz *= 8;
--
--	/* c2h cmd pkt's rx/phy status is not interested */
--	if (pkt_stat->is_c2h)
--		return;
--
--	hdr = (struct ieee80211_hdr *)(rx_desc + desc_sz + pkt_stat->shift +
--				       pkt_stat->drv_info_sz);
--	pkt_stat->hdr = hdr;
--	if (pkt_stat->phy_status) {
--		phy_status = rx_desc + desc_sz + pkt_stat->shift;
--		query_phy_status(rtwdev, phy_status, pkt_stat);
--	}
--
--	rtw_rx_fill_rx_status(rtwdev, pkt_stat, hdr, rx_status, phy_status);
--}
--
- static void
- rtw8822c_set_write_tx_power_ref(struct rtw_dev *rtwdev, u8 *tx_pwr_ref_cck,
- 				u8 *tx_pwr_ref_ofdm)
-@@ -4991,7 +4949,7 @@ static const struct rtw_prioq_addrs prio
- static const struct rtw_chip_ops rtw8822c_ops = {
- 	.phy_set_param		= rtw8822c_phy_set_param,
- 	.read_efuse		= rtw8822c_read_efuse,
--	.query_rx_desc		= rtw8822c_query_rx_desc,
-+	.query_phy_status	= query_phy_status,
- 	.set_channel		= rtw8822c_set_channel,
- 	.mac_init		= rtw8822c_mac_init,
- 	.dump_fw_crash		= rtw8822c_dump_fw_crash,
---- a/drivers/net/wireless/realtek/rtw88/rx.c
-+++ b/drivers/net/wireless/realtek/rtw88/rx.c
-@@ -187,11 +187,10 @@ fill_rx_status:
- }
- EXPORT_SYMBOL(rtw_update_rx_freq_from_ie);
- 
--void rtw_rx_fill_rx_status(struct rtw_dev *rtwdev,
--			   struct rtw_rx_pkt_stat *pkt_stat,
--			   struct ieee80211_hdr *hdr,
--			   struct ieee80211_rx_status *rx_status,
--			   u8 *phy_status)
-+static void rtw_rx_fill_rx_status(struct rtw_dev *rtwdev,
-+				  struct rtw_rx_pkt_stat *pkt_stat,
-+				  struct ieee80211_hdr *hdr,
-+				  struct ieee80211_rx_status *rx_status)
- {
- 	struct ieee80211_hw *hw = rtwdev->hw;
- 	u8 path;
-@@ -242,5 +241,64 @@ void rtw_rx_fill_rx_status(struct rtw_de
- 	}
- 
- 	rtw_rx_addr_match(rtwdev, pkt_stat, hdr);
-+
-+	/* Rtl8723cs driver checks for size < 14 or size > 8192 and
-+	 * simply drops the packet.
-+	 */
-+	if (rtwdev->chip->id == RTW_CHIP_TYPE_8703B && pkt_stat->pkt_len == 0) {
-+		rx_status->flag |= RX_FLAG_NO_PSDU;
-+		rtw_dbg(rtwdev, RTW_DBG_RX, "zero length packet");
-+	}
-+}
-+
-+void rtw_rx_query_rx_desc(struct rtw_dev *rtwdev, void *rx_desc8,
-+			  struct rtw_rx_pkt_stat *pkt_stat,
-+			  struct ieee80211_rx_status *rx_status)
-+{
-+	u32 desc_sz = rtwdev->chip->rx_pkt_desc_sz;
-+	struct rtw_rx_desc *rx_desc = rx_desc8;
-+	struct ieee80211_hdr *hdr;
-+	u32 enc_type, swdec;
-+	void *phy_status;
-+
-+	memset(pkt_stat, 0, sizeof(*pkt_stat));
-+
-+	pkt_stat->pkt_len = le32_get_bits(rx_desc->w0, RTW_RX_DESC_W0_PKT_LEN);
-+	pkt_stat->crc_err = le32_get_bits(rx_desc->w0, RTW_RX_DESC_W0_CRC32);
-+	pkt_stat->icv_err = le32_get_bits(rx_desc->w0, RTW_RX_DESC_W0_ICV_ERR);
-+	pkt_stat->drv_info_sz = le32_get_bits(rx_desc->w0,
-+					      RTW_RX_DESC_W0_DRV_INFO_SIZE);
-+	enc_type = le32_get_bits(rx_desc->w0, RTW_RX_DESC_W0_ENC_TYPE);
-+	pkt_stat->shift = le32_get_bits(rx_desc->w0, RTW_RX_DESC_W0_SHIFT);
-+	pkt_stat->phy_status = le32_get_bits(rx_desc->w0, RTW_RX_DESC_W0_PHYST);
-+	swdec = le32_get_bits(rx_desc->w0, RTW_RX_DESC_W0_SWDEC);
-+	pkt_stat->decrypted = !swdec && enc_type != RX_DESC_ENC_NONE;
-+
-+	pkt_stat->cam_id = le32_get_bits(rx_desc->w1, RTW_RX_DESC_W1_MACID);
-+
-+	pkt_stat->is_c2h = le32_get_bits(rx_desc->w2, RTW_RX_DESC_W2_C2H);
-+	pkt_stat->ppdu_cnt = le32_get_bits(rx_desc->w2, RTW_RX_DESC_W2_PPDU_CNT);
-+
-+	pkt_stat->rate = le32_get_bits(rx_desc->w3, RTW_RX_DESC_W3_RX_RATE);
-+
-+	pkt_stat->bw = le32_get_bits(rx_desc->w4, RTW_RX_DESC_W4_BW);
-+
-+	pkt_stat->tsf_low = le32_get_bits(rx_desc->w5, RTW_RX_DESC_W5_TSFL);
-+
-+	/* drv_info_sz is in unit of 8-bytes */
-+	pkt_stat->drv_info_sz *= 8;
-+
-+	/* c2h cmd pkt's rx/phy status is not interested */
-+	if (pkt_stat->is_c2h)
-+		return;
-+
-+	phy_status = rx_desc8 + desc_sz + pkt_stat->shift;
-+	hdr = phy_status + pkt_stat->drv_info_sz;
-+	pkt_stat->hdr = hdr;
-+
-+	if (pkt_stat->phy_status)
-+		rtwdev->chip->ops->query_phy_status(rtwdev, phy_status, pkt_stat);
-+
-+	rtw_rx_fill_rx_status(rtwdev, pkt_stat, hdr, rx_status);
- }
--EXPORT_SYMBOL(rtw_rx_fill_rx_status);
-+EXPORT_SYMBOL(rtw_rx_query_rx_desc);
---- a/drivers/net/wireless/realtek/rtw88/rx.h
-+++ b/drivers/net/wireless/realtek/rtw88/rx.h
-@@ -14,42 +14,40 @@ enum rtw_rx_desc_enc {
- 	RX_DESC_ENC_WEP104	= 5,
- };
- 
--#define GET_RX_DESC_PHYST(rxdesc)                                              \
--	le32_get_bits(*((__le32 *)(rxdesc) + 0x00), BIT(26))
--#define GET_RX_DESC_ICV_ERR(rxdesc)                                            \
--	le32_get_bits(*((__le32 *)(rxdesc) + 0x00), BIT(15))
--#define GET_RX_DESC_CRC32(rxdesc)                                              \
--	le32_get_bits(*((__le32 *)(rxdesc) + 0x00), BIT(14))
--#define GET_RX_DESC_SWDEC(rxdesc)                                              \
--	le32_get_bits(*((__le32 *)(rxdesc) + 0x00), BIT(27))
--#define GET_RX_DESC_C2H(rxdesc)                                                \
--	le32_get_bits(*((__le32 *)(rxdesc) + 0x02), BIT(28))
--#define GET_RX_DESC_PKT_LEN(rxdesc)                                            \
--	le32_get_bits(*((__le32 *)(rxdesc) + 0x00), GENMASK(13, 0))
--#define GET_RX_DESC_DRV_INFO_SIZE(rxdesc)                                      \
--	le32_get_bits(*((__le32 *)(rxdesc) + 0x00), GENMASK(19, 16))
--#define GET_RX_DESC_SHIFT(rxdesc)                                              \
--	le32_get_bits(*((__le32 *)(rxdesc) + 0x00), GENMASK(25, 24))
--#define GET_RX_DESC_ENC_TYPE(rxdesc)                                           \
--	le32_get_bits(*((__le32 *)(rxdesc) + 0x00), GENMASK(22, 20))
--#define GET_RX_DESC_RX_RATE(rxdesc)                                            \
--	le32_get_bits(*((__le32 *)(rxdesc) + 0x03), GENMASK(6, 0))
--#define GET_RX_DESC_MACID(rxdesc)                                              \
--	le32_get_bits(*((__le32 *)(rxdesc) + 0x01), GENMASK(6, 0))
--#define GET_RX_DESC_PPDU_CNT(rxdesc)                                           \
--	le32_get_bits(*((__le32 *)(rxdesc) + 0x02), GENMASK(30, 29))
--#define GET_RX_DESC_TSFL(rxdesc)                                               \
--	le32_get_bits(*((__le32 *)(rxdesc) + 0x05), GENMASK(31, 0))
--#define GET_RX_DESC_BW(rxdesc)                                                 \
--	(le32_get_bits(*((__le32 *)(rxdesc) + 0x04), GENMASK(5, 4)))
-+struct rtw_rx_desc {
-+	__le32 w0;
-+	__le32 w1;
-+	__le32 w2;
-+	__le32 w3;
-+	__le32 w4;
-+	__le32 w5;
-+} __packed;
-+
-+#define RTW_RX_DESC_W0_PKT_LEN		GENMASK(13, 0)
-+#define RTW_RX_DESC_W0_CRC32		BIT(14)
-+#define RTW_RX_DESC_W0_ICV_ERR		BIT(15)
-+#define RTW_RX_DESC_W0_DRV_INFO_SIZE	GENMASK(19, 16)
-+#define RTW_RX_DESC_W0_ENC_TYPE		GENMASK(22, 20)
-+#define RTW_RX_DESC_W0_SHIFT		GENMASK(25, 24)
-+#define RTW_RX_DESC_W0_PHYST		BIT(26)
-+#define RTW_RX_DESC_W0_SWDEC		BIT(27)
-+
-+#define RTW_RX_DESC_W1_MACID		GENMASK(6, 0)
-+
-+#define RTW_RX_DESC_W2_C2H		BIT(28)
-+#define RTW_RX_DESC_W2_PPDU_CNT		GENMASK(30, 29)
-+
-+#define RTW_RX_DESC_W3_RX_RATE		GENMASK(6, 0)
-+
-+#define RTW_RX_DESC_W4_BW		GENMASK(5, 4)
-+
-+#define RTW_RX_DESC_W5_TSFL		GENMASK(31, 0)
- 
- void rtw_rx_stats(struct rtw_dev *rtwdev, struct ieee80211_vif *vif,
- 		  struct sk_buff *skb);
--void rtw_rx_fill_rx_status(struct rtw_dev *rtwdev,
--			   struct rtw_rx_pkt_stat *pkt_stat,
--			   struct ieee80211_hdr *hdr,
--			   struct ieee80211_rx_status *rx_status,
--			   u8 *phy_status);
-+void rtw_rx_query_rx_desc(struct rtw_dev *rtwdev, void *rx_desc8,
-+			  struct rtw_rx_pkt_stat *pkt_stat,
-+			  struct ieee80211_rx_status *rx_status);
- void rtw_update_rx_freq_from_ie(struct rtw_dev *rtwdev, struct sk_buff *skb,
- 				struct ieee80211_rx_status *rx_status,
- 				struct rtw_rx_pkt_stat *pkt_stat);
---- a/drivers/net/wireless/realtek/rtw88/sdio.c
-+++ b/drivers/net/wireless/realtek/rtw88/sdio.c
-@@ -981,8 +981,7 @@ static void rtw_sdio_rxfifo_recv(struct
- 
- 	while (true) {
- 		rx_desc = skb->data;
--		chip->ops->query_rx_desc(rtwdev, rx_desc, &pkt_stat,
--					 &rx_status);
-+		rtw_rx_query_rx_desc(rtwdev, rx_desc, &pkt_stat, &rx_status);
- 		pkt_offset = pkt_desc_sz + pkt_stat.drv_info_sz +
- 			     pkt_stat.shift;
- 
---- a/drivers/net/wireless/realtek/rtw88/usb.c
-+++ b/drivers/net/wireless/realtek/rtw88/usb.c
-@@ -571,8 +571,8 @@ static void rtw_usb_rx_handler(struct wo
- 
- 		do {
- 			rx_desc = skb->data;
--			chip->ops->query_rx_desc(rtwdev, rx_desc, &pkt_stat,
--						 &rx_status);
-+			rtw_rx_query_rx_desc(rtwdev, rx_desc, &pkt_stat,
-+					     &rx_status);
- 			pkt_offset = pkt_desc_sz + pkt_stat.drv_info_sz +
- 				     pkt_stat.shift;
- 
diff --git a/package/kernel/mac80211/patches/rtl/022-v6.13-wifi-rtw88-Refactor-looping-in-rtw_phy_store_tx_powe.patch b/package/kernel/mac80211/patches/rtl/022-v6.13-wifi-rtw88-Refactor-looping-in-rtw_phy_store_tx_powe.patch
deleted file mode 100644
index 4f019617d4..0000000000
--- a/package/kernel/mac80211/patches/rtl/022-v6.13-wifi-rtw88-Refactor-looping-in-rtw_phy_store_tx_powe.patch
+++ /dev/null
@@ -1,34 +0,0 @@
-From 7846f0b63562f4db45f712cc7dab091985baf07b Mon Sep 17 00:00:00 2001
-From: Mohammed Anees <pvmohammedanees2003@gmail.com>
-Date: Thu, 17 Oct 2024 13:36:38 +0530
-Subject: [PATCH] wifi: rtw88: Refactor looping in
- rtw_phy_store_tx_power_by_rate
-
-The previous implementation included an unnecessary else
-condition paired with a continue statement. Since a check
-is already performed to determine if the band is either
-2G or 5G, the else condition will never be triggered.
-We can remove this check.
-
-Signed-off-by: Mohammed Anees <pvmohammedanees2003@gmail.com>
-Acked-by: Ping-Ke Shih <pkshih@realtek.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/20241017080638.13074-1-pvmohammedanees2003@gmail.com
----
- drivers/net/wireless/realtek/rtw88/phy.c | 4 +---
- 1 file changed, 1 insertion(+), 3 deletions(-)
-
---- a/drivers/net/wireless/realtek/rtw88/phy.c
-+++ b/drivers/net/wireless/realtek/rtw88/phy.c
-@@ -1470,10 +1470,8 @@ static void rtw_phy_store_tx_power_by_ra
- 		rate = rates[i];
- 		if (band == PHY_BAND_2G)
- 			hal->tx_pwr_by_rate_offset_2g[rfpath][rate] = offset;
--		else if (band == PHY_BAND_5G)
--			hal->tx_pwr_by_rate_offset_5g[rfpath][rate] = offset;
- 		else
--			continue;
-+			hal->tx_pwr_by_rate_offset_5g[rfpath][rate] = offset;
- 	}
- }
- 
diff --git a/package/kernel/mac80211/patches/rtl/023-v6.13-wifi-rtw88-Report-the-signal-strength-only-if-it-s-k.patch b/package/kernel/mac80211/patches/rtl/023-v6.13-wifi-rtw88-Report-the-signal-strength-only-if-it-s-k.patch
deleted file mode 100644
index accbf2b484..0000000000
--- a/package/kernel/mac80211/patches/rtl/023-v6.13-wifi-rtw88-Report-the-signal-strength-only-if-it-s-k.patch
+++ /dev/null
@@ -1,39 +0,0 @@
-From 47f754b3f838205f3b25c4839f74801d180995bf Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Tue, 22 Oct 2024 20:20:26 +0300
-Subject: [PATCH] wifi: rtw88: Report the signal strength only if it's known
-
-RTL8811CU doesn't report the signal strength for many (any?) data
-frames. When the signal strength is not known, set
-RX_FLAG_NO_SIGNAL_VAL in order to avoid reporting a signal
-strength of 0.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Acked-by: Ping-Ke Shih <pkshih@realtek.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/f7e1e448-2c9b-498f-b8b1-a14dd967d7d3@gmail.com
----
- drivers/net/wireless/realtek/rtw88/rx.c | 12 ++++++++----
- 1 file changed, 8 insertions(+), 4 deletions(-)
-
---- a/drivers/net/wireless/realtek/rtw88/rx.c
-+++ b/drivers/net/wireless/realtek/rtw88/rx.c
-@@ -234,10 +234,14 @@ static void rtw_rx_fill_rx_status(struct
- 	else
- 		rx_status->bw = RATE_INFO_BW_20;
- 
--	rx_status->signal = pkt_stat->signal_power;
--	for (path = 0; path < rtwdev->hal.rf_path_num; path++) {
--		rx_status->chains |= BIT(path);
--		rx_status->chain_signal[path] = pkt_stat->rx_power[path];
-+	if (pkt_stat->phy_status) {
-+		rx_status->signal = pkt_stat->signal_power;
-+		for (path = 0; path < rtwdev->hal.rf_path_num; path++) {
-+			rx_status->chains |= BIT(path);
-+			rx_status->chain_signal[path] = pkt_stat->rx_power[path];
-+		}
-+	} else {
-+		rx_status->flag |= RX_FLAG_NO_SIGNAL_VAL;
- 	}
- 
- 	rtw_rx_addr_match(rtwdev, pkt_stat, hdr);
diff --git a/package/kernel/mac80211/patches/rtl/024-v6.13-wifi-rtw88-Add-some-definitions-for-RTL8821AU-RTL881.patch b/package/kernel/mac80211/patches/rtl/024-v6.13-wifi-rtw88-Add-some-definitions-for-RTL8821AU-RTL881.patch
deleted file mode 100644
index bf3d2fe267..0000000000
--- a/package/kernel/mac80211/patches/rtl/024-v6.13-wifi-rtw88-Add-some-definitions-for-RTL8821AU-RTL881.patch
+++ /dev/null
@@ -1,490 +0,0 @@
-From d12722830ea4f562e91586927ec21b64d0369544 Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 23 Oct 2024 17:00:59 +0300
-Subject: [PATCH] wifi: rtw88: Add some definitions for RTL8821AU/RTL8812AU
-
-Add 8821A and 8812A chip type enums.
-
-Add cck_high_power member to struct rtw_hal. This will be used to
-calculate the RX signal strength of RTL8812AU.
-
-Add various register definitions which will be used by the new drivers.
-
-Move some existing register definitions from rtw8821c.h and rtw8822b.h.
-They were duplicated in those headers and will also be used by the new
-drivers.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/9279a9cd-6f86-4dc3-a095-7c36cb9b9d06@gmail.com
----
- drivers/net/wireless/realtek/rtw88/main.h     |   3 +
- drivers/net/wireless/realtek/rtw88/reg.h      | 174 ++++++++++++++++++
- drivers/net/wireless/realtek/rtw88/rtw8821c.h |  24 ---
- drivers/net/wireless/realtek/rtw88/rtw8822b.h |  12 --
- 4 files changed, 177 insertions(+), 36 deletions(-)
-
---- a/drivers/net/wireless/realtek/rtw88/main.h
-+++ b/drivers/net/wireless/realtek/rtw88/main.h
-@@ -189,6 +189,8 @@ enum rtw_chip_type {
- 	RTW_CHIP_TYPE_8723D,
- 	RTW_CHIP_TYPE_8821C,
- 	RTW_CHIP_TYPE_8703B,
-+	RTW_CHIP_TYPE_8821A,
-+	RTW_CHIP_TYPE_8812A,
- };
- 
- enum rtw_tx_queue_type {
-@@ -1934,6 +1936,7 @@ struct rtw_hal {
- 	u32 antenna_rx;
- 	u8 bfee_sts_cap;
- 	bool txrx_1ss;
-+	bool cck_high_power;
- 
- 	/* protect tx power section */
- 	struct mutex tx_power_mutex;
---- a/drivers/net/wireless/realtek/rtw88/reg.h
-+++ b/drivers/net/wireless/realtek/rtw88/reg.h
-@@ -9,6 +9,7 @@
- #define BIT_FEN_EN_25_1		BIT(13)
- #define BIT_FEN_ELDR		BIT(12)
- #define BIT_FEN_CPUEN		BIT(2)
-+#define BIT_FEN_USBA		BIT(2)
- #define BIT_FEN_BB_GLB_RST	BIT(1)
- #define BIT_FEN_BB_RSTB		BIT(0)
- #define BIT_R_DIS_PRST		BIT(6)
-@@ -16,6 +17,10 @@
- #define REG_SYS_PW_CTRL		0x0004
- #define BIT_PFM_WOWL		BIT(3)
- #define BIT_APFM_OFFMAC		BIT(9)
-+#define REG_APS_FSMCO		0x0004
-+#define APS_FSMCO_MAC_ENABLE	BIT(8)
-+#define APS_FSMCO_MAC_OFF	BIT(9)
-+#define APS_FSMCO_HW_POWERDOWN	BIT(15)
- #define REG_SYS_CLK_CTRL	0x0008
- #define BIT_CPU_CLK_EN		BIT(14)
- 
-@@ -58,6 +63,8 @@
- #define BIT_SHIFT_LDO25_VOLTAGE	4
- #define BIT_LDO25_EN		BIT(7)
- 
-+#define REG_ACLK_MON		0x3e
-+
- #define REG_GPIO_MUXCFG		0x0040
- #define BIT_FSPI_EN		BIT(19)
- #define BIT_EN_SIC		BIT(12)
-@@ -90,6 +97,8 @@
- #define BIT_USB_SUS_DIS		BIT(8)
- #define BIT_SDIO_PAD_E5		BIT(18)
- 
-+#define REG_RF_B_CTRL		0x76
-+
- #define REG_AFE_CTRL_4		0x0078
- #define BIT_CK320M_AFE_EN	BIT(4)
- #define BIT_EN_SYN		BIT(15)
-@@ -134,6 +143,11 @@
- #define REG_PMC_DBG_CTRL1	0xa8
- #define BITS_PMC_BT_IQK_STS	GENMASK(22, 21)
- 
-+#define REG_HIMR0		0xb0
-+#define REG_HISR0		0xb4
-+#define REG_HIMR1		0xb8
-+#define REG_HISR1		0xbc
-+
- #define REG_PAD_CTRL2		0x00C4
- #define BIT_RSM_EN_V1		BIT(16)
- #define BIT_NO_PDN_CHIPOFF_V1	BIT(17)
-@@ -185,6 +199,15 @@
- #define MAC_TRX_ENABLE	(BIT_HCI_TXDMA_EN | BIT_HCI_RXDMA_EN | BIT_TXDMA_EN | \
- 			BIT_RXDMA_EN | BIT_PROTOCOL_EN | BIT_SCHEDULE_EN | \
- 			BIT_MACTXEN | BIT_MACRXEN)
-+#define REG_PBP			0x104
-+#define PBP_RX_MASK		0x0f
-+#define PBP_TX_MASK		0xf0
-+#define PBP_64			0x0
-+#define PBP_128			0x1
-+#define PBP_256			0x2
-+#define PBP_512			0x3
-+#define PBP_1024		0x4
-+
- #define BIT_SHIFT_TXDMA_VOQ_MAP	4
- #define BIT_MASK_TXDMA_VOQ_MAP	0x3
- #define BIT_TXDMA_VOQ_MAP(x)                                                   \
-@@ -256,6 +279,8 @@
- #define REG_HMEBOX1		0x01D4
- #define REG_HMEBOX2		0x01D8
- #define REG_HMEBOX3		0x01DC
-+#define REG_LLT_INIT		0x01E0
-+#define BIT_LLT_WRITE_ACCESS	BIT(30)
- #define REG_HMEBOX0_EX		0x01F0
- #define REG_HMEBOX1_EX		0x01F4
- #define REG_HMEBOX2_EX		0x01F8
-@@ -298,6 +323,7 @@
- 
- #define REG_AUTO_LLT		0x0224
- #define BIT_AUTO_INIT_LLT	BIT(16)
-+#define REG_DWBCN1_CTRL		0x0228
- #define REG_RQPN_CTRL_1		0x0228
- #define REG_RQPN_CTRL_2		0x022C
- #define BIT_LD_RQPN		BIT(31)
-@@ -329,6 +355,7 @@
- #define BIT_DMA_BURST_SIZE_1024	0
- 
- #define REG_RXPKTNUM		0x02B0
-+#define REG_EARLY_MODE_CONTROL	0x02BC
- 
- #define REG_INT_MIG		0x0304
- #define REG_HCI_MIX_CFG		0x03FC
-@@ -336,6 +363,7 @@
- 
- #define REG_BCNQ_INFO		0x0418
- #define BIT_MGQ_CPU_EMPTY	BIT(24)
-+#define REG_TXPKT_EMPTY		0x041A
- #define REG_FWHW_TXQ_CTRL	0x0420
- #define BIT_EN_BCNQ_DL		BIT(22)
- #define BIT_EN_WR_FREE_TAIL	BIT(20)
-@@ -362,10 +390,12 @@
- #define REG_AMPDU_MAX_TIME_V1	0x0455
- #define REG_BCNQ1_BDNY_V1	0x0456
- #define REG_AMPDU_MAX_TIME	0x0456
-+#define REG_AMPDU_MAX_LENGTH	0x0458
- #define REG_WMAC_LBK_BF_HD	0x045D
- #define REG_TX_HANG_CTRL	0x045E
- #define BIT_EN_GNT_BT_AWAKE	BIT(3)
- #define BIT_EN_EOF_V1		BIT(2)
-+#define REG_FAST_EDCA_CTRL	0x0460
- #define REG_DATA_SC		0x0483
- #define REG_ARFR2_V1		0x048C
- #define REG_ARFRH2_V1		0x0490
-@@ -390,6 +420,8 @@
- #define REG_PRECNT_CTRL		0x04E5
- #define BIT_BTCCA_CTRL		(BIT(0) | BIT(1))
- #define BIT_EN_PRECNT		BIT(11)
-+#define REG_TX_RPT_CTRL		0x04EC
-+#define REG_TX_RPT_TIME		0x04F0
- #define REG_DUMMY_PAGE4_V1	0x04FC
- 
- #define REG_EDCA_VO_PARAM	0x0500
-@@ -400,6 +432,7 @@
- #define BIT_MASK_CWMAX		GENMASK(15, 12)
- #define BIT_MASK_CWMIN		GENMASK(11, 8)
- #define BIT_MASK_AIFS		GENMASK(7, 0)
-+#define REG_BCNTCFG		0x0510
- #define REG_PIFS		0x0512
- #define REG_SIFS		0x0514
- #define BIT_SHIFT_SIFS_OFDM_CTX	8
-@@ -526,6 +559,8 @@
- #define REG_BT_COEX_V2		0x0762
- #define BIT_GNT_BT_POLARITY	BIT(12)
- #define BIT_LTE_COEX_EN		BIT(7)
-+#define REG_GNT_BT		0x0765
-+#define BIT_PTA_SW_CTL		GENMASK(4, 3)
- #define REG_BT_COEX_ENH_INTR_CTRL	0x76E
- #define BIT_R_GRANTALL_WLMASK	BIT(3)
- #define BIT_STATIS_BT_EN	BIT(2)
-@@ -543,14 +578,43 @@
- #define REG_FPGA0_RFMOD		0x0800
- #define BIT_CCKEN		BIT(24)
- #define BIT_OFDMEN		BIT(25)
-+#define REG_CCK_RPT_FORMAT	0x0804
-+#define BIT_CCK_RPT_FORMAT	BIT(16)
-+#define REG_RXPSEL		0x0808
-+#define BIT_RX_PSEL_RST		(BIT(28) | BIT(29))
-+#define REG_TXPSEL		0x080C
- #define REG_RX_GAIN_EN		0x081c
-+#define REG_CCASEL		0x082C
-+#define REG_PDMFTH		0x0830
-+#define REG_BWINDICATION	0x0834
-+#define REG_CCA2ND		0x0838
-+#define REG_L1PKTH		0x0848
-+#define REG_CLKTRK		0x0860
-+#define REG_ADCCLK		0x08AC
-+#define REG_HSSI_READ		0x08B0
-+#define REG_FPGA0_XCD_RF_PARA	0x08B4
-+#define REG_RX_MCS_LIMIT	0x08BC
-+#define REG_ADC160		0x08C4
-+#define REG_ANTSEL_SW		0x0900
-+#define REG_DAC_RSTB		0x090c
-+#define REG_SINGLE_TONE_CONT_TX	0x0914
- 
- #define REG_RFE_CTRL_E		0x0974
- #define REG_2ND_CCA_CTRL	0x0976
-+#define REG_IQK_COM00		0x0978
-+#define REG_IQK_COM32		0x097c
-+#define REG_IQK_COM64		0x0980
-+#define REG_IQK_COM96		0x0984
-+
-+#define REG_FAS			0x09a4
-+#define REG_RXSB		0x0a00
-+#define REG_CCK_RX		0x0a04
-+#define REG_CCK_PD_TH		0x0a0a
- 
- #define REG_CCK0_FAREPORT	0xa2c
- #define BIT_CCK0_2RX		BIT(18)
- #define BIT_CCK0_MRC		BIT(22)
-+#define REG_FA_CCK		0x0a5c
- 
- #define REG_DIS_DPD		0x0a70
- #define DIS_DPD_MASK		GENMASK(9, 0)
-@@ -566,13 +630,109 @@
- #define DIS_DPD_RATEVHT2SS_MCS1	BIT(9)
- #define DIS_DPD_RATEALL		GENMASK(9, 0)
- 
-+#define REG_CNTRST		0x0b58
-+
-+#define REG_3WIRE_SWA		0x0c00
-+#define REG_RX_IQC_AB_A		0x0c10
-+#define REG_TXSCALE_A		0x0c1c
-+#define BB_SWING_MASK		GENMASK(31, 21)
-+#define REG_TX_AGC_A_CCK_11_CCK_1		0xc20
-+#define REG_TX_AGC_A_OFDM18_OFDM6		0xc24
-+#define REG_TX_AGC_A_OFDM54_OFDM24		0xc28
-+#define REG_TX_AGC_A_MCS3_MCS0			0xc2c
-+#define REG_TX_AGC_A_MCS7_MCS4			0xc30
-+#define REG_TX_AGC_A_MCS11_MCS8			0xc34
-+#define REG_TX_AGC_A_MCS15_MCS12		0xc38
-+#define REG_TX_AGC_A_NSS1_INDEX3_NSS1_INDEX0	0xc3c
-+#define REG_TX_AGC_A_NSS1_INDEX7_NSS1_INDEX4	0xc40
-+#define REG_TX_AGC_A_NSS2_INDEX1_NSS1_INDEX8	0xc44
-+#define REG_TX_AGC_A_NSS2_INDEX5_NSS2_INDEX2	0xc48
-+#define REG_TX_AGC_A_NSS2_INDEX9_NSS2_INDEX6	0xc4c
-+#define REG_RXIGI_A		0x0c50
-+#define REG_TX_PWR_TRAINING_A	0x0c54
-+#define REG_CK_MONHA		0x0c5c
-+#define REG_AFE_PWR1_A		0x0c60
-+#define REG_AFE_PWR2_A		0x0c64
-+#define REG_RX_WAIT_CCA_TX_CCK_RFON_A	0x0c68
-+#define REG_OFDM0_XA_TX_IQ_IMBALANCE	0x0c80
-+#define REG_OFDM0_A_TX_AFE	0x0c84
-+#define REG_OFDM0_XB_TX_IQ_IMBALANCE	0x0c88
-+#define REG_TSSI_TRK_SW		0x0c8c
-+#define REG_LSSI_WRITE_A	0x0c90
-+#define REG_PREDISTA		0x0c90
-+#define REG_TXAGCIDX		0x0c94
-+
-+#define REG_RFE_PINMUX_A	0x0cb0
-+#define REG_RFE_INV_A		0x0cb4
- #define REG_RFE_CTRL8		0x0cb4
- #define BIT_MASK_RFE_SEL89	GENMASK(7, 0)
-+#define PTA_CTRL_PIN		0x66
-+#define DPDT_CTRL_PIN		0x77
-+#define RFE_INV_MASK		0x3ff00000
-+#define REG_RFECTL_A		0x0cb8
- #define REG_RFE_INV8		0x0cbd
- #define BIT_MASK_RFE_INV89	GENMASK(1, 0)
- #define REG_RFE_INV16		0x0cbe
- #define BIT_RFE_BUF_EN		BIT(3)
- 
-+#define REG_IQK_DPD_CFG		0x0cc4
-+#define REG_CFG_PMPD		0x0cc8
-+#define REG_IQC_Y		0x0ccc
-+#define REG_IQC_X		0x0cd4
-+#define REG_INTPO_SETA		0x0ce8
-+
-+#define REG_IQKA_END		0x0d00
-+#define REG_PI_READ_A		0x0d04
-+#define REG_SI_READ_A		0x0d08
-+#define REG_IQKB_END		0x0d40
-+#define REG_PI_READ_B		0x0d44
-+#define REG_SI_READ_B		0x0d48
-+
-+#define REG_3WIRE_SWB		0x0e00
-+#define REG_RX_IQC_AB_B		0x0e10
-+#define REG_TXSCALE_B		0x0e1c
-+#define REG_TX_AGC_B_CCK_11_CCK_1		0xe20
-+#define REG_TX_AGC_B_OFDM18_OFDM6		0xe24
-+#define REG_TX_AGC_B_OFDM54_OFDM24		0xe28
-+#define REG_TX_AGC_B_MCS3_MCS0			0xe2c
-+#define REG_TX_AGC_B_MCS7_MCS4			0xe30
-+#define REG_TX_AGC_B_MCS11_MCS8			0xe34
-+#define REG_TX_AGC_B_MCS15_MCS12		0xe38
-+#define REG_TX_AGC_B_NSS1_INDEX3_NSS1_INDEX0	0xe3c
-+#define REG_TX_AGC_B_NSS1_INDEX7_NSS1_INDEX4	0xe40
-+#define REG_TX_AGC_B_NSS2_INDEX1_NSS1_INDEX8	0xe44
-+#define REG_TX_AGC_B_NSS2_INDEX5_NSS2_INDEX2	0xe48
-+#define REG_TX_AGC_B_NSS2_INDEX9_NSS2_INDEX6	0xe4c
-+#define REG_RXIGI_B		0x0e50
-+#define REG_TX_PWR_TRAINING_B	0x0e54
-+#define REG_CK_MONHB		0x0e5c
-+#define REG_AFE_PWR1_B		0x0e60
-+#define REG_AFE_PWR2_B		0x0e64
-+#define REG_RX_WAIT_CCA_TX_CCK_RFON_B	0x0e68
-+#define REG_TXTONEB		0x0e80
-+#define REG_RXTONEB		0x0e84
-+#define REG_TXPITMB		0x0e88
-+#define REG_RXPITMB		0x0e8c
-+#define REG_LSSI_WRITE_B	0x0e90
-+#define REG_PREDISTB		0x0e90
-+#define REG_INIDLYB		0x0e94
-+#define REG_RFE_PINMUX_B	0x0eb0
-+#define REG_RFE_INV_B		0x0eb4
-+#define REG_RFECTL_B		0x0eb8
-+#define REG_BPBDB		0x0ec4
-+#define REG_PHYTXONB		0x0ec8
-+#define REG_IQKYB		0x0ecc
-+#define REG_IQKXB		0x0ed4
-+#define REG_INTPO_SETB		0x0ee8
-+
-+#define REG_CRC_CCK		0x0f04
-+#define REG_CCA_OFDM		0x0f08
-+#define REG_CRC_VHT		0x0f0c
-+#define REG_CRC_HT		0x0f10
-+#define REG_CRC_OFDM		0x0f14
-+#define REG_FA_OFDM		0x0f48
-+#define REG_CCA_CCK		0x0fcc
-+
- #define REG_ANAPARSW_MAC_0	0x1010
- #define BIT_CF_L_V2		GENMASK(29, 28)
- 
-@@ -709,6 +869,10 @@
- 
- #define REG_IGN_GNTBT4	0x4160
- 
-+#define REG_USB_MOD	0xf008
-+#define REG_USB3_RXITV	0xf050
-+#define REG_USB_HRPWM	0xfe58
-+
- #define RF_MODE		0x00
- #define RF_MODOPT	0x01
- #define RF_WLINT	0x01
-@@ -716,7 +880,13 @@
- #define RF_DTXLOK	0x08
- #define RF_CFGCH	0x18
- #define BIT_BAND	GENMASK(18, 16)
-+#define RF18_BAND_MASK	(BIT(16) | BIT(9) | BIT(8))
-+#define RF18_CHANNEL_MASK	(MASKBYTE0)
-+#define RF18_RFSI_MASK	(BIT(18) | BIT(17))
- #define RF_RCK		0x1d
-+#define RF_MODE_TABLE_ADDR	0x30
-+#define RF_MODE_TABLE_DATA0	0x31
-+#define RF_MODE_TABLE_DATA1	0x32
- #define RF_LUTWA	0x33
- #define RF_LUTWD1	0x3e
- #define RF_LUTWD0	0x3f
-@@ -725,10 +895,14 @@
- #define RF_T_METER	0x42
- #define RF_BSPAD	0x54
- #define RF_GAINTX	0x56
-+#define RF_TXMOD	0x58
- #define RF_TXATANK	0x64
-+#define RF_TXA_PREPAD	0x65
- #define RF_TRXIQ	0x66
- #define RF_RXIQGEN	0x8d
-+#define RF_RXBB2	0x8f
- #define RF_SYN_PFD	0xb0
-+#define RF_LCK		0xb4
- #define RF_XTALX2	0xb8
- #define RF_SYN_CTRL	0xbb
- #define RF_MALSEL	0xbe
---- a/drivers/net/wireless/realtek/rtw88/rtw8821c.h
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8821c.h
-@@ -214,19 +214,10 @@ extern const struct rtw_chip_info rtw882
- #define BIT_FEN_EN	BIT(26)
- #define REG_INIRTS_RATE_SEL 0x0480
- #define REG_HTSTFWT	0x800
--#define REG_RXPSEL	0x808
--#define BIT_RX_PSEL_RST		(BIT(28) | BIT(29))
--#define REG_TXPSEL	0x80c
- #define REG_RXCCAMSK	0x814
--#define REG_CCASEL	0x82c
--#define REG_PDMFTH	0x830
--#define REG_CCA2ND	0x838
- #define REG_L1WT	0x83c
- #define REG_L1PKWT	0x840
- #define REG_MRC		0x850
--#define REG_CLKTRK	0x860
--#define REG_ADCCLK	0x8ac
--#define REG_ADC160	0x8c4
- #define REG_ADC40	0x8c8
- #define REG_CHFIR	0x8f0
- #define REG_CDDTXP	0x93c
-@@ -234,14 +225,11 @@ extern const struct rtw_chip_info rtw882
- #define REG_ACBB0	0x948
- #define REG_ACBBRXFIR	0x94c
- #define REG_ACGG2TBL	0x958
--#define REG_FAS		0x9a4
--#define REG_RXSB	0xa00
- #define REG_ADCINI	0xa04
- #define REG_PWRTH	0xa08
- #define REG_CCA_FLTR	0xa20
- #define REG_TXSF2	0xa24
- #define REG_TXSF6	0xa28
--#define REG_FA_CCK	0xa5c
- #define REG_RXDESC	0xa2c
- #define REG_ENTXCCK	0xa80
- #define BTG_LNA		0xfc84
-@@ -252,12 +240,8 @@ extern const struct rtw_chip_info rtw882
- #define REG_PWRTH2	0xaa8
- #define REG_CSRATIO	0xaaa
- #define REG_TXFILTER	0xaac
--#define REG_CNTRST	0xb58
- #define REG_AGCTR_A	0xc08
--#define REG_TXSCALE_A	0xc1c
- #define REG_TXDFIR	0xc20
--#define REG_RXIGI_A	0xc50
--#define REG_TXAGCIDX	0xc94
- #define REG_TRSW	0xca0
- #define REG_RFESEL0	0xcb0
- #define REG_RFESEL8	0xcb4
-@@ -269,14 +253,6 @@ extern const struct rtw_chip_info rtw882
- #define B_WLA_SWITCH	BIT(23)
- #define REG_RFEINV	0xcbc
- #define REG_AGCTR_B	0xe08
--#define REG_RXIGI_B	0xe50
--#define REG_CRC_CCK	0xf04
--#define REG_CRC_OFDM	0xf14
--#define REG_CRC_HT	0xf10
--#define REG_CRC_VHT	0xf0c
--#define REG_CCA_OFDM	0xf08
--#define REG_FA_OFDM	0xf48
--#define REG_CCA_CCK	0xfcc
- #define REG_DMEM_CTRL	0x1080
- #define BIT_WL_RST	BIT(16)
- #define REG_ANTWT	0x1904
---- a/drivers/net/wireless/realtek/rtw88/rtw8822b.h
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8822b.h
-@@ -151,21 +151,12 @@ _rtw_write32s_mask(struct rtw_dev *rtwde
- #define RTW8822B_EDCCA_MAX	0x7f
- #define RTW8822B_EDCCA_SRC_DEF	1
- #define REG_HTSTFWT	0x800
--#define REG_RXPSEL	0x808
--#define BIT_RX_PSEL_RST		(BIT(28) | BIT(29))
--#define REG_TXPSEL	0x80c
- #define REG_RXCCAMSK	0x814
--#define REG_CCASEL	0x82c
--#define REG_PDMFTH	0x830
--#define REG_CCA2ND	0x838
- #define REG_L1WT	0x83c
- #define REG_L1PKWT	0x840
- #define REG_MRC		0x850
--#define REG_CLKTRK	0x860
- #define REG_EDCCA_POW_MA	0x8a0
- #define BIT_MA_LEVEL	GENMASK(1, 0)
--#define REG_ADCCLK	0x8ac
--#define REG_ADC160	0x8c4
- #define REG_ADC40	0x8c8
- #define REG_EDCCA_DECISION	0x8dc
- #define BIT_EDCCA_OPTION	BIT(5)
-@@ -176,7 +167,6 @@ _rtw_write32s_mask(struct rtw_dev *rtwde
- #define REG_ACBB0	0x948
- #define REG_ACBBRXFIR	0x94c
- #define REG_ACGG2TBL	0x958
--#define REG_RXSB	0xa00
- #define REG_ADCINI	0xa04
- #define REG_TXSF2	0xa24
- #define REG_TXSF6	0xa28
-@@ -184,14 +174,12 @@ _rtw_write32s_mask(struct rtw_dev *rtwde
- #define REG_ENTXCCK	0xa80
- #define REG_AGCTR_A	0xc08
- #define REG_TXDFIR	0xc20
--#define REG_RXIGI_A	0xc50
- #define REG_TRSW	0xca0
- #define REG_RFESEL0	0xcb0
- #define REG_RFESEL8	0xcb4
- #define REG_RFECTL	0xcb8
- #define REG_RFEINV	0xcbc
- #define REG_AGCTR_B	0xe08
--#define REG_RXIGI_B	0xe50
- #define REG_ANTWT	0x1904
- #define REG_IQKFAILMSK	0x1bf0
- 
diff --git a/package/kernel/mac80211/patches/rtl/025-v6.13-wifi-rtw88-Dump-the-HW-features-only-for-some-chips.patch b/package/kernel/mac80211/patches/rtl/025-v6.13-wifi-rtw88-Dump-the-HW-features-only-for-some-chips.patch
deleted file mode 100644
index 279e8ba761..0000000000
--- a/package/kernel/mac80211/patches/rtl/025-v6.13-wifi-rtw88-Dump-the-HW-features-only-for-some-chips.patch
+++ /dev/null
@@ -1,93 +0,0 @@
-From 87341ca1eac9a3bac23bd41f6e24f3c93b77452f Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 23 Oct 2024 17:02:05 +0300
-Subject: [PATCH] wifi: rtw88: Dump the HW features only for some chips
-
-RTL8821AU and RTL8812AU don't support this. They hit the "failed to read
-hw feature report" error.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/8becd851-8760-4480-8e8c-c4869ce72507@gmail.com
----
- drivers/net/wireless/realtek/rtw88/main.c     | 3 +++
- drivers/net/wireless/realtek/rtw88/main.h     | 1 +
- drivers/net/wireless/realtek/rtw88/rtw8703b.c | 1 +
- drivers/net/wireless/realtek/rtw88/rtw8723d.c | 1 +
- drivers/net/wireless/realtek/rtw88/rtw8821c.c | 1 +
- drivers/net/wireless/realtek/rtw88/rtw8822b.c | 1 +
- drivers/net/wireless/realtek/rtw88/rtw8822c.c | 1 +
- 7 files changed, 9 insertions(+)
-
---- a/drivers/net/wireless/realtek/rtw88/main.c
-+++ b/drivers/net/wireless/realtek/rtw88/main.c
-@@ -1917,6 +1917,9 @@ static int rtw_dump_hw_feature(struct rt
- 	u8 bw;
- 	int i;
- 
-+	if (!rtwdev->chip->hw_feature_report)
-+		return 0;
-+
- 	id = rtw_read8(rtwdev, REG_C2HEVT);
- 	if (id != C2H_HW_FEATURE_REPORT) {
- 		rtw_err(rtwdev, "failed to read hw feature report\n");
---- a/drivers/net/wireless/realtek/rtw88/main.h
-+++ b/drivers/net/wireless/realtek/rtw88/main.h
-@@ -1200,6 +1200,7 @@ struct rtw_chip_info {
- 	const struct rtw_fwcd_segs *fwcd_segs;
- 
- 	u8 usb_tx_agg_desc_num;
-+	bool hw_feature_report;
- 
- 	u8 default_1ss_tx_path;
- 
---- a/drivers/net/wireless/realtek/rtw88/rtw8703b.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8703b.c
-@@ -1960,6 +1960,7 @@ const struct rtw_chip_info rtw8703b_hw_s
- 	.max_power_index = 0x3f,
- 	.ampdu_density = IEEE80211_HT_MPDU_DENSITY_16,
- 	.usb_tx_agg_desc_num = 1, /* Not sure if this chip has USB interface */
-+	.hw_feature_report = true,
- 
- 	.path_div_supported = false,
- 	.ht_supported = true,
---- a/drivers/net/wireless/realtek/rtw88/rtw8723d.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8723d.c
-@@ -2131,6 +2131,7 @@ const struct rtw_chip_info rtw8723d_hw_s
- 	.page_size = TX_PAGE_SIZE,
- 	.dig_min = 0x20,
- 	.usb_tx_agg_desc_num = 1,
-+	.hw_feature_report = true,
- 	.ht_supported = true,
- 	.vht_supported = false,
- 	.lps_deep_mode_supported = 0,
---- a/drivers/net/wireless/realtek/rtw88/rtw8821c.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8821c.c
-@@ -1968,6 +1968,7 @@ const struct rtw_chip_info rtw8821c_hw_s
- 	.page_size = TX_PAGE_SIZE,
- 	.dig_min = 0x1c,
- 	.usb_tx_agg_desc_num = 3,
-+	.hw_feature_report = true,
- 	.ht_supported = true,
- 	.vht_supported = true,
- 	.lps_deep_mode_supported = BIT(LPS_DEEP_MODE_LCLK),
---- a/drivers/net/wireless/realtek/rtw88/rtw8822b.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8822b.c
-@@ -2509,6 +2509,7 @@ const struct rtw_chip_info rtw8822b_hw_s
- 	.page_size = TX_PAGE_SIZE,
- 	.dig_min = 0x1c,
- 	.usb_tx_agg_desc_num = 3,
-+	.hw_feature_report = true,
- 	.ht_supported = true,
- 	.vht_supported = true,
- 	.lps_deep_mode_supported = BIT(LPS_DEEP_MODE_LCLK),
---- a/drivers/net/wireless/realtek/rtw88/rtw8822c.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8822c.c
-@@ -5329,6 +5329,7 @@ const struct rtw_chip_info rtw8822c_hw_s
- 	.page_size = TX_PAGE_SIZE,
- 	.dig_min = 0x20,
- 	.usb_tx_agg_desc_num = 3,
-+	.hw_feature_report = true,
- 	.default_1ss_tx_path = BB_PATH_A,
- 	.path_div_supported = true,
- 	.ht_supported = true,
diff --git a/package/kernel/mac80211/patches/rtl/026-v6.13-wifi-rtw88-Allow-different-C2H-RA-report-sizes.patch b/package/kernel/mac80211/patches/rtl/026-v6.13-wifi-rtw88-Allow-different-C2H-RA-report-sizes.patch
deleted file mode 100644
index 0e97febb72..0000000000
--- a/package/kernel/mac80211/patches/rtl/026-v6.13-wifi-rtw88-Allow-different-C2H-RA-report-sizes.patch
+++ /dev/null
@@ -1,175 +0,0 @@
-From d9018f4373517d4560ce2ebf12684f77f5fbdad6 Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 23 Oct 2024 17:06:14 +0300
-Subject: [PATCH] wifi: rtw88: Allow different C2H RA report sizes
-
-The RTL8821AU and RTL8812AU have smaller RA report size, only 4 bytes.
-Avoid the "invalid ra report c2h length" error.
-
-Also, use a struct and u8_get_bits() to access the RA report C2H.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/c3e73c3a-fb2f-4013-9f06-d5274211e282@gmail.com
----
- drivers/net/wireless/realtek/rtw88/fw.c       | 21 +++++++++++++------
- drivers/net/wireless/realtek/rtw88/fw.h       | 17 +++++++++++----
- drivers/net/wireless/realtek/rtw88/main.h     |  1 +
- drivers/net/wireless/realtek/rtw88/rtw8703b.c |  1 +
- drivers/net/wireless/realtek/rtw88/rtw8723d.c |  1 +
- drivers/net/wireless/realtek/rtw88/rtw8821c.c |  1 +
- drivers/net/wireless/realtek/rtw88/rtw8822b.c |  1 +
- drivers/net/wireless/realtek/rtw88/rtw8822c.c |  1 +
- 8 files changed, 34 insertions(+), 10 deletions(-)
-
---- a/drivers/net/wireless/realtek/rtw88/fw.c
-+++ b/drivers/net/wireless/realtek/rtw88/fw.c
-@@ -139,25 +139,30 @@ static u16 get_max_amsdu_len(u32 bit_rat
- struct rtw_fw_iter_ra_data {
- 	struct rtw_dev *rtwdev;
- 	u8 *payload;
-+	u8 length;
- };
- 
- static void rtw_fw_ra_report_iter(void *data, struct ieee80211_sta *sta)
- {
- 	struct rtw_fw_iter_ra_data *ra_data = data;
-+	struct rtw_c2h_ra_rpt *ra_rpt = (struct rtw_c2h_ra_rpt *)ra_data->payload;
- 	struct rtw_sta_info *si = (struct rtw_sta_info *)sta->drv_priv;
- 	u8 mac_id, rate, sgi, bw;
- 	u8 mcs, nss;
- 	u32 bit_rate;
- 
--	mac_id = GET_RA_REPORT_MACID(ra_data->payload);
-+	mac_id = ra_rpt->mac_id;
- 	if (si->mac_id != mac_id)
- 		return;
- 
- 	si->ra_report.txrate.flags = 0;
- 
--	rate = GET_RA_REPORT_RATE(ra_data->payload);
--	sgi = GET_RA_REPORT_SGI(ra_data->payload);
--	bw = GET_RA_REPORT_BW(ra_data->payload);
-+	rate = u8_get_bits(ra_rpt->rate_sgi, RTW_C2H_RA_RPT_RATE);
-+	sgi = u8_get_bits(ra_rpt->rate_sgi, RTW_C2H_RA_RPT_SGI);
-+	if (ra_data->length >= offsetofend(typeof(*ra_rpt), bw))
-+		bw = ra_rpt->bw;
-+	else
-+		bw = si->bw_mode;
- 
- 	if (rate < DESC_RATEMCS0) {
- 		si->ra_report.txrate.legacy = rtw_desc_to_bitrate(rate);
-@@ -197,14 +202,18 @@ legacy:
- static void rtw_fw_ra_report_handle(struct rtw_dev *rtwdev, u8 *payload,
- 				    u8 length)
- {
-+	struct rtw_c2h_ra_rpt *ra_rpt = (struct rtw_c2h_ra_rpt *)payload;
- 	struct rtw_fw_iter_ra_data ra_data;
- 
--	if (WARN(length < 7, "invalid ra report c2h length\n"))
-+	if (WARN(length < rtwdev->chip->c2h_ra_report_size,
-+		 "invalid ra report c2h length %d\n", length))
- 		return;
- 
--	rtwdev->dm_info.tx_rate = GET_RA_REPORT_RATE(payload);
-+	rtwdev->dm_info.tx_rate = u8_get_bits(ra_rpt->rate_sgi,
-+					      RTW_C2H_RA_RPT_RATE);
- 	ra_data.rtwdev = rtwdev;
- 	ra_data.payload = payload;
-+	ra_data.length = length;
- 	rtw_iterate_stas_atomic(rtwdev, rtw_fw_ra_report_iter, &ra_data);
- }
- 
---- a/drivers/net/wireless/realtek/rtw88/fw.h
-+++ b/drivers/net/wireless/realtek/rtw88/fw.h
-@@ -85,6 +85,19 @@ struct rtw_c2h_adaptivity {
- 	u8 option;
- } __packed;
- 
-+struct rtw_c2h_ra_rpt {
-+	u8 rate_sgi;
-+	u8 mac_id;
-+	u8 byte2;
-+	u8 status;
-+	u8 byte4;
-+	u8 ra_ratio;
-+	u8 bw;
-+} __packed;
-+
-+#define RTW_C2H_RA_RPT_RATE	GENMASK(6, 0)
-+#define RTW_C2H_RA_RPT_SGI	BIT(7)
-+
- struct rtw_h2c_register {
- 	u32 w0;
- 	u32 w1;
-@@ -364,10 +377,6 @@ struct rtw_fw_hdr_legacy {
- #define GET_CHAN_SWITCH_CENTRAL_CH(c2h_payload)	(c2h_payload[2])
- #define GET_CHAN_SWITCH_ID(c2h_payload)		(c2h_payload[3])
- #define GET_CHAN_SWITCH_STATUS(c2h_payload)	(c2h_payload[4])
--#define GET_RA_REPORT_RATE(c2h_payload)		(c2h_payload[0] & 0x7f)
--#define GET_RA_REPORT_SGI(c2h_payload)		((c2h_payload[0] & 0x80) >> 7)
--#define GET_RA_REPORT_BW(c2h_payload)		(c2h_payload[6])
--#define GET_RA_REPORT_MACID(c2h_payload)	(c2h_payload[1])
- 
- #define GET_BCN_FILTER_NOTIFY_TYPE(c2h_payload)	(c2h_payload[1] & 0xf)
- #define GET_BCN_FILTER_NOTIFY_EVENT(c2h_payload)	(c2h_payload[1] & 0x10)
---- a/drivers/net/wireless/realtek/rtw88/main.h
-+++ b/drivers/net/wireless/realtek/rtw88/main.h
-@@ -1201,6 +1201,7 @@ struct rtw_chip_info {
- 
- 	u8 usb_tx_agg_desc_num;
- 	bool hw_feature_report;
-+	u8 c2h_ra_report_size;
- 
- 	u8 default_1ss_tx_path;
- 
---- a/drivers/net/wireless/realtek/rtw88/rtw8703b.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8703b.c
-@@ -1961,6 +1961,7 @@ const struct rtw_chip_info rtw8703b_hw_s
- 	.ampdu_density = IEEE80211_HT_MPDU_DENSITY_16,
- 	.usb_tx_agg_desc_num = 1, /* Not sure if this chip has USB interface */
- 	.hw_feature_report = true,
-+	.c2h_ra_report_size = 7,
- 
- 	.path_div_supported = false,
- 	.ht_supported = true,
---- a/drivers/net/wireless/realtek/rtw88/rtw8723d.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8723d.c
-@@ -2132,6 +2132,7 @@ const struct rtw_chip_info rtw8723d_hw_s
- 	.dig_min = 0x20,
- 	.usb_tx_agg_desc_num = 1,
- 	.hw_feature_report = true,
-+	.c2h_ra_report_size = 7,
- 	.ht_supported = true,
- 	.vht_supported = false,
- 	.lps_deep_mode_supported = 0,
---- a/drivers/net/wireless/realtek/rtw88/rtw8821c.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8821c.c
-@@ -1969,6 +1969,7 @@ const struct rtw_chip_info rtw8821c_hw_s
- 	.dig_min = 0x1c,
- 	.usb_tx_agg_desc_num = 3,
- 	.hw_feature_report = true,
-+	.c2h_ra_report_size = 7,
- 	.ht_supported = true,
- 	.vht_supported = true,
- 	.lps_deep_mode_supported = BIT(LPS_DEEP_MODE_LCLK),
---- a/drivers/net/wireless/realtek/rtw88/rtw8822b.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8822b.c
-@@ -2510,6 +2510,7 @@ const struct rtw_chip_info rtw8822b_hw_s
- 	.dig_min = 0x1c,
- 	.usb_tx_agg_desc_num = 3,
- 	.hw_feature_report = true,
-+	.c2h_ra_report_size = 7,
- 	.ht_supported = true,
- 	.vht_supported = true,
- 	.lps_deep_mode_supported = BIT(LPS_DEEP_MODE_LCLK),
---- a/drivers/net/wireless/realtek/rtw88/rtw8822c.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8822c.c
-@@ -5330,6 +5330,7 @@ const struct rtw_chip_info rtw8822c_hw_s
- 	.dig_min = 0x20,
- 	.usb_tx_agg_desc_num = 3,
- 	.hw_feature_report = true,
-+	.c2h_ra_report_size = 7,
- 	.default_1ss_tx_path = BB_PATH_A,
- 	.path_div_supported = true,
- 	.ht_supported = true,
diff --git a/package/kernel/mac80211/patches/rtl/027-v6.13-wifi-rtw88-Extend-the-init-table-parsing-for-RTL8812.patch b/package/kernel/mac80211/patches/rtl/027-v6.13-wifi-rtw88-Extend-the-init-table-parsing-for-RTL8812.patch
deleted file mode 100644
index aec2e6aaec..0000000000
--- a/package/kernel/mac80211/patches/rtl/027-v6.13-wifi-rtw88-Extend-the-init-table-parsing-for-RTL8812.patch
+++ /dev/null
@@ -1,165 +0,0 @@
-From 95a772e30b60e7954d03f3372268722475aa303f Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 23 Oct 2024 17:08:24 +0300
-Subject: [PATCH] wifi: rtw88: Extend the init table parsing for RTL8812AU
-
-The chips supported so far only use the first condition, and so the
-parsing code ignores the second condition. RTL8812AU's init tables use
-the second condition also. Make the parsing code check it.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/1bee6b74-6eab-44a3-9f40-794ca006c72d@gmail.com
----
- drivers/net/wireless/realtek/rtw88/main.h | 15 ++++++
- drivers/net/wireless/realtek/rtw88/phy.c  | 62 ++++++++++++++++++++---
- 2 files changed, 69 insertions(+), 8 deletions(-)
-
---- a/drivers/net/wireless/realtek/rtw88/main.h
-+++ b/drivers/net/wireless/realtek/rtw88/main.h
-@@ -1835,6 +1835,20 @@ struct rtw_phy_cond {
- 	#define BRANCH_ENDIF	3
- };
- 
-+struct rtw_phy_cond2 {
-+#ifdef __LITTLE_ENDIAN
-+	u8 type_glna;
-+	u8 type_gpa;
-+	u8 type_alna;
-+	u8 type_apa;
-+#else
-+	u8 type_apa;
-+	u8 type_alna;
-+	u8 type_gpa;
-+	u8 type_glna;
-+#endif
-+};
-+
- struct rtw_fifo_conf {
- 	/* tx fifo information */
- 	u16 rsvd_boundary;
-@@ -1916,6 +1930,7 @@ struct rtw_hal {
- 	u8 oem_id;
- 	u8 pkg_type;
- 	struct rtw_phy_cond phy_cond;
-+	struct rtw_phy_cond2 phy_cond2;
- 	bool rfe_btg;
- 
- 	u8 ps_mode;
---- a/drivers/net/wireless/realtek/rtw88/phy.c
-+++ b/drivers/net/wireless/realtek/rtw88/phy.c
-@@ -18,7 +18,10 @@ struct phy_cfg_pair {
- };
- 
- union phy_table_tile {
--	struct rtw_phy_cond cond;
-+	struct {
-+		struct rtw_phy_cond cond;
-+		struct rtw_phy_cond2 cond2;
-+	} __packed;
- 	struct phy_cfg_pair cfg;
- };
- 
-@@ -1041,7 +1044,8 @@ void rtw_phy_setup_phy_cond(struct rtw_d
- {
- 	struct rtw_hal *hal = &rtwdev->hal;
- 	struct rtw_efuse *efuse = &rtwdev->efuse;
--	struct rtw_phy_cond cond = {0};
-+	struct rtw_phy_cond cond = {};
-+	struct rtw_phy_cond2 cond2 = {};
- 
- 	cond.cut = hal->cut_version ? hal->cut_version : 15;
- 	cond.pkg = pkg ? pkg : 15;
-@@ -1061,15 +1065,34 @@ void rtw_phy_setup_phy_cond(struct rtw_d
- 		break;
- 	}
- 
-+	if (rtwdev->chip->id == RTW_CHIP_TYPE_8812A ||
-+	    rtwdev->chip->id == RTW_CHIP_TYPE_8821A) {
-+		cond.rfe = 0;
-+		cond.rfe |= efuse->ext_lna_2g;
-+		cond.rfe |= efuse->ext_pa_2g  << 1;
-+		cond.rfe |= efuse->ext_lna_5g << 2;
-+		cond.rfe |= efuse->ext_pa_5g  << 3;
-+		cond.rfe |= efuse->btcoex     << 4;
-+
-+		cond2.type_alna = efuse->alna_type;
-+		cond2.type_glna = efuse->glna_type;
-+		cond2.type_apa = efuse->apa_type;
-+		cond2.type_gpa = efuse->gpa_type;
-+	}
-+
- 	hal->phy_cond = cond;
-+	hal->phy_cond2 = cond2;
- 
--	rtw_dbg(rtwdev, RTW_DBG_PHY, "phy cond=0x%08x\n", *((u32 *)&hal->phy_cond));
-+	rtw_dbg(rtwdev, RTW_DBG_PHY, "phy cond=0x%08x cond2=0x%08x\n",
-+		*((u32 *)&hal->phy_cond), *((u32 *)&hal->phy_cond2));
- }
- 
--static bool check_positive(struct rtw_dev *rtwdev, struct rtw_phy_cond cond)
-+static bool check_positive(struct rtw_dev *rtwdev, struct rtw_phy_cond cond,
-+			   struct rtw_phy_cond2 cond2)
- {
- 	struct rtw_hal *hal = &rtwdev->hal;
- 	struct rtw_phy_cond drv_cond = hal->phy_cond;
-+	struct rtw_phy_cond2 drv_cond2 = hal->phy_cond2;
- 
- 	if (cond.cut && cond.cut != drv_cond.cut)
- 		return false;
-@@ -1080,8 +1103,29 @@ static bool check_positive(struct rtw_de
- 	if (cond.intf && cond.intf != drv_cond.intf)
- 		return false;
- 
--	if (cond.rfe != drv_cond.rfe)
--		return false;
-+	if (rtwdev->chip->id == RTW_CHIP_TYPE_8812A ||
-+	    rtwdev->chip->id == RTW_CHIP_TYPE_8821A) {
-+		if (!(cond.rfe & 0x0f))
-+			return true;
-+
-+		if ((cond.rfe & drv_cond.rfe) != cond.rfe)
-+			return false;
-+
-+		if ((cond.rfe & BIT(0)) && cond2.type_glna != drv_cond2.type_glna)
-+			return false;
-+
-+		if ((cond.rfe & BIT(1)) && cond2.type_gpa != drv_cond2.type_gpa)
-+			return false;
-+
-+		if ((cond.rfe & BIT(2)) && cond2.type_alna != drv_cond2.type_alna)
-+			return false;
-+
-+		if ((cond.rfe & BIT(3)) && cond2.type_apa != drv_cond2.type_apa)
-+			return false;
-+	} else {
-+		if (cond.rfe != drv_cond.rfe)
-+			return false;
-+	}
- 
- 	return true;
- }
-@@ -1090,7 +1134,8 @@ void rtw_parse_tbl_phy_cond(struct rtw_d
- {
- 	const union phy_table_tile *p = tbl->data;
- 	const union phy_table_tile *end = p + tbl->size / 2;
--	struct rtw_phy_cond pos_cond = {0};
-+	struct rtw_phy_cond pos_cond = {};
-+	struct rtw_phy_cond2 pos_cond2 = {};
- 	bool is_matched = true, is_skipped = false;
- 
- 	BUILD_BUG_ON(sizeof(union phy_table_tile) != sizeof(struct phy_cfg_pair));
-@@ -1109,11 +1154,12 @@ void rtw_parse_tbl_phy_cond(struct rtw_d
- 			case BRANCH_ELIF:
- 			default:
- 				pos_cond = p->cond;
-+				pos_cond2 = p->cond2;
- 				break;
- 			}
- 		} else if (p->cond.neg) {
- 			if (!is_skipped) {
--				if (check_positive(rtwdev, pos_cond)) {
-+				if (check_positive(rtwdev, pos_cond, pos_cond2)) {
- 					is_matched = true;
- 					is_skipped = true;
- 				} else {
diff --git a/package/kernel/mac80211/patches/rtl/028-v6.13-wifi-rtw88-Allow-rtw_chip_info.ltecoex_addr-to-be-NU.patch b/package/kernel/mac80211/patches/rtl/028-v6.13-wifi-rtw88-Allow-rtw_chip_info.ltecoex_addr-to-be-NU.patch
deleted file mode 100644
index 5486fb2d25..0000000000
--- a/package/kernel/mac80211/patches/rtl/028-v6.13-wifi-rtw88-Allow-rtw_chip_info.ltecoex_addr-to-be-NU.patch
+++ /dev/null
@@ -1,58 +0,0 @@
-From 7c5bbeba7c36575a3a57ef4be775b2f3fb68c3f9 Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 23 Oct 2024 17:09:04 +0300
-Subject: [PATCH] wifi: rtw88: Allow rtw_chip_info.ltecoex_addr to be NULL
-
-RTL8821A doesn't have this. Trying to use it results in error messages,
-so don't try if ltecoex_addr is NULL.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/d1004817-1760-41d1-9136-3d799757c444@gmail.com
----
- drivers/net/wireless/realtek/rtw88/coex.c | 14 +++++++++++---
- 1 file changed, 11 insertions(+), 3 deletions(-)
-
---- a/drivers/net/wireless/realtek/rtw88/coex.c
-+++ b/drivers/net/wireless/realtek/rtw88/coex.c
-@@ -950,12 +950,18 @@ static void rtw_coex_coex_ctrl_owner(str
- 
- static void rtw_coex_set_gnt_bt(struct rtw_dev *rtwdev, u8 state)
- {
-+	if (!rtwdev->chip->ltecoex_addr)
-+		return;
-+
- 	rtw_coex_write_indirect_reg(rtwdev, LTE_COEX_CTRL, 0xc000, state);
- 	rtw_coex_write_indirect_reg(rtwdev, LTE_COEX_CTRL, 0x0c00, state);
- }
- 
- static void rtw_coex_set_gnt_wl(struct rtw_dev *rtwdev, u8 state)
- {
-+	if (!rtwdev->chip->ltecoex_addr)
-+		return;
-+
- 	rtw_coex_write_indirect_reg(rtwdev, LTE_COEX_CTRL, 0x3000, state);
- 	rtw_coex_write_indirect_reg(rtwdev, LTE_COEX_CTRL, 0x0300, state);
- }
-@@ -3904,7 +3910,7 @@ void rtw_coex_display_coex_info(struct r
- 	u8 sys_lte;
- 	u16 score_board_WB, score_board_BW;
- 	u32 wl_reg_6c0, wl_reg_6c4, wl_reg_6c8, wl_reg_778, wl_reg_6cc;
--	u32 lte_coex, bt_coex;
-+	u32 lte_coex = 0, bt_coex = 0;
- 	int i;
- 
- 	score_board_BW = rtw_coex_read_scbd(rtwdev);
-@@ -3916,8 +3922,10 @@ void rtw_coex_display_coex_info(struct r
- 	wl_reg_778 = rtw_read8(rtwdev, REG_BT_STAT_CTRL);
- 
- 	sys_lte = rtw_read8(rtwdev, 0x73);
--	lte_coex = rtw_coex_read_indirect_reg(rtwdev, 0x38);
--	bt_coex = rtw_coex_read_indirect_reg(rtwdev, 0x54);
-+	if (rtwdev->chip->ltecoex_addr) {
-+		lte_coex = rtw_coex_read_indirect_reg(rtwdev, 0x38);
-+		bt_coex = rtw_coex_read_indirect_reg(rtwdev, 0x54);
-+	}
- 
- 	if (!coex_stat->wl_under_ips &&
- 	    (!coex_stat->wl_under_lps || coex_stat->wl_force_lps_ctrl) &&
diff --git a/package/kernel/mac80211/patches/rtl/029-v6.13-wifi-rtw88-Let-each-driver-control-the-power-on-off-.patch b/package/kernel/mac80211/patches/rtl/029-v6.13-wifi-rtw88-Let-each-driver-control-the-power-on-off-.patch
deleted file mode 100644
index 10464b80cd..0000000000
--- a/package/kernel/mac80211/patches/rtl/029-v6.13-wifi-rtw88-Let-each-driver-control-the-power-on-off-.patch
+++ /dev/null
@@ -1,272 +0,0 @@
-From fbb5e1b3637a720c83c91a7b1476ab0429bfc747 Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 23 Oct 2024 17:09:47 +0300
-Subject: [PATCH] wifi: rtw88: Let each driver control the power on/off process
-
-RTL8821AU and RTL8812AU have to do some things differently, so let
-them have full control.
-
-The other chips use the same functions as before.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/98ab839f-9100-44ae-9551-9af743a4aa3a@gmail.com
----
- drivers/net/wireless/realtek/rtw88/coex.c     |  3 +++
- drivers/net/wireless/realtek/rtw88/mac.c      | 11 +++++++----
- drivers/net/wireless/realtek/rtw88/mac.h      |  3 +++
- drivers/net/wireless/realtek/rtw88/main.c     | 13 ++++++++-----
- drivers/net/wireless/realtek/rtw88/main.h     |  5 +++++
- drivers/net/wireless/realtek/rtw88/rtw8703b.c |  2 ++
- drivers/net/wireless/realtek/rtw88/rtw8723d.c |  2 ++
- drivers/net/wireless/realtek/rtw88/rtw8821c.c |  2 ++
- drivers/net/wireless/realtek/rtw88/rtw8822b.c |  2 ++
- drivers/net/wireless/realtek/rtw88/rtw8822c.c |  2 ++
- 10 files changed, 36 insertions(+), 9 deletions(-)
-
---- a/drivers/net/wireless/realtek/rtw88/coex.c
-+++ b/drivers/net/wireless/realtek/rtw88/coex.c
-@@ -2753,16 +2753,19 @@ void rtw_coex_power_on_setting(struct rt
- 	rtw_write8(rtwdev, 0xff1a, 0x0);
- 	rtw_coex_set_gnt_debug(rtwdev);
- }
-+EXPORT_SYMBOL(rtw_coex_power_on_setting);
- 
- void rtw_coex_power_off_setting(struct rtw_dev *rtwdev)
- {
- 	rtw_write16(rtwdev, REG_WIFI_BT_INFO, BIT_BT_INT_EN);
- }
-+EXPORT_SYMBOL(rtw_coex_power_off_setting);
- 
- void rtw_coex_init_hw_config(struct rtw_dev *rtwdev, bool wifi_only)
- {
- 	__rtw_coex_init_hw_config(rtwdev, wifi_only);
- }
-+EXPORT_SYMBOL(rtw_coex_init_hw_config);
- 
- void rtw_coex_ips_notify(struct rtw_dev *rtwdev, u8 type)
- {
---- a/drivers/net/wireless/realtek/rtw88/mac.c
-+++ b/drivers/net/wireless/realtek/rtw88/mac.c
-@@ -227,8 +227,8 @@ static int rtw_sub_pwr_seq_parser(struct
- 	return 0;
- }
- 
--static int rtw_pwr_seq_parser(struct rtw_dev *rtwdev,
--			      const struct rtw_pwr_seq_cmd * const *cmd_seq)
-+int rtw_pwr_seq_parser(struct rtw_dev *rtwdev,
-+		       const struct rtw_pwr_seq_cmd * const *cmd_seq)
- {
- 	u8 cut_mask;
- 	u8 intf_mask;
-@@ -267,6 +267,7 @@ static int rtw_pwr_seq_parser(struct rtw
- 
- 	return 0;
- }
-+EXPORT_SYMBOL(rtw_pwr_seq_parser);
- 
- static int rtw_mac_power_switch(struct rtw_dev *rtwdev, bool pwr_on)
- {
-@@ -994,6 +995,7 @@ int rtw_download_firmware(struct rtw_dev
- 
- 	return 0;
- }
-+EXPORT_SYMBOL(rtw_download_firmware);
- 
- static u32 get_priority_queues(struct rtw_dev *rtwdev, u32 queues)
- {
-@@ -1127,7 +1129,7 @@ static int txdma_queue_mapping(struct rt
- 	return 0;
- }
- 
--static int set_trx_fifo_info(struct rtw_dev *rtwdev)
-+int rtw_set_trx_fifo_info(struct rtw_dev *rtwdev)
- {
- 	const struct rtw_chip_info *chip = rtwdev->chip;
- 	struct rtw_fifo_conf *fifo = &rtwdev->fifo;
-@@ -1179,6 +1181,7 @@ static int set_trx_fifo_info(struct rtw_
- 
- 	return 0;
- }
-+EXPORT_SYMBOL(rtw_set_trx_fifo_info);
- 
- static int __priority_queue_cfg(struct rtw_dev *rtwdev,
- 				const struct rtw_page_table *pg_tbl,
-@@ -1256,7 +1259,7 @@ static int priority_queue_cfg(struct rtw
- 	u16 pubq_num;
- 	int ret;
- 
--	ret = set_trx_fifo_info(rtwdev);
-+	ret = rtw_set_trx_fifo_info(rtwdev);
- 	if (ret)
- 		return ret;
- 
---- a/drivers/net/wireless/realtek/rtw88/mac.h
-+++ b/drivers/net/wireless/realtek/rtw88/mac.h
-@@ -30,11 +30,14 @@
- 
- void rtw_set_channel_mac(struct rtw_dev *rtwdev, u8 channel, u8 bw,
- 			 u8 primary_ch_idx);
-+int rtw_pwr_seq_parser(struct rtw_dev *rtwdev,
-+		       const struct rtw_pwr_seq_cmd * const *cmd_seq);
- int rtw_mac_power_on(struct rtw_dev *rtwdev);
- void rtw_mac_power_off(struct rtw_dev *rtwdev);
- int rtw_download_firmware(struct rtw_dev *rtwdev, struct rtw_fw_state *fw);
- int rtw_mac_init(struct rtw_dev *rtwdev);
- void rtw_mac_flush_queues(struct rtw_dev *rtwdev, u32 queues, bool drop);
-+int rtw_set_trx_fifo_info(struct rtw_dev *rtwdev);
- int rtw_ddma_to_fw_fifo(struct rtw_dev *rtwdev, u32 ocp_src, u32 size);
- 
- static inline void rtw_mac_flush_all_queues(struct rtw_dev *rtwdev, bool drop)
---- a/drivers/net/wireless/realtek/rtw88/main.c
-+++ b/drivers/net/wireless/realtek/rtw88/main.c
-@@ -1309,7 +1309,7 @@ void rtw_update_sta_info(struct rtw_dev
- 	rtw_fw_send_ra_info(rtwdev, si, reset_ra_mask);
- }
- 
--static int rtw_wait_firmware_completion(struct rtw_dev *rtwdev)
-+int rtw_wait_firmware_completion(struct rtw_dev *rtwdev)
- {
- 	const struct rtw_chip_info *chip = rtwdev->chip;
- 	struct rtw_fw_state *fw;
-@@ -1329,6 +1329,7 @@ static int rtw_wait_firmware_completion(
- 
- 	return ret;
- }
-+EXPORT_SYMBOL(rtw_wait_firmware_completion);
- 
- static enum rtw_lps_deep_mode rtw_update_lps_deep_mode(struct rtw_dev *rtwdev,
- 						       struct rtw_fw_state *fw)
-@@ -1350,7 +1351,7 @@ static enum rtw_lps_deep_mode rtw_update
- 	return LPS_DEEP_MODE_NONE;
- }
- 
--static int rtw_power_on(struct rtw_dev *rtwdev)
-+int rtw_power_on(struct rtw_dev *rtwdev)
- {
- 	const struct rtw_chip_info *chip = rtwdev->chip;
- 	struct rtw_fw_state *fw = &rtwdev->fw;
-@@ -1413,6 +1414,7 @@ err_off:
- err:
- 	return ret;
- }
-+EXPORT_SYMBOL(rtw_power_on);
- 
- void rtw_core_fw_scan_notify(struct rtw_dev *rtwdev, bool start)
- {
-@@ -1485,7 +1487,7 @@ int rtw_core_start(struct rtw_dev *rtwde
- {
- 	int ret;
- 
--	ret = rtw_power_on(rtwdev);
-+	ret = rtwdev->chip->ops->power_on(rtwdev);
- 	if (ret)
- 		return ret;
- 
-@@ -1505,12 +1507,13 @@ int rtw_core_start(struct rtw_dev *rtwde
- 	return 0;
- }
- 
--static void rtw_power_off(struct rtw_dev *rtwdev)
-+void rtw_power_off(struct rtw_dev *rtwdev)
- {
- 	rtw_hci_stop(rtwdev);
- 	rtw_coex_power_off_setting(rtwdev);
- 	rtw_mac_power_off(rtwdev);
- }
-+EXPORT_SYMBOL(rtw_power_off);
- 
- void rtw_core_stop(struct rtw_dev *rtwdev)
- {
-@@ -1535,7 +1538,7 @@ void rtw_core_stop(struct rtw_dev *rtwde
- 
- 	mutex_lock(&rtwdev->mutex);
- 
--	rtw_power_off(rtwdev);
-+	rtwdev->chip->ops->power_off(rtwdev);
- }
- 
- static void rtw_init_ht_cap(struct rtw_dev *rtwdev,
---- a/drivers/net/wireless/realtek/rtw88/main.h
-+++ b/drivers/net/wireless/realtek/rtw88/main.h
-@@ -843,6 +843,8 @@ struct rtw_regd {
- };
- 
- struct rtw_chip_ops {
-+	int (*power_on)(struct rtw_dev *rtwdev);
-+	void (*power_off)(struct rtw_dev *rtwdev);
- 	int (*mac_init)(struct rtw_dev *rtwdev);
- 	int (*dump_fw_crash)(struct rtw_dev *rtwdev);
- 	void (*shutdown)(struct rtw_dev *rtwdev);
-@@ -2209,6 +2211,7 @@ void rtw_core_scan_start(struct rtw_dev
- void rtw_core_scan_complete(struct rtw_dev *rtwdev, struct ieee80211_vif *vif,
- 			    bool hw_scan);
- int rtw_core_start(struct rtw_dev *rtwdev);
-+void rtw_power_off(struct rtw_dev *rtwdev);
- void rtw_core_stop(struct rtw_dev *rtwdev);
- int rtw_chip_info_setup(struct rtw_dev *rtwdev);
- int rtw_core_init(struct rtw_dev *rtwdev);
-@@ -2223,6 +2226,8 @@ int rtw_sta_add(struct rtw_dev *rtwdev,
- void rtw_sta_remove(struct rtw_dev *rtwdev, struct ieee80211_sta *sta,
- 		    bool fw_exist);
- void rtw_fw_recovery(struct rtw_dev *rtwdev);
-+int rtw_wait_firmware_completion(struct rtw_dev *rtwdev);
-+int rtw_power_on(struct rtw_dev *rtwdev);
- void rtw_core_fw_scan_notify(struct rtw_dev *rtwdev, bool start);
- int rtw_dump_fw(struct rtw_dev *rtwdev, const u32 ocp_src, u32 size,
- 		u32 fwcd_item);
---- a/drivers/net/wireless/realtek/rtw88/rtw8703b.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8703b.c
-@@ -1888,6 +1888,8 @@ static const struct coex_tdma_para tdma_
- };
- 
- static const struct rtw_chip_ops rtw8703b_ops = {
-+	.power_on		= rtw_power_on,
-+	.power_off		= rtw_power_off,
- 	.mac_init		= rtw8723x_mac_init,
- 	.dump_fw_crash		= NULL,
- 	.shutdown		= NULL,
---- a/drivers/net/wireless/realtek/rtw88/rtw8723d.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8723d.c
-@@ -1390,6 +1390,8 @@ static void rtw8723d_pwr_track(struct rt
- }
- 
- static const struct rtw_chip_ops rtw8723d_ops = {
-+	.power_on		= rtw_power_on,
-+	.power_off		= rtw_power_off,
- 	.phy_set_param		= rtw8723d_phy_set_param,
- 	.read_efuse		= rtw8723x_read_efuse,
- 	.query_phy_status	= query_phy_status,
---- a/drivers/net/wireless/realtek/rtw88/rtw8821c.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8821c.c
-@@ -1643,6 +1643,8 @@ static const struct rtw_prioq_addrs prio
- };
- 
- static const struct rtw_chip_ops rtw8821c_ops = {
-+	.power_on		= rtw_power_on,
-+	.power_off		= rtw_power_off,
- 	.phy_set_param		= rtw8821c_phy_set_param,
- 	.read_efuse		= rtw8821c_read_efuse,
- 	.query_phy_status	= query_phy_status,
---- a/drivers/net/wireless/realtek/rtw88/rtw8822b.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8822b.c
-@@ -2132,6 +2132,8 @@ static const struct rtw_prioq_addrs prio
- };
- 
- static const struct rtw_chip_ops rtw8822b_ops = {
-+	.power_on		= rtw_power_on,
-+	.power_off		= rtw_power_off,
- 	.phy_set_param		= rtw8822b_phy_set_param,
- 	.read_efuse		= rtw8822b_read_efuse,
- 	.query_phy_status	= query_phy_status,
---- a/drivers/net/wireless/realtek/rtw88/rtw8822c.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8822c.c
-@@ -4947,6 +4947,8 @@ static const struct rtw_prioq_addrs prio
- };
- 
- static const struct rtw_chip_ops rtw8822c_ops = {
-+	.power_on		= rtw_power_on,
-+	.power_off		= rtw_power_off,
- 	.phy_set_param		= rtw8822c_phy_set_param,
- 	.read_efuse		= rtw8822c_read_efuse,
- 	.query_phy_status	= query_phy_status,
diff --git a/package/kernel/mac80211/patches/rtl/030-v6.13-wifi-rtw88-Enable-data-rate-fallback-for-older-chips.patch b/package/kernel/mac80211/patches/rtl/030-v6.13-wifi-rtw88-Enable-data-rate-fallback-for-older-chips.patch
deleted file mode 100644
index 944985edc9..0000000000
--- a/package/kernel/mac80211/patches/rtl/030-v6.13-wifi-rtw88-Enable-data-rate-fallback-for-older-chips.patch
+++ /dev/null
@@ -1,194 +0,0 @@
-From c7706b1173c77185a2ef40c7d1811021566563f3 Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 23 Oct 2024 17:10:32 +0300
-Subject: [PATCH] wifi: rtw88: Enable data rate fallback for older chips
-
-RTL8811AU fails to perform the 4-way handshake when the AP is too far
-because it transmits the EAPOL frames at MCS9 and when that doesn't
-work it retries 48 times with the same rate, to no avail.
-
-Retrying 48 times with the same rate seems pointless. Set the
-appropriate field in the TX descriptor to allow it to use lower rates
-when retrying.
-
-Set it for RTL8723D and RTL8703B because they interpret this field the
-same way as RTL8811A.
-
-The newer RTL8822C, RTL8822B, RTL8821C seem to interpret this field in
-the TX descriptor differently, so leave it alone for those chips.
-
-Tested with RTL8811AU and RTL8723DU.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/2b3e3e6f-541b-4a3b-8ca3-65b267e6a95a@gmail.com
----
- drivers/net/wireless/realtek/rtw88/fw.c       | 2 +-
- drivers/net/wireless/realtek/rtw88/main.h     | 1 +
- drivers/net/wireless/realtek/rtw88/pci.c      | 2 +-
- drivers/net/wireless/realtek/rtw88/rtw8703b.c | 1 +
- drivers/net/wireless/realtek/rtw88/rtw8723d.c | 1 +
- drivers/net/wireless/realtek/rtw88/rtw8821c.c | 1 +
- drivers/net/wireless/realtek/rtw88/rtw8822b.c | 1 +
- drivers/net/wireless/realtek/rtw88/rtw8822c.c | 1 +
- drivers/net/wireless/realtek/rtw88/sdio.c     | 2 +-
- drivers/net/wireless/realtek/rtw88/tx.c       | 6 +++++-
- drivers/net/wireless/realtek/rtw88/tx.h       | 4 +++-
- drivers/net/wireless/realtek/rtw88/usb.c      | 4 ++--
- 12 files changed, 19 insertions(+), 7 deletions(-)
-
---- a/drivers/net/wireless/realtek/rtw88/fw.c
-+++ b/drivers/net/wireless/realtek/rtw88/fw.c
-@@ -1290,7 +1290,7 @@ static void rtw_fill_rsvd_page_desc(stru
- 	rtw_tx_rsvd_page_pkt_info_update(rtwdev, &pkt_info, skb, type);
- 	pkt_desc = skb_push(skb, chip->tx_pkt_desc_sz);
- 	memset(pkt_desc, 0, chip->tx_pkt_desc_sz);
--	rtw_tx_fill_tx_desc(&pkt_info, skb);
-+	rtw_tx_fill_tx_desc(rtwdev, &pkt_info, skb);
- }
- 
- static inline u8 rtw_len_to_page(unsigned int len, u8 page_size)
---- a/drivers/net/wireless/realtek/rtw88/main.h
-+++ b/drivers/net/wireless/realtek/rtw88/main.h
-@@ -1204,6 +1204,7 @@ struct rtw_chip_info {
- 	u8 usb_tx_agg_desc_num;
- 	bool hw_feature_report;
- 	u8 c2h_ra_report_size;
-+	bool old_datarate_fb_limit;
- 
- 	u8 default_1ss_tx_path;
- 
---- a/drivers/net/wireless/realtek/rtw88/pci.c
-+++ b/drivers/net/wireless/realtek/rtw88/pci.c
-@@ -824,7 +824,7 @@ static int rtw_pci_tx_write_data(struct
- 	pkt_desc = skb_push(skb, chip->tx_pkt_desc_sz);
- 	memset(pkt_desc, 0, tx_pkt_desc_sz);
- 	pkt_info->qsel = rtw_pci_get_tx_qsel(skb, queue);
--	rtw_tx_fill_tx_desc(pkt_info, skb);
-+	rtw_tx_fill_tx_desc(rtwdev, pkt_info, skb);
- 	dma = dma_map_single(&rtwpci->pdev->dev, skb->data, skb->len,
- 			     DMA_TO_DEVICE);
- 	if (dma_mapping_error(&rtwpci->pdev->dev, dma))
---- a/drivers/net/wireless/realtek/rtw88/rtw8703b.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8703b.c
-@@ -1964,6 +1964,7 @@ const struct rtw_chip_info rtw8703b_hw_s
- 	.usb_tx_agg_desc_num = 1, /* Not sure if this chip has USB interface */
- 	.hw_feature_report = true,
- 	.c2h_ra_report_size = 7,
-+	.old_datarate_fb_limit = true,
- 
- 	.path_div_supported = false,
- 	.ht_supported = true,
---- a/drivers/net/wireless/realtek/rtw88/rtw8723d.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8723d.c
-@@ -2135,6 +2135,7 @@ const struct rtw_chip_info rtw8723d_hw_s
- 	.usb_tx_agg_desc_num = 1,
- 	.hw_feature_report = true,
- 	.c2h_ra_report_size = 7,
-+	.old_datarate_fb_limit = true,
- 	.ht_supported = true,
- 	.vht_supported = false,
- 	.lps_deep_mode_supported = 0,
---- a/drivers/net/wireless/realtek/rtw88/rtw8821c.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8821c.c
-@@ -1972,6 +1972,7 @@ const struct rtw_chip_info rtw8821c_hw_s
- 	.usb_tx_agg_desc_num = 3,
- 	.hw_feature_report = true,
- 	.c2h_ra_report_size = 7,
-+	.old_datarate_fb_limit = false,
- 	.ht_supported = true,
- 	.vht_supported = true,
- 	.lps_deep_mode_supported = BIT(LPS_DEEP_MODE_LCLK),
---- a/drivers/net/wireless/realtek/rtw88/rtw8822b.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8822b.c
-@@ -2513,6 +2513,7 @@ const struct rtw_chip_info rtw8822b_hw_s
- 	.usb_tx_agg_desc_num = 3,
- 	.hw_feature_report = true,
- 	.c2h_ra_report_size = 7,
-+	.old_datarate_fb_limit = false,
- 	.ht_supported = true,
- 	.vht_supported = true,
- 	.lps_deep_mode_supported = BIT(LPS_DEEP_MODE_LCLK),
---- a/drivers/net/wireless/realtek/rtw88/rtw8822c.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8822c.c
-@@ -5333,6 +5333,7 @@ const struct rtw_chip_info rtw8822c_hw_s
- 	.usb_tx_agg_desc_num = 3,
- 	.hw_feature_report = true,
- 	.c2h_ra_report_size = 7,
-+	.old_datarate_fb_limit = false,
- 	.default_1ss_tx_path = BB_PATH_A,
- 	.path_div_supported = true,
- 	.ht_supported = true,
---- a/drivers/net/wireless/realtek/rtw88/sdio.c
-+++ b/drivers/net/wireless/realtek/rtw88/sdio.c
-@@ -864,7 +864,7 @@ static void rtw_sdio_tx_skb_prepare(stru
- 
- 	pkt_info->qsel = rtw_sdio_get_tx_qsel(rtwdev, skb, queue);
- 
--	rtw_tx_fill_tx_desc(pkt_info, skb);
-+	rtw_tx_fill_tx_desc(rtwdev, pkt_info, skb);
- 	rtw_tx_fill_txdesc_checksum(rtwdev, pkt_info, pkt_desc);
- }
- 
---- a/drivers/net/wireless/realtek/rtw88/tx.c
-+++ b/drivers/net/wireless/realtek/rtw88/tx.c
-@@ -32,7 +32,8 @@ void rtw_tx_stats(struct rtw_dev *rtwdev
- 	}
- }
- 
--void rtw_tx_fill_tx_desc(struct rtw_tx_pkt_info *pkt_info, struct sk_buff *skb)
-+void rtw_tx_fill_tx_desc(struct rtw_dev *rtwdev,
-+			 struct rtw_tx_pkt_info *pkt_info, struct sk_buff *skb)
- {
- 	struct rtw_tx_desc *tx_desc = (struct rtw_tx_desc *)skb->data;
- 	bool more_data = false;
-@@ -67,6 +68,9 @@ void rtw_tx_fill_tx_desc(struct rtw_tx_p
- 
- 	tx_desc->w4 = le32_encode_bits(pkt_info->rate, RTW_TX_DESC_W4_DATARATE);
- 
-+	if (rtwdev->chip->old_datarate_fb_limit)
-+		tx_desc->w4 |= le32_encode_bits(0x1f, RTW_TX_DESC_W4_DATARATE_FB_LIMIT);
-+
- 	tx_desc->w5 = le32_encode_bits(pkt_info->short_gi, RTW_TX_DESC_W5_DATA_SHORT) |
- 		      le32_encode_bits(pkt_info->bw, RTW_TX_DESC_W5_DATA_BW) |
- 		      le32_encode_bits(pkt_info->ldpc, RTW_TX_DESC_W5_DATA_LDPC) |
---- a/drivers/net/wireless/realtek/rtw88/tx.h
-+++ b/drivers/net/wireless/realtek/rtw88/tx.h
-@@ -44,6 +44,7 @@ struct rtw_tx_desc {
- #define RTW_TX_DESC_W3_NAVUSEHDR BIT(15)
- #define RTW_TX_DESC_W3_MAX_AGG_NUM GENMASK(21, 17)
- #define RTW_TX_DESC_W4_DATARATE GENMASK(6, 0)
-+#define RTW_TX_DESC_W4_DATARATE_FB_LIMIT GENMASK(12, 8)
- #define RTW_TX_DESC_W4_RTSRATE GENMASK(28, 24)
- #define RTW_TX_DESC_W5_DATA_SHORT BIT(4)
- #define RTW_TX_DESC_W5_DATA_BW GENMASK(6, 5)
-@@ -94,7 +95,8 @@ void rtw_tx_pkt_info_update(struct rtw_d
- 			    struct rtw_tx_pkt_info *pkt_info,
- 			    struct ieee80211_sta *sta,
- 			    struct sk_buff *skb);
--void rtw_tx_fill_tx_desc(struct rtw_tx_pkt_info *pkt_info, struct sk_buff *skb);
-+void rtw_tx_fill_tx_desc(struct rtw_dev *rtwdev,
-+			 struct rtw_tx_pkt_info *pkt_info, struct sk_buff *skb);
- void rtw_tx_report_enqueue(struct rtw_dev *rtwdev, struct sk_buff *skb, u8 sn);
- void rtw_tx_report_handle(struct rtw_dev *rtwdev, struct sk_buff *skb, int src);
- void rtw_tx_rsvd_page_pkt_info_update(struct rtw_dev *rtwdev,
---- a/drivers/net/wireless/realtek/rtw88/usb.c
-+++ b/drivers/net/wireless/realtek/rtw88/usb.c
-@@ -458,7 +458,7 @@ static int rtw_usb_write_data(struct rtw
- 	skb_put_data(skb, buf, size);
- 	skb_push(skb, chip->tx_pkt_desc_sz);
- 	memset(skb->data, 0, chip->tx_pkt_desc_sz);
--	rtw_tx_fill_tx_desc(pkt_info, skb);
-+	rtw_tx_fill_tx_desc(rtwdev, pkt_info, skb);
- 	rtw_tx_fill_txdesc_checksum(rtwdev, pkt_info, skb->data);
- 
- 	ret = rtw_usb_write_port(rtwdev, qsel, skb,
-@@ -525,7 +525,7 @@ static int rtw_usb_tx_write(struct rtw_d
- 	pkt_desc = skb_push(skb, chip->tx_pkt_desc_sz);
- 	memset(pkt_desc, 0, chip->tx_pkt_desc_sz);
- 	ep = qsel_to_ep(rtwusb, pkt_info->qsel);
--	rtw_tx_fill_tx_desc(pkt_info, skb);
-+	rtw_tx_fill_tx_desc(rtwdev, pkt_info, skb);
- 	rtw_tx_fill_txdesc_checksum(rtwdev, pkt_info, skb->data);
- 	tx_data = rtw_usb_get_tx_data(skb);
- 	tx_data->sn = pkt_info->sn;
diff --git a/package/kernel/mac80211/patches/rtl/031-v6.13-wifi-rtw88-Make-txagc_remnant_ofdm-an-array.patch b/package/kernel/mac80211/patches/rtl/031-v6.13-wifi-rtw88-Make-txagc_remnant_ofdm-an-array.patch
deleted file mode 100644
index 10fc773b47..0000000000
--- a/package/kernel/mac80211/patches/rtl/031-v6.13-wifi-rtw88-Make-txagc_remnant_ofdm-an-array.patch
+++ /dev/null
@@ -1,85 +0,0 @@
-From abb0f19492ba6289ffba6ec1057c0426240958af Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 23 Oct 2024 17:10:54 +0300
-Subject: [PATCH] wifi: rtw88: Make txagc_remnant_ofdm an array
-
-txagc_remnant_ofdm member of struct rtw_dm_info should be different for
-each RF path, so make it an array of size RTW_RF_PATH_MAX (4).
-
-Until now all the chips using this had only one RF path, but RTL8812AU
-has two, and RTL8814AU has four.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/68571ba9-e504-4b2d-bfa1-62f468753649@gmail.com
----
- drivers/net/wireless/realtek/rtw88/main.h     | 2 +-
- drivers/net/wireless/realtek/rtw88/phy.c      | 4 ++--
- drivers/net/wireless/realtek/rtw88/rtw8703b.c | 4 ++--
- drivers/net/wireless/realtek/rtw88/rtw8723d.c | 4 ++--
- 4 files changed, 7 insertions(+), 7 deletions(-)
-
---- a/drivers/net/wireless/realtek/rtw88/main.h
-+++ b/drivers/net/wireless/realtek/rtw88/main.h
-@@ -1715,7 +1715,7 @@ struct rtw_dm_info {
- 	bool pwr_trk_init_trigger;
- 	struct ewma_thermal avg_thermal[RTW_RF_PATH_MAX];
- 	s8 txagc_remnant_cck;
--	s8 txagc_remnant_ofdm;
-+	s8 txagc_remnant_ofdm[RTW_RF_PATH_MAX];
- 	u8 rx_cck_agc_report_type;
- 
- 	/* backup dack results for each path and I/Q */
---- a/drivers/net/wireless/realtek/rtw88/phy.c
-+++ b/drivers/net/wireless/realtek/rtw88/phy.c
-@@ -2169,8 +2169,8 @@ void rtw_get_tx_power_params(struct rtw_
- 
- 	*limit = rtw_phy_get_tx_power_limit(rtwdev, band, bw, path,
- 					    rate, ch, regd);
--	*remnant = (rate <= DESC_RATE11M ? dm_info->txagc_remnant_cck :
--		    dm_info->txagc_remnant_ofdm);
-+	*remnant = rate <= DESC_RATE11M ? dm_info->txagc_remnant_cck :
-+					  dm_info->txagc_remnant_ofdm[path];
- 	*sar = rtw_phy_get_tx_power_sar(rtwdev, hal->sar_band, path, rate);
- }
- 
---- a/drivers/net/wireless/realtek/rtw88/rtw8703b.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8703b.c
-@@ -637,7 +637,7 @@ static void rtw8703b_pwrtrack_init(struc
- 	dm_info->pwr_trk_init_trigger = true;
- 	dm_info->thermal_meter_k = rtwdev->efuse.thermal_meter_k;
- 	dm_info->txagc_remnant_cck = 0;
--	dm_info->txagc_remnant_ofdm = 0;
-+	dm_info->txagc_remnant_ofdm[RF_PATH_A] = 0;
- }
- 
- static void rtw8703b_phy_set_param(struct rtw_dev *rtwdev)
-@@ -1589,7 +1589,7 @@ static void rtw8703b_pwrtrack_set_ofdm_p
- {
- 	struct rtw_dm_info *dm_info = &rtwdev->dm_info;
- 
--	dm_info->txagc_remnant_ofdm = txagc_idx;
-+	dm_info->txagc_remnant_ofdm[RF_PATH_A] = txagc_idx;
- 
- 	/* Only path A is calibrated for rtl8703b */
- 	rtw8703b_set_iqk_matrix(rtwdev, swing_idx, RF_PATH_A);
---- a/drivers/net/wireless/realtek/rtw88/rtw8723d.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8723d.c
-@@ -79,7 +79,7 @@ static void rtw8723d_pwrtrack_init(struc
- 	dm_info->pwr_trk_init_trigger = true;
- 	dm_info->thermal_meter_k = rtwdev->efuse.thermal_meter_k;
- 	dm_info->txagc_remnant_cck = 0;
--	dm_info->txagc_remnant_ofdm = 0;
-+	dm_info->txagc_remnant_ofdm[RF_PATH_A] = 0;
- }
- 
- static void rtw8723d_phy_set_param(struct rtw_dev *rtwdev)
-@@ -1265,7 +1265,7 @@ static void rtw8723d_pwrtrack_set_ofdm_p
- {
- 	struct rtw_dm_info *dm_info = &rtwdev->dm_info;
- 
--	dm_info->txagc_remnant_ofdm = txagc_idx;
-+	dm_info->txagc_remnant_ofdm[RF_PATH_A] = txagc_idx;
- 
- 	rtw8723d_set_iqk_matrix(rtwdev, swing_idx, RF_PATH_A);
- 	rtw8723d_set_iqk_matrix(rtwdev, swing_idx, RF_PATH_B);
diff --git a/package/kernel/mac80211/patches/rtl/032-v6.13-wifi-rtw88-Support-TX-page-sizes-bigger-than-128.patch b/package/kernel/mac80211/patches/rtl/032-v6.13-wifi-rtw88-Support-TX-page-sizes-bigger-than-128.patch
deleted file mode 100644
index 7d77e0e671..0000000000
--- a/package/kernel/mac80211/patches/rtl/032-v6.13-wifi-rtw88-Support-TX-page-sizes-bigger-than-128.patch
+++ /dev/null
@@ -1,115 +0,0 @@
-From 82a617413e8545775ec03a1970809ac5f549ef32 Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 23 Oct 2024 17:12:06 +0300
-Subject: [PATCH] wifi: rtw88: Support TX page sizes bigger than 128
-
-All the chips supported so far have a TX page size of 128 bytes.
-
-Change the type of the page_size member of struct rtw_chip_info from u8
-to u16 in order to support RTL8821AU (page size of 256 bytes) and
-RTL8812AU (page size of 512 bytes). Also change the types of several
-related variables and function parameters from u8 to u16.
-
-The TX page size is used, among other things, to construct the beacon,
-null data, QOS null data, and PS poll templates which are uploaded to
-the chip's reserved page. Each template needs to be aligned on a
-multiple of the TX page size. Power saving can't work if the TX page
-size is wrong.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/acdefbb1-3daf-4349-9e03-9472754d5f1e@gmail.com
----
- drivers/net/wireless/realtek/rtw88/debug.c |  2 +-
- drivers/net/wireless/realtek/rtw88/fw.c    | 21 +++++++++++----------
- drivers/net/wireless/realtek/rtw88/mac.c   |  2 +-
- drivers/net/wireless/realtek/rtw88/main.h  |  2 +-
- 4 files changed, 14 insertions(+), 13 deletions(-)
-
---- a/drivers/net/wireless/realtek/rtw88/debug.c
-+++ b/drivers/net/wireless/realtek/rtw88/debug.c
-@@ -308,7 +308,7 @@ static int rtw_debugfs_get_rsvd_page(str
- {
- 	struct rtw_debugfs_priv *debugfs_priv = m->private;
- 	struct rtw_dev *rtwdev = debugfs_priv->rtwdev;
--	u8 page_size = rtwdev->chip->page_size;
-+	u16 page_size = rtwdev->chip->page_size;
- 	u32 buf_size = debugfs_priv->rsvd_page.page_num * page_size;
- 	u32 offset = debugfs_priv->rsvd_page.page_offset * page_size;
- 	u8 *buf;
---- a/drivers/net/wireless/realtek/rtw88/fw.c
-+++ b/drivers/net/wireless/realtek/rtw88/fw.c
-@@ -1293,13 +1293,13 @@ static void rtw_fill_rsvd_page_desc(stru
- 	rtw_tx_fill_tx_desc(rtwdev, &pkt_info, skb);
- }
- 
--static inline u8 rtw_len_to_page(unsigned int len, u8 page_size)
-+static inline u8 rtw_len_to_page(unsigned int len, u16 page_size)
- {
- 	return DIV_ROUND_UP(len, page_size);
- }
- 
--static void rtw_rsvd_page_list_to_buf(struct rtw_dev *rtwdev, u8 page_size,
--				      u8 page_margin, u32 page, u8 *buf,
-+static void rtw_rsvd_page_list_to_buf(struct rtw_dev *rtwdev, u16 page_size,
-+				      u16 page_margin, u32 page, u8 *buf,
- 				      struct rtw_rsvd_page *rsvd_pkt)
- {
- 	struct sk_buff *skb = rsvd_pkt->skb;
-@@ -1601,13 +1601,13 @@ static int  __rtw_build_rsvd_page_from_v
- 
- static u8 *rtw_build_rsvd_page(struct rtw_dev *rtwdev, u32 *size)
- {
--	struct ieee80211_hw *hw = rtwdev->hw;
- 	const struct rtw_chip_info *chip = rtwdev->chip;
--	struct sk_buff *iter;
-+	struct ieee80211_hw *hw = rtwdev->hw;
- 	struct rtw_rsvd_page *rsvd_pkt;
--	u32 page = 0;
-+	struct sk_buff *iter;
-+	u16 page_size, page_margin, tx_desc_sz;
- 	u8 total_page = 0;
--	u8 page_size, page_margin, tx_desc_sz;
-+	u32 page = 0;
- 	u8 *buf;
- 	int ret;
- 
-@@ -2013,12 +2013,13 @@ static int _rtw_hw_scan_update_probe_req
- {
- 	const struct rtw_chip_info *chip = rtwdev->chip;
- 	struct sk_buff *skb, *tmp;
--	u8 page_offset = 1, *buf, page_size = chip->page_size;
- 	u16 pg_addr = rtwdev->fifo.rsvd_h2c_info_addr, loc;
--	u16 buf_offset = page_size * page_offset;
- 	u8 tx_desc_sz = chip->tx_pkt_desc_sz;
--	u8 page_cnt, pages;
-+	u16 page_size = chip->page_size;
-+	u8 page_offset = 1, *buf;
-+	u16 buf_offset = page_size * page_offset;
- 	unsigned int pkt_len;
-+	u8 page_cnt, pages;
- 	int ret;
- 
- 	if (rtw_fw_feature_ext_check(&rtwdev->fw, FW_FEATURE_EXT_OLD_PAGE_NUM))
---- a/drivers/net/wireless/realtek/rtw88/mac.c
-+++ b/drivers/net/wireless/realtek/rtw88/mac.c
-@@ -1138,7 +1138,7 @@ int rtw_set_trx_fifo_info(struct rtw_dev
- 
- 	/* config rsvd page num */
- 	fifo->rsvd_drv_pg_num = chip->rsvd_drv_pg_num;
--	fifo->txff_pg_num = chip->txff_size >> 7;
-+	fifo->txff_pg_num = chip->txff_size / chip->page_size;
- 	if (rtw_chip_wcpu_11n(rtwdev))
- 		fifo->rsvd_pg_num = fifo->rsvd_drv_pg_num;
- 	else
---- a/drivers/net/wireless/realtek/rtw88/main.h
-+++ b/drivers/net/wireless/realtek/rtw88/main.h
-@@ -1187,7 +1187,7 @@ struct rtw_chip_info {
- 	u32 fw_rxff_size;
- 	u16 rsvd_drv_pg_num;
- 	u8 band;
--	u8 page_size;
-+	u16 page_size;
- 	u8 csi_buf_pg_num;
- 	u8 dig_max;
- 	u8 dig_min;
diff --git a/package/kernel/mac80211/patches/rtl/033-v6.13-wifi-rtw88-Move-pwr_track_tbl-to-struct-rtw_rfe_def.patch b/package/kernel/mac80211/patches/rtl/033-v6.13-wifi-rtw88-Move-pwr_track_tbl-to-struct-rtw_rfe_def.patch
deleted file mode 100644
index cda3e7a56e..0000000000
--- a/package/kernel/mac80211/patches/rtl/033-v6.13-wifi-rtw88-Move-pwr_track_tbl-to-struct-rtw_rfe_def.patch
+++ /dev/null
@@ -1,297 +0,0 @@
-From 67d915604e6993ff627ac001983a2de63ff71b13 Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 23 Oct 2024 17:12:39 +0300
-Subject: [PATCH] wifi: rtw88: Move pwr_track_tbl to struct rtw_rfe_def
-
-RTL8812AU uses one set of TX power tracking tables for RFE 3, and
-another set for everything else.
-
-Move pwr_track_tbl from struct rtw_chip_info to struct rtw_rfe_def in
-order to load the right set of tables for each RFE (RF front end) type.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/904d0ab1-c046-40cd-a3a3-d4fdcf663c9d@gmail.com
----
- drivers/net/wireless/realtek/rtw88/main.h     |  8 ++++---
- drivers/net/wireless/realtek/rtw88/phy.c      |  3 ++-
- drivers/net/wireless/realtek/rtw88/rtw8703b.c | 12 +++++-----
- drivers/net/wireless/realtek/rtw88/rtw8723d.c | 12 +++++-----
- drivers/net/wireless/realtek/rtw88/rtw8723x.c |  3 ++-
- drivers/net/wireless/realtek/rtw88/rtw8821c.c | 17 +++++++-------
- drivers/net/wireless/realtek/rtw88/rtw8822b.c | 15 ++++++------
- drivers/net/wireless/realtek/rtw88/rtw8822c.c | 23 +++++++++----------
- 8 files changed, 47 insertions(+), 46 deletions(-)
-
---- a/drivers/net/wireless/realtek/rtw88/main.h
-+++ b/drivers/net/wireless/realtek/rtw88/main.h
-@@ -1099,17 +1099,20 @@ enum rtw_rfe_fem {
- struct rtw_rfe_def {
- 	const struct rtw_table *phy_pg_tbl;
- 	const struct rtw_table *txpwr_lmt_tbl;
-+	const struct rtw_pwr_track_tbl *pwr_track_tbl;
- 	const struct rtw_table *agc_btg_tbl;
- };
- 
--#define RTW_DEF_RFE(chip, bb_pg, pwrlmt) {				  \
-+#define RTW_DEF_RFE(chip, bb_pg, pwrlmt, track) {				  \
- 	.phy_pg_tbl = &rtw ## chip ## _bb_pg_type ## bb_pg ## _tbl,	  \
- 	.txpwr_lmt_tbl = &rtw ## chip ## _txpwr_lmt_type ## pwrlmt ## _tbl, \
-+	.pwr_track_tbl = &rtw ## chip ## _pwr_track_type ## track ## _tbl, \
- 	}
- 
--#define RTW_DEF_RFE_EXT(chip, bb_pg, pwrlmt, btg) {			  \
-+#define RTW_DEF_RFE_EXT(chip, bb_pg, pwrlmt, track, btg) {			  \
- 	.phy_pg_tbl = &rtw ## chip ## _bb_pg_type ## bb_pg ## _tbl,	  \
- 	.txpwr_lmt_tbl = &rtw ## chip ## _txpwr_lmt_type ## pwrlmt ## _tbl, \
-+	.pwr_track_tbl = &rtw ## chip ## _pwr_track_type ## track ## _tbl, \
- 	.agc_btg_tbl = &rtw ## chip ## _agc_btg_type ## btg ## _tbl, \
- 	}
- 
-@@ -1243,7 +1246,6 @@ struct rtw_chip_info {
- 	u16 dpd_ratemask;
- 	u8 iqk_threshold;
- 	u8 lck_threshold;
--	const struct rtw_pwr_track_tbl *pwr_track_tbl;
- 
- 	u8 bfer_su_max_num;
- 	u8 bfer_mu_max_num;
---- a/drivers/net/wireless/realtek/rtw88/phy.c
-+++ b/drivers/net/wireless/realtek/rtw88/phy.c
-@@ -2384,7 +2384,8 @@ void rtw_phy_init_tx_power(struct rtw_de
- void rtw_phy_config_swing_table(struct rtw_dev *rtwdev,
- 				struct rtw_swing_table *swing_table)
- {
--	const struct rtw_pwr_track_tbl *tbl = rtwdev->chip->pwr_track_tbl;
-+	const struct rtw_rfe_def *rfe_def = rtw_get_rfe_def(rtwdev);
-+	const struct rtw_pwr_track_tbl *tbl = rfe_def->pwr_track_tbl;
- 	u8 channel = rtwdev->hal.current_channel;
- 
- 	if (IS_CH_2G_BAND(channel)) {
---- a/drivers/net/wireless/realtek/rtw88/rtw8703b.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8703b.c
-@@ -493,11 +493,6 @@ static const struct rtw_pwr_seq_cmd * co
- 	NULL
- };
- 
--static const struct rtw_rfe_def rtw8703b_rfe_defs[] = {
--	[0] = { .phy_pg_tbl	= &rtw8703b_bb_pg_tbl,
--		.txpwr_lmt_tbl	= &rtw8703b_txpwr_lmt_tbl,},
--};
--
- static const struct rtw_page_table page_table_8703b[] = {
- 	{12, 2, 2, 0, 1},
- 	{12, 2, 2, 0, 1},
-@@ -1818,6 +1813,12 @@ static const struct rtw_pwr_track_tbl rt
- 	.pwrtrk_xtal_p = rtw8703b_pwrtrk_xtal_p,
- };
- 
-+static const struct rtw_rfe_def rtw8703b_rfe_defs[] = {
-+	[0] = { .phy_pg_tbl	= &rtw8703b_bb_pg_tbl,
-+		.txpwr_lmt_tbl	= &rtw8703b_txpwr_lmt_tbl,
-+		.pwr_track_tbl	= &rtw8703b_rtw_pwr_track_tbl, },
-+};
-+
- /* Shared-Antenna Coex Table */
- static const struct coex_table_para table_sant_8703b[] = {
- 	{0xffffffff, 0xffffffff}, /* case-0 */
-@@ -1997,7 +1998,6 @@ const struct rtw_chip_info rtw8703b_hw_s
- 	.rfe_defs_size = ARRAY_SIZE(rtw8703b_rfe_defs),
- 
- 	.iqk_threshold = 8,
--	.pwr_track_tbl = &rtw8703b_rtw_pwr_track_tbl,
- 
- 	/* WOWLAN firmware exists, but not implemented yet */
- 	.wow_fw_name = "rtw88/rtw8703b_wow_fw.bin",
---- a/drivers/net/wireless/realtek/rtw88/rtw8723d.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8723d.c
-@@ -2020,11 +2020,6 @@ static const struct rtw_intf_phy_para_ta
- 	.n_gen1_para	= ARRAY_SIZE(pcie_gen1_param_8723d),
- };
- 
--static const struct rtw_rfe_def rtw8723d_rfe_defs[] = {
--	[0] = { .phy_pg_tbl	= &rtw8723d_bb_pg_tbl,
--		.txpwr_lmt_tbl	= &rtw8723d_txpwr_lmt_tbl,},
--};
--
- static const u8 rtw8723d_pwrtrk_2gb_n[] = {
- 	0, 0, 1, 1, 1, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5,
- 	6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10, 10
-@@ -2088,6 +2083,12 @@ static const struct rtw_pwr_track_tbl rt
- 	.pwrtrk_xtal_n = rtw8723d_pwrtrk_xtal_n,
- };
- 
-+static const struct rtw_rfe_def rtw8723d_rfe_defs[] = {
-+	[0] = { .phy_pg_tbl	= &rtw8723d_bb_pg_tbl,
-+		.txpwr_lmt_tbl	= &rtw8723d_txpwr_lmt_tbl,
-+		.pwr_track_tbl	= &rtw8723d_rtw_pwr_track_tbl, },
-+};
-+
- static const struct rtw_reg_domain coex_info_hw_regs_8723d[] = {
- 	{0x948, MASKDWORD, RTW_REG_DOMAIN_MAC32},
- 	{0x67, BIT(7), RTW_REG_DOMAIN_MAC8},
-@@ -2159,7 +2160,6 @@ const struct rtw_chip_info rtw8723d_hw_s
- 	.rfe_defs = rtw8723d_rfe_defs,
- 	.rfe_defs_size = ARRAY_SIZE(rtw8723d_rfe_defs),
- 	.rx_ldpc = false,
--	.pwr_track_tbl = &rtw8723d_rtw_pwr_track_tbl,
- 	.iqk_threshold = 8,
- 	.ampdu_density = IEEE80211_HT_MPDU_DENSITY_16,
- 	.max_scan_ie_len = IEEE80211_MAX_DATA_LEN,
---- a/drivers/net/wireless/realtek/rtw88/rtw8723x.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8723x.c
-@@ -595,7 +595,8 @@ void __rtw8723x_pwrtrack_set_xtal(struct
- 				  u8 delta)
- {
- 	struct rtw_dm_info *dm_info = &rtwdev->dm_info;
--	const struct rtw_pwr_track_tbl *tbl = rtwdev->chip->pwr_track_tbl;
-+	const struct rtw_rfe_def *rfe_def = rtw_get_rfe_def(rtwdev);
-+	const struct rtw_pwr_track_tbl *tbl = rfe_def->pwr_track_tbl;
- 	const s8 *pwrtrk_xtal;
- 	s8 xtal_cap;
- 
---- a/drivers/net/wireless/realtek/rtw88/rtw8821c.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8821c.c
-@@ -1581,13 +1581,6 @@ static const struct rtw_intf_phy_para_ta
- 	.n_gen2_para	= ARRAY_SIZE(pcie_gen2_param_8821c),
- };
- 
--static const struct rtw_rfe_def rtw8821c_rfe_defs[] = {
--	[0] = RTW_DEF_RFE(8821c, 0, 0),
--	[2] = RTW_DEF_RFE_EXT(8821c, 0, 0, 2),
--	[4] = RTW_DEF_RFE_EXT(8821c, 0, 0, 2),
--	[6] = RTW_DEF_RFE(8821c, 0, 0),
--};
--
- static const struct rtw_hw_reg rtw8821c_dig[] = {
- 	[0] = { .addr = 0xc50, .mask = 0x7f },
- };
-@@ -1899,7 +1892,7 @@ static const u8 rtw8821c_pwrtrk_2g_cck_a
- 	5, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9
- };
- 
--static const struct rtw_pwr_track_tbl rtw8821c_rtw_pwr_track_tbl = {
-+static const struct rtw_pwr_track_tbl rtw8821c_pwr_track_type0_tbl = {
- 	.pwrtrk_5gb_n[0] = rtw8821c_pwrtrk_5gb_n[0],
- 	.pwrtrk_5gb_n[1] = rtw8821c_pwrtrk_5gb_n[1],
- 	.pwrtrk_5gb_n[2] = rtw8821c_pwrtrk_5gb_n[2],
-@@ -1922,6 +1915,13 @@ static const struct rtw_pwr_track_tbl rt
- 	.pwrtrk_2g_ccka_p = rtw8821c_pwrtrk_2g_cck_a_p,
- };
- 
-+static const struct rtw_rfe_def rtw8821c_rfe_defs[] = {
-+	[0] = RTW_DEF_RFE(8821c, 0, 0, 0),
-+	[2] = RTW_DEF_RFE_EXT(8821c, 0, 0, 0, 2),
-+	[4] = RTW_DEF_RFE_EXT(8821c, 0, 0, 0, 2),
-+	[6] = RTW_DEF_RFE(8821c, 0, 0, 0),
-+};
-+
- static const struct rtw_reg_domain coex_info_hw_regs_8821c[] = {
- 	{0xCB0, MASKDWORD, RTW_REG_DOMAIN_MAC32},
- 	{0xCB4, MASKDWORD, RTW_REG_DOMAIN_MAC32},
-@@ -1994,7 +1994,6 @@ const struct rtw_chip_info rtw8821c_hw_s
- 	.rfe_defs = rtw8821c_rfe_defs,
- 	.rfe_defs_size = ARRAY_SIZE(rtw8821c_rfe_defs),
- 	.rx_ldpc = false,
--	.pwr_track_tbl = &rtw8821c_rtw_pwr_track_tbl,
- 	.iqk_threshold = 8,
- 	.bfer_su_max_num = 2,
- 	.bfer_mu_max_num = 1,
---- a/drivers/net/wireless/realtek/rtw88/rtw8822b.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8822b.c
-@@ -2072,12 +2072,6 @@ static const struct rtw_intf_phy_para_ta
- 	.n_gen2_para	= ARRAY_SIZE(pcie_gen2_param_8822b),
- };
- 
--static const struct rtw_rfe_def rtw8822b_rfe_defs[] = {
--	[2] = RTW_DEF_RFE(8822b, 2, 2),
--	[3] = RTW_DEF_RFE(8822b, 3, 0),
--	[5] = RTW_DEF_RFE(8822b, 5, 5),
--};
--
- static const struct rtw_hw_reg rtw8822b_dig[] = {
- 	[0] = { .addr = 0xc50, .mask = 0x7f },
- 	[1] = { .addr = 0xe50, .mask = 0x7f },
-@@ -2432,7 +2426,7 @@ static const u8 rtw8822b_pwrtrk_2g_cck_a
- 	10, 11, 11, 12, 12, 13, 13, 14, 14, 15
- };
- 
--static const struct rtw_pwr_track_tbl rtw8822b_rtw_pwr_track_tbl = {
-+static const struct rtw_pwr_track_tbl rtw8822b_pwr_track_type0_tbl = {
- 	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_1] = rtw8822b_pwrtrk_5gb_n[RTW_PWR_TRK_5G_1],
- 	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_2] = rtw8822b_pwrtrk_5gb_n[RTW_PWR_TRK_5G_2],
- 	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_3] = rtw8822b_pwrtrk_5gb_n[RTW_PWR_TRK_5G_3],
-@@ -2455,6 +2449,12 @@ static const struct rtw_pwr_track_tbl rt
- 	.pwrtrk_2g_ccka_p = rtw8822b_pwrtrk_2g_cck_a_p,
- };
- 
-+static const struct rtw_rfe_def rtw8822b_rfe_defs[] = {
-+	[2] = RTW_DEF_RFE(8822b, 2, 2, 0),
-+	[3] = RTW_DEF_RFE(8822b, 3, 0, 0),
-+	[5] = RTW_DEF_RFE(8822b, 5, 5, 0),
-+};
-+
- static const struct rtw_reg_domain coex_info_hw_regs_8822b[] = {
- 	{0xcb0, MASKDWORD, RTW_REG_DOMAIN_MAC32},
- 	{0xcb4, MASKDWORD, RTW_REG_DOMAIN_MAC32},
-@@ -2535,7 +2535,6 @@ const struct rtw_chip_info rtw8822b_hw_s
- 	.rf_tbl = {&rtw8822b_rf_a_tbl, &rtw8822b_rf_b_tbl},
- 	.rfe_defs = rtw8822b_rfe_defs,
- 	.rfe_defs_size = ARRAY_SIZE(rtw8822b_rfe_defs),
--	.pwr_track_tbl = &rtw8822b_rtw_pwr_track_tbl,
- 	.iqk_threshold = 8,
- 	.bfer_su_max_num = 2,
- 	.bfer_mu_max_num = 1,
---- a/drivers/net/wireless/realtek/rtw88/rtw8822c.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8822c.c
-@@ -4883,16 +4883,6 @@ static const struct rtw_intf_phy_para_ta
- 	.n_gen2_para	= ARRAY_SIZE(pcie_gen2_param_8822c),
- };
- 
--static const struct rtw_rfe_def rtw8822c_rfe_defs[] = {
--	[0] = RTW_DEF_RFE(8822c, 0, 0),
--	[1] = RTW_DEF_RFE(8822c, 0, 0),
--	[2] = RTW_DEF_RFE(8822c, 0, 0),
--	[3] = RTW_DEF_RFE(8822c, 0, 0),
--	[4] = RTW_DEF_RFE(8822c, 0, 0),
--	[5] = RTW_DEF_RFE(8822c, 0, 5),
--	[6] = RTW_DEF_RFE(8822c, 0, 0),
--};
--
- static const struct rtw_hw_reg rtw8822c_dig[] = {
- 	[0] = { .addr = 0x1d70, .mask = 0x7f },
- 	[1] = { .addr = 0x1d70, .mask = 0x7f00 },
-@@ -5238,7 +5228,7 @@ static const u8 rtw8822c_pwrtrk_2g_cck_a
- 	18, 18, 19, 20, 21, 22, 23, 24, 24, 25
- };
- 
--static const struct rtw_pwr_track_tbl rtw8822c_rtw_pwr_track_tbl = {
-+static const struct rtw_pwr_track_tbl rtw8822c_pwr_track_type0_tbl = {
- 	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_1] = rtw8822c_pwrtrk_5gb_n[RTW_PWR_TRK_5G_1],
- 	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_2] = rtw8822c_pwrtrk_5gb_n[RTW_PWR_TRK_5G_2],
- 	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_3] = rtw8822c_pwrtrk_5gb_n[RTW_PWR_TRK_5G_3],
-@@ -5261,6 +5251,16 @@ static const struct rtw_pwr_track_tbl rt
- 	.pwrtrk_2g_ccka_p = rtw8822c_pwrtrk_2g_cck_a_p,
- };
- 
-+static const struct rtw_rfe_def rtw8822c_rfe_defs[] = {
-+	[0] = RTW_DEF_RFE(8822c, 0, 0, 0),
-+	[1] = RTW_DEF_RFE(8822c, 0, 0, 0),
-+	[2] = RTW_DEF_RFE(8822c, 0, 0, 0),
-+	[3] = RTW_DEF_RFE(8822c, 0, 0, 0),
-+	[4] = RTW_DEF_RFE(8822c, 0, 0, 0),
-+	[5] = RTW_DEF_RFE(8822c, 0, 5, 0),
-+	[6] = RTW_DEF_RFE(8822c, 0, 0, 0),
-+};
-+
- static const struct rtw_hw_reg_offset rtw8822c_edcca_th[] = {
- 	[EDCCA_TH_L2H_IDX] = {
- 		{.addr = 0x84c, .mask = MASKBYTE2}, .offset = 0x80
-@@ -5360,7 +5360,6 @@ const struct rtw_chip_info rtw8822c_hw_s
- 	.rfe_defs_size = ARRAY_SIZE(rtw8822c_rfe_defs),
- 	.en_dis_dpd = true,
- 	.dpd_ratemask = DIS_DPD_RATEALL,
--	.pwr_track_tbl = &rtw8822c_rtw_pwr_track_tbl,
- 	.iqk_threshold = 8,
- 	.lck_threshold = 8,
- 	.bfer_su_max_num = 2,
diff --git a/package/kernel/mac80211/patches/rtl/034-v6.13-wifi-rtw88-usb-Set-pkt_info.ls-for-the-reserved-page.patch b/package/kernel/mac80211/patches/rtl/034-v6.13-wifi-rtw88-usb-Set-pkt_info.ls-for-the-reserved-page.patch
deleted file mode 100644
index 67d7d230f4..0000000000
--- a/package/kernel/mac80211/patches/rtl/034-v6.13-wifi-rtw88-usb-Set-pkt_info.ls-for-the-reserved-page.patch
+++ /dev/null
@@ -1,27 +0,0 @@
-From 85bf3041a0ea40a60b5295749268e179f056546a Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 23 Oct 2024 17:13:10 +0300
-Subject: [PATCH] wifi: rtw88: usb: Set pkt_info.ls for the reserved page
-
-"ls" meaning "last segment". Without this RTL8812AU can't upload the
-reserved page in USB 2 mode. (Somehow it's fine in USB 3 mode.)
-
-Also tested with RTL8822CU, RTL8812BU, RTL8811CU, RTL8723DU, RTL8811AU.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/e443f5d9-4b53-4f64-985c-64313ec80bef@gmail.com
----
- drivers/net/wireless/realtek/rtw88/usb.c | 1 +
- 1 file changed, 1 insertion(+)
-
---- a/drivers/net/wireless/realtek/rtw88/usb.c
-+++ b/drivers/net/wireless/realtek/rtw88/usb.c
-@@ -478,6 +478,7 @@ static int rtw_usb_write_data_rsvd_page(
- 	pkt_info.tx_pkt_size = size;
- 	pkt_info.qsel = TX_DESC_QSEL_BEACON;
- 	pkt_info.offset = chip->tx_pkt_desc_sz;
-+	pkt_info.ls = true;
- 
- 	return rtw_usb_write_data(rtwdev, &pkt_info, buf);
- }
diff --git a/package/kernel/mac80211/patches/rtl/035-v6.13-wifi-rtw88-Detect-beacon-loss-with-chips-other-than-.patch b/package/kernel/mac80211/patches/rtl/035-v6.13-wifi-rtw88-Detect-beacon-loss-with-chips-other-than-.patch
deleted file mode 100644
index de64f33e43..0000000000
--- a/package/kernel/mac80211/patches/rtl/035-v6.13-wifi-rtw88-Detect-beacon-loss-with-chips-other-than-.patch
+++ /dev/null
@@ -1,63 +0,0 @@
-From 57289d30cd2ae315ab9b28213d63d1dbf8570cf3 Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 23 Oct 2024 17:13:45 +0300
-Subject: [PATCH] wifi: rtw88: Detect beacon loss with chips other than 8822c
-
-The driver is supposed to avoid entering LPS (power saving) when there
-is beacon loss, but only RTL8822C detects the beacon loss (because it
-has beacon filtering in the firmware).
-
-Detect beacon loss with the other chips by checking if we received less
-than half the expected number of beacons in the last 2-second interval.
-
-This gets rid of the occasional "failed to get tx report from firmware"
-warnings with RTL8821AU. It may also avoid some disconnections.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/f52b2fcf-bf94-48bc-89bd-e55ebc3a2f2d@gmail.com
----
- drivers/net/wireless/realtek/rtw88/main.c | 18 ++++++++++++++++++
- 1 file changed, 18 insertions(+)
-
---- a/drivers/net/wireless/realtek/rtw88/main.c
-+++ b/drivers/net/wireless/realtek/rtw88/main.c
-@@ -202,6 +202,21 @@ static void rtw_vif_watch_dog_iter(void
- 	rtwvif->stats.rx_cnt = 0;
- }
- 
-+static void rtw_sw_beacon_loss_check(struct rtw_dev *rtwdev,
-+				     struct rtw_vif *rtwvif, int received_beacons)
-+{
-+	int watchdog_delay = 2000000 / 1024; /* TU */
-+	int beacon_int, expected_beacons;
-+
-+	if (rtw_fw_feature_check(&rtwdev->fw, FW_FEATURE_BCN_FILTER) || !rtwvif)
-+		return;
-+
-+	beacon_int = rtwvif_to_vif(rtwvif)->bss_conf.beacon_int;
-+	expected_beacons = DIV_ROUND_UP(watchdog_delay, beacon_int);
-+
-+	rtwdev->beacon_loss = received_beacons < expected_beacons / 2;
-+}
-+
- /* process TX/RX statistics periodically for hardware,
-  * the information helps hardware to enhance performance
-  */
-@@ -212,6 +227,7 @@ static void rtw_watch_dog_work(struct wo
- 	struct rtw_traffic_stats *stats = &rtwdev->stats;
- 	struct rtw_watch_dog_iter_data data = {};
- 	bool busy_traffic = test_bit(RTW_FLAG_BUSY_TRAFFIC, rtwdev->flags);
-+	int received_beacons = rtwdev->dm_info.cur_pkt_count.num_bcn_pkt;
- 	u32 tx_unicast_mbps, rx_unicast_mbps;
- 	bool ps_active;
- 
-@@ -270,6 +286,8 @@ static void rtw_watch_dog_work(struct wo
- 	 */
- 	rtw_iterate_vifs(rtwdev, rtw_vif_watch_dog_iter, &data);
- 
-+	rtw_sw_beacon_loss_check(rtwdev, data.rtwvif, received_beacons);
-+
- 	/* fw supports only one station associated to enter lps, if there are
- 	 * more than two stations associated to the AP, then we can not enter
- 	 * lps, because fw does not handle the overlapped beacon interval
diff --git a/package/kernel/mac80211/patches/rtl/036-v6.13-wifi-rtw88-coex-Support-chips-without-a-scoreboard.patch b/package/kernel/mac80211/patches/rtl/036-v6.13-wifi-rtw88-coex-Support-chips-without-a-scoreboard.patch
deleted file mode 100644
index b2fb04fd31..0000000000
--- a/package/kernel/mac80211/patches/rtl/036-v6.13-wifi-rtw88-coex-Support-chips-without-a-scoreboard.patch
+++ /dev/null
@@ -1,66 +0,0 @@
-From b19840afc05121293ae59f017cb9924814eb5d77 Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 23 Oct 2024 17:14:12 +0300
-Subject: [PATCH] wifi: rtw88: coex: Support chips without a scoreboard
-
-All the chips currently supported have a "scoreboard": the chip keeps
-track of certain things related to bluetooth, for example, whether
-bluetooth is active. The information can be read from register 0xaa.
-
-RTL8821AU doesn't have this. Implement bluetooth activity detection in
-rtw_coex_monitor_bt_enable() based on the bluetooth TX/RX counters.
-
-This is mostly important for RTL8811AU, the version of RTL8821AU without
-bluetooth. Without this change, the driver thinks bluetooth is active
-and the wifi speeds are low.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/5058f23d-2086-42cd-82ad-eef31a348467@gmail.com
----
- drivers/net/wireless/realtek/rtw88/coex.c | 18 ++++++++++++++++++
- drivers/net/wireless/realtek/rtw88/main.h |  1 +
- 2 files changed, 19 insertions(+)
-
---- a/drivers/net/wireless/realtek/rtw88/coex.c
-+++ b/drivers/net/wireless/realtek/rtw88/coex.c
-@@ -494,11 +494,29 @@ static void rtw_coex_monitor_bt_enable(s
- 	struct rtw_coex_stat *coex_stat = &coex->stat;
- 	struct rtw_coex_dm *coex_dm = &coex->dm;
- 	bool bt_disabled = false;
-+	bool bt_active = true;
- 	u16 score_board;
- 
- 	if (chip->scbd_support) {
- 		score_board = rtw_coex_read_scbd(rtwdev);
- 		bt_disabled = !(score_board & COEX_SCBD_ONOFF);
-+	} else {
-+		if (coex_stat->hi_pri_tx == 0 && coex_stat->hi_pri_rx == 0 &&
-+		    coex_stat->lo_pri_tx == 0 && coex_stat->lo_pri_rx == 0)
-+			bt_active = false;
-+
-+		if (coex_stat->hi_pri_tx == 0xffff && coex_stat->hi_pri_rx == 0xffff &&
-+		    coex_stat->lo_pri_tx == 0xffff && coex_stat->lo_pri_rx == 0xffff)
-+			bt_active = false;
-+
-+		if (bt_active) {
-+			coex_stat->bt_disable_cnt = 0;
-+			bt_disabled = false;
-+		} else {
-+			coex_stat->bt_disable_cnt++;
-+			if (coex_stat->bt_disable_cnt >= 10)
-+				bt_disabled = true;
-+		}
- 	}
- 
- 	if (coex_stat->bt_disabled != bt_disabled) {
---- a/drivers/net/wireless/realtek/rtw88/main.h
-+++ b/drivers/net/wireless/realtek/rtw88/main.h
-@@ -1494,6 +1494,7 @@ struct rtw_coex_stat {
- 	u8 bt_hid_slot;
- 	u8 bt_a2dp_bitpool;
- 	u8 bt_iqk_state;
-+	u8 bt_disable_cnt;
- 
- 	u16 wl_beacon_interval;
- 	u8 wl_noisy_level;
diff --git a/package/kernel/mac80211/patches/rtl/037-v6.13-wifi-rtw88-8821a-Regularly-ask-for-BT-info-updates.patch b/package/kernel/mac80211/patches/rtl/037-v6.13-wifi-rtw88-8821a-Regularly-ask-for-BT-info-updates.patch
deleted file mode 100644
index e0e840f0fa..0000000000
--- a/package/kernel/mac80211/patches/rtl/037-v6.13-wifi-rtw88-8821a-Regularly-ask-for-BT-info-updates.patch
+++ /dev/null
@@ -1,67 +0,0 @@
-From bfcee5ee924fc5f706d20f5dc31586ca47912304 Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 23 Oct 2024 17:14:45 +0300
-Subject: [PATCH] wifi: rtw88: 8821a: Regularly ask for BT info updates
-
-The RTL8821AU firmware sends C2H_BT_INFO by itself when bluetooth
-headphones are connected, but not when they are disconnected. This leads
-to the coexistence code still using the A2DP algorithm long after the
-headphones are disconnected, which means the wifi speeds are much lower
-than they should be. Work around this by asking for updates every two
-seconds if the chip is RTL8821AU.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/358acdd2-6aae-46c1-9c66-fcce4e700b96@gmail.com
----
- drivers/net/wireless/realtek/rtw88/coex.c |  2 +-
- drivers/net/wireless/realtek/rtw88/coex.h | 11 +++++++++++
- drivers/net/wireless/realtek/rtw88/main.c |  1 +
- 3 files changed, 13 insertions(+), 1 deletion(-)
-
---- a/drivers/net/wireless/realtek/rtw88/coex.c
-+++ b/drivers/net/wireless/realtek/rtw88/coex.c
-@@ -446,7 +446,7 @@ static void rtw_coex_check_rfk(struct rt
- 	}
- }
- 
--static void rtw_coex_query_bt_info(struct rtw_dev *rtwdev)
-+void rtw_coex_query_bt_info(struct rtw_dev *rtwdev)
- {
- 	struct rtw_coex *coex = &rtwdev->coex;
- 	struct rtw_coex_stat *coex_stat = &coex->stat;
---- a/drivers/net/wireless/realtek/rtw88/coex.h
-+++ b/drivers/net/wireless/realtek/rtw88/coex.h
-@@ -384,6 +384,7 @@ u32 rtw_coex_read_indirect_reg(struct rt
- void rtw_coex_write_indirect_reg(struct rtw_dev *rtwdev, u16 addr,
- 				 u32 mask, u32 val);
- void rtw_coex_write_scbd(struct rtw_dev *rtwdev, u16 bitpos, bool set);
-+void rtw_coex_query_bt_info(struct rtw_dev *rtwdev);
- 
- void rtw_coex_bt_relink_work(struct work_struct *work);
- void rtw_coex_bt_reenable_work(struct work_struct *work);
-@@ -419,4 +420,14 @@ static inline bool rtw_coex_disabled(str
- 	return coex_stat->bt_disabled;
- }
- 
-+static inline void rtw_coex_active_query_bt_info(struct rtw_dev *rtwdev)
-+{
-+	/* The RTL8821AU firmware doesn't send C2H_BT_INFO by itself
-+	 * when bluetooth headphones are disconnected, so we have to
-+	 * ask for it regularly.
-+	 */
-+	if (rtwdev->chip->id == RTW_CHIP_TYPE_8821A && rtwdev->efuse.btcoex)
-+		rtw_coex_query_bt_info(rtwdev);
-+}
-+
- #endif
---- a/drivers/net/wireless/realtek/rtw88/main.c
-+++ b/drivers/net/wireless/realtek/rtw88/main.c
-@@ -274,6 +274,7 @@ static void rtw_watch_dog_work(struct wo
- 	rtw_leave_lps(rtwdev);
- 	rtw_coex_wl_status_check(rtwdev);
- 	rtw_coex_query_bt_hid_list(rtwdev);
-+	rtw_coex_active_query_bt_info(rtwdev);
- 
- 	rtw_phy_dynamic_mechanism(rtwdev);
- 
diff --git a/package/kernel/mac80211/patches/rtl/038-v6.13-wifi-rtw88-8812a-Mitigate-beacon-loss.patch b/package/kernel/mac80211/patches/rtl/038-v6.13-wifi-rtw88-8812a-Mitigate-beacon-loss.patch
deleted file mode 100644
index f862f80460..0000000000
--- a/package/kernel/mac80211/patches/rtl/038-v6.13-wifi-rtw88-8812a-Mitigate-beacon-loss.patch
+++ /dev/null
@@ -1,37 +0,0 @@
-From f9e0189cbc2d6447dde392944c769546cdf48140 Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 23 Oct 2024 17:15:13 +0300
-Subject: [PATCH] wifi: rtw88: 8812a: Mitigate beacon loss
-
-The RTL8812AU has a reception problem, maybe only in the 5 GHz band.
-Sometimes, in some positions, it stops receiving anything even though
-the distance to the AP is only ~3 meters and there are no obstacles.
-Moving it a few centimeters fixes it.
-
-Switch the initial gain to maximum coverage when there is beacon loss.
-This only helps sometimes. This is similar to what the official driver
-does.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/203f5043-4fe1-4f35-8b8f-d3b6f44e1fd9@gmail.com
----
- drivers/net/wireless/realtek/rtw88/phy.c | 7 +++++++
- 1 file changed, 7 insertions(+)
-
---- a/drivers/net/wireless/realtek/rtw88/phy.c
-+++ b/drivers/net/wireless/realtek/rtw88/phy.c
-@@ -530,6 +530,13 @@ static void rtw_phy_dig(struct rtw_dev *
- 	 */
- 	rtw_phy_dig_recorder(dm_info, cur_igi, fa_cnt);
- 
-+	/* Mitigate beacon loss and connectivity issues, mainly (only?)
-+	 * in the 5 GHz band
-+	 */
-+	if (rtwdev->chip->id == RTW_CHIP_TYPE_8812A && rtwdev->beacon_loss &&
-+	    linked && dm_info->total_fa_cnt < DIG_PERF_FA_TH_EXTRA_HIGH)
-+		cur_igi = DIG_CVRG_MIN;
-+
- 	if (cur_igi != pre_igi)
- 		rtw_phy_dig_write(rtwdev, cur_igi);
- }
diff --git a/package/kernel/mac80211/patches/rtl/039-v6.13-wifi-rtw88-Add-rtw8812a_table.-c-h.patch b/package/kernel/mac80211/patches/rtl/039-v6.13-wifi-rtw88-Add-rtw8812a_table.-c-h.patch
deleted file mode 100644
index 59a04b4d16..0000000000
--- a/package/kernel/mac80211/patches/rtl/039-v6.13-wifi-rtw88-Add-rtw8812a_table.-c-h.patch
+++ /dev/null
@@ -1,2862 +0,0 @@
-From 528f902ecc0eb8fb766bde519421255729623dd8 Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 30 Oct 2024 20:24:33 +0200
-Subject: [PATCH] wifi: rtw88: Add rtw8812a_table.{c,h}
-
-These contain various arrays for initialising RTL8812AU. Also TX power
-limits.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/086f476c-e832-4867-963c-a64a63252fd6@gmail.com
----
- .../wireless/realtek/rtw88/rtw8812a_table.c   | 2812 +++++++++++++++++
- .../wireless/realtek/rtw88/rtw8812a_table.h   |   26 +
- 2 files changed, 2838 insertions(+)
- create mode 100644 drivers/net/wireless/realtek/rtw88/rtw8812a_table.c
- create mode 100644 drivers/net/wireless/realtek/rtw88/rtw8812a_table.h
-
---- /dev/null
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8812a_table.c
-@@ -0,0 +1,2812 @@
-+// SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause
-+/* Copyright(c) 2024  Realtek Corporation
-+ */
-+
-+#include "main.h"
-+#include "phy.h"
-+#include "rtw8812a_table.h"
-+
-+static const u32 rtw8812a_mac[] = {
-+	0x010, 0x0000000C,
-+	0x80000200,	0x00000000,	0x40000000,	0x00000000,
-+	0x011, 0x00000066,
-+	0xA0000000,	0x00000000,
-+	0x011, 0x0000005A,
-+	0xB0000000,	0x00000000,
-+	0x025, 0x0000000F,
-+	0x072, 0x00000000,
-+	0x420, 0x00000080,
-+	0x428, 0x0000000A,
-+	0x429, 0x00000010,
-+	0x430, 0x00000000,
-+	0x431, 0x00000000,
-+	0x432, 0x00000000,
-+	0x433, 0x00000001,
-+	0x434, 0x00000002,
-+	0x435, 0x00000003,
-+	0x436, 0x00000005,
-+	0x437, 0x00000007,
-+	0x438, 0x00000000,
-+	0x439, 0x00000000,
-+	0x43A, 0x00000000,
-+	0x43B, 0x00000001,
-+	0x43C, 0x00000002,
-+	0x43D, 0x00000003,
-+	0x43E, 0x00000005,
-+	0x43F, 0x00000007,
-+	0x440, 0x0000005D,
-+	0x441, 0x00000001,
-+	0x442, 0x00000000,
-+	0x444, 0x00000010,
-+	0x445, 0x00000000,
-+	0x446, 0x00000000,
-+	0x447, 0x00000000,
-+	0x448, 0x00000000,
-+	0x449, 0x000000F0,
-+	0x44A, 0x0000000F,
-+	0x44B, 0x0000003E,
-+	0x44C, 0x00000010,
-+	0x44D, 0x00000000,
-+	0x44E, 0x00000000,
-+	0x44F, 0x00000000,
-+	0x450, 0x00000000,
-+	0x451, 0x000000F0,
-+	0x452, 0x0000000F,
-+	0x453, 0x00000000,
-+	0x45B, 0x00000080,
-+	0x460, 0x00000066,
-+	0x461, 0x00000066,
-+	0x4C8, 0x000000FF,
-+	0x4C9, 0x00000008,
-+	0x4CC, 0x000000FF,
-+	0x4CD, 0x000000FF,
-+	0x4CE, 0x00000001,
-+	0x500, 0x00000026,
-+	0x501, 0x000000A2,
-+	0x502, 0x0000002F,
-+	0x503, 0x00000000,
-+	0x504, 0x00000028,
-+	0x505, 0x000000A3,
-+	0x506, 0x0000005E,
-+	0x507, 0x00000000,
-+	0x508, 0x0000002B,
-+	0x509, 0x000000A4,
-+	0x50A, 0x0000005E,
-+	0x50B, 0x00000000,
-+	0x50C, 0x0000004F,
-+	0x50D, 0x000000A4,
-+	0x50E, 0x00000000,
-+	0x50F, 0x00000000,
-+	0x512, 0x0000001C,
-+	0x514, 0x0000000A,
-+	0x516, 0x0000000A,
-+	0x525, 0x0000004F,
-+	0x550, 0x00000010,
-+	0x551, 0x00000010,
-+	0x559, 0x00000002,
-+	0x55C, 0x00000050,
-+	0x55D, 0x000000FF,
-+	0x604, 0x00000009,
-+	0x605, 0x00000030,
-+	0x607, 0x00000003,
-+	0x608, 0x0000000E,
-+	0x609, 0x0000002A,
-+	0x620, 0x000000FF,
-+	0x621, 0x000000FF,
-+	0x622, 0x000000FF,
-+	0x623, 0x000000FF,
-+	0x624, 0x000000FF,
-+	0x625, 0x000000FF,
-+	0x626, 0x000000FF,
-+	0x627, 0x000000FF,
-+	0x638, 0x00000050,
-+	0x63C, 0x0000000A,
-+	0x63D, 0x0000000A,
-+	0x63E, 0x0000000E,
-+	0x63F, 0x0000000E,
-+	0x640, 0x00000080,
-+	0x642, 0x00000040,
-+	0x643, 0x00000000,
-+	0x652, 0x000000C8,
-+	0x66E, 0x00000005,
-+	0x700, 0x00000021,
-+	0x701, 0x00000043,
-+	0x702, 0x00000065,
-+	0x703, 0x00000087,
-+	0x708, 0x00000021,
-+	0x709, 0x00000043,
-+	0x70A, 0x00000065,
-+	0x70B, 0x00000087,
-+	0x718, 0x00000040,
-+};
-+
-+RTW_DECL_TABLE_PHY_COND(rtw8812a_mac, rtw_phy_cfg_mac);
-+
-+static const u32 rtw8812a_agc[] = {
-+	0x80000001,	0x00000000,	0x40000000,	0x00000000,
-+	0x81C, 0xFC000001,
-+	0x81C, 0xFB020001,
-+	0x81C, 0xFA040001,
-+	0x81C, 0xF9060001,
-+	0x81C, 0xF8080001,
-+	0x81C, 0xF70A0001,
-+	0x81C, 0xF60C0001,
-+	0x81C, 0xF50E0001,
-+	0x81C, 0xF4100001,
-+	0x81C, 0xF3120001,
-+	0x81C, 0xF2140001,
-+	0x81C, 0xF1160001,
-+	0x81C, 0xF0180001,
-+	0x81C, 0xEF1A0001,
-+	0x81C, 0xEE1C0001,
-+	0x81C, 0xED1E0001,
-+	0x81C, 0xEC200001,
-+	0x81C, 0xEB220001,
-+	0x81C, 0xEA240001,
-+	0x81C, 0xCD260001,
-+	0x81C, 0xCC280001,
-+	0x81C, 0xCB2A0001,
-+	0x81C, 0xCA2C0001,
-+	0x81C, 0xC92E0001,
-+	0x81C, 0xC8300001,
-+	0x81C, 0xA6320001,
-+	0x81C, 0xA5340001,
-+	0x81C, 0xA4360001,
-+	0x81C, 0xA3380001,
-+	0x81C, 0xA23A0001,
-+	0x81C, 0x883C0001,
-+	0x81C, 0x873E0001,
-+	0x81C, 0x86400001,
-+	0x81C, 0x85420001,
-+	0x81C, 0x84440001,
-+	0x81C, 0x83460001,
-+	0x81C, 0x82480001,
-+	0x81C, 0x814A0001,
-+	0x81C, 0x484C0001,
-+	0x81C, 0x474E0001,
-+	0x81C, 0x46500001,
-+	0x81C, 0x45520001,
-+	0x81C, 0x44540001,
-+	0x81C, 0x43560001,
-+	0x81C, 0x42580001,
-+	0x81C, 0x415A0001,
-+	0x81C, 0x255C0001,
-+	0x81C, 0x245E0001,
-+	0x81C, 0x23600001,
-+	0x81C, 0x22620001,
-+	0x81C, 0x21640001,
-+	0x81C, 0x21660001,
-+	0x81C, 0x21680001,
-+	0x81C, 0x216A0001,
-+	0x81C, 0x216C0001,
-+	0x81C, 0x216E0001,
-+	0x81C, 0x21700001,
-+	0x81C, 0x21720001,
-+	0x81C, 0x21740001,
-+	0x81C, 0x21760001,
-+	0x81C, 0x21780001,
-+	0x81C, 0x217A0001,
-+	0x81C, 0x217C0001,
-+	0x81C, 0x217E0001,
-+	0x90000001,	0x00000005,	0x40000000,	0x00000000,
-+	0x81C, 0xF9000001,
-+	0x81C, 0xF8020001,
-+	0x81C, 0xF7040001,
-+	0x81C, 0xF6060001,
-+	0x81C, 0xF5080001,
-+	0x81C, 0xF40A0001,
-+	0x81C, 0xF30C0001,
-+	0x81C, 0xF20E0001,
-+	0x81C, 0xF1100001,
-+	0x81C, 0xF0120001,
-+	0x81C, 0xEF140001,
-+	0x81C, 0xEE160001,
-+	0x81C, 0xED180001,
-+	0x81C, 0xEC1A0001,
-+	0x81C, 0xEB1C0001,
-+	0x81C, 0xEA1E0001,
-+	0x81C, 0xCD200001,
-+	0x81C, 0xCC220001,
-+	0x81C, 0xCB240001,
-+	0x81C, 0xCA260001,
-+	0x81C, 0xC9280001,
-+	0x81C, 0xC82A0001,
-+	0x81C, 0xC72C0001,
-+	0x81C, 0xC62E0001,
-+	0x81C, 0xA5300001,
-+	0x81C, 0xA4320001,
-+	0x81C, 0xA3340001,
-+	0x81C, 0xA2360001,
-+	0x81C, 0x88380001,
-+	0x81C, 0x873A0001,
-+	0x81C, 0x863C0001,
-+	0x81C, 0x853E0001,
-+	0x81C, 0x84400001,
-+	0x81C, 0x83420001,
-+	0x81C, 0x82440001,
-+	0x81C, 0x81460001,
-+	0x81C, 0x48480001,
-+	0x81C, 0x474A0001,
-+	0x81C, 0x464C0001,
-+	0x81C, 0x454E0001,
-+	0x81C, 0x44500001,
-+	0x81C, 0x43520001,
-+	0x81C, 0x42540001,
-+	0x81C, 0x41560001,
-+	0x81C, 0x25580001,
-+	0x81C, 0x245A0001,
-+	0x81C, 0x235C0001,
-+	0x81C, 0x225E0001,
-+	0x81C, 0x21600001,
-+	0x81C, 0x21620001,
-+	0x81C, 0x21640001,
-+	0x81C, 0x21660001,
-+	0x81C, 0x21680001,
-+	0x81C, 0x216A0001,
-+	0x81C, 0x236C0001,
-+	0x81C, 0x226E0001,
-+	0x81C, 0x21700001,
-+	0x81C, 0x21720001,
-+	0x81C, 0x21740001,
-+	0x81C, 0x21760001,
-+	0x81C, 0x21780001,
-+	0x81C, 0x217A0001,
-+	0x81C, 0x217C0001,
-+	0x81C, 0x217E0001,
-+	0xA0000000,	0x00000000,
-+	0x81C, 0xFF000001,
-+	0x81C, 0xFF020001,
-+	0x81C, 0xFF040001,
-+	0x81C, 0xFF060001,
-+	0x81C, 0xFF080001,
-+	0x81C, 0xFE0A0001,
-+	0x81C, 0xFD0C0001,
-+	0x81C, 0xFC0E0001,
-+	0x81C, 0xFB100001,
-+	0x81C, 0xFA120001,
-+	0x81C, 0xF9140001,
-+	0x81C, 0xF8160001,
-+	0x81C, 0xF7180001,
-+	0x81C, 0xF61A0001,
-+	0x81C, 0xF51C0001,
-+	0x81C, 0xF41E0001,
-+	0x81C, 0xF3200001,
-+	0x81C, 0xF2220001,
-+	0x81C, 0xF1240001,
-+	0x81C, 0xF0260001,
-+	0x81C, 0xEF280001,
-+	0x81C, 0xEE2A0001,
-+	0x81C, 0xED2C0001,
-+	0x81C, 0xEC2E0001,
-+	0x81C, 0xEB300001,
-+	0x81C, 0xEA320001,
-+	0x81C, 0xE9340001,
-+	0x81C, 0xE8360001,
-+	0x81C, 0xE7380001,
-+	0x81C, 0xE63A0001,
-+	0x81C, 0xE53C0001,
-+	0x81C, 0xC73E0001,
-+	0x81C, 0xC6400001,
-+	0x81C, 0xC5420001,
-+	0x81C, 0xC4440001,
-+	0x81C, 0xC3460001,
-+	0x81C, 0xC2480001,
-+	0x81C, 0xC14A0001,
-+	0x81C, 0xA74C0001,
-+	0x81C, 0xA64E0001,
-+	0x81C, 0xA5500001,
-+	0x81C, 0xA4520001,
-+	0x81C, 0xA3540001,
-+	0x81C, 0xA2560001,
-+	0x81C, 0xA1580001,
-+	0x81C, 0x675A0001,
-+	0x81C, 0x665C0001,
-+	0x81C, 0x655E0001,
-+	0x81C, 0x64600001,
-+	0x81C, 0x63620001,
-+	0x81C, 0x48640001,
-+	0x81C, 0x47660001,
-+	0x81C, 0x46680001,
-+	0x81C, 0x456A0001,
-+	0x81C, 0x446C0001,
-+	0x81C, 0x436E0001,
-+	0x81C, 0x42700001,
-+	0x81C, 0x41720001,
-+	0x81C, 0x41740001,
-+	0x81C, 0x41760001,
-+	0x81C, 0x41780001,
-+	0x81C, 0x417A0001,
-+	0x81C, 0x417C0001,
-+	0x81C, 0x417E0001,
-+	0xB0000000,	0x00000000,
-+	0x80000004,	0x00000000,	0x40000000,	0x00000000,
-+	0x81C, 0xFC800001,
-+	0x81C, 0xFB820001,
-+	0x81C, 0xFA840001,
-+	0x81C, 0xF9860001,
-+	0x81C, 0xF8880001,
-+	0x81C, 0xF78A0001,
-+	0x81C, 0xF68C0001,
-+	0x81C, 0xF58E0001,
-+	0x81C, 0xF4900001,
-+	0x81C, 0xF3920001,
-+	0x81C, 0xF2940001,
-+	0x81C, 0xF1960001,
-+	0x81C, 0xF0980001,
-+	0x81C, 0xEF9A0001,
-+	0x81C, 0xEE9C0001,
-+	0x81C, 0xED9E0001,
-+	0x81C, 0xECA00001,
-+	0x81C, 0xEBA20001,
-+	0x81C, 0xEAA40001,
-+	0x81C, 0xE9A60001,
-+	0x81C, 0xE8A80001,
-+	0x81C, 0xE7AA0001,
-+	0x81C, 0xE6AC0001,
-+	0x81C, 0xE5AE0001,
-+	0x81C, 0xE4B00001,
-+	0x81C, 0xE3B20001,
-+	0x81C, 0xA8B40001,
-+	0x81C, 0xA7B60001,
-+	0x81C, 0xA6B80001,
-+	0x81C, 0xA5BA0001,
-+	0x81C, 0xA4BC0001,
-+	0x81C, 0xA3BE0001,
-+	0x81C, 0xA2C00001,
-+	0x81C, 0xA1C20001,
-+	0x81C, 0x68C40001,
-+	0x81C, 0x67C60001,
-+	0x81C, 0x66C80001,
-+	0x81C, 0x65CA0001,
-+	0x81C, 0x64CC0001,
-+	0x81C, 0x47CE0001,
-+	0x81C, 0x46D00001,
-+	0x81C, 0x45D20001,
-+	0x81C, 0x44D40001,
-+	0x81C, 0x43D60001,
-+	0x81C, 0x42D80001,
-+	0x81C, 0x08DA0001,
-+	0x81C, 0x07DC0001,
-+	0x81C, 0x06DE0001,
-+	0x81C, 0x05E00001,
-+	0x81C, 0x04E20001,
-+	0x81C, 0x03E40001,
-+	0x81C, 0x02E60001,
-+	0x81C, 0x01E80001,
-+	0x81C, 0x01EA0001,
-+	0x81C, 0x01EC0001,
-+	0x81C, 0x01EE0001,
-+	0x81C, 0x01F00001,
-+	0x81C, 0x01F20001,
-+	0x81C, 0x01F40001,
-+	0x81C, 0x01F60001,
-+	0x81C, 0x01F80001,
-+	0x81C, 0x01FA0001,
-+	0x81C, 0x01FC0001,
-+	0x81C, 0x01FE0001,
-+	0xA0000000,	0x00000000,
-+	0x81C, 0xFF800001,
-+	0x81C, 0xFF820001,
-+	0x81C, 0xFF840001,
-+	0x81C, 0xFE860001,
-+	0x81C, 0xFD880001,
-+	0x81C, 0xFC8A0001,
-+	0x81C, 0xFB8C0001,
-+	0x81C, 0xFA8E0001,
-+	0x81C, 0xF9900001,
-+	0x81C, 0xF8920001,
-+	0x81C, 0xF7940001,
-+	0x81C, 0xF6960001,
-+	0x81C, 0xF5980001,
-+	0x81C, 0xF49A0001,
-+	0x81C, 0xF39C0001,
-+	0x81C, 0xF29E0001,
-+	0x81C, 0xF1A00001,
-+	0x81C, 0xF0A20001,
-+	0x81C, 0xEFA40001,
-+	0x81C, 0xEEA60001,
-+	0x81C, 0xEDA80001,
-+	0x81C, 0xECAA0001,
-+	0x81C, 0xEBAC0001,
-+	0x81C, 0xEAAE0001,
-+	0x81C, 0xE9B00001,
-+	0x81C, 0xE8B20001,
-+	0x81C, 0xE7B40001,
-+	0x81C, 0xE6B60001,
-+	0x81C, 0xE5B80001,
-+	0x81C, 0xE4BA0001,
-+	0x81C, 0xE3BC0001,
-+	0x81C, 0xA8BE0001,
-+	0x81C, 0xA7C00001,
-+	0x81C, 0xA6C20001,
-+	0x81C, 0xA5C40001,
-+	0x81C, 0xA4C60001,
-+	0x81C, 0xA3C80001,
-+	0x81C, 0xA2CA0001,
-+	0x81C, 0xA1CC0001,
-+	0x81C, 0x68CE0001,
-+	0x81C, 0x67D00001,
-+	0x81C, 0x66D20001,
-+	0x81C, 0x65D40001,
-+	0x81C, 0x64D60001,
-+	0x81C, 0x47D80001,
-+	0x81C, 0x46DA0001,
-+	0x81C, 0x45DC0001,
-+	0x81C, 0x44DE0001,
-+	0x81C, 0x43E00001,
-+	0x81C, 0x42E20001,
-+	0x81C, 0x08E40001,
-+	0x81C, 0x07E60001,
-+	0x81C, 0x06E80001,
-+	0x81C, 0x05EA0001,
-+	0x81C, 0x04EC0001,
-+	0x81C, 0x03EE0001,
-+	0x81C, 0x02F00001,
-+	0x81C, 0x01F20001,
-+	0x81C, 0x01F40001,
-+	0x81C, 0x01F60001,
-+	0x81C, 0x01F80001,
-+	0x81C, 0x01FA0001,
-+	0x81C, 0x01FC0001,
-+	0x81C, 0x01FE0001,
-+	0xB0000000,	0x00000000,
-+	0xC50, 0x00000022,
-+	0xC50, 0x00000020,
-+	0xE50, 0x00000022,
-+	0xE50, 0x00000020,
-+};
-+
-+RTW_DECL_TABLE_PHY_COND(rtw8812a_agc, rtw_phy_cfg_agc);
-+
-+static const u32 rtw8812a_agc_diff_lb[] = {
-+	0x80000004,	0x00000000,	0x40000000,	0x00000000,
-+	0x81C, 0x47CE0001,
-+	0x81C, 0x46D00001,
-+	0x81C, 0x45D20001,
-+	0x81C, 0x44D40001,
-+	0x81C, 0x43D60001,
-+	0x81C, 0x42D80001,
-+	0x81C, 0x08DA0001,
-+	0x81C, 0x07DC0001,
-+	0x81C, 0x06DE0001,
-+	0x81C, 0x05E00001,
-+	0x81C, 0x04E20001,
-+	0x81C, 0x03E40001,
-+	0x81C, 0x02E60001,
-+	0xA0000000,	0x00000000,
-+	0x81C, 0x47D80001,
-+	0x81C, 0x46DA0001,
-+	0x81C, 0x45DC0001,
-+	0x81C, 0x44DE0001,
-+	0x81C, 0x43E00001,
-+	0x81C, 0x42E20001,
-+	0x81C, 0x08E40001,
-+	0x81C, 0x07E60001,
-+	0x81C, 0x06E80001,
-+	0x81C, 0x05EA0001,
-+	0x81C, 0x04EC0001,
-+	0x81C, 0x03EE0001,
-+	0x81C, 0x02F00001,
-+	0xB0000000,	0x00000000,
-+};
-+
-+RTW_DECL_TABLE_PHY_COND(rtw8812a_agc_diff_lb, rtw_phy_cfg_agc);
-+
-+static const u32 rtw8812a_agc_diff_hb[] = {
-+	0x80000004,	0x00000000,	0x40000000,	0x00000000,
-+	0x81C, 0x45CE0001,
-+	0x81C, 0x44D00001,
-+	0x81C, 0x43D20001,
-+	0x81C, 0x42D40001,
-+	0x81C, 0x08D60001,
-+	0x81C, 0x07D80001,
-+	0x81C, 0x06DA0001,
-+	0x81C, 0x05DC0001,
-+	0x81C, 0x04DE0001,
-+	0x81C, 0x03E00001,
-+	0x81C, 0x02E20001,
-+	0x81C, 0x01E40001,
-+	0x81C, 0x01E60001,
-+	0xA0000000,	0x00000000,
-+	0x81C, 0x45D80001,
-+	0x81C, 0x44DA0001,
-+	0x81C, 0x43DC0001,
-+	0x81C, 0x42DE0001,
-+	0x81C, 0x08E00001,
-+	0x81C, 0x07E20001,
-+	0x81C, 0x06E40001,
-+	0x81C, 0x05E60001,
-+	0x81C, 0x04E80001,
-+	0x81C, 0x03EA0001,
-+	0x81C, 0x02EC0001,
-+	0x81C, 0x01EE0001,
-+	0x81C, 0x01F00001,
-+	0xB0000000,	0x00000000,
-+};
-+
-+RTW_DECL_TABLE_PHY_COND(rtw8812a_agc_diff_hb, rtw_phy_cfg_agc);
-+
-+static const u32 rtw8812a_bb[] = {
-+	0x800, 0x8020D010,
-+	0x804, 0x080112E0,
-+	0x808, 0x0E028233,
-+	0x80C, 0x12131113,
-+	0x810, 0x20101263,
-+	0x814, 0x020C3D10,
-+	0x818, 0x03A00385,
-+	0x820, 0x00000000,
-+	0x824, 0x00030FE0,
-+	0x828, 0x00000000,
-+	0x82C, 0x002083DD,
-+	0x830, 0x2EAAEEB8,
-+	0x834, 0x0037A706,
-+	0x838, 0x06C89B44,
-+	0x83C, 0x0000095B,
-+	0x840, 0xC0000001,
-+	0x844, 0x40003CDE,
-+	0x848, 0x6210FF8B,
-+	0x84C, 0x6CFDFFB8,
-+	0x850, 0x28874706,
-+	0x854, 0x0001520C,
-+	0x858, 0x8060E000,
-+	0x85C, 0x74210168,
-+	0x860, 0x6929C321,
-+	0x864, 0x79727432,
-+	0x868, 0x8CA7A314,
-+	0x86C, 0x338C2878,
-+	0x870, 0x03333333,
-+	0x874, 0x31602C2E,
-+	0x878, 0x00003152,
-+	0x87C, 0x000FC000,
-+	0x8A0, 0x00000013,
-+	0x8A4, 0x7F7F7F7F,
-+	0x8A8, 0xA202033E,
-+	0x8AC, 0x0FF0FA0A,
-+	0x8B0, 0x00000600,
-+	0x8B4, 0x000FC080,
-+	0x8B8, 0x6C10D7FF,
-+	0x8BC, 0x4CA520A3,
-+	0x8C0, 0x27F00020,
-+	0x8C4, 0x00000000,
-+	0x8C8, 0x00012D69,
-+	0x8CC, 0x08248492,
-+	0x8D0, 0x0000B800,
-+	0x8DC, 0x00000000,
-+	0x8D4, 0x940008A0,
-+	0x8D8, 0x290B5612,
-+	0x8F8, 0x400002C0,
-+	0x8FC, 0x00000000,
-+	0x900, 0x00000701,
-+	0x90C, 0x00000000,
-+	0x910, 0x0000FC00,
-+	0x914, 0x00000404,
-+	0x918, 0x1C1028C0,
-+	0x91C, 0x64B11A1C,
-+	0x920, 0xE0767233,
-+	0x924, 0x055AA500,
-+	0x928, 0x00000004,
-+	0x92C, 0xFFFE0000,
-+	0x930, 0xFFFFFFFE,
-+	0x934, 0x001FFFFF,
-+	0x960, 0x00000000,
-+	0x964, 0x00000000,
-+	0x968, 0x00000000,
-+	0x96C, 0x00000000,
-+	0x970, 0x801FFFFF,
-+	0x978, 0x00000000,
-+	0x97C, 0x00000000,
-+	0x980, 0x00000000,
-+	0x984, 0x00000000,
-+	0x988, 0x00000000,
-+	0x990, 0x27100000,
-+	0x994, 0xFFFF0100,
-+	0x998, 0xFFFFFF5C,
-+	0x99C, 0xFFFFFFFF,
-+	0x9A0, 0x000000FF,
-+	0x9A4, 0x00080080,
-+	0x9A8, 0x00000000,
-+	0x9AC, 0x00000000,
-+	0x9B0, 0x81081008,
-+	0x9B4, 0x00000000,
-+	0x9B8, 0x01081008,
-+	0x9BC, 0x01081008,
-+	0x9D0, 0x00000000,
-+	0x9D4, 0x00000000,
-+	0x9D8, 0x00000000,
-+	0x9DC, 0x00000000,
-+	0x9E4, 0x00000003,
-+	0x9E8, 0x000002D5,
-+	0xA00, 0x00D047C8,
-+	0xA04, 0x01FF000C,
-+	0xA08, 0x8C838300,
-+	0xA0C, 0x2E7F000F,
-+	0xA10, 0x9500BB78,
-+	0xA14, 0x11144028,
-+	0xA18, 0x00881117,
-+	0xA1C, 0x89140F00,
-+	0xA20, 0x1A1B0000,
-+	0xA24, 0x090E1217,
-+	0xA28, 0x00000305,
-+	0xA2C, 0x00900000,
-+	0xA70, 0x101FFF00,
-+	0xA74, 0x00000008,
-+	0xA78, 0x00000900,
-+	0xA7C, 0x225B0606,
-+	0xA80, 0x218075B2,
-+	0xA84, 0x001F8C80,
-+	0xB00, 0x03100000,
-+	0xB04, 0x0000B000,
-+	0xB08, 0xAE0201EB,
-+	0xB0C, 0x01003207,
-+	0xB10, 0x00009807,
-+	0xB14, 0x01000000,
-+	0xB18, 0x00000002,
-+	0xB1C, 0x00000002,
-+	0xB20, 0x0000001F,
-+	0xB24, 0x03020100,
-+	0xB28, 0x07060504,
-+	0xB2C, 0x0B0A0908,
-+	0xB30, 0x0F0E0D0C,
-+	0xB34, 0x13121110,
-+	0xB38, 0x17161514,
-+	0xB3C, 0x0000003A,
-+	0xB40, 0x00000000,
-+	0xB44, 0x00000000,
-+	0xB48, 0x13000032,
-+	0xB4C, 0x48080000,
-+	0xB50, 0x00000000,
-+	0xB54, 0x00000000,
-+	0xB58, 0x00000000,
-+	0xB5C, 0x00000000,
-+	0xC00, 0x00000007,
-+	0xC04, 0x00042020,
-+	0xC08, 0x80410231,
-+	0xC0C, 0x00000000,
-+	0xC10, 0x00000100,
-+	0xC14, 0x01000000,
-+	0xC1C, 0x40000003,
-+	0xC20, 0x12121212,
-+	0xC24, 0x12121212,
-+	0xC28, 0x12121212,
-+	0xC2C, 0x12121212,
-+	0xC30, 0x12121212,
-+	0xC34, 0x12121212,
-+	0xC38, 0x12121212,
-+	0xC3C, 0x12121212,
-+	0xC40, 0x12121212,
-+	0xC44, 0x12121212,
-+	0xC48, 0x12121212,
-+	0xC4C, 0x12121212,
-+	0xC50, 0x00000020,
-+	0xC54, 0x0008121C,
-+	0xC58, 0x30000C1C,
-+	0xC5C, 0x00000058,
-+	0xC60, 0x34344443,
-+	0xC64, 0x07003333,
-+	0x80000008,	0x00000000,	0x40000000,	0x00000000,
-+	0xC68, 0x59791979,
-+	0x90000008,	0x05000000,	0x40000000,	0x00000000,
-+	0xC68, 0x59791979,
-+	0x90000002,	0x00000000,	0x40000000,	0x00000000,
-+	0xC68, 0x59791979,
-+	0x90000004,	0x00000000,	0x40000000,	0x00000000,
-+	0xC68, 0x59791979,
-+	0x90000001,	0x00000000,	0x40000000,	0x00000000,
-+	0xC68, 0x59791979,
-+	0x90000001,	0x00000005,	0x40000000,	0x00000000,
-+	0xC68, 0x59791979,
-+	0xA0000000,	0x00000000,
-+	0xC68, 0x59799979,
-+	0xB0000000,	0x00000000,
-+	0xC6C, 0x59795979,
-+	0xC70, 0x19795979,
-+	0xC74, 0x19795979,
-+	0xC78, 0x19791979,
-+	0xC7C, 0x19791979,
-+	0xC80, 0x19791979,
-+	0xC84, 0x19791979,
-+	0xC94, 0x0100005C,
-+	0xC98, 0x00000000,
-+	0xC9C, 0x00000000,
-+	0xCA0, 0x00000029,
-+	0xCA4, 0x08040201,
-+	0xCA8, 0x80402010,
-+	0xCB0, 0x77547777,
-+	0xCB4, 0x00000077,
-+	0xCB8, 0x00508242,
-+	0xE00, 0x00000007,
-+	0xE04, 0x00042020,
-+	0xE08, 0x80410231,
-+	0xE0C, 0x00000000,
-+	0xE10, 0x00000100,
-+	0xE14, 0x01000000,
-+	0xE1C, 0x40000003,
-+	0xE20, 0x12121212,
-+	0xE24, 0x12121212,
-+	0xE28, 0x12121212,
-+	0xE2C, 0x12121212,
-+	0xE30, 0x12121212,
-+	0xE34, 0x12121212,
-+	0xE38, 0x12121212,
-+	0xE3C, 0x12121212,
-+	0xE40, 0x12121212,
-+	0xE44, 0x12121212,
-+	0xE48, 0x12121212,
-+	0xE4C, 0x12121212,
-+	0xE50, 0x00000020,
-+	0xE54, 0x0008121C,
-+	0xE58, 0x30000C1C,
-+	0xE5C, 0x00000058,
-+	0xE60, 0x34344443,
-+	0xE64, 0x07003333,
-+	0xE68, 0x59791979,
-+	0xE6C, 0x59795979,
-+	0xE70, 0x19795979,
-+	0xE74, 0x19795979,
-+	0xE78, 0x19791979,
-+	0xE7C, 0x19791979,
-+	0xE80, 0x19791979,
-+	0xE84, 0x19791979,
-+	0xE94, 0x0100005C,
-+	0xE98, 0x00000000,
-+	0xE9C, 0x00000000,
-+	0xEA0, 0x00000029,
-+	0xEA4, 0x08040201,
-+	0xEA8, 0x80402010,
-+	0xEB0, 0x77547777,
-+	0xEB4, 0x00000077,
-+	0xEB8, 0x00508242,
-+};
-+
-+RTW_DECL_TABLE_PHY_COND(rtw8812a_bb, rtw_phy_cfg_bb);
-+
-+static const struct rtw_phy_pg_cfg_pair rtw8812a_bb_pg[] = {
-+	{ 0, 0, 0, 0x00000c20, 0xffffffff, 0x34363840, },
-+	{ 0, 0, 0, 0x00000c24, 0xffffffff, 0x42424444, },
-+	{ 0, 0, 0, 0x00000c28, 0xffffffff, 0x30323638, },
-+	{ 0, 0, 0, 0x00000c2c, 0xffffffff, 0x40424444, },
-+	{ 0, 0, 0, 0x00000c30, 0xffffffff, 0x28303236, },
-+	{ 0, 0, 1, 0x00000c34, 0xffffffff, 0x38404242, },
-+	{ 0, 0, 1, 0x00000c38, 0xffffffff, 0x26283034, },
-+	{ 0, 0, 0, 0x00000c3c, 0xffffffff, 0x40424444, },
-+	{ 0, 0, 0, 0x00000c40, 0xffffffff, 0x28303236, },
-+	{ 0, 0, 0, 0x00000c44, 0xffffffff, 0x42422426, },
-+	{ 0, 0, 1, 0x00000c48, 0xffffffff, 0x30343840, },
-+	{ 0, 0, 1, 0x00000c4c, 0xffffffff, 0x22242628, },
-+	{ 0, 1, 0, 0x00000e20, 0xffffffff, 0x34363840, },
-+	{ 0, 1, 0, 0x00000e24, 0xffffffff, 0x42424444, },
-+	{ 0, 1, 0, 0x00000e28, 0xffffffff, 0x30323638, },
-+	{ 0, 1, 0, 0x00000e2c, 0xffffffff, 0x40424444, },
-+	{ 0, 1, 0, 0x00000e30, 0xffffffff, 0x28303236, },
-+	{ 0, 1, 1, 0x00000e34, 0xffffffff, 0x38404242, },
-+	{ 0, 1, 1, 0x00000e38, 0xffffffff, 0x26283034, },
-+	{ 0, 1, 0, 0x00000e3c, 0xffffffff, 0x40424444, },
-+	{ 0, 1, 0, 0x00000e40, 0xffffffff, 0x28303236, },
-+	{ 0, 1, 0, 0x00000e44, 0xffffffff, 0x42422426, },
-+	{ 0, 1, 1, 0x00000e48, 0xffffffff, 0x30343840, },
-+	{ 0, 1, 1, 0x00000e4c, 0xffffffff, 0x22242628, },
-+	{ 1, 0, 0, 0x00000c24, 0xffffffff, 0x42424444, },
-+	{ 1, 0, 0, 0x00000c28, 0xffffffff, 0x30323640, },
-+	{ 1, 0, 0, 0x00000c2c, 0xffffffff, 0x40424444, },
-+	{ 1, 0, 0, 0x00000c30, 0xffffffff, 0x28303236, },
-+	{ 1, 0, 1, 0x00000c34, 0xffffffff, 0x38404242, },
-+	{ 1, 0, 1, 0x00000c38, 0xffffffff, 0x26283034, },
-+	{ 1, 0, 0, 0x00000c3c, 0xffffffff, 0x40424444, },
-+	{ 1, 0, 0, 0x00000c40, 0xffffffff, 0x28303236, },
-+	{ 1, 0, 0, 0x00000c44, 0xffffffff, 0x42422426, },
-+	{ 1, 0, 1, 0x00000c48, 0xffffffff, 0x30343840, },
-+	{ 1, 0, 1, 0x00000c4c, 0xffffffff, 0x22242628, },
-+	{ 1, 1, 0, 0x00000e24, 0xffffffff, 0x42424444, },
-+	{ 1, 1, 0, 0x00000e28, 0xffffffff, 0x30323640, },
-+	{ 1, 1, 0, 0x00000e2c, 0xffffffff, 0x40424444, },
-+	{ 1, 1, 0, 0x00000e30, 0xffffffff, 0x28303236, },
-+	{ 1, 1, 1, 0x00000e34, 0xffffffff, 0x38404242, },
-+	{ 1, 1, 1, 0x00000e38, 0xffffffff, 0x26283034, },
-+	{ 1, 1, 0, 0x00000e3c, 0xffffffff, 0x40424444, },
-+	{ 1, 1, 0, 0x00000e40, 0xffffffff, 0x28303236, },
-+	{ 1, 1, 0, 0x00000e44, 0xffffffff, 0x42422426, },
-+	{ 1, 1, 1, 0x00000e48, 0xffffffff, 0x30343840, },
-+	{ 1, 1, 1, 0x00000e4c, 0xffffffff, 0x22242628, },
-+};
-+
-+RTW_DECL_TABLE_BB_PG(rtw8812a_bb_pg);
-+
-+static const struct rtw_phy_pg_cfg_pair rtw8812a_bb_pg_rfe3[] = {
-+	{ 0, 0, 0, 0x00000c20, 0xffffffff, 0x34343434, },
-+	{ 0, 0, 0, 0x00000c24, 0xffffffff, 0x32323232, },
-+	{ 0, 0, 0, 0x00000c28, 0xffffffff, 0x28303232, },
-+	{ 0, 0, 0, 0x00000c2c, 0xffffffff, 0x32323232, },
-+	{ 0, 0, 0, 0x00000c30, 0xffffffff, 0x28303232, },
-+	{ 0, 0, 1, 0x00000c34, 0xffffffff, 0x32323232, },
-+	{ 0, 0, 1, 0x00000c38, 0xffffffff, 0x26283032, },
-+	{ 0, 0, 0, 0x00000c3c, 0xffffffff, 0x32323232, },
-+	{ 0, 0, 0, 0x00000c40, 0xffffffff, 0x28303232, },
-+	{ 0, 0, 0, 0x00000c44, 0xffffffff, 0x32322426, },
-+	{ 0, 0, 1, 0x00000c48, 0xffffffff, 0x32323232, },
-+	{ 0, 0, 1, 0x00000c4c, 0xffffffff, 0x24262830, },
-+	{ 0, 1, 0, 0x00000e20, 0xffffffff, 0x34343434, },
-+	{ 0, 1, 0, 0x00000e24, 0xffffffff, 0x32323232, },
-+	{ 0, 1, 0, 0x00000e28, 0xffffffff, 0x28303232, },
-+	{ 0, 1, 0, 0x00000e2c, 0xffffffff, 0x32323232, },
-+	{ 0, 1, 0, 0x00000e30, 0xffffffff, 0x28303232, },
-+	{ 0, 1, 1, 0x00000e34, 0xffffffff, 0x32323232, },
-+	{ 0, 1, 1, 0x00000e38, 0xffffffff, 0x26283032, },
-+	{ 0, 1, 0, 0x00000e3c, 0xffffffff, 0x32323232, },
-+	{ 0, 1, 0, 0x00000e40, 0xffffffff, 0x28303232, },
-+	{ 0, 1, 0, 0x00000e44, 0xffffffff, 0x32322426, },
-+	{ 0, 1, 1, 0x00000e48, 0xffffffff, 0x32323232, },
-+	{ 0, 1, 1, 0x00000e4c, 0xffffffff, 0x24262830, },
-+	{ 1, 0, 0, 0x00000c24, 0xffffffff, 0x32323232, },
-+	{ 1, 0, 0, 0x00000c28, 0xffffffff, 0x28303232, },
-+	{ 1, 0, 0, 0x00000c2c, 0xffffffff, 0x32323232, },
-+	{ 1, 0, 0, 0x00000c30, 0xffffffff, 0x24262830, },
-+	{ 1, 0, 1, 0x00000c34, 0xffffffff, 0x32323232, },
-+	{ 1, 0, 1, 0x00000c38, 0xffffffff, 0x24262830, },
-+	{ 1, 0, 0, 0x00000c3c, 0xffffffff, 0x32323232, },
-+	{ 1, 0, 0, 0x00000c40, 0xffffffff, 0x24262830, },
-+	{ 1, 0, 0, 0x00000c44, 0xffffffff, 0x32322222, },
-+	{ 1, 0, 1, 0x00000c48, 0xffffffff, 0x28303232, },
-+	{ 1, 0, 1, 0x00000c4c, 0xffffffff, 0x22222426, },
-+	{ 1, 1, 0, 0x00000e24, 0xffffffff, 0x32323232, },
-+	{ 1, 1, 0, 0x00000e28, 0xffffffff, 0x28303232, },
-+	{ 1, 1, 0, 0x00000e2c, 0xffffffff, 0x32323232, },
-+	{ 1, 1, 0, 0x00000e30, 0xffffffff, 0x24262830, },
-+	{ 1, 1, 1, 0x00000e34, 0xffffffff, 0x32323232, },
-+	{ 1, 1, 1, 0x00000e38, 0xffffffff, 0x24262830, },
-+	{ 1, 1, 0, 0x00000e3c, 0xffffffff, 0x32323232, },
-+	{ 1, 1, 0, 0x00000e40, 0xffffffff, 0x24262830, },
-+	{ 1, 1, 0, 0x00000e44, 0xffffffff, 0x32322222, },
-+	{ 1, 1, 1, 0x00000e48, 0xffffffff, 0x28303232, },
-+	{ 1, 1, 1, 0x00000e4c, 0xffffffff, 0x22222426, },
-+};
-+
-+RTW_DECL_TABLE_BB_PG(rtw8812a_bb_pg_rfe3);
-+
-+static const u32 rtw8812a_rf_a[] = {
-+	0x000, 0x00010000,
-+	0x018, 0x0001712A,
-+	0x056, 0x00051CF2,
-+	0x066, 0x00040000,
-+	0x01E, 0x00080000,
-+	0x089, 0x00000080,
-+	0x80000001,	0x00000000,	0x40000000,	0x00000000,
-+	0x086, 0x00014B3A,
-+	0x90000001,	0x00000005,	0x40000000,	0x00000000,
-+	0x086, 0x00014B3A,
-+	0xA0000000,	0x00000000,
-+	0x086, 0x00014B38,
-+	0xB0000000,	0x00000000,
-+	0x80000004,	0x00000000,	0x40000000,	0x00000000,
-+	0x08B, 0x00080180,
-+	0xA0000000,	0x00000000,
-+	0x08B, 0x00087180,
-+	0xB0000000,	0x00000000,
-+	0x0B1, 0x0001FC1A,
-+	0x0B3, 0x000F0810,
-+	0x0B4, 0x0001A78D,
-+	0x0BA, 0x00086180,
-+	0x018, 0x00000006,
-+	0x0EF, 0x00002000,
-+	0x80000001,	0x00000000,	0x40000000,	0x00000000,
-+	0x03B, 0x0003F218,
-+	0x03B, 0x00030A58,
-+	0x03B, 0x0002FA58,
-+	0x03B, 0x00022590,
-+	0x03B, 0x0001FA50,
-+	0x03B, 0x00010248,
-+	0x03B, 0x00008240,
-+	0x90000001,	0x00000005,	0x40000000,	0x00000000,
-+	0x03B, 0x0003F218,
-+	0x03B, 0x00030A58,
-+	0x03B, 0x0002FA58,
-+	0x03B, 0x00022590,
-+	0x03B, 0x0001FA50,
-+	0x03B, 0x00010248,
-+	0x03B, 0x00008240,
-+	0xA0000000,	0x00000000,
-+	0x03B, 0x00038A58,
-+	0x03B, 0x00037A58,
-+	0x03B, 0x0002A590,
-+	0x03B, 0x00027A50,
-+	0x03B, 0x00018248,
-+	0x03B, 0x00010240,
-+	0x03B, 0x00008240,
-+	0xB0000000,	0x00000000,
-+	0x0EF, 0x00000100,
-+	0x80000002,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0000A4EE,
-+	0x034, 0x00009076,
-+	0x034, 0x00008073,
-+	0x034, 0x00007070,
-+	0x034, 0x0000606D,
-+	0x034, 0x0000506A,
-+	0x034, 0x00004049,
-+	0x034, 0x00003046,
-+	0x034, 0x00002028,
-+	0x034, 0x00001025,
-+	0x034, 0x00000022,
-+	0xA0000000,	0x00000000,
-+	0x034, 0x0000ADF4,
-+	0x034, 0x00009DF1,
-+	0x034, 0x00008DEE,
-+	0x034, 0x00007DEB,
-+	0x034, 0x00006DE8,
-+	0x034, 0x00005DE5,
-+	0x034, 0x00004DE2,
-+	0x034, 0x00003CE6,
-+	0x034, 0x000024E7,
-+	0x034, 0x000014E4,
-+	0x034, 0x000004E1,
-+	0xB0000000,	0x00000000,
-+	0x0EF, 0x00000000,
-+	0x0EF, 0x000020A2,
-+	0x0DF, 0x00000080,
-+	0x035, 0x00000192,
-+	0x035, 0x00008192,
-+	0x035, 0x00010192,
-+	0x036, 0x00000024,
-+	0x036, 0x00008024,
-+	0x036, 0x00010024,
-+	0x036, 0x00018024,
-+	0x0EF, 0x00000000,
-+	0x051, 0x00000C21,
-+	0x052, 0x000006D9,
-+	0x053, 0x000FC649,
-+	0x054, 0x0000017E,
-+	0x0EF, 0x00000002,
-+	0x008, 0x00008400,
-+	0x018, 0x0001712A,
-+	0x0EF, 0x00001000,
-+	0x03A, 0x00000080,
-+	0x03B, 0x0003A02C,
-+	0x03C, 0x00004000,
-+	0x03A, 0x00000400,
-+	0x03B, 0x0003202C,
-+	0x03C, 0x00010000,
-+	0x03A, 0x000000A0,
-+	0x03B, 0x0002B064,
-+	0x03C, 0x00004000,
-+	0x03A, 0x000000D8,
-+	0x03B, 0x00023070,
-+	0x03C, 0x00004000,
-+	0x03A, 0x00000468,
-+	0x03B, 0x0001B870,
-+	0x03C, 0x00010000,
-+	0x03A, 0x00000098,
-+	0x03B, 0x00012085,
-+	0x03C, 0x000E4000,
-+	0x03A, 0x00000418,
-+	0x03B, 0x0000A080,
-+	0x03C, 0x000F0000,
-+	0x03A, 0x00000418,
-+	0x03B, 0x00002080,
-+	0x03C, 0x00010000,
-+	0x03A, 0x00000080,
-+	0x03B, 0x0007A02C,
-+	0x03C, 0x00004000,
-+	0x03A, 0x00000400,
-+	0x03B, 0x0007202C,
-+	0x03C, 0x00010000,
-+	0x03A, 0x000000A0,
-+	0x03B, 0x0006B064,
-+	0x03C, 0x00004000,
-+	0x03A, 0x000000D8,
-+	0x03B, 0x00063070,
-+	0x03C, 0x00004000,
-+	0x03A, 0x00000468,
-+	0x03B, 0x0005B870,
-+	0x03C, 0x00010000,
-+	0x03A, 0x00000098,
-+	0x03B, 0x00052085,
-+	0x03C, 0x000E4000,
-+	0x03A, 0x00000418,
-+	0x03B, 0x0004A080,
-+	0x03C, 0x000F0000,
-+	0x03A, 0x00000418,
-+	0x03B, 0x00042080,
-+	0x03C, 0x00010000,
-+	0x03A, 0x00000080,
-+	0x03B, 0x000BA02C,
-+	0x03C, 0x00004000,
-+	0x03A, 0x00000400,
-+	0x03B, 0x000B202C,
-+	0x03C, 0x00010000,
-+	0x03A, 0x000000A0,
-+	0x03B, 0x000AB064,
-+	0x03C, 0x00004000,
-+	0x03A, 0x000000D8,
-+	0x03B, 0x000A3070,
-+	0x03C, 0x00004000,
-+	0x03A, 0x00000468,
-+	0x03B, 0x0009B870,
-+	0x03C, 0x00010000,
-+	0x03A, 0x00000098,
-+	0x03B, 0x00092085,
-+	0x03C, 0x000E4000,
-+	0x03A, 0x00000418,
-+	0x03B, 0x0008A080,
-+	0x03C, 0x000F0000,
-+	0x03A, 0x00000418,
-+	0x03B, 0x00082080,
-+	0x03C, 0x00010000,
-+	0x0EF, 0x00001100,
-+	0x80000008,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0004A0B2,
-+	0x034, 0x000490AF,
-+	0x034, 0x00048070,
-+	0x034, 0x0004706D,
-+	0x034, 0x00046050,
-+	0x034, 0x0004504D,
-+	0x034, 0x0004404A,
-+	0x034, 0x00043047,
-+	0x034, 0x0004200A,
-+	0x034, 0x00041007,
-+	0x034, 0x00040004,
-+	0x90000008,	0x05000000,	0x40000000,	0x00000000,
-+	0x034, 0x0004A0B2,
-+	0x034, 0x000490AF,
-+	0x034, 0x00048070,
-+	0x034, 0x0004706D,
-+	0x034, 0x0004604D,
-+	0x034, 0x0004504A,
-+	0x034, 0x00044047,
-+	0x034, 0x00043044,
-+	0x034, 0x00042007,
-+	0x034, 0x00041004,
-+	0x034, 0x00040001,
-+	0xA0000000,	0x00000000,
-+	0x034, 0x0004ADF5,
-+	0x034, 0x00049DF2,
-+	0x034, 0x00048DEF,
-+	0x034, 0x00047DEC,
-+	0x034, 0x00046DE9,
-+	0x034, 0x00045DE6,
-+	0x034, 0x00044DE3,
-+	0x034, 0x000438C8,
-+	0x034, 0x000428C5,
-+	0x034, 0x000418C2,
-+	0x034, 0x000408C0,
-+	0xB0000000,	0x00000000,
-+	0x80000008,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0002A0B2,
-+	0x034, 0x000290AF,
-+	0x034, 0x00028070,
-+	0x034, 0x0002706D,
-+	0x034, 0x00026050,
-+	0x034, 0x0002504D,
-+	0x034, 0x0002404A,
-+	0x034, 0x00023047,
-+	0x034, 0x0002200A,
-+	0x034, 0x00021007,
-+	0x034, 0x00020004,
-+	0x90000008,	0x05000000,	0x40000000,	0x00000000,
-+	0x034, 0x0002A0B4,
-+	0x034, 0x000290B1,
-+	0x034, 0x00028072,
-+	0x034, 0x0002706F,
-+	0x034, 0x0002604F,
-+	0x034, 0x0002504C,
-+	0x034, 0x00024049,
-+	0x034, 0x00023046,
-+	0x034, 0x00022009,
-+	0x034, 0x00021006,
-+	0x034, 0x00020003,
-+	0xA0000000,	0x00000000,
-+	0x034, 0x0002ADF5,
-+	0x034, 0x00029DF2,
-+	0x034, 0x00028DEF,
-+	0x034, 0x00027DEC,
-+	0x034, 0x00026DE9,
-+	0x034, 0x00025DE6,
-+	0x034, 0x00024DE3,
-+	0x034, 0x000238C8,
-+	0x034, 0x000228C5,
-+	0x034, 0x000218C2,
-+	0x034, 0x000208C0,
-+	0xB0000000,	0x00000000,
-+	0x80000008,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0000A0B2,
-+	0x034, 0x000090AF,
-+	0x034, 0x00008070,
-+	0x034, 0x0000706D,
-+	0x034, 0x00006050,
-+	0x034, 0x0000504D,
-+	0x034, 0x0000404A,
-+	0x034, 0x00003047,
-+	0x034, 0x0000200A,
-+	0x034, 0x00001007,
-+	0x034, 0x00000004,
-+	0x90000008,	0x05000000,	0x40000000,	0x00000000,
-+	0x034, 0x0000A0B2,
-+	0x034, 0x000090AF,
-+	0x034, 0x00008070,
-+	0x034, 0x0000706D,
-+	0x034, 0x0000604D,
-+	0x034, 0x0000504A,
-+	0x034, 0x00004047,
-+	0x034, 0x00003044,
-+	0x034, 0x00002007,
-+	0x034, 0x00001004,
-+	0x034, 0x00000001,
-+	0xA0000000,	0x00000000,
-+	0x034, 0x0000AFF7,
-+	0x034, 0x00009DF7,
-+	0x034, 0x00008DF4,
-+	0x034, 0x00007DF1,
-+	0x034, 0x00006DEE,
-+	0x034, 0x00005DEB,
-+	0x034, 0x00004DE8,
-+	0x034, 0x000038CC,
-+	0x034, 0x000028C9,
-+	0x034, 0x000018C6,
-+	0x034, 0x000008C3,
-+	0xB0000000,	0x00000000,
-+	0x0EF, 0x00000000,
-+	0x80000008,	0x00000000,	0x40000000,	0x00000000,
-+	0x018, 0x0001712A,
-+	0x0EF, 0x00000040,
-+	0x035, 0x000001D4,
-+	0x035, 0x000081D4,
-+	0x035, 0x000101D4,
-+	0x035, 0x000201B4,
-+	0x035, 0x000281B4,
-+	0x035, 0x000301B4,
-+	0x035, 0x000401B4,
-+	0x035, 0x000481B4,
-+	0x035, 0x000501B4,
-+	0x90000008,	0x05000000,	0x40000000,	0x00000000,
-+	0x018, 0x0001712A,
-+	0x0EF, 0x00000040,
-+	0x035, 0x000001D4,
-+	0x035, 0x000081D4,
-+	0x035, 0x000101D4,
-+	0x035, 0x000201B4,
-+	0x035, 0x000281B4,
-+	0x035, 0x000301B4,
-+	0x035, 0x000401B4,
-+	0x035, 0x000481B4,
-+	0x035, 0x000501B4,
-+	0xA0000000,	0x00000000,
-+	0x018, 0x0001712A,
-+	0x0EF, 0x00000040,
-+	0x035, 0x00000188,
-+	0x035, 0x00008147,
-+	0x035, 0x00010147,
-+	0x035, 0x000201D7,
-+	0x035, 0x000281D7,
-+	0x035, 0x000301D7,
-+	0x035, 0x000401D8,
-+	0x035, 0x000481D8,
-+	0x035, 0x000501D8,
-+	0xB0000000,	0x00000000,
-+	0x0EF, 0x00000000,
-+	0x80000008,	0x00000000,	0x40000000,	0x00000000,
-+	0x018, 0x0001712A,
-+	0x0EF, 0x00000010,
-+	0x036, 0x00004BFB,
-+	0x036, 0x0000CBFB,
-+	0x036, 0x00014BFB,
-+	0x036, 0x0001CBFB,
-+	0x036, 0x00024F4B,
-+	0x036, 0x0002CF4B,
-+	0x036, 0x00034F4B,
-+	0x036, 0x0003CF4B,
-+	0x036, 0x00044F4B,
-+	0x036, 0x0004CF4B,
-+	0x036, 0x00054F4B,
-+	0x036, 0x0005CF4B,
-+	0x90000008,	0x05000000,	0x40000000,	0x00000000,
-+	0x018, 0x0001712A,
-+	0x0EF, 0x00000010,
-+	0x036, 0x00004BFB,
-+	0x036, 0x0000CBFB,
-+	0x036, 0x00014BFB,
-+	0x036, 0x0001CBFB,
-+	0x036, 0x00024F4B,
-+	0x036, 0x0002CF4B,
-+	0x036, 0x00034F4B,
-+	0x036, 0x0003CF4B,
-+	0x036, 0x00044F4B,
-+	0x036, 0x0004CF4B,
-+	0x036, 0x00054F4B,
-+	0x036, 0x0005CF4B,
-+	0xA0000000,	0x00000000,
-+	0x018, 0x0001712A,
-+	0x0EF, 0x00000010,
-+	0x036, 0x00084EB4,
-+	0x036, 0x0008CC35,
-+	0x036, 0x00094C35,
-+	0x036, 0x0009CC35,
-+	0x036, 0x000A4C35,
-+	0x036, 0x000ACC35,
-+	0x036, 0x000B4C35,
-+	0x036, 0x000BCC35,
-+	0x036, 0x000C4C34,
-+	0x036, 0x000CCC35,
-+	0x036, 0x000D4C35,
-+	0x036, 0x000DCC35,
-+	0xB0000000,	0x00000000,
-+	0x0EF, 0x00000000,
-+	0x0EF, 0x00000008,
-+	0x80000008,	0x00000000,	0x40000000,	0x00000000,
-+	0x03C, 0x000002CC,
-+	0x03C, 0x00000522,
-+	0x03C, 0x00000902,
-+	0x90000008,	0x05000000,	0x40000000,	0x00000000,
-+	0x03C, 0x000002CC,
-+	0x03C, 0x00000522,
-+	0x03C, 0x00000902,
-+	0xA0000000,	0x00000000,
-+	0x03C, 0x000002A8,
-+	0x03C, 0x000005A2,
-+	0x03C, 0x00000880,
-+	0xB0000000,	0x00000000,
-+	0x0EF, 0x00000000,
-+	0x018, 0x0001712A,
-+	0x0EF, 0x00000002,
-+	0x0DF, 0x00000080,
-+	0x01F, 0x00000064,
-+	0x80000008,	0x00000000,	0x40000000,	0x00000000,
-+	0x061, 0x000FDD43,
-+	0x062, 0x00038F4B,
-+	0x063, 0x00032117,
-+	0x064, 0x000194AC,
-+	0x065, 0x000931D1,
-+	0x90000008,	0x05000000,	0x40000000,	0x00000000,
-+	0x061, 0x000FDD43,
-+	0x062, 0x00038F4B,
-+	0x063, 0x00032117,
-+	0x064, 0x000194AC,
-+	0x065, 0x000931D2,
-+	0xA0000000,	0x00000000,
-+	0x061, 0x000E5D53,
-+	0x062, 0x00038FCD,
-+	0x063, 0x000114EB,
-+	0x064, 0x000196AC,
-+	0x065, 0x000911D7,
-+	0xB0000000,	0x00000000,
-+	0x008, 0x00008400,
-+	0x01C, 0x000739D2,
-+	0x0B4, 0x0001E78D,
-+	0x018, 0x0001F12A,
-+	0xFFE, 0x00000000,
-+	0xFFE, 0x00000000,
-+	0xFFE, 0x00000000,
-+	0xFFE, 0x00000000,
-+	0x0B4, 0x0001A78D,
-+	0x018, 0x0001712A,
-+};
-+
-+RTW_DECL_TABLE_RF_RADIO(rtw8812a_rf_a, A);
-+
-+static const u32 rtw8812a_rf_b[] = {
-+	0x056, 0x00051CF2,
-+	0x066, 0x00040000,
-+	0x089, 0x00000080,
-+	0x80000001,	0x00000000,	0x40000000,	0x00000000,
-+	0x086, 0x00014B3A,
-+	0x90000001,	0x00000005,	0x40000000,	0x00000000,
-+	0x086, 0x00014B3A,
-+	0xA0000000,	0x00000000,
-+	0x086, 0x00014B38,
-+	0xB0000000,	0x00000000,
-+	0x80000004,	0x00000000,	0x40000000,	0x00000000,
-+	0x08B, 0x00080180,
-+	0xA0000000,	0x00000000,
-+	0x08B, 0x00087180,
-+	0xB0000000,	0x00000000,
-+	0x018, 0x00000006,
-+	0x0EF, 0x00002000,
-+	0x80000001,	0x00000000,	0x40000000,	0x00000000,
-+	0x03B, 0x0003F218,
-+	0x03B, 0x00030A58,
-+	0x03B, 0x0002FA58,
-+	0x03B, 0x00022590,
-+	0x03B, 0x0001FA50,
-+	0x03B, 0x00010248,
-+	0x03B, 0x00008240,
-+	0x90000001,	0x00000005,	0x40000000,	0x00000000,
-+	0x03B, 0x0003F218,
-+	0x03B, 0x00030A58,
-+	0x03B, 0x0002FA58,
-+	0x03B, 0x00022590,
-+	0x03B, 0x0001FA50,
-+	0x03B, 0x00010248,
-+	0x03B, 0x00008240,
-+	0xA0000000,	0x00000000,
-+	0x03B, 0x00038A58,
-+	0x03B, 0x00037A58,
-+	0x03B, 0x0002A590,
-+	0x03B, 0x00027A50,
-+	0x03B, 0x00018248,
-+	0x03B, 0x00010240,
-+	0x03B, 0x00008240,
-+	0xB0000000,	0x00000000,
-+	0x0EF, 0x00000100,
-+	0x80000002,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0000A4EE,
-+	0x034, 0x00009076,
-+	0x034, 0x00008073,
-+	0x034, 0x00007070,
-+	0x034, 0x0000606D,
-+	0x034, 0x0000506A,
-+	0x034, 0x00004049,
-+	0x034, 0x00003046,
-+	0x034, 0x00002028,
-+	0x034, 0x00001025,
-+	0x034, 0x00000022,
-+	0xA0000000,	0x00000000,
-+	0x034, 0x0000ADF4,
-+	0x034, 0x00009DF1,
-+	0x034, 0x00008DEE,
-+	0x034, 0x00007DEB,
-+	0x034, 0x00006DE8,
-+	0x034, 0x00005DE5,
-+	0x034, 0x00004DE2,
-+	0x034, 0x00003CE6,
-+	0x034, 0x000024E7,
-+	0x034, 0x000014E4,
-+	0x034, 0x000004E1,
-+	0xB0000000,	0x00000000,
-+	0x0EF, 0x00000000,
-+	0x0EF, 0x000020A2,
-+	0x0DF, 0x00000080,
-+	0x035, 0x00000192,
-+	0x035, 0x00008192,
-+	0x035, 0x00010192,
-+	0x036, 0x00000024,
-+	0x036, 0x00008024,
-+	0x036, 0x00010024,
-+	0x036, 0x00018024,
-+	0x0EF, 0x00000000,
-+	0x051, 0x00000C21,
-+	0x052, 0x000006D9,
-+	0x053, 0x000FC649,
-+	0x054, 0x0000017E,
-+	0x0EF, 0x00000002,
-+	0x008, 0x00008400,
-+	0x018, 0x0001712A,
-+	0x0EF, 0x00001000,
-+	0x03A, 0x00000080,
-+	0x03B, 0x0003A02C,
-+	0x03C, 0x00004000,
-+	0x03A, 0x00000400,
-+	0x03B, 0x0003202C,
-+	0x03C, 0x00010000,
-+	0x03A, 0x000000A0,
-+	0x03B, 0x0002B064,
-+	0x03C, 0x00004000,
-+	0x03A, 0x000000D8,
-+	0x03B, 0x00023070,
-+	0x03C, 0x00004000,
-+	0x03A, 0x00000468,
-+	0x03B, 0x0001B870,
-+	0x03C, 0x00010000,
-+	0x03A, 0x00000098,
-+	0x03B, 0x00012085,
-+	0x03C, 0x000E4000,
-+	0x03A, 0x00000418,
-+	0x03B, 0x0000A080,
-+	0x03C, 0x000F0000,
-+	0x03A, 0x00000418,
-+	0x03B, 0x00002080,
-+	0x03C, 0x00010000,
-+	0x03A, 0x00000080,
-+	0x03B, 0x0007A02C,
-+	0x03C, 0x00004000,
-+	0x03A, 0x00000400,
-+	0x03B, 0x0007202C,
-+	0x03C, 0x00010000,
-+	0x03A, 0x000000A0,
-+	0x03B, 0x0006B064,
-+	0x03C, 0x00004000,
-+	0x03A, 0x000000D8,
-+	0x03B, 0x00063070,
-+	0x03C, 0x00004000,
-+	0x03A, 0x00000468,
-+	0x03B, 0x0005B870,
-+	0x03C, 0x00010000,
-+	0x03A, 0x00000098,
-+	0x03B, 0x00052085,
-+	0x03C, 0x000E4000,
-+	0x03A, 0x00000418,
-+	0x03B, 0x0004A080,
-+	0x03C, 0x000F0000,
-+	0x03A, 0x00000418,
-+	0x03B, 0x00042080,
-+	0x03C, 0x00010000,
-+	0x03A, 0x00000080,
-+	0x03B, 0x000BA02C,
-+	0x03C, 0x00004000,
-+	0x03A, 0x00000400,
-+	0x03B, 0x000B202C,
-+	0x03C, 0x00010000,
-+	0x03A, 0x000000A0,
-+	0x03B, 0x000AB064,
-+	0x03C, 0x00004000,
-+	0x03A, 0x000000D8,
-+	0x03B, 0x000A3070,
-+	0x03C, 0x00004000,
-+	0x03A, 0x00000468,
-+	0x03B, 0x0009B870,
-+	0x03C, 0x00010000,
-+	0x03A, 0x00000098,
-+	0x03B, 0x00092085,
-+	0x03C, 0x000E4000,
-+	0x03A, 0x00000418,
-+	0x03B, 0x0008A080,
-+	0x03C, 0x000F0000,
-+	0x03A, 0x00000418,
-+	0x03B, 0x00082080,
-+	0x03C, 0x00010000,
-+	0x0EF, 0x00001100,
-+	0x80000008,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0004A0B2,
-+	0x034, 0x000490AF,
-+	0x034, 0x00048070,
-+	0x034, 0x0004706D,
-+	0x034, 0x00046050,
-+	0x034, 0x0004504D,
-+	0x034, 0x0004404A,
-+	0x034, 0x00043047,
-+	0x034, 0x0004200A,
-+	0x034, 0x00041007,
-+	0x034, 0x00040004,
-+	0x90000008,	0x05000000,	0x40000000,	0x00000000,
-+	0x034, 0x0004A0B1,
-+	0x034, 0x000490AE,
-+	0x034, 0x0004806F,
-+	0x034, 0x0004706C,
-+	0x034, 0x0004604C,
-+	0x034, 0x00045049,
-+	0x034, 0x00044046,
-+	0x034, 0x00043043,
-+	0x034, 0x00042006,
-+	0x034, 0x00041003,
-+	0x034, 0x00040000,
-+	0xA0000000,	0x00000000,
-+	0x034, 0x0004ADF5,
-+	0x034, 0x00049DF2,
-+	0x034, 0x00048DEF,
-+	0x034, 0x00047DEC,
-+	0x034, 0x00046DE9,
-+	0x034, 0x00045DE6,
-+	0x034, 0x00044DE3,
-+	0x034, 0x000438C8,
-+	0x034, 0x000428C5,
-+	0x034, 0x000418C2,
-+	0x034, 0x000408C0,
-+	0xB0000000,	0x00000000,
-+	0x80000008,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0002A0B2,
-+	0x034, 0x000290AF,
-+	0x034, 0x00028070,
-+	0x034, 0x0002706D,
-+	0x034, 0x00026050,
-+	0x034, 0x0002504D,
-+	0x034, 0x0002404A,
-+	0x034, 0x00023047,
-+	0x034, 0x0002200A,
-+	0x034, 0x00021007,
-+	0x034, 0x00020004,
-+	0x90000008,	0x05000000,	0x40000000,	0x00000000,
-+	0x034, 0x0002A0B3,
-+	0x034, 0x000290B0,
-+	0x034, 0x00028071,
-+	0x034, 0x0002706E,
-+	0x034, 0x0002604E,
-+	0x034, 0x0002504B,
-+	0x034, 0x00024048,
-+	0x034, 0x00023045,
-+	0x034, 0x00022008,
-+	0x034, 0x00021005,
-+	0x034, 0x00020002,
-+	0xA0000000,	0x00000000,
-+	0x034, 0x0002ADF5,
-+	0x034, 0x00029DF2,
-+	0x034, 0x00028DEF,
-+	0x034, 0x00027DEC,
-+	0x034, 0x00026DE9,
-+	0x034, 0x00025DE6,
-+	0x034, 0x00024DE3,
-+	0x034, 0x000238C8,
-+	0x034, 0x000228C5,
-+	0x034, 0x000218C2,
-+	0x034, 0x000208C0,
-+	0xB0000000,	0x00000000,
-+	0x80000008,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0000A0B2,
-+	0x034, 0x000090AF,
-+	0x034, 0x00008070,
-+	0x034, 0x0000706D,
-+	0x034, 0x00006050,
-+	0x034, 0x0000504D,
-+	0x034, 0x0000404A,
-+	0x034, 0x00003047,
-+	0x034, 0x0000200A,
-+	0x034, 0x00001007,
-+	0x034, 0x00000004,
-+	0x90000008,	0x05000000,	0x40000000,	0x00000000,
-+	0x034, 0x0000A0B3,
-+	0x034, 0x000090B0,
-+	0x034, 0x00008070,
-+	0x034, 0x0000706D,
-+	0x034, 0x0000604D,
-+	0x034, 0x0000504A,
-+	0x034, 0x00004047,
-+	0x034, 0x00003044,
-+	0x034, 0x00002007,
-+	0x034, 0x00001004,
-+	0x034, 0x00000001,
-+	0xA0000000,	0x00000000,
-+	0x034, 0x0000AFF7,
-+	0x034, 0x00009DF7,
-+	0x034, 0x00008DF4,
-+	0x034, 0x00007DF1,
-+	0x034, 0x00006DEE,
-+	0x034, 0x00005DEB,
-+	0x034, 0x00004DE8,
-+	0x034, 0x000038CC,
-+	0x034, 0x000028C9,
-+	0x034, 0x000018C6,
-+	0x034, 0x000008C3,
-+	0xB0000000,	0x00000000,
-+	0x0EF, 0x00000000,
-+	0x80000008,	0x00000000,	0x40000000,	0x00000000,
-+	0x018, 0x0001712A,
-+	0x0EF, 0x00000040,
-+	0x035, 0x000001C5,
-+	0x035, 0x000081C5,
-+	0x035, 0x000101C5,
-+	0x035, 0x00020174,
-+	0x035, 0x00028174,
-+	0x035, 0x00030174,
-+	0x035, 0x00040185,
-+	0x035, 0x00048185,
-+	0x035, 0x00050185,
-+	0x0EF, 0x00000000,
-+	0x90000008,	0x05000000,	0x40000000,	0x00000000,
-+	0x018, 0x0001712A,
-+	0x0EF, 0x00000040,
-+	0x035, 0x000001C5,
-+	0x035, 0x000081C5,
-+	0x035, 0x000101C5,
-+	0x035, 0x00020174,
-+	0x035, 0x00028174,
-+	0x035, 0x00030174,
-+	0x035, 0x00040185,
-+	0x035, 0x00048185,
-+	0x035, 0x00050185,
-+	0x0EF, 0x00000000,
-+	0xA0000000,	0x00000000,
-+	0x018, 0x0001712A,
-+	0x0EF, 0x00000040,
-+	0x035, 0x00000188,
-+	0x035, 0x00008147,
-+	0x035, 0x00010147,
-+	0x035, 0x000201D7,
-+	0x035, 0x000281D7,
-+	0x035, 0x000301D7,
-+	0x035, 0x000401D8,
-+	0x035, 0x000481D8,
-+	0x035, 0x000501D8,
-+	0x0EF, 0x00000000,
-+	0xB0000000,	0x00000000,
-+	0x80000008,	0x00000000,	0x40000000,	0x00000000,
-+	0x018, 0x0001712A,
-+	0x0EF, 0x00000010,
-+	0x036, 0x00005B8B,
-+	0x036, 0x0000DB8B,
-+	0x036, 0x00015B8B,
-+	0x036, 0x0001DB8B,
-+	0x036, 0x000262DB,
-+	0x036, 0x0002E2DB,
-+	0x036, 0x000362DB,
-+	0x036, 0x0003E2DB,
-+	0x036, 0x0004553B,
-+	0x036, 0x0004D53B,
-+	0x036, 0x0005553B,
-+	0x036, 0x0005D53B,
-+	0x90000008,	0x05000000,	0x40000000,	0x00000000,
-+	0x018, 0x0001712A,
-+	0x0EF, 0x00000010,
-+	0x036, 0x00005B8B,
-+	0x036, 0x0000DB8B,
-+	0x036, 0x00015B8B,
-+	0x036, 0x0001DB8B,
-+	0x036, 0x000262DB,
-+	0x036, 0x0002E2DB,
-+	0x036, 0x000362DB,
-+	0x036, 0x0003E2DB,
-+	0x036, 0x0004553B,
-+	0x036, 0x0004D53B,
-+	0x036, 0x0005553B,
-+	0x036, 0x0005D53B,
-+	0xA0000000,	0x00000000,
-+	0x018, 0x0001712A,
-+	0x0EF, 0x00000010,
-+	0x036, 0x00084EB4,
-+	0x036, 0x0008CC35,
-+	0x036, 0x00094C35,
-+	0x036, 0x0009CC35,
-+	0x036, 0x000A4C35,
-+	0x036, 0x000ACC35,
-+	0x036, 0x000B4C35,
-+	0x036, 0x000BCC35,
-+	0x036, 0x000C4C34,
-+	0x036, 0x000CCC35,
-+	0x036, 0x000D4C35,
-+	0x036, 0x000DCC35,
-+	0xB0000000,	0x00000000,
-+	0x0EF, 0x00000000,
-+	0x0EF, 0x00000008,
-+	0x80000008,	0x00000000,	0x40000000,	0x00000000,
-+	0x03C, 0x000002DC,
-+	0x03C, 0x00000524,
-+	0x03C, 0x00000902,
-+	0x90000008,	0x05000000,	0x40000000,	0x00000000,
-+	0x03C, 0x000002DC,
-+	0x03C, 0x00000524,
-+	0x03C, 0x00000902,
-+	0xA0000000,	0x00000000,
-+	0x03C, 0x000002A8,
-+	0x03C, 0x000005A2,
-+	0x03C, 0x00000880,
-+	0xB0000000,	0x00000000,
-+	0x0EF, 0x00000000,
-+	0x018, 0x0001712A,
-+	0x0EF, 0x00000002,
-+	0x0DF, 0x00000080,
-+	0x80000008,	0x00000000,	0x40000000,	0x00000000,
-+	0x061, 0x000EAC43,
-+	0x062, 0x00038F47,
-+	0x063, 0x00031157,
-+	0x064, 0x0001C4AC,
-+	0x065, 0x000931D1,
-+	0x90000008,	0x05000000,	0x40000000,	0x00000000,
-+	0x061, 0x000EAC43,
-+	0x062, 0x00038F47,
-+	0x063, 0x00031157,
-+	0x064, 0x0001C4AC,
-+	0x065, 0x000931D2,
-+	0x90000002,	0x00000000,	0x40000000,	0x00000000,
-+	0x061, 0x000EAC43,
-+	0x062, 0x00038F47,
-+	0x063, 0x00031157,
-+	0x064, 0x0001C4AC,
-+	0x065, 0x000931D1,
-+	0xA0000000,	0x00000000,
-+	0x061, 0x000E5D53,
-+	0x062, 0x00038FCD,
-+	0x063, 0x000114EB,
-+	0x064, 0x000196AC,
-+	0x065, 0x000911D7,
-+	0xB0000000,	0x00000000,
-+	0x008, 0x00008400,
-+};
-+
-+RTW_DECL_TABLE_RF_RADIO(rtw8812a_rf_b, B);
-+
-+static const struct rtw_txpwr_lmt_cfg_pair rtw8812a_txpwr_lmt[] = {
-+	{ 0, 0, 0, 0, 1, 36, },
-+	{ 2, 0, 0, 0, 1, 32, },
-+	{ 1, 0, 0, 0, 1, 32, },
-+	{ 0, 0, 0, 0, 2, 36, },
-+	{ 2, 0, 0, 0, 2, 32, },
-+	{ 1, 0, 0, 0, 2, 32, },
-+	{ 0, 0, 0, 0, 3, 36, },
-+	{ 2, 0, 0, 0, 3, 32, },
-+	{ 1, 0, 0, 0, 3, 32, },
-+	{ 0, 0, 0, 0, 4, 36, },
-+	{ 2, 0, 0, 0, 4, 32, },
-+	{ 1, 0, 0, 0, 4, 32, },
-+	{ 0, 0, 0, 0, 5, 36, },
-+	{ 2, 0, 0, 0, 5, 32, },
-+	{ 1, 0, 0, 0, 5, 32, },
-+	{ 0, 0, 0, 0, 6, 36, },
-+	{ 2, 0, 0, 0, 6, 32, },
-+	{ 1, 0, 0, 0, 6, 32, },
-+	{ 0, 0, 0, 0, 7, 36, },
-+	{ 2, 0, 0, 0, 7, 32, },
-+	{ 1, 0, 0, 0, 7, 32, },
-+	{ 0, 0, 0, 0, 8, 36, },
-+	{ 2, 0, 0, 0, 8, 32, },
-+	{ 1, 0, 0, 0, 8, 32, },
-+	{ 0, 0, 0, 0, 9, 36, },
-+	{ 2, 0, 0, 0, 9, 32, },
-+	{ 1, 0, 0, 0, 9, 32, },
-+	{ 0, 0, 0, 0, 10, 36, },
-+	{ 2, 0, 0, 0, 10, 32, },
-+	{ 1, 0, 0, 0, 10, 32, },
-+	{ 0, 0, 0, 0, 11, 36, },
-+	{ 2, 0, 0, 0, 11, 32, },
-+	{ 1, 0, 0, 0, 11, 32, },
-+	{ 0, 0, 0, 0, 12, 63, },
-+	{ 2, 0, 0, 0, 12, 32, },
-+	{ 1, 0, 0, 0, 12, 32, },
-+	{ 0, 0, 0, 0, 13, 63, },
-+	{ 2, 0, 0, 0, 13, 32, },
-+	{ 1, 0, 0, 0, 13, 32, },
-+	{ 0, 0, 0, 0, 14, 63, },
-+	{ 2, 0, 0, 0, 14, 63, },
-+	{ 1, 0, 0, 0, 14, 32, },
-+	{ 0, 0, 0, 1, 1, 34, },
-+	{ 2, 0, 0, 1, 1, 32, },
-+	{ 1, 0, 0, 1, 1, 32, },
-+	{ 0, 0, 0, 1, 2, 36, },
-+	{ 2, 0, 0, 1, 2, 32, },
-+	{ 1, 0, 0, 1, 2, 32, },
-+	{ 0, 0, 0, 1, 3, 36, },
-+	{ 2, 0, 0, 1, 3, 32, },
-+	{ 1, 0, 0, 1, 3, 32, },
-+	{ 0, 0, 0, 1, 4, 36, },
-+	{ 2, 0, 0, 1, 4, 32, },
-+	{ 1, 0, 0, 1, 4, 32, },
-+	{ 0, 0, 0, 1, 5, 36, },
-+	{ 2, 0, 0, 1, 5, 32, },
-+	{ 1, 0, 0, 1, 5, 32, },
-+	{ 0, 0, 0, 1, 6, 36, },
-+	{ 2, 0, 0, 1, 6, 32, },
-+	{ 1, 0, 0, 1, 6, 32, },
-+	{ 0, 0, 0, 1, 7, 36, },
-+	{ 2, 0, 0, 1, 7, 32, },
-+	{ 1, 0, 0, 1, 7, 32, },
-+	{ 0, 0, 0, 1, 8, 36, },
-+	{ 2, 0, 0, 1, 8, 32, },
-+	{ 1, 0, 0, 1, 8, 32, },
-+	{ 0, 0, 0, 1, 9, 36, },
-+	{ 2, 0, 0, 1, 9, 32, },
-+	{ 1, 0, 0, 1, 9, 32, },
-+	{ 0, 0, 0, 1, 10, 36, },
-+	{ 2, 0, 0, 1, 10, 32, },
-+	{ 1, 0, 0, 1, 10, 32, },
-+	{ 0, 0, 0, 1, 11, 32, },
-+	{ 2, 0, 0, 1, 11, 32, },
-+	{ 1, 0, 0, 1, 11, 32, },
-+	{ 0, 0, 0, 1, 12, 63, },
-+	{ 2, 0, 0, 1, 12, 32, },
-+	{ 1, 0, 0, 1, 12, 32, },
-+	{ 0, 0, 0, 1, 13, 63, },
-+	{ 2, 0, 0, 1, 13, 32, },
-+	{ 1, 0, 0, 1, 13, 32, },
-+	{ 0, 0, 0, 1, 14, 63, },
-+	{ 2, 0, 0, 1, 14, 63, },
-+	{ 1, 0, 0, 1, 14, 63, },
-+	{ 0, 0, 0, 2, 1, 34, },
-+	{ 2, 0, 0, 2, 1, 32, },
-+	{ 1, 0, 0, 2, 1, 32, },
-+	{ 0, 0, 0, 2, 2, 36, },
-+	{ 2, 0, 0, 2, 2, 32, },
-+	{ 1, 0, 0, 2, 2, 32, },
-+	{ 0, 0, 0, 2, 3, 36, },
-+	{ 2, 0, 0, 2, 3, 32, },
-+	{ 1, 0, 0, 2, 3, 32, },
-+	{ 0, 0, 0, 2, 4, 36, },
-+	{ 2, 0, 0, 2, 4, 32, },
-+	{ 1, 0, 0, 2, 4, 32, },
-+	{ 0, 0, 0, 2, 5, 36, },
-+	{ 2, 0, 0, 2, 5, 32, },
-+	{ 1, 0, 0, 2, 5, 32, },
-+	{ 0, 0, 0, 2, 6, 36, },
-+	{ 2, 0, 0, 2, 6, 32, },
-+	{ 1, 0, 0, 2, 6, 32, },
-+	{ 0, 0, 0, 2, 7, 36, },
-+	{ 2, 0, 0, 2, 7, 32, },
-+	{ 1, 0, 0, 2, 7, 32, },
-+	{ 0, 0, 0, 2, 8, 36, },
-+	{ 2, 0, 0, 2, 8, 32, },
-+	{ 1, 0, 0, 2, 8, 32, },
-+	{ 0, 0, 0, 2, 9, 36, },
-+	{ 2, 0, 0, 2, 9, 32, },
-+	{ 1, 0, 0, 2, 9, 32, },
-+	{ 0, 0, 0, 2, 10, 36, },
-+	{ 2, 0, 0, 2, 10, 32, },
-+	{ 1, 0, 0, 2, 10, 32, },
-+	{ 0, 0, 0, 2, 11, 32, },
-+	{ 2, 0, 0, 2, 11, 32, },
-+	{ 1, 0, 0, 2, 11, 32, },
-+	{ 0, 0, 0, 2, 12, 63, },
-+	{ 2, 0, 0, 2, 12, 32, },
-+	{ 1, 0, 0, 2, 12, 32, },
-+	{ 0, 0, 0, 2, 13, 63, },
-+	{ 2, 0, 0, 2, 13, 32, },
-+	{ 1, 0, 0, 2, 13, 32, },
-+	{ 0, 0, 0, 2, 14, 63, },
-+	{ 2, 0, 0, 2, 14, 63, },
-+	{ 1, 0, 0, 2, 14, 63, },
-+	{ 0, 0, 0, 3, 1, 32, },
-+	{ 2, 0, 0, 3, 1, 32, },
-+	{ 1, 0, 0, 3, 1, 32, },
-+	{ 0, 0, 0, 3, 2, 34, },
-+	{ 2, 0, 0, 3, 2, 32, },
-+	{ 1, 0, 0, 3, 2, 32, },
-+	{ 0, 0, 0, 3, 3, 34, },
-+	{ 2, 0, 0, 3, 3, 32, },
-+	{ 1, 0, 0, 3, 3, 32, },
-+	{ 0, 0, 0, 3, 4, 34, },
-+	{ 2, 0, 0, 3, 4, 32, },
-+	{ 1, 0, 0, 3, 4, 32, },
-+	{ 0, 0, 0, 3, 5, 34, },
-+	{ 2, 0, 0, 3, 5, 32, },
-+	{ 1, 0, 0, 3, 5, 32, },
-+	{ 0, 0, 0, 3, 6, 34, },
-+	{ 2, 0, 0, 3, 6, 32, },
-+	{ 1, 0, 0, 3, 6, 32, },
-+	{ 0, 0, 0, 3, 7, 34, },
-+	{ 2, 0, 0, 3, 7, 32, },
-+	{ 1, 0, 0, 3, 7, 32, },
-+	{ 0, 0, 0, 3, 8, 34, },
-+	{ 2, 0, 0, 3, 8, 32, },
-+	{ 1, 0, 0, 3, 8, 32, },
-+	{ 0, 0, 0, 3, 9, 34, },
-+	{ 2, 0, 0, 3, 9, 32, },
-+	{ 1, 0, 0, 3, 9, 32, },
-+	{ 0, 0, 0, 3, 10, 34, },
-+	{ 2, 0, 0, 3, 10, 32, },
-+	{ 1, 0, 0, 3, 10, 32, },
-+	{ 0, 0, 0, 3, 11, 30, },
-+	{ 2, 0, 0, 3, 11, 32, },
-+	{ 1, 0, 0, 3, 11, 32, },
-+	{ 0, 0, 0, 3, 12, 63, },
-+	{ 2, 0, 0, 3, 12, 32, },
-+	{ 1, 0, 0, 3, 12, 32, },
-+	{ 0, 0, 0, 3, 13, 63, },
-+	{ 2, 0, 0, 3, 13, 32, },
-+	{ 1, 0, 0, 3, 13, 32, },
-+	{ 0, 0, 0, 3, 14, 63, },
-+	{ 2, 0, 0, 3, 14, 63, },
-+	{ 1, 0, 0, 3, 14, 63, },
-+	{ 0, 0, 1, 2, 1, 63, },
-+	{ 2, 0, 1, 2, 1, 63, },
-+	{ 1, 0, 1, 2, 1, 63, },
-+	{ 0, 0, 1, 2, 2, 63, },
-+	{ 2, 0, 1, 2, 2, 63, },
-+	{ 1, 0, 1, 2, 2, 63, },
-+	{ 0, 0, 1, 2, 3, 32, },
-+	{ 2, 0, 1, 2, 3, 32, },
-+	{ 1, 0, 1, 2, 3, 32, },
-+	{ 0, 0, 1, 2, 4, 36, },
-+	{ 2, 0, 1, 2, 4, 32, },
-+	{ 1, 0, 1, 2, 4, 32, },
-+	{ 0, 0, 1, 2, 5, 36, },
-+	{ 2, 0, 1, 2, 5, 32, },
-+	{ 1, 0, 1, 2, 5, 32, },
-+	{ 0, 0, 1, 2, 6, 36, },
-+	{ 2, 0, 1, 2, 6, 32, },
-+	{ 1, 0, 1, 2, 6, 32, },
-+	{ 0, 0, 1, 2, 7, 36, },
-+	{ 2, 0, 1, 2, 7, 32, },
-+	{ 1, 0, 1, 2, 7, 32, },
-+	{ 0, 0, 1, 2, 8, 36, },
-+	{ 2, 0, 1, 2, 8, 32, },
-+	{ 1, 0, 1, 2, 8, 32, },
-+	{ 0, 0, 1, 2, 9, 36, },
-+	{ 2, 0, 1, 2, 9, 32, },
-+	{ 1, 0, 1, 2, 9, 32, },
-+	{ 0, 0, 1, 2, 10, 36, },
-+	{ 2, 0, 1, 2, 10, 32, },
-+	{ 1, 0, 1, 2, 10, 32, },
-+	{ 0, 0, 1, 2, 11, 32, },
-+	{ 2, 0, 1, 2, 11, 32, },
-+	{ 1, 0, 1, 2, 11, 32, },
-+	{ 0, 0, 1, 2, 12, 63, },
-+	{ 2, 0, 1, 2, 12, 32, },
-+	{ 1, 0, 1, 2, 12, 32, },
-+	{ 0, 0, 1, 2, 13, 63, },
-+	{ 2, 0, 1, 2, 13, 32, },
-+	{ 1, 0, 1, 2, 13, 32, },
-+	{ 0, 0, 1, 2, 14, 63, },
-+	{ 2, 0, 1, 2, 14, 63, },
-+	{ 1, 0, 1, 2, 14, 63, },
-+	{ 0, 0, 1, 3, 1, 63, },
-+	{ 2, 0, 1, 3, 1, 63, },
-+	{ 1, 0, 1, 3, 1, 63, },
-+	{ 0, 0, 1, 3, 2, 63, },
-+	{ 2, 0, 1, 3, 2, 63, },
-+	{ 1, 0, 1, 3, 2, 63, },
-+	{ 0, 0, 1, 3, 3, 30, },
-+	{ 2, 0, 1, 3, 3, 30, },
-+	{ 1, 0, 1, 3, 3, 30, },
-+	{ 0, 0, 1, 3, 4, 34, },
-+	{ 2, 0, 1, 3, 4, 30, },
-+	{ 1, 0, 1, 3, 4, 30, },
-+	{ 0, 0, 1, 3, 5, 34, },
-+	{ 2, 0, 1, 3, 5, 30, },
-+	{ 1, 0, 1, 3, 5, 30, },
-+	{ 0, 0, 1, 3, 6, 34, },
-+	{ 2, 0, 1, 3, 6, 30, },
-+	{ 1, 0, 1, 3, 6, 30, },
-+	{ 0, 0, 1, 3, 7, 34, },
-+	{ 2, 0, 1, 3, 7, 30, },
-+	{ 1, 0, 1, 3, 7, 30, },
-+	{ 0, 0, 1, 3, 8, 34, },
-+	{ 2, 0, 1, 3, 8, 30, },
-+	{ 1, 0, 1, 3, 8, 30, },
-+	{ 0, 0, 1, 3, 9, 34, },
-+	{ 2, 0, 1, 3, 9, 30, },
-+	{ 1, 0, 1, 3, 9, 30, },
-+	{ 0, 0, 1, 3, 10, 34, },
-+	{ 2, 0, 1, 3, 10, 30, },
-+	{ 1, 0, 1, 3, 10, 30, },
-+	{ 0, 0, 1, 3, 11, 30, },
-+	{ 2, 0, 1, 3, 11, 30, },
-+	{ 1, 0, 1, 3, 11, 30, },
-+	{ 0, 0, 1, 3, 12, 63, },
-+	{ 2, 0, 1, 3, 12, 32, },
-+	{ 1, 0, 1, 3, 12, 32, },
-+	{ 0, 0, 1, 3, 13, 63, },
-+	{ 2, 0, 1, 3, 13, 32, },
-+	{ 1, 0, 1, 3, 13, 32, },
-+	{ 0, 0, 1, 3, 14, 63, },
-+	{ 2, 0, 1, 3, 14, 63, },
-+	{ 1, 0, 1, 3, 14, 63, },
-+	{ 0, 1, 0, 1, 36, 30, },
-+	{ 2, 1, 0, 1, 36, 32, },
-+	{ 1, 1, 0, 1, 36, 32, },
-+	{ 0, 1, 0, 1, 40, 30, },
-+	{ 2, 1, 0, 1, 40, 32, },
-+	{ 1, 1, 0, 1, 40, 32, },
-+	{ 0, 1, 0, 1, 44, 30, },
-+	{ 2, 1, 0, 1, 44, 32, },
-+	{ 1, 1, 0, 1, 44, 32, },
-+	{ 0, 1, 0, 1, 48, 30, },
-+	{ 2, 1, 0, 1, 48, 32, },
-+	{ 1, 1, 0, 1, 48, 32, },
-+	{ 0, 1, 0, 1, 52, 36, },
-+	{ 2, 1, 0, 1, 52, 32, },
-+	{ 1, 1, 0, 1, 52, 32, },
-+	{ 0, 1, 0, 1, 56, 34, },
-+	{ 2, 1, 0, 1, 56, 32, },
-+	{ 1, 1, 0, 1, 56, 32, },
-+	{ 0, 1, 0, 1, 60, 32, },
-+	{ 2, 1, 0, 1, 60, 32, },
-+	{ 1, 1, 0, 1, 60, 32, },
-+	{ 0, 1, 0, 1, 64, 28, },
-+	{ 2, 1, 0, 1, 64, 32, },
-+	{ 1, 1, 0, 1, 64, 32, },
-+	{ 0, 1, 0, 1, 100, 30, },
-+	{ 2, 1, 0, 1, 100, 32, },
-+	{ 1, 1, 0, 1, 100, 32, },
-+	{ 0, 1, 0, 1, 104, 30, },
-+	{ 2, 1, 0, 1, 104, 32, },
-+	{ 1, 1, 0, 1, 104, 32, },
-+	{ 0, 1, 0, 1, 108, 32, },
-+	{ 2, 1, 0, 1, 108, 32, },
-+	{ 1, 1, 0, 1, 108, 32, },
-+	{ 0, 1, 0, 1, 112, 34, },
-+	{ 2, 1, 0, 1, 112, 32, },
-+	{ 1, 1, 0, 1, 112, 32, },
-+	{ 0, 1, 0, 1, 116, 34, },
-+	{ 2, 1, 0, 1, 116, 32, },
-+	{ 1, 1, 0, 1, 116, 32, },
-+	{ 0, 1, 0, 1, 120, 36, },
-+	{ 2, 1, 0, 1, 120, 32, },
-+	{ 1, 1, 0, 1, 120, 32, },
-+	{ 0, 1, 0, 1, 124, 34, },
-+	{ 2, 1, 0, 1, 124, 32, },
-+	{ 1, 1, 0, 1, 124, 32, },
-+	{ 0, 1, 0, 1, 128, 32, },
-+	{ 2, 1, 0, 1, 128, 32, },
-+	{ 1, 1, 0, 1, 128, 32, },
-+	{ 0, 1, 0, 1, 132, 30, },
-+	{ 2, 1, 0, 1, 132, 32, },
-+	{ 1, 1, 0, 1, 132, 32, },
-+	{ 0, 1, 0, 1, 136, 30, },
-+	{ 2, 1, 0, 1, 136, 32, },
-+	{ 1, 1, 0, 1, 136, 32, },
-+	{ 0, 1, 0, 1, 140, 28, },
-+	{ 2, 1, 0, 1, 140, 32, },
-+	{ 1, 1, 0, 1, 140, 32, },
-+	{ 0, 1, 0, 1, 149, 36, },
-+	{ 2, 1, 0, 1, 149, 32, },
-+	{ 1, 1, 0, 1, 149, 63, },
-+	{ 0, 1, 0, 1, 153, 36, },
-+	{ 2, 1, 0, 1, 153, 32, },
-+	{ 1, 1, 0, 1, 153, 63, },
-+	{ 0, 1, 0, 1, 157, 36, },
-+	{ 2, 1, 0, 1, 157, 32, },
-+	{ 1, 1, 0, 1, 157, 63, },
-+	{ 0, 1, 0, 1, 161, 36, },
-+	{ 2, 1, 0, 1, 161, 32, },
-+	{ 1, 1, 0, 1, 161, 63, },
-+	{ 0, 1, 0, 1, 165, 36, },
-+	{ 2, 1, 0, 1, 165, 32, },
-+	{ 1, 1, 0, 1, 165, 63, },
-+	{ 0, 1, 0, 2, 36, 30, },
-+	{ 2, 1, 0, 2, 36, 32, },
-+	{ 1, 1, 0, 2, 36, 32, },
-+	{ 0, 1, 0, 2, 40, 30, },
-+	{ 2, 1, 0, 2, 40, 32, },
-+	{ 1, 1, 0, 2, 40, 32, },
-+	{ 0, 1, 0, 2, 44, 30, },
-+	{ 2, 1, 0, 2, 44, 32, },
-+	{ 1, 1, 0, 2, 44, 32, },
-+	{ 0, 1, 0, 2, 48, 30, },
-+	{ 2, 1, 0, 2, 48, 32, },
-+	{ 1, 1, 0, 2, 48, 32, },
-+	{ 0, 1, 0, 2, 52, 36, },
-+	{ 2, 1, 0, 2, 52, 32, },
-+	{ 1, 1, 0, 2, 52, 32, },
-+	{ 0, 1, 0, 2, 56, 34, },
-+	{ 2, 1, 0, 2, 56, 32, },
-+	{ 1, 1, 0, 2, 56, 32, },
-+	{ 0, 1, 0, 2, 60, 32, },
-+	{ 2, 1, 0, 2, 60, 32, },
-+	{ 1, 1, 0, 2, 60, 32, },
-+	{ 0, 1, 0, 2, 64, 28, },
-+	{ 2, 1, 0, 2, 64, 32, },
-+	{ 1, 1, 0, 2, 64, 32, },
-+	{ 0, 1, 0, 2, 100, 30, },
-+	{ 2, 1, 0, 2, 100, 32, },
-+	{ 1, 1, 0, 2, 100, 32, },
-+	{ 0, 1, 0, 2, 104, 30, },
-+	{ 2, 1, 0, 2, 104, 32, },
-+	{ 1, 1, 0, 2, 104, 32, },
-+	{ 0, 1, 0, 2, 108, 32, },
-+	{ 2, 1, 0, 2, 108, 32, },
-+	{ 1, 1, 0, 2, 108, 32, },
-+	{ 0, 1, 0, 2, 112, 34, },
-+	{ 2, 1, 0, 2, 112, 32, },
-+	{ 1, 1, 0, 2, 112, 32, },
-+	{ 0, 1, 0, 2, 116, 34, },
-+	{ 2, 1, 0, 2, 116, 32, },
-+	{ 1, 1, 0, 2, 116, 32, },
-+	{ 0, 1, 0, 2, 120, 36, },
-+	{ 2, 1, 0, 2, 120, 32, },
-+	{ 1, 1, 0, 2, 120, 32, },
-+	{ 0, 1, 0, 2, 124, 34, },
-+	{ 2, 1, 0, 2, 124, 32, },
-+	{ 1, 1, 0, 2, 124, 32, },
-+	{ 0, 1, 0, 2, 128, 32, },
-+	{ 2, 1, 0, 2, 128, 32, },
-+	{ 1, 1, 0, 2, 128, 32, },
-+	{ 0, 1, 0, 2, 132, 30, },
-+	{ 2, 1, 0, 2, 132, 32, },
-+	{ 1, 1, 0, 2, 132, 32, },
-+	{ 0, 1, 0, 2, 136, 30, },
-+	{ 2, 1, 0, 2, 136, 32, },
-+	{ 1, 1, 0, 2, 136, 32, },
-+	{ 0, 1, 0, 2, 140, 28, },
-+	{ 2, 1, 0, 2, 140, 32, },
-+	{ 1, 1, 0, 2, 140, 32, },
-+	{ 0, 1, 0, 2, 149, 36, },
-+	{ 2, 1, 0, 2, 149, 32, },
-+	{ 1, 1, 0, 2, 149, 63, },
-+	{ 0, 1, 0, 2, 153, 36, },
-+	{ 2, 1, 0, 2, 153, 32, },
-+	{ 1, 1, 0, 2, 153, 63, },
-+	{ 0, 1, 0, 2, 157, 36, },
-+	{ 2, 1, 0, 2, 157, 32, },
-+	{ 1, 1, 0, 2, 157, 63, },
-+	{ 0, 1, 0, 2, 161, 36, },
-+	{ 2, 1, 0, 2, 161, 32, },
-+	{ 1, 1, 0, 2, 161, 63, },
-+	{ 0, 1, 0, 2, 165, 36, },
-+	{ 2, 1, 0, 2, 165, 32, },
-+	{ 1, 1, 0, 2, 165, 63, },
-+	{ 0, 1, 0, 3, 36, 28, },
-+	{ 2, 1, 0, 3, 36, 30, },
-+	{ 1, 1, 0, 3, 36, 30, },
-+	{ 0, 1, 0, 3, 40, 28, },
-+	{ 2, 1, 0, 3, 40, 30, },
-+	{ 1, 1, 0, 3, 40, 30, },
-+	{ 0, 1, 0, 3, 44, 28, },
-+	{ 2, 1, 0, 3, 44, 30, },
-+	{ 1, 1, 0, 3, 44, 30, },
-+	{ 0, 1, 0, 3, 48, 28, },
-+	{ 2, 1, 0, 3, 48, 30, },
-+	{ 1, 1, 0, 3, 48, 30, },
-+	{ 0, 1, 0, 3, 52, 34, },
-+	{ 2, 1, 0, 3, 52, 30, },
-+	{ 1, 1, 0, 3, 52, 30, },
-+	{ 0, 1, 0, 3, 56, 32, },
-+	{ 2, 1, 0, 3, 56, 30, },
-+	{ 1, 1, 0, 3, 56, 30, },
-+	{ 0, 1, 0, 3, 60, 30, },
-+	{ 2, 1, 0, 3, 60, 30, },
-+	{ 1, 1, 0, 3, 60, 30, },
-+	{ 0, 1, 0, 3, 64, 26, },
-+	{ 2, 1, 0, 3, 64, 30, },
-+	{ 1, 1, 0, 3, 64, 30, },
-+	{ 0, 1, 0, 3, 100, 28, },
-+	{ 2, 1, 0, 3, 100, 30, },
-+	{ 1, 1, 0, 3, 100, 30, },
-+	{ 0, 1, 0, 3, 104, 28, },
-+	{ 2, 1, 0, 3, 104, 30, },
-+	{ 1, 1, 0, 3, 104, 30, },
-+	{ 0, 1, 0, 3, 108, 30, },
-+	{ 2, 1, 0, 3, 108, 30, },
-+	{ 1, 1, 0, 3, 108, 30, },
-+	{ 0, 1, 0, 3, 112, 32, },
-+	{ 2, 1, 0, 3, 112, 30, },
-+	{ 1, 1, 0, 3, 112, 30, },
-+	{ 0, 1, 0, 3, 116, 32, },
-+	{ 2, 1, 0, 3, 116, 30, },
-+	{ 1, 1, 0, 3, 116, 30, },
-+	{ 0, 1, 0, 3, 120, 34, },
-+	{ 2, 1, 0, 3, 120, 30, },
-+	{ 1, 1, 0, 3, 120, 30, },
-+	{ 0, 1, 0, 3, 124, 32, },
-+	{ 2, 1, 0, 3, 124, 30, },
-+	{ 1, 1, 0, 3, 124, 30, },
-+	{ 0, 1, 0, 3, 128, 30, },
-+	{ 2, 1, 0, 3, 128, 30, },
-+	{ 1, 1, 0, 3, 128, 30, },
-+	{ 0, 1, 0, 3, 132, 28, },
-+	{ 2, 1, 0, 3, 132, 30, },
-+	{ 1, 1, 0, 3, 132, 30, },
-+	{ 0, 1, 0, 3, 136, 28, },
-+	{ 2, 1, 0, 3, 136, 30, },
-+	{ 1, 1, 0, 3, 136, 30, },
-+	{ 0, 1, 0, 3, 140, 26, },
-+	{ 2, 1, 0, 3, 140, 30, },
-+	{ 1, 1, 0, 3, 140, 30, },
-+	{ 0, 1, 0, 3, 149, 34, },
-+	{ 2, 1, 0, 3, 149, 30, },
-+	{ 1, 1, 0, 3, 149, 63, },
-+	{ 0, 1, 0, 3, 153, 34, },
-+	{ 2, 1, 0, 3, 153, 30, },
-+	{ 1, 1, 0, 3, 153, 63, },
-+	{ 0, 1, 0, 3, 157, 34, },
-+	{ 2, 1, 0, 3, 157, 30, },
-+	{ 1, 1, 0, 3, 157, 63, },
-+	{ 0, 1, 0, 3, 161, 34, },
-+	{ 2, 1, 0, 3, 161, 30, },
-+	{ 1, 1, 0, 3, 161, 63, },
-+	{ 0, 1, 0, 3, 165, 34, },
-+	{ 2, 1, 0, 3, 165, 30, },
-+	{ 1, 1, 0, 3, 165, 63, },
-+	{ 0, 1, 1, 2, 38, 30, },
-+	{ 2, 1, 1, 2, 38, 32, },
-+	{ 1, 1, 1, 2, 38, 32, },
-+	{ 0, 1, 1, 2, 46, 30, },
-+	{ 2, 1, 1, 2, 46, 32, },
-+	{ 1, 1, 1, 2, 46, 32, },
-+	{ 0, 1, 1, 2, 54, 32, },
-+	{ 2, 1, 1, 2, 54, 32, },
-+	{ 1, 1, 1, 2, 54, 32, },
-+	{ 0, 1, 1, 2, 62, 32, },
-+	{ 2, 1, 1, 2, 62, 32, },
-+	{ 1, 1, 1, 2, 62, 32, },
-+	{ 0, 1, 1, 2, 102, 28, },
-+	{ 2, 1, 1, 2, 102, 32, },
-+	{ 1, 1, 1, 2, 102, 32, },
-+	{ 0, 1, 1, 2, 110, 32, },
-+	{ 2, 1, 1, 2, 110, 32, },
-+	{ 1, 1, 1, 2, 110, 32, },
-+	{ 0, 1, 1, 2, 118, 36, },
-+	{ 2, 1, 1, 2, 118, 32, },
-+	{ 1, 1, 1, 2, 118, 32, },
-+	{ 0, 1, 1, 2, 126, 34, },
-+	{ 2, 1, 1, 2, 126, 32, },
-+	{ 1, 1, 1, 2, 126, 32, },
-+	{ 0, 1, 1, 2, 134, 32, },
-+	{ 2, 1, 1, 2, 134, 32, },
-+	{ 1, 1, 1, 2, 134, 32, },
-+	{ 0, 1, 1, 2, 151, 36, },
-+	{ 2, 1, 1, 2, 151, 32, },
-+	{ 1, 1, 1, 2, 151, 63, },
-+	{ 0, 1, 1, 2, 159, 36, },
-+	{ 2, 1, 1, 2, 159, 32, },
-+	{ 1, 1, 1, 2, 159, 63, },
-+	{ 0, 1, 1, 3, 38, 28, },
-+	{ 2, 1, 1, 3, 38, 30, },
-+	{ 1, 1, 1, 3, 38, 30, },
-+	{ 0, 1, 1, 3, 46, 28, },
-+	{ 2, 1, 1, 3, 46, 30, },
-+	{ 1, 1, 1, 3, 46, 30, },
-+	{ 0, 1, 1, 3, 54, 30, },
-+	{ 2, 1, 1, 3, 54, 30, },
-+	{ 1, 1, 1, 3, 54, 30, },
-+	{ 0, 1, 1, 3, 62, 30, },
-+	{ 2, 1, 1, 3, 62, 30, },
-+	{ 1, 1, 1, 3, 62, 30, },
-+	{ 0, 1, 1, 3, 102, 26, },
-+	{ 2, 1, 1, 3, 102, 30, },
-+	{ 1, 1, 1, 3, 102, 30, },
-+	{ 0, 1, 1, 3, 110, 30, },
-+	{ 2, 1, 1, 3, 110, 30, },
-+	{ 1, 1, 1, 3, 110, 30, },
-+	{ 0, 1, 1, 3, 118, 34, },
-+	{ 2, 1, 1, 3, 118, 30, },
-+	{ 1, 1, 1, 3, 118, 30, },
-+	{ 0, 1, 1, 3, 126, 32, },
-+	{ 2, 1, 1, 3, 126, 30, },
-+	{ 1, 1, 1, 3, 126, 30, },
-+	{ 0, 1, 1, 3, 134, 30, },
-+	{ 2, 1, 1, 3, 134, 30, },
-+	{ 1, 1, 1, 3, 134, 30, },
-+	{ 0, 1, 1, 3, 151, 34, },
-+	{ 2, 1, 1, 3, 151, 30, },
-+	{ 1, 1, 1, 3, 151, 63, },
-+	{ 0, 1, 1, 3, 159, 34, },
-+	{ 2, 1, 1, 3, 159, 30, },
-+	{ 1, 1, 1, 3, 159, 63, },
-+	{ 0, 1, 2, 4, 42, 30, },
-+	{ 2, 1, 2, 4, 42, 32, },
-+	{ 1, 1, 2, 4, 42, 32, },
-+	{ 0, 1, 2, 4, 58, 28, },
-+	{ 2, 1, 2, 4, 58, 32, },
-+	{ 1, 1, 2, 4, 58, 32, },
-+	{ 0, 1, 2, 4, 106, 30, },
-+	{ 2, 1, 2, 4, 106, 32, },
-+	{ 1, 1, 2, 4, 106, 32, },
-+	{ 0, 1, 2, 4, 122, 34, },
-+	{ 2, 1, 2, 4, 122, 32, },
-+	{ 1, 1, 2, 4, 122, 32, },
-+	{ 0, 1, 2, 4, 155, 36, },
-+	{ 2, 1, 2, 4, 155, 32, },
-+	{ 1, 1, 2, 4, 155, 63, },
-+	{ 0, 1, 2, 5, 42, 28, },
-+	{ 2, 1, 2, 5, 42, 30, },
-+	{ 1, 1, 2, 5, 42, 30, },
-+	{ 0, 1, 2, 5, 58, 26, },
-+	{ 2, 1, 2, 5, 58, 30, },
-+	{ 1, 1, 2, 5, 58, 30, },
-+	{ 0, 1, 2, 5, 106, 28, },
-+	{ 2, 1, 2, 5, 106, 30, },
-+	{ 1, 1, 2, 5, 106, 30, },
-+	{ 0, 1, 2, 5, 122, 32, },
-+	{ 2, 1, 2, 5, 122, 30, },
-+	{ 1, 1, 2, 5, 122, 30, },
-+	{ 0, 1, 2, 5, 155, 34, },
-+	{ 2, 1, 2, 5, 155, 30, },
-+	{ 1, 1, 2, 5, 155, 63, },
-+};
-+
-+RTW_DECL_TABLE_TXPWR_LMT(rtw8812a_txpwr_lmt);
-+
-+static const struct rtw_pwr_seq_cmd trans_carddis_to_cardemu_8812a[] = {
-+	{0x0012,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(0), BIT(0)},
-+	{0x0014,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0x80, 0},
-+	{0x0015,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0x01, 0},
-+	{0x0023,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0x10, 0},
-+	{0x0046,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0x00},
-+	{0x0043,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0x00},
-+	{0x0005,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_PCI_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(2), 0},
-+	{0x0005,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(3), 0},
-+	{0x0003,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(2), BIT(2)},
-+	{0x0301,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_PCI_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0},
-+	{0x0024,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_USB_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(1), BIT(1)},
-+	{0x0028,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_USB_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(3), BIT(3)},
-+	{0xFFFF,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 0,
-+	 RTW_PWR_CMD_END, 0, 0},
-+};
-+
-+static const struct rtw_pwr_seq_cmd trans_cardemu_to_act_8812a[] = {
-+	{0x0005,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(2), 0},
-+	{0x0006,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_POLLING, BIT(1), BIT(1)},
-+	{0x0005,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_PCI_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(7), 0},
-+	{0x0005,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(3), 0},
-+	{0x0005,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(0), BIT(0)},
-+	{0x0005,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_POLLING, BIT(0), 0},
-+	{0x0024,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_USB_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(1), 0},
-+	{0x0028,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_USB_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(3), 0},
-+	{0xFFFF,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 0,
-+	 RTW_PWR_CMD_END, 0, 0},
-+};
-+
-+static const struct rtw_pwr_seq_cmd trans_act_to_lps_8812a[] = {
-+	{0x0301,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_PCI_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0xFF},
-+	{0x0522,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0x7F},
-+	{0x05F8,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_POLLING, 0xFF, 0},
-+	{0x05F9,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_POLLING, 0xFF, 0},
-+	{0x05FA,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_POLLING, 0xFF, 0},
-+	{0x05FB,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_POLLING, 0xFF, 0},
-+	{0x0c00,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0x04},
-+	{0x0e00,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0x04},
-+	{0x0002,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(0), 0},
-+	{0x0002,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_DELAY, 0, RTW_PWR_DELAY_US},
-+	{0x0002,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_USB_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(1), 0},
-+	{0x0100,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0x03},
-+	{0x0101,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(1), 0},
-+	{0x0553,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(5), BIT(5)},
-+	{0xFFFF,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 0,
-+	 RTW_PWR_CMD_END, 0, 0},
-+};
-+
-+static const struct rtw_pwr_seq_cmd trans_act_to_cardemu_8812a[] = {
-+	{0x0c00,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0x04},
-+	{0x0e00,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0x04},
-+	{0x0002,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(0), 0},
-+	{0x0002,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_DELAY, 0, RTW_PWR_DELAY_US},
-+	{0x0002,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_PCI_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(1), 0},
-+	{0x0007,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0x2A},
-+	{0x0008,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_USB_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0x02, 0},
-+	{0x0005,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(1), BIT(1)},
-+	{0x0005,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_POLLING, BIT(1), 0},
-+	{0xFFFF,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 0,
-+	 RTW_PWR_CMD_END, 0, 0},
-+};
-+
-+static const struct rtw_pwr_seq_cmd trans_cardemu_to_carddis_8812a[] = {
-+	{0x0003,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(2), 0},
-+	{0x0080,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0x05},
-+	{0x0042,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_USB_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xF0, 0xcc},
-+	{0x0042,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_PCI_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xF0, 0xEC},
-+	{0x0043,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0x07},
-+	{0x0045,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0x00},
-+	{0x0046,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0xff},
-+	{0x0047,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0},
-+	{0x0014,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0x80, BIT(7)},
-+	{0x0015,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0x01, BIT(0)},
-+	{0x0012,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0x01, 0},
-+	{0x0023,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0x10, BIT(4)},
-+	{0x0008,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_USB_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0x02, 0},
-+	{0x0007,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_USB_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0x20},
-+	{0x001f,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_USB_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(1), 0},
-+	{0x0076,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_USB_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(1), 0},
-+	{0x0005,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(3), BIT(3)},
-+	{0xFFFF,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 0,
-+	 RTW_PWR_CMD_END, 0, 0},
-+};
-+
-+const struct rtw_pwr_seq_cmd * const card_enable_flow_8812a[] = {
-+	trans_carddis_to_cardemu_8812a,
-+	trans_cardemu_to_act_8812a,
-+	NULL
-+};
-+
-+const struct rtw_pwr_seq_cmd * const enter_lps_flow_8812a[] = {
-+	trans_act_to_lps_8812a,
-+	NULL
-+};
-+
-+const struct rtw_pwr_seq_cmd * const card_disable_flow_8812a[] = {
-+	trans_act_to_cardemu_8812a,
-+	trans_cardemu_to_carddis_8812a,
-+	NULL
-+};
-+
-+static const u8 rtw8812a_pwrtrk_5gb_n[][RTW_PWR_TRK_TBL_SZ] = {
-+	{0, 1, 1, 2, 2, 3, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12,
-+	 12, 13, 13, 14, 14, 14, 14, 14, 14},
-+	{0, 1, 1, 2, 2, 3, 4, 4, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12,
-+	 12, 13, 13, 14, 14, 14, 14, 14, 14},
-+	{0, 1, 1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 12, 12, 13,
-+	 13, 14, 14, 15, 16, 16, 16, 16, 16},
-+};
-+
-+static const u8 rtw8812a_pwrtrk_5gb_p[][RTW_PWR_TRK_TBL_SZ] = {
-+	{0, 1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 11,
-+	 11, 11, 11, 11, 11, 11, 11, 11, 11},
-+	{0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 11,
-+	 11, 11, 11, 11, 11, 11, 11, 11, 11},
-+	{0, 1, 1, 2, 3, 3, 4, 5, 6, 7, 7, 8, 8, 9, 9, 10, 11, 11, 11, 11, 11,
-+	 11, 11, 11, 11, 11, 11, 11, 11, 11},
-+};
-+
-+static const u8 rtw8812a_pwrtrk_5ga_n[][RTW_PWR_TRK_TBL_SZ] = {
-+	{0, 1, 1, 2, 2, 3, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12,
-+	 12, 13, 13, 14, 15, 15, 15, 15, 15},
-+	{0, 1, 1, 2, 2, 3, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12,
-+	 12, 13, 13, 14, 15, 15, 15, 15, 15},
-+	{0, 1, 1, 2, 2, 3, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12,
-+	 12, 13, 13, 14, 15, 15, 15, 15, 15},
-+};
-+
-+static const u8 rtw8812a_pwrtrk_5ga_p[][RTW_PWR_TRK_TBL_SZ] = {
-+	{0, 1, 1, 2, 2, 3, 4, 5, 6, 7, 7, 8, 8, 9, 10, 11, 11, 11, 11, 11, 11,
-+	 11, 11, 11, 11, 11, 11, 11, 11, 11},
-+	{0, 1, 1, 2, 3, 3, 4, 5, 6, 7, 7, 8, 8, 9, 10, 11, 11, 11, 11, 11, 11,
-+	 11, 11, 11, 11, 11, 11, 11, 11, 11},
-+	{0, 1, 1, 2, 3, 3, 4, 5, 6, 7, 7, 8, 8, 9, 10, 11, 11, 12, 12, 11, 11,
-+	 11, 11, 11, 11, 11, 11, 11, 11, 11},
-+};
-+
-+static const u8 rtw8812a_pwrtrk_2gb_n[] = {
-+	0, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6,
-+	7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 11, 11, 11
-+};
-+
-+static const u8 rtw8812a_pwrtrk_2gb_p[] = {
-+	0, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6,
-+	6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
-+};
-+
-+static const u8 rtw8812a_pwrtrk_2ga_n[] = {
-+	0, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6,
-+	6, 6, 7, 7, 7, 8, 8, 9, 10, 10, 10, 10, 10, 10
-+};
-+
-+static const u8 rtw8812a_pwrtrk_2ga_p[] = {
-+	0, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6,
-+	6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
-+};
-+
-+static const u8 rtw8812a_pwrtrk_2g_cck_b_n[] = {
-+	0, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6,
-+	7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 11, 11, 11
-+};
-+
-+static const u8 rtw8812a_pwrtrk_2g_cck_b_p[] = {
-+	0, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6,
-+	6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
-+};
-+
-+static const u8 rtw8812a_pwrtrk_2g_cck_a_n[] = {
-+	0, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6,
-+	6, 6, 7, 7, 7, 8, 8, 9, 10, 10, 10, 10, 10, 10
-+};
-+
-+static const u8 rtw8812a_pwrtrk_2g_cck_a_p[] = {
-+	0, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6,
-+	6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
-+};
-+
-+const struct rtw_pwr_track_tbl rtw8812a_rtw_pwr_track_tbl = {
-+	.pwrtrk_5gb_n[0] = rtw8812a_pwrtrk_5gb_n[0],
-+	.pwrtrk_5gb_n[1] = rtw8812a_pwrtrk_5gb_n[1],
-+	.pwrtrk_5gb_n[2] = rtw8812a_pwrtrk_5gb_n[2],
-+	.pwrtrk_5gb_p[0] = rtw8812a_pwrtrk_5gb_p[0],
-+	.pwrtrk_5gb_p[1] = rtw8812a_pwrtrk_5gb_p[1],
-+	.pwrtrk_5gb_p[2] = rtw8812a_pwrtrk_5gb_p[2],
-+	.pwrtrk_5ga_n[0] = rtw8812a_pwrtrk_5ga_n[0],
-+	.pwrtrk_5ga_n[1] = rtw8812a_pwrtrk_5ga_n[1],
-+	.pwrtrk_5ga_n[2] = rtw8812a_pwrtrk_5ga_n[2],
-+	.pwrtrk_5ga_p[0] = rtw8812a_pwrtrk_5ga_p[0],
-+	.pwrtrk_5ga_p[1] = rtw8812a_pwrtrk_5ga_p[1],
-+	.pwrtrk_5ga_p[2] = rtw8812a_pwrtrk_5ga_p[2],
-+	.pwrtrk_2gb_n = rtw8812a_pwrtrk_2gb_n,
-+	.pwrtrk_2gb_p = rtw8812a_pwrtrk_2gb_p,
-+	.pwrtrk_2ga_n = rtw8812a_pwrtrk_2ga_n,
-+	.pwrtrk_2ga_p = rtw8812a_pwrtrk_2ga_p,
-+	.pwrtrk_2g_cckb_n = rtw8812a_pwrtrk_2g_cck_b_n,
-+	.pwrtrk_2g_cckb_p = rtw8812a_pwrtrk_2g_cck_b_p,
-+	.pwrtrk_2g_ccka_n = rtw8812a_pwrtrk_2g_cck_a_n,
-+	.pwrtrk_2g_ccka_p = rtw8812a_pwrtrk_2g_cck_a_p,
-+};
-+
-+static const u8 rtw8812a_pwrtrk_rfe3_5gb_n[][RTW_PWR_TRK_TBL_SZ] = {
-+	{0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 12, 13,
-+	 13, 14, 15, 16, 16, 17, 17, 18, 18},
-+	{0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 11,
-+	 12, 14, 13, 13, 14, 14, 14, 15, 15},
-+	{0, 1, 1, 2, 2, 3, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12,
-+	 12, 13, 13, 14, 14, 15, 15, 16, 16},
-+};
-+
-+static const u8 rtw8812a_pwrtrk_rfe3_5gb_p[][RTW_PWR_TRK_TBL_SZ] = {
-+	{0, 1, 1, 2, 3, 3, 4, 5, 6, 7, 7, 8, 9, 9, 10, 10, 11, 11, 11, 11, 11,
-+	 11, 11, 11, 11, 11, 11, 11, 11, 11},
-+	{0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 11,
-+	 11, 11, 11, 11, 11, 11, 11, 11, 11},
-+	{0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 10, 10, 11, 11, 11,
-+	 11, 11, 11, 11, 11, 11, 11, 11, 11},
-+};
-+
-+static const u8 rtw8812a_pwrtrk_rfe3_5ga_n[][RTW_PWR_TRK_TBL_SZ] = {
-+	{0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12,
-+	 13, 14, 15, 16, 16, 17, 17, 18, 18},
-+	{0, 1, 1, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10, 11, 11, 12,
-+	 12, 13, 13, 14, 15, 16, 16, 17, 17},
-+	{0, 1, 1, 2, 3, 3, 4, 4, 5, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 12, 13,
-+	 13, 14, 14, 15, 15, 16, 17, 18, 18},
-+};
-+
-+static const u8 rtw8812a_pwrtrk_rfe3_5ga_p[][RTW_PWR_TRK_TBL_SZ] = {
-+	{0, 1, 1, 2, 2, 3, 4, 5, 6, 7, 7, 8, 9, 9, 10, 10, 11, 11, 11, 11, 11,
-+	 11, 11, 11, 11, 11, 11, 11, 11, 11},
-+	{0, 1, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 11, 11, 11, 11, 11, 11,
-+	 11, 11, 11, 11, 11, 11, 11, 11, 11},
-+	{0, 1, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 11, 11, 11, 11, 11, 11,
-+	 11, 11, 11, 11, 11, 11, 11, 11, 11},
-+};
-+
-+static const u8 rtw8812a_pwrtrk_rfe3_2gb_n[] = {
-+	0, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7,
-+	7, 7, 8, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15, 15
-+};
-+
-+static const u8 rtw8812a_pwrtrk_rfe3_2gb_p[] = {
-+	0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6,
-+	6, 7, 7, 8, 9, 10, 10, 10, 10, 11, 11, 11, 11, 11
-+};
-+
-+static const u8 rtw8812a_pwrtrk_rfe3_2ga_n[] = {
-+	0, 1, 1, 2, 2, 3, 4, 5, 6, 6, 6, 7, 7, 8, 8, 9,
-+	10, 10, 11, 11, 12, 12, 13, 13, 13, 13, 14, 14, 15, 15
-+};
-+
-+static const u8 rtw8812a_pwrtrk_rfe3_2ga_p[] = {
-+	0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6,
-+	6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 11, 11
-+};
-+
-+static const u8 rtw8812a_pwrtrk_rfe3_2g_cck_b_n[] = {
-+	0, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7,
-+	7, 7, 8, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15, 15
-+};
-+
-+static const u8 rtw8812a_pwrtrk_rfe3_2g_cck_b_p[] = {
-+	0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6,
-+	6, 7, 7, 8, 9, 10, 10, 10, 10, 11, 11, 11, 11, 11
-+};
-+
-+static const u8 rtw8812a_pwrtrk_rfe3_2g_cck_a_n[] = {
-+	0, 1, 1, 2, 2, 3, 4, 5, 6, 6, 6, 7, 7, 8, 8, 9,
-+	10, 10, 11, 11, 12, 12, 13, 13, 13, 13, 14, 14, 15, 15
-+};
-+
-+static const u8 rtw8812a_pwrtrk_rfe3_2g_cck_a_p[] = {
-+	0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6,
-+	6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 11, 11
-+};
-+
-+const struct rtw_pwr_track_tbl rtw8812a_rtw_pwr_track_rfe3_tbl = {
-+	.pwrtrk_5gb_n[0] = rtw8812a_pwrtrk_rfe3_5gb_n[0],
-+	.pwrtrk_5gb_n[1] = rtw8812a_pwrtrk_rfe3_5gb_n[1],
-+	.pwrtrk_5gb_n[2] = rtw8812a_pwrtrk_rfe3_5gb_n[2],
-+	.pwrtrk_5gb_p[0] = rtw8812a_pwrtrk_rfe3_5gb_p[0],
-+	.pwrtrk_5gb_p[1] = rtw8812a_pwrtrk_rfe3_5gb_p[1],
-+	.pwrtrk_5gb_p[2] = rtw8812a_pwrtrk_rfe3_5gb_p[2],
-+	.pwrtrk_5ga_n[0] = rtw8812a_pwrtrk_rfe3_5ga_n[0],
-+	.pwrtrk_5ga_n[1] = rtw8812a_pwrtrk_rfe3_5ga_n[1],
-+	.pwrtrk_5ga_n[2] = rtw8812a_pwrtrk_rfe3_5ga_n[2],
-+	.pwrtrk_5ga_p[0] = rtw8812a_pwrtrk_rfe3_5ga_p[0],
-+	.pwrtrk_5ga_p[1] = rtw8812a_pwrtrk_rfe3_5ga_p[1],
-+	.pwrtrk_5ga_p[2] = rtw8812a_pwrtrk_rfe3_5ga_p[2],
-+	.pwrtrk_2gb_n = rtw8812a_pwrtrk_rfe3_2gb_n,
-+	.pwrtrk_2gb_p = rtw8812a_pwrtrk_rfe3_2gb_p,
-+	.pwrtrk_2ga_n = rtw8812a_pwrtrk_rfe3_2ga_n,
-+	.pwrtrk_2ga_p = rtw8812a_pwrtrk_rfe3_2ga_p,
-+	.pwrtrk_2g_cckb_n = rtw8812a_pwrtrk_rfe3_2g_cck_b_n,
-+	.pwrtrk_2g_cckb_p = rtw8812a_pwrtrk_rfe3_2g_cck_b_p,
-+	.pwrtrk_2g_ccka_n = rtw8812a_pwrtrk_rfe3_2g_cck_a_n,
-+	.pwrtrk_2g_ccka_p = rtw8812a_pwrtrk_rfe3_2g_cck_a_p,
-+};
---- /dev/null
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8812a_table.h
-@@ -0,0 +1,26 @@
-+/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
-+/* Copyright(c) 2024  Realtek Corporation
-+ */
-+
-+#ifndef __RTW8812A_TABLE_H__
-+#define __RTW8812A_TABLE_H__
-+
-+extern const struct rtw_table rtw8812a_mac_tbl;
-+extern const struct rtw_table rtw8812a_agc_tbl;
-+extern const struct rtw_table rtw8812a_agc_diff_lb_tbl;
-+extern const struct rtw_table rtw8812a_agc_diff_hb_tbl;
-+extern const struct rtw_table rtw8812a_bb_tbl;
-+extern const struct rtw_table rtw8812a_bb_pg_tbl;
-+extern const struct rtw_table rtw8812a_bb_pg_rfe3_tbl;
-+extern const struct rtw_table rtw8812a_rf_a_tbl;
-+extern const struct rtw_table rtw8812a_rf_b_tbl;
-+extern const struct rtw_table rtw8812a_txpwr_lmt_tbl;
-+
-+extern const struct rtw_pwr_seq_cmd * const card_enable_flow_8812a[];
-+extern const struct rtw_pwr_seq_cmd * const enter_lps_flow_8812a[];
-+extern const struct rtw_pwr_seq_cmd * const card_disable_flow_8812a[];
-+
-+extern const struct rtw_pwr_track_tbl rtw8812a_rtw_pwr_track_tbl;
-+extern const struct rtw_pwr_track_tbl rtw8812a_rtw_pwr_track_rfe3_tbl;
-+
-+#endif
diff --git a/package/kernel/mac80211/patches/rtl/040-v6.13-wifi-rtw88-Add-rtw8821a_table.-c-h.patch b/package/kernel/mac80211/patches/rtl/040-v6.13-wifi-rtw88-Add-rtw8821a_table.-c-h.patch
deleted file mode 100644
index e8ceaba61e..0000000000
--- a/package/kernel/mac80211/patches/rtl/040-v6.13-wifi-rtw88-Add-rtw8821a_table.-c-h.patch
+++ /dev/null
@@ -1,2395 +0,0 @@
-From 4b81da5cd2b4c7231272216639bacecc818d8b51 Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 30 Oct 2024 20:25:16 +0200
-Subject: [PATCH] wifi: rtw88: Add rtw8821a_table.{c,h}
-
-These contain various arrays for initialising RTL8821AU. Also TX power
-limits.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/087c7260-fcc3-4e22-886b-ac477cad9198@gmail.com
----
- .../wireless/realtek/rtw88/rtw8821a_table.c   | 2350 +++++++++++++++++
- .../wireless/realtek/rtw88/rtw8821a_table.h   |   21 +
- 2 files changed, 2371 insertions(+)
- create mode 100644 drivers/net/wireless/realtek/rtw88/rtw8821a_table.c
- create mode 100644 drivers/net/wireless/realtek/rtw88/rtw8821a_table.h
-
---- /dev/null
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8821a_table.c
-@@ -0,0 +1,2350 @@
-+// SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause
-+/* Copyright(c) 2024  Realtek Corporation
-+ */
-+
-+#include "main.h"
-+#include "phy.h"
-+#include "rtw8821a_table.h"
-+
-+static const u32 rtw8821a_mac[] = {
-+	0x421, 0x0000000F,
-+	0x428, 0x0000000A,
-+	0x429, 0x00000010,
-+	0x430, 0x00000000,
-+	0x431, 0x00000000,
-+	0x432, 0x00000000,
-+	0x433, 0x00000001,
-+	0x434, 0x00000004,
-+	0x435, 0x00000005,
-+	0x436, 0x00000007,
-+	0x437, 0x00000008,
-+	0x43C, 0x00000004,
-+	0x43D, 0x00000005,
-+	0x43E, 0x00000007,
-+	0x43F, 0x00000008,
-+	0x440, 0x0000005D,
-+	0x441, 0x00000001,
-+	0x442, 0x00000000,
-+	0x444, 0x00000010,
-+	0x445, 0x00000000,
-+	0x446, 0x00000000,
-+	0x447, 0x00000000,
-+	0x448, 0x00000000,
-+	0x449, 0x000000F0,
-+	0x44A, 0x0000000F,
-+	0x44B, 0x0000003E,
-+	0x44C, 0x00000010,
-+	0x44D, 0x00000000,
-+	0x44E, 0x00000000,
-+	0x44F, 0x00000000,
-+	0x450, 0x00000000,
-+	0x451, 0x000000F0,
-+	0x452, 0x0000000F,
-+	0x453, 0x00000000,
-+	0x456, 0x0000005E,
-+	0x460, 0x00000066,
-+	0x461, 0x00000066,
-+	0x4C8, 0x0000003F,
-+	0x4C9, 0x000000FF,
-+	0x4CC, 0x000000FF,
-+	0x4CD, 0x000000FF,
-+	0x4CE, 0x00000001,
-+	0x500, 0x00000026,
-+	0x501, 0x000000A2,
-+	0x502, 0x0000002F,
-+	0x503, 0x00000000,
-+	0x504, 0x00000028,
-+	0x505, 0x000000A3,
-+	0x506, 0x0000005E,
-+	0x507, 0x00000000,
-+	0x508, 0x0000002B,
-+	0x509, 0x000000A4,
-+	0x50A, 0x0000005E,
-+	0x50B, 0x00000000,
-+	0x50C, 0x0000004F,
-+	0x50D, 0x000000A4,
-+	0x50E, 0x00000000,
-+	0x50F, 0x00000000,
-+	0x512, 0x0000001C,
-+	0x514, 0x0000000A,
-+	0x516, 0x0000000A,
-+	0x525, 0x0000004F,
-+	0x550, 0x00000010,
-+	0x551, 0x00000010,
-+	0x559, 0x00000002,
-+	0x55C, 0x00000050,
-+	0x55D, 0x000000FF,
-+	0x605, 0x00000030,
-+	0x607, 0x00000007,
-+	0x608, 0x0000000E,
-+	0x609, 0x0000002A,
-+	0x620, 0x000000FF,
-+	0x621, 0x000000FF,
-+	0x622, 0x000000FF,
-+	0x623, 0x000000FF,
-+	0x624, 0x000000FF,
-+	0x625, 0x000000FF,
-+	0x626, 0x000000FF,
-+	0x627, 0x000000FF,
-+	0x638, 0x00000050,
-+	0x63C, 0x0000000A,
-+	0x63D, 0x0000000A,
-+	0x63E, 0x0000000E,
-+	0x63F, 0x0000000E,
-+	0x640, 0x00000040,
-+	0x642, 0x00000040,
-+	0x643, 0x00000000,
-+	0x652, 0x000000C8,
-+	0x66E, 0x00000005,
-+	0x700, 0x00000021,
-+	0x701, 0x00000043,
-+	0x702, 0x00000065,
-+	0x703, 0x00000087,
-+	0x708, 0x00000021,
-+	0x709, 0x00000043,
-+	0x70A, 0x00000065,
-+	0x70B, 0x00000087,
-+	0x718, 0x00000040,
-+};
-+
-+RTW_DECL_TABLE_PHY_COND(rtw8821a_mac, rtw_phy_cfg_mac);
-+
-+static const u32 rtw8821a_agc[] = {
-+	0x81C, 0xBF000001,
-+	0x81C, 0xBF020001,
-+	0x81C, 0xBF040001,
-+	0x81C, 0xBF060001,
-+	0x81C, 0xBE080001,
-+	0x81C, 0xBD0A0001,
-+	0x81C, 0xBC0C0001,
-+	0x81C, 0xBA0E0001,
-+	0x81C, 0xB9100001,
-+	0x81C, 0xB8120001,
-+	0x81C, 0xB7140001,
-+	0x81C, 0xB6160001,
-+	0x81C, 0xB5180001,
-+	0x81C, 0xB41A0001,
-+	0x81C, 0xB31C0001,
-+	0x81C, 0xB21E0001,
-+	0x81C, 0xB1200001,
-+	0x81C, 0xB0220001,
-+	0x81C, 0xAF240001,
-+	0x81C, 0xAE260001,
-+	0x81C, 0xAD280001,
-+	0x81C, 0xAC2A0001,
-+	0x81C, 0xAB2C0001,
-+	0x81C, 0xAA2E0001,
-+	0x81C, 0xA9300001,
-+	0x81C, 0xA8320001,
-+	0x81C, 0xA7340001,
-+	0x81C, 0xA6360001,
-+	0x81C, 0xA5380001,
-+	0x81C, 0xA43A0001,
-+	0x81C, 0x683C0001,
-+	0x81C, 0x673E0001,
-+	0x81C, 0x66400001,
-+	0x81C, 0x65420001,
-+	0x81C, 0x64440001,
-+	0x81C, 0x63460001,
-+	0x81C, 0x62480001,
-+	0x81C, 0x614A0001,
-+	0x81C, 0x474C0001,
-+	0x81C, 0x464E0001,
-+	0x81C, 0x45500001,
-+	0x81C, 0x44520001,
-+	0x81C, 0x43540001,
-+	0x81C, 0x42560001,
-+	0x81C, 0x41580001,
-+	0x81C, 0x285A0001,
-+	0x81C, 0x275C0001,
-+	0x81C, 0x265E0001,
-+	0x81C, 0x25600001,
-+	0x81C, 0x24620001,
-+	0x81C, 0x0A640001,
-+	0x81C, 0x09660001,
-+	0x81C, 0x08680001,
-+	0x81C, 0x076A0001,
-+	0x81C, 0x066C0001,
-+	0x81C, 0x056E0001,
-+	0x81C, 0x04700001,
-+	0x81C, 0x03720001,
-+	0x81C, 0x02740001,
-+	0x81C, 0x01760001,
-+	0x81C, 0x01780001,
-+	0x81C, 0x017A0001,
-+	0x81C, 0x017C0001,
-+	0x81C, 0x017E0001,
-+	0x8000020c,	0x00000000,	0x40000000,	0x00000000,
-+	0x81C, 0xFB000101,
-+	0x81C, 0xFA020101,
-+	0x81C, 0xF9040101,
-+	0x81C, 0xF8060101,
-+	0x81C, 0xF7080101,
-+	0x81C, 0xF60A0101,
-+	0x81C, 0xF50C0101,
-+	0x81C, 0xF40E0101,
-+	0x81C, 0xF3100101,
-+	0x81C, 0xF2120101,
-+	0x81C, 0xF1140101,
-+	0x81C, 0xF0160101,
-+	0x81C, 0xEF180101,
-+	0x81C, 0xEE1A0101,
-+	0x81C, 0xED1C0101,
-+	0x81C, 0xEC1E0101,
-+	0x81C, 0xEB200101,
-+	0x81C, 0xEA220101,
-+	0x81C, 0xE9240101,
-+	0x81C, 0xE8260101,
-+	0x81C, 0xE7280101,
-+	0x81C, 0xE62A0101,
-+	0x81C, 0xE52C0101,
-+	0x81C, 0xE42E0101,
-+	0x81C, 0xE3300101,
-+	0x81C, 0xA5320101,
-+	0x81C, 0xA4340101,
-+	0x81C, 0xA3360101,
-+	0x81C, 0x87380101,
-+	0x81C, 0x863A0101,
-+	0x81C, 0x853C0101,
-+	0x81C, 0x843E0101,
-+	0x81C, 0x69400101,
-+	0x81C, 0x68420101,
-+	0x81C, 0x67440101,
-+	0x81C, 0x66460101,
-+	0x81C, 0x49480101,
-+	0x81C, 0x484A0101,
-+	0x81C, 0x474C0101,
-+	0x81C, 0x2A4E0101,
-+	0x81C, 0x29500101,
-+	0x81C, 0x28520101,
-+	0x81C, 0x27540101,
-+	0x81C, 0x26560101,
-+	0x81C, 0x25580101,
-+	0x81C, 0x245A0101,
-+	0x81C, 0x235C0101,
-+	0x81C, 0x055E0101,
-+	0x81C, 0x04600101,
-+	0x81C, 0x03620101,
-+	0x81C, 0x02640101,
-+	0x81C, 0x01660101,
-+	0x81C, 0x01680101,
-+	0x81C, 0x016A0101,
-+	0x81C, 0x016C0101,
-+	0x81C, 0x016E0101,
-+	0x81C, 0x01700101,
-+	0x81C, 0x01720101,
-+	0x9000040c,	0x00000000,	0x40000000,	0x00000000,
-+	0x81C, 0xFB000101,
-+	0x81C, 0xFA020101,
-+	0x81C, 0xF9040101,
-+	0x81C, 0xF8060101,
-+	0x81C, 0xF7080101,
-+	0x81C, 0xF60A0101,
-+	0x81C, 0xF50C0101,
-+	0x81C, 0xF40E0101,
-+	0x81C, 0xF3100101,
-+	0x81C, 0xF2120101,
-+	0x81C, 0xF1140101,
-+	0x81C, 0xF0160101,
-+	0x81C, 0xEF180101,
-+	0x81C, 0xEE1A0101,
-+	0x81C, 0xED1C0101,
-+	0x81C, 0xEC1E0101,
-+	0x81C, 0xEB200101,
-+	0x81C, 0xEA220101,
-+	0x81C, 0xE9240101,
-+	0x81C, 0xE8260101,
-+	0x81C, 0xE7280101,
-+	0x81C, 0xE62A0101,
-+	0x81C, 0xE52C0101,
-+	0x81C, 0xE42E0101,
-+	0x81C, 0xE3300101,
-+	0x81C, 0xA5320101,
-+	0x81C, 0xA4340101,
-+	0x81C, 0xA3360101,
-+	0x81C, 0x87380101,
-+	0x81C, 0x863A0101,
-+	0x81C, 0x853C0101,
-+	0x81C, 0x843E0101,
-+	0x81C, 0x69400101,
-+	0x81C, 0x68420101,
-+	0x81C, 0x67440101,
-+	0x81C, 0x66460101,
-+	0x81C, 0x49480101,
-+	0x81C, 0x484A0101,
-+	0x81C, 0x474C0101,
-+	0x81C, 0x2A4E0101,
-+	0x81C, 0x29500101,
-+	0x81C, 0x28520101,
-+	0x81C, 0x27540101,
-+	0x81C, 0x26560101,
-+	0x81C, 0x25580101,
-+	0x81C, 0x245A0101,
-+	0x81C, 0x235C0101,
-+	0x81C, 0x055E0101,
-+	0x81C, 0x04600101,
-+	0x81C, 0x03620101,
-+	0x81C, 0x02640101,
-+	0x81C, 0x01660101,
-+	0x81C, 0x01680101,
-+	0x81C, 0x016A0101,
-+	0x81C, 0x016C0101,
-+	0x81C, 0x016E0101,
-+	0x81C, 0x01700101,
-+	0x81C, 0x01720101,
-+	0xA0000000,	0x00000000,
-+	0x81C, 0xFF000101,
-+	0x81C, 0xFF020101,
-+	0x81C, 0xFE040101,
-+	0x81C, 0xFD060101,
-+	0x81C, 0xFC080101,
-+	0x81C, 0xFD0A0101,
-+	0x81C, 0xFC0C0101,
-+	0x81C, 0xFB0E0101,
-+	0x81C, 0xFA100101,
-+	0x81C, 0xF9120101,
-+	0x81C, 0xF8140101,
-+	0x81C, 0xF7160101,
-+	0x81C, 0xF6180101,
-+	0x81C, 0xF51A0101,
-+	0x81C, 0xF41C0101,
-+	0x81C, 0xF31E0101,
-+	0x81C, 0xF2200101,
-+	0x81C, 0xF1220101,
-+	0x81C, 0xF0240101,
-+	0x81C, 0xEF260101,
-+	0x81C, 0xEE280101,
-+	0x81C, 0xED2A0101,
-+	0x81C, 0xEC2C0101,
-+	0x81C, 0xEB2E0101,
-+	0x81C, 0xEA300101,
-+	0x81C, 0xE9320101,
-+	0x81C, 0xE8340101,
-+	0x81C, 0xE7360101,
-+	0x81C, 0xE6380101,
-+	0x81C, 0xE53A0101,
-+	0x81C, 0xE43C0101,
-+	0x81C, 0xE33E0101,
-+	0x81C, 0xA5400101,
-+	0x81C, 0xA4420101,
-+	0x81C, 0xA3440101,
-+	0x81C, 0x87460101,
-+	0x81C, 0x86480101,
-+	0x81C, 0x854A0101,
-+	0x81C, 0x844C0101,
-+	0x81C, 0x694E0101,
-+	0x81C, 0x68500101,
-+	0x81C, 0x67520101,
-+	0x81C, 0x66540101,
-+	0x81C, 0x49560101,
-+	0x81C, 0x48580101,
-+	0x81C, 0x475A0101,
-+	0x81C, 0x2A5C0101,
-+	0x81C, 0x295E0101,
-+	0x81C, 0x28600101,
-+	0x81C, 0x27620101,
-+	0x81C, 0x26640101,
-+	0x81C, 0x25660101,
-+	0x81C, 0x24680101,
-+	0x81C, 0x236A0101,
-+	0x81C, 0x056C0101,
-+	0x81C, 0x046E0101,
-+	0x81C, 0x03700101,
-+	0x81C, 0x02720101,
-+	0xB0000000,	0x00000000,
-+	0x81C, 0x01740101,
-+	0x81C, 0x01760101,
-+	0x81C, 0x01780101,
-+	0x81C, 0x017A0101,
-+	0x81C, 0x017C0101,
-+	0x81C, 0x017E0101,
-+	0xC50, 0x00000022,
-+	0xC50, 0x00000020,
-+};
-+
-+RTW_DECL_TABLE_PHY_COND(rtw8821a_agc, rtw_phy_cfg_agc);
-+
-+static const u32 rtw8821a_bb[] = {
-+	0x800, 0x0020D090,
-+	0x804, 0x080112E0,
-+	0x808, 0x0E028211,
-+	0x80C, 0x92131111,
-+	0x810, 0x20101261,
-+	0x814, 0x020C3D10,
-+	0x818, 0x03A00385,
-+	0x820, 0x00000000,
-+	0x824, 0x00030FE0,
-+	0x828, 0x00000000,
-+	0x82C, 0x002081DD,
-+	0x830, 0x2AAAEEC8,
-+	0x834, 0x0037A706,
-+	0x838, 0x06489B44,
-+	0x83C, 0x0000095B,
-+	0x840, 0xC0000001,
-+	0x844, 0x40003CDE,
-+	0x848, 0x62103F8B,
-+	0x84C, 0x6CFDFFB8,
-+	0x850, 0x28874706,
-+	0x854, 0x0001520C,
-+	0x858, 0x8060E000,
-+	0x85C, 0x74210168,
-+	0x860, 0x6929C321,
-+	0x864, 0x79727432,
-+	0x868, 0x8CA7A314,
-+	0x86C, 0x888C2878,
-+	0x870, 0x08888888,
-+	0x874, 0x31612C2E,
-+	0x878, 0x00000152,
-+	0x87C, 0x000FD000,
-+	0x8A0, 0x00000013,
-+	0x8A4, 0x7F7F7F7F,
-+	0x8A8, 0xA2000338,
-+	0x8AC, 0x0FF0FA0A,
-+	0x8B4, 0x000FC080,
-+	0x8B8, 0x6C10D7FF,
-+	0x8BC, 0x0CA52090,
-+	0x8C0, 0x1BF00020,
-+	0x8C4, 0x00000000,
-+	0x8C8, 0x00013169,
-+	0x8CC, 0x08248492,
-+	0x8D4, 0x940008A0,
-+	0x8D8, 0x290B5612,
-+	0x8F8, 0x400002C0,
-+	0x8FC, 0x00000000,
-+	0x900, 0x00000700,
-+	0x90C, 0x00000000,
-+	0x910, 0x0000FC00,
-+	0x914, 0x00000404,
-+	0x918, 0x1C1028C0,
-+	0x91C, 0x64B11A1C,
-+	0x920, 0xE0767233,
-+	0x924, 0x055AA500,
-+	0x928, 0x00000004,
-+	0x92C, 0xFFFE0000,
-+	0x930, 0xFFFFFFFE,
-+	0x934, 0x001FFFFF,
-+	0x960, 0x00000000,
-+	0x964, 0x00000000,
-+	0x968, 0x00000000,
-+	0x96C, 0x00000000,
-+	0x970, 0x801FFFFF,
-+	0x974, 0x000003FF,
-+	0x978, 0x00000000,
-+	0x97C, 0x00000000,
-+	0x980, 0x00000000,
-+	0x984, 0x00000000,
-+	0x988, 0x00000000,
-+	0x990, 0x27100000,
-+	0x994, 0xFFFF0100,
-+	0x998, 0xFFFFFF5C,
-+	0x99C, 0xFFFFFFFF,
-+	0x9A0, 0x000000FF,
-+	0x9A4, 0x00480080,
-+	0x9A8, 0x00000000,
-+	0x9AC, 0x00000000,
-+	0x9B0, 0x81081008,
-+	0x9B4, 0x01081008,
-+	0x9B8, 0x01081008,
-+	0x9BC, 0x01081008,
-+	0x9D0, 0x00000000,
-+	0x9D4, 0x00000000,
-+	0x9D8, 0x00000000,
-+	0x9DC, 0x00000000,
-+	0x9E0, 0x00005D00,
-+	0x9E4, 0x00000003,
-+	0x9E8, 0x00000001,
-+	0xA00, 0x00D047C8,
-+	0xA04, 0x01FF800C,
-+	0xA08, 0x8C8A8300,
-+	0xA0C, 0x2E68000F,
-+	0xA10, 0x9500BB78,
-+	0xA14, 0x11144028,
-+	0xA18, 0x00881117,
-+	0xA1C, 0x89140F00,
-+	0xA20, 0x1A1B0000,
-+	0xA24, 0x090E1317,
-+	0xA28, 0x00000204,
-+	0xA2C, 0x00900000,
-+	0xA70, 0x101FFF00,
-+	0xA74, 0x00000008,
-+	0xA78, 0x00000900,
-+	0xA7C, 0x225B0606,
-+	0xA80, 0x21805490,
-+	0xA84, 0x001F0000,
-+	0XB00, 0x03100040,
-+	0XB04, 0x0000B000,
-+	0XB08, 0xAE0201EB,
-+	0XB0C, 0x01003207,
-+	0XB10, 0x00009807,
-+	0XB14, 0x01000000,
-+	0XB18, 0x00000002,
-+	0XB1C, 0x00000002,
-+	0XB20, 0x0000001F,
-+	0XB24, 0x03020100,
-+	0XB28, 0x07060504,
-+	0XB2C, 0x0B0A0908,
-+	0XB30, 0x0F0E0D0C,
-+	0XB34, 0x13121110,
-+	0XB38, 0x17161514,
-+	0XB3C, 0x0000003A,
-+	0XB40, 0x00000000,
-+	0XB44, 0x00000000,
-+	0XB48, 0x13000032,
-+	0XB4C, 0x48080000,
-+	0XB50, 0x00000000,
-+	0XB54, 0x00000000,
-+	0XB58, 0x00000000,
-+	0XB5C, 0x00000000,
-+	0xC00, 0x00000007,
-+	0xC04, 0x00042020,
-+	0xC08, 0x80410231,
-+	0xC0C, 0x00000000,
-+	0xC10, 0x00000100,
-+	0xC14, 0x01000000,
-+	0xC1C, 0x40000003,
-+	0xC20, 0x2C2C2C2C,
-+	0xC24, 0x30303030,
-+	0xC28, 0x30303030,
-+	0xC2C, 0x2C2C2C2C,
-+	0xC30, 0x2C2C2C2C,
-+	0xC34, 0x2C2C2C2C,
-+	0xC38, 0x2C2C2C2C,
-+	0xC3C, 0x2A2A2A2A,
-+	0xC40, 0x2A2A2A2A,
-+	0xC44, 0x2A2A2A2A,
-+	0xC48, 0x2A2A2A2A,
-+	0xC4C, 0x2A2A2A2A,
-+	0xC50, 0x00000020,
-+	0xC54, 0x001C1208,
-+	0xC58, 0x30000C1C,
-+	0xC5C, 0x00000058,
-+	0xC60, 0x34344443,
-+	0xC64, 0x07003333,
-+	0xC68, 0x19791979,
-+	0xC6C, 0x19791979,
-+	0xC70, 0x19791979,
-+	0xC74, 0x19791979,
-+	0xC78, 0x19791979,
-+	0xC7C, 0x19791979,
-+	0xC80, 0x19791979,
-+	0xC84, 0x19791979,
-+	0xC94, 0x0100005C,
-+	0xC98, 0x00000000,
-+	0xC9C, 0x00000000,
-+	0xCA0, 0x00000029,
-+	0xCA4, 0x08040201,
-+	0xCA8, 0x80402010,
-+	0xCB0, 0x77775747,
-+	0xCB4, 0x10000077,
-+	0xCB8, 0x00508240,
-+};
-+
-+RTW_DECL_TABLE_PHY_COND(rtw8821a_bb, rtw_phy_cfg_bb);
-+
-+static const struct rtw_phy_pg_cfg_pair rtw8821a_bb_pg[] = {
-+	{ 0, 0, 0, 0x00000c20, 0xffffffff, 0x32343638, },
-+	{ 0, 0, 0, 0x00000c24, 0xffffffff, 0x36363838, },
-+	{ 0, 0, 0, 0x00000c28, 0xffffffff, 0x28303234, },
-+	{ 0, 0, 0, 0x00000c2c, 0xffffffff, 0x34363838, },
-+	{ 0, 0, 0, 0x00000c30, 0xffffffff, 0x26283032, },
-+	{ 0, 0, 0, 0x00000c3c, 0xffffffff, 0x32343636, },
-+	{ 0, 0, 0, 0x00000c40, 0xffffffff, 0x24262830, },
-+	{ 0, 0, 0, 0x00000c44, 0x0000ffff, 0x00002022, },
-+	{ 1, 0, 0, 0x00000c24, 0xffffffff, 0x34343636, },
-+	{ 1, 0, 0, 0x00000c28, 0xffffffff, 0x26283032, },
-+	{ 1, 0, 0, 0x00000c2c, 0xffffffff, 0x32343636, },
-+	{ 1, 0, 0, 0x00000c30, 0xffffffff, 0x24262830, },
-+	{ 1, 0, 0, 0x00000c3c, 0xffffffff, 0x32343636, },
-+	{ 1, 0, 0, 0x00000c40, 0xffffffff, 0x24262830, },
-+	{ 1, 0, 0, 0x00000c44, 0x0000ffff, 0x00002022, },
-+};
-+
-+RTW_DECL_TABLE_BB_PG(rtw8821a_bb_pg);
-+
-+static const u32 rtw8821a_rf_a[] = {
-+	0x018, 0x0001712A,
-+	0x056, 0x00051CF2,
-+	0x066, 0x00040000,
-+	0x000, 0x00010000,
-+	0x01E, 0x00080000,
-+	0x082, 0x00000830,
-+	0x083, 0x00021800,
-+	0x084, 0x00028000,
-+	0x085, 0x00048000,
-+	0x80000111,	0x00000000,	0x40000000,	0x00000000,
-+	0x086, 0x0009483A,
-+	0xA0000000,	0x00000000,
-+	0x086, 0x00094838,
-+	0xB0000000,	0x00000000,
-+	0x087, 0x00044980,
-+	0x088, 0x00048000,
-+	0x089, 0x0000D480,
-+	0x08A, 0x00042240,
-+	0x08B, 0x000F0380,
-+	0x08C, 0x00090000,
-+	0x08D, 0x00022852,
-+	0x08E, 0x00065540,
-+	0x08F, 0x00088001,
-+	0x0EF, 0x00020000,
-+	0x03E, 0x00000380,
-+	0x03F, 0x00090018,
-+	0x03E, 0x00020380,
-+	0x03F, 0x000A0018,
-+	0x03E, 0x00040308,
-+	0x03F, 0x000A0018,
-+	0x03E, 0x00060018,
-+	0x03F, 0x000A0018,
-+	0x0EF, 0x00000000,
-+	0x018, 0x0001712A,
-+	0x089, 0x00000080,
-+	0x08B, 0x00080180,
-+	0x0EF, 0x00001000,
-+	0x03A, 0x00000244,
-+	0x03B, 0x00038027,
-+	0x03C, 0x00082000,
-+	0x03A, 0x00000244,
-+	0x03B, 0x00030113,
-+	0x03C, 0x00082000,
-+	0x03A, 0x0000014C,
-+	0x03B, 0x00028027,
-+	0x03C, 0x00082000,
-+	0x03A, 0x000000CC,
-+	0x03B, 0x00027027,
-+	0x03C, 0x00042000,
-+	0x03A, 0x0000014C,
-+	0x03B, 0x0001F913,
-+	0x03C, 0x00042000,
-+	0x03A, 0x0000010C,
-+	0x03B, 0x00017F10,
-+	0x03C, 0x00012000,
-+	0x03A, 0x000000D0,
-+	0x03B, 0x00008027,
-+	0x03C, 0x000CA000,
-+	0x03A, 0x00000244,
-+	0x03B, 0x00078027,
-+	0x03C, 0x00082000,
-+	0x03A, 0x00000244,
-+	0x03B, 0x00070113,
-+	0x03C, 0x00082000,
-+	0x03A, 0x0000014C,
-+	0x03B, 0x00068027,
-+	0x03C, 0x00082000,
-+	0x03A, 0x000000CC,
-+	0x03B, 0x00067027,
-+	0x03C, 0x00042000,
-+	0x03A, 0x0000014C,
-+	0x03B, 0x0005F913,
-+	0x03C, 0x00042000,
-+	0x03A, 0x0000010C,
-+	0x03B, 0x00057F10,
-+	0x03C, 0x00012000,
-+	0x03A, 0x000000D0,
-+	0x03B, 0x00048027,
-+	0x03C, 0x000CA000,
-+	0x03A, 0x00000244,
-+	0x03B, 0x000B8027,
-+	0x03C, 0x00082000,
-+	0x03A, 0x00000244,
-+	0x03B, 0x000B0113,
-+	0x03C, 0x00082000,
-+	0x03A, 0x0000014C,
-+	0x03B, 0x000A8027,
-+	0x03C, 0x00082000,
-+	0x03A, 0x000000CC,
-+	0x03B, 0x000A7027,
-+	0x03C, 0x00042000,
-+	0x03A, 0x0000014C,
-+	0x03B, 0x0009F913,
-+	0x03C, 0x00042000,
-+	0x03A, 0x0000010C,
-+	0x03B, 0x00097F10,
-+	0x03C, 0x00012000,
-+	0x03A, 0x000000D0,
-+	0x03B, 0x00088027,
-+	0x03C, 0x000CA000,
-+	0x0EF, 0x00000000,
-+	0x0EF, 0x00001100,
-+	0x80000111,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0004ADF3,
-+	0x034, 0x00049DF0,
-+	0x90000110,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0004ADF3,
-+	0x034, 0x00049DF0,
-+	0x90000210,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0004ADF5,
-+	0x034, 0x00049DF2,
-+	0x9000020c,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0004A0F3,
-+	0x034, 0x000490B1,
-+	0x9000040c,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0004A0F3,
-+	0x034, 0x000490B1,
-+	0x90000200,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0004ADF5,
-+	0x034, 0x00049DF2,
-+	0x90000410,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0004ADF3,
-+	0x034, 0x00049DF0,
-+	0xA0000000,	0x00000000,
-+	0x034, 0x0004ADF7,
-+	0x034, 0x00049DF3,
-+	0xB0000000,	0x00000000,
-+	0x80000111,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x00048DED,
-+	0x034, 0x00047DEA,
-+	0x034, 0x00046DE7,
-+	0x034, 0x00045CE9,
-+	0x034, 0x00044CE6,
-+	0x034, 0x000438C6,
-+	0x034, 0x00042886,
-+	0x034, 0x00041486,
-+	0x034, 0x00040447,
-+	0x90000110,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x00048DED,
-+	0x034, 0x00047DEA,
-+	0x034, 0x00046DE7,
-+	0x034, 0x00045CE9,
-+	0x034, 0x00044CE6,
-+	0x034, 0x000438C6,
-+	0x034, 0x00042886,
-+	0x034, 0x00041486,
-+	0x034, 0x00040447,
-+	0x9000020c,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x000480AE,
-+	0x034, 0x000470AB,
-+	0x034, 0x0004608B,
-+	0x034, 0x00045069,
-+	0x034, 0x00044048,
-+	0x034, 0x00043045,
-+	0x034, 0x00042026,
-+	0x034, 0x00041023,
-+	0x034, 0x00040002,
-+	0x9000040c,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x000480AE,
-+	0x034, 0x000470AB,
-+	0x034, 0x0004608B,
-+	0x034, 0x00045069,
-+	0x034, 0x00044048,
-+	0x034, 0x00043045,
-+	0x034, 0x00042026,
-+	0x034, 0x00041023,
-+	0x034, 0x00040002,
-+	0x90000410,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x00048DED,
-+	0x034, 0x00047DEA,
-+	0x034, 0x00046DE7,
-+	0x034, 0x00045CE9,
-+	0x034, 0x00044CE6,
-+	0x034, 0x000438C6,
-+	0x034, 0x00042886,
-+	0x034, 0x00041486,
-+	0x034, 0x00040447,
-+	0xA0000000,	0x00000000,
-+	0x034, 0x00048DEF,
-+	0x034, 0x00047DEC,
-+	0x034, 0x00046DE9,
-+	0x034, 0x00045CCB,
-+	0x034, 0x0004488D,
-+	0x034, 0x0004348D,
-+	0x034, 0x0004248A,
-+	0x034, 0x0004108D,
-+	0x034, 0x0004008A,
-+	0xB0000000,	0x00000000,
-+	0x80000210,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0002ADF4,
-+	0x9000020c,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0002A0F3,
-+	0x9000040c,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0002A0F3,
-+	0x90000200,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0002ADF4,
-+	0xA0000000,	0x00000000,
-+	0x034, 0x0002ADF7,
-+	0xB0000000,	0x00000000,
-+	0x80000111,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x00029DF4,
-+	0x90000110,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x00029DF4,
-+	0x90000210,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x00029DF1,
-+	0x9000020c,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x000290F0,
-+	0x9000040c,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x000290F0,
-+	0x90000200,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x00029DF1,
-+	0x90000410,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x00029DF4,
-+	0xA0000000,	0x00000000,
-+	0x034, 0x00029DF2,
-+	0xB0000000,	0x00000000,
-+	0x80000111,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x00028DF1,
-+	0x034, 0x00027DEE,
-+	0x034, 0x00026DEB,
-+	0x034, 0x00025CEC,
-+	0x034, 0x00024CE9,
-+	0x034, 0x000238CA,
-+	0x034, 0x00022889,
-+	0x034, 0x00021489,
-+	0x034, 0x0002044A,
-+	0x90000110,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x00028DF1,
-+	0x034, 0x00027DEE,
-+	0x034, 0x00026DEB,
-+	0x034, 0x00025CEC,
-+	0x034, 0x00024CE9,
-+	0x034, 0x000238CA,
-+	0x034, 0x00022889,
-+	0x034, 0x00021489,
-+	0x034, 0x0002044A,
-+	0x9000020c,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x000280AF,
-+	0x034, 0x000270AC,
-+	0x034, 0x0002608B,
-+	0x034, 0x00025069,
-+	0x034, 0x00024048,
-+	0x034, 0x00023045,
-+	0x034, 0x00022026,
-+	0x034, 0x00021023,
-+	0x034, 0x00020002,
-+	0x9000040c,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x000280AF,
-+	0x034, 0x000270AC,
-+	0x034, 0x0002608B,
-+	0x034, 0x00025069,
-+	0x034, 0x00024048,
-+	0x034, 0x00023045,
-+	0x034, 0x00022026,
-+	0x034, 0x00021023,
-+	0x034, 0x00020002,
-+	0x90000410,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x00028DF1,
-+	0x034, 0x00027DEE,
-+	0x034, 0x00026DEB,
-+	0x034, 0x00025CEC,
-+	0x034, 0x00024CE9,
-+	0x034, 0x000238CA,
-+	0x034, 0x00022889,
-+	0x034, 0x00021489,
-+	0x034, 0x0002044A,
-+	0xA0000000,	0x00000000,
-+	0x034, 0x00028DEE,
-+	0x034, 0x00027DEB,
-+	0x034, 0x00026CCD,
-+	0x034, 0x00025CCA,
-+	0x034, 0x0002488C,
-+	0x034, 0x0002384C,
-+	0x034, 0x00022849,
-+	0x034, 0x00021449,
-+	0x034, 0x0002004D,
-+	0xB0000000,	0x00000000,
-+	0x8000020c,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0000A0D7,
-+	0x034, 0x000090D3,
-+	0x034, 0x000080B1,
-+	0x034, 0x000070AE,
-+	0x9000040c,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0000A0D7,
-+	0x034, 0x000090D3,
-+	0x034, 0x000080B1,
-+	0x034, 0x000070AE,
-+	0xA0000000,	0x00000000,
-+	0x034, 0x0000ADF7,
-+	0x034, 0x00009DF4,
-+	0x034, 0x00008DF1,
-+	0x034, 0x00007DEE,
-+	0xB0000000,	0x00000000,
-+	0x80000111,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x00006DEB,
-+	0x034, 0x00005CEC,
-+	0x034, 0x00004CE9,
-+	0x034, 0x000038CA,
-+	0x034, 0x00002889,
-+	0x034, 0x00001489,
-+	0x034, 0x0000044A,
-+	0x90000110,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x00006DEB,
-+	0x034, 0x00005CEC,
-+	0x034, 0x00004CE9,
-+	0x034, 0x000038CA,
-+	0x034, 0x00002889,
-+	0x034, 0x00001489,
-+	0x034, 0x0000044A,
-+	0x9000020c,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0000608D,
-+	0x034, 0x0000506B,
-+	0x034, 0x0000404A,
-+	0x034, 0x00003047,
-+	0x034, 0x00002044,
-+	0x034, 0x00001025,
-+	0x034, 0x00000004,
-+	0x9000040c,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x0000608D,
-+	0x034, 0x0000506B,
-+	0x034, 0x0000404A,
-+	0x034, 0x00003047,
-+	0x034, 0x00002044,
-+	0x034, 0x00001025,
-+	0x034, 0x00000004,
-+	0x90000410,	0x00000000,	0x40000000,	0x00000000,
-+	0x034, 0x00006DEB,
-+	0x034, 0x00005CEC,
-+	0x034, 0x00004CE9,
-+	0x034, 0x000038CA,
-+	0x034, 0x00002889,
-+	0x034, 0x00001489,
-+	0x034, 0x0000044A,
-+	0xA0000000,	0x00000000,
-+	0x034, 0x00006DCD,
-+	0x034, 0x00005CCD,
-+	0x034, 0x00004CCA,
-+	0x034, 0x0000388C,
-+	0x034, 0x00002888,
-+	0x034, 0x00001488,
-+	0x034, 0x00000486,
-+	0xB0000000,	0x00000000,
-+	0x0EF, 0x00000000,
-+	0x018, 0x0001712A,
-+	0x0EF, 0x00000040,
-+	0x80000111,	0x00000000,	0x40000000,	0x00000000,
-+	0x035, 0x00000187,
-+	0x035, 0x00008187,
-+	0x035, 0x00010187,
-+	0x035, 0x00020188,
-+	0x035, 0x00028188,
-+	0x035, 0x00030188,
-+	0x035, 0x00040188,
-+	0x035, 0x00048188,
-+	0x035, 0x00050188,
-+	0x90000110,	0x00000000,	0x40000000,	0x00000000,
-+	0x035, 0x00000187,
-+	0x035, 0x00008187,
-+	0x035, 0x00010187,
-+	0x035, 0x00020188,
-+	0x035, 0x00028188,
-+	0x035, 0x00030188,
-+	0x035, 0x00040188,
-+	0x035, 0x00048188,
-+	0x035, 0x00050188,
-+	0x90000210,	0x00000000,	0x40000000,	0x00000000,
-+	0x035, 0x00000128,
-+	0x035, 0x00008128,
-+	0x035, 0x00010128,
-+	0x035, 0x000201C8,
-+	0x035, 0x000281C8,
-+	0x035, 0x000301C8,
-+	0x035, 0x000401C8,
-+	0x035, 0x000481C8,
-+	0x035, 0x000501C8,
-+	0x9000040c,	0x00000000,	0x40000000,	0x00000000,
-+	0x035, 0x00000145,
-+	0x035, 0x00008145,
-+	0x035, 0x00010145,
-+	0x035, 0x00020196,
-+	0x035, 0x00028196,
-+	0x035, 0x00030196,
-+	0x035, 0x000401C7,
-+	0x035, 0x000481C7,
-+	0x035, 0x000501C7,
-+	0x90000200,	0x00000000,	0x40000000,	0x00000000,
-+	0x035, 0x00000128,
-+	0x035, 0x00008128,
-+	0x035, 0x00010128,
-+	0x035, 0x000201C8,
-+	0x035, 0x000281C8,
-+	0x035, 0x000301C8,
-+	0x035, 0x000401C8,
-+	0x035, 0x000481C8,
-+	0x035, 0x000501C8,
-+	0x90000410,	0x00000000,	0x40000000,	0x00000000,
-+	0x035, 0x00000187,
-+	0x035, 0x00008187,
-+	0x035, 0x00010187,
-+	0x035, 0x00020188,
-+	0x035, 0x00028188,
-+	0x035, 0x00030188,
-+	0x035, 0x00040188,
-+	0x035, 0x00048188,
-+	0x035, 0x00050188,
-+	0xA0000000,	0x00000000,
-+	0x035, 0x00000145,
-+	0x035, 0x00008145,
-+	0x035, 0x00010145,
-+	0x035, 0x00020196,
-+	0x035, 0x00028196,
-+	0x035, 0x00030196,
-+	0x035, 0x000401C7,
-+	0x035, 0x000481C7,
-+	0x035, 0x000501C7,
-+	0xB0000000,	0x00000000,
-+	0x0EF, 0x00000000,
-+	0x018, 0x0001712A,
-+	0x0EF, 0x00000010,
-+	0x80000111,	0x00000000,	0x40000000,	0x00000000,
-+	0x036, 0x00085733,
-+	0x036, 0x0008D733,
-+	0x036, 0x00095733,
-+	0x036, 0x0009D733,
-+	0x036, 0x000A64B4,
-+	0x036, 0x000AE4B4,
-+	0x036, 0x000B64B4,
-+	0x036, 0x000BE4B4,
-+	0x036, 0x000C64B4,
-+	0x036, 0x000CE4B4,
-+	0x036, 0x000D64B4,
-+	0x036, 0x000DE4B4,
-+	0x90000110,	0x00000000,	0x40000000,	0x00000000,
-+	0x036, 0x00085733,
-+	0x036, 0x0008D733,
-+	0x036, 0x00095733,
-+	0x036, 0x0009D733,
-+	0x036, 0x000A64B4,
-+	0x036, 0x000AE4B4,
-+	0x036, 0x000B64B4,
-+	0x036, 0x000BE4B4,
-+	0x036, 0x000C64B4,
-+	0x036, 0x000CE4B4,
-+	0x036, 0x000D64B4,
-+	0x036, 0x000DE4B4,
-+	0x90000210,	0x00000000,	0x40000000,	0x00000000,
-+	0x036, 0x000063B5,
-+	0x036, 0x0000E3B5,
-+	0x036, 0x000163B5,
-+	0x036, 0x0001E3B5,
-+	0x036, 0x000263B5,
-+	0x036, 0x0002E3B5,
-+	0x036, 0x000363B5,
-+	0x036, 0x0003E3B5,
-+	0x036, 0x000463B5,
-+	0x036, 0x0004E3B5,
-+	0x036, 0x000563B5,
-+	0x036, 0x0005E3B5,
-+	0x9000040c,	0x00000000,	0x40000000,	0x00000000,
-+	0x036, 0x000056B3,
-+	0x036, 0x0000D6B3,
-+	0x036, 0x000156B3,
-+	0x036, 0x0001D6B3,
-+	0x036, 0x00026634,
-+	0x036, 0x0002E634,
-+	0x036, 0x00036634,
-+	0x036, 0x0003E634,
-+	0x036, 0x000467B4,
-+	0x036, 0x0004E7B4,
-+	0x036, 0x000567B4,
-+	0x036, 0x0005E7B4,
-+	0x90000200,	0x00000000,	0x40000000,	0x00000000,
-+	0x036, 0x000063B5,
-+	0x036, 0x0000E3B5,
-+	0x036, 0x000163B5,
-+	0x036, 0x0001E3B5,
-+	0x036, 0x000263B5,
-+	0x036, 0x0002E3B5,
-+	0x036, 0x000363B5,
-+	0x036, 0x0003E3B5,
-+	0x036, 0x000463B5,
-+	0x036, 0x0004E3B5,
-+	0x036, 0x000563B5,
-+	0x036, 0x0005E3B5,
-+	0x90000410,	0x00000000,	0x40000000,	0x00000000,
-+	0x036, 0x00085733,
-+	0x036, 0x0008D733,
-+	0x036, 0x00095733,
-+	0x036, 0x0009D733,
-+	0x036, 0x000A64B4,
-+	0x036, 0x000AE4B4,
-+	0x036, 0x000B64B4,
-+	0x036, 0x000BE4B4,
-+	0x036, 0x000C64B4,
-+	0x036, 0x000CE4B4,
-+	0x036, 0x000D64B4,
-+	0x036, 0x000DE4B4,
-+	0xA0000000,	0x00000000,
-+	0x036, 0x000056B3,
-+	0x036, 0x0000D6B3,
-+	0x036, 0x000156B3,
-+	0x036, 0x0001D6B3,
-+	0x036, 0x00026634,
-+	0x036, 0x0002E634,
-+	0x036, 0x00036634,
-+	0x036, 0x0003E634,
-+	0x036, 0x000467B4,
-+	0x036, 0x0004E7B4,
-+	0x036, 0x000567B4,
-+	0x036, 0x0005E7B4,
-+	0xB0000000,	0x00000000,
-+	0x0EF, 0x00000000,
-+	0x0EF, 0x00000008,
-+	0x80000111,	0x00000000,	0x40000000,	0x00000000,
-+	0x03C, 0x000001C8,
-+	0x03C, 0x00000492,
-+	0x90000110,	0x00000000,	0x40000000,	0x00000000,
-+	0x03C, 0x000001C8,
-+	0x03C, 0x00000492,
-+	0x90000210,	0x00000000,	0x40000000,	0x00000000,
-+	0x03C, 0x000001B6,
-+	0x03C, 0x00000492,
-+	0x9000040c,	0x00000000,	0x40000000,	0x00000000,
-+	0x03C, 0x0000022A,
-+	0x03C, 0x00000594,
-+	0x90000200,	0x00000000,	0x40000000,	0x00000000,
-+	0x03C, 0x000001B6,
-+	0x03C, 0x00000492,
-+	0x90000410,	0x00000000,	0x40000000,	0x00000000,
-+	0x03C, 0x000001C8,
-+	0x03C, 0x00000492,
-+	0xA0000000,	0x00000000,
-+	0x03C, 0x0000022A,
-+	0x03C, 0x00000594,
-+	0xB0000000,	0x00000000,
-+	0x80000111,	0x00000000,	0x40000000,	0x00000000,
-+	0x03C, 0x00000800,
-+	0x90000110,	0x00000000,	0x40000000,	0x00000000,
-+	0x03C, 0x00000800,
-+	0x90000210,	0x00000000,	0x40000000,	0x00000000,
-+	0x03C, 0x00000800,
-+	0x9000020c,	0x00000000,	0x40000000,	0x00000000,
-+	0x03C, 0x00000820,
-+	0x9000040c,	0x00000000,	0x40000000,	0x00000000,
-+	0x03C, 0x00000820,
-+	0x90000200,	0x00000000,	0x40000000,	0x00000000,
-+	0x03C, 0x00000800,
-+	0x90000410,	0x00000000,	0x40000000,	0x00000000,
-+	0x03C, 0x00000800,
-+	0xA0000000,	0x00000000,
-+	0x03C, 0x00000900,
-+	0xB0000000,	0x00000000,
-+	0x0EF, 0x00000000,
-+	0x018, 0x0001712A,
-+	0x0EF, 0x00000002,
-+	0x80000111,	0x00000000,	0x40000000,	0x00000000,
-+	0x008, 0x0004E400,
-+	0x90000110,	0x00000000,	0x40000000,	0x00000000,
-+	0x008, 0x0004E400,
-+	0x90000210,	0x00000000,	0x40000000,	0x00000000,
-+	0x008, 0x00002000,
-+	0x9000020c,	0x00000000,	0x40000000,	0x00000000,
-+	0x008, 0x00002000,
-+	0x9000040c,	0x00000000,	0x40000000,	0x00000000,
-+	0x008, 0x00002000,
-+	0x90000200,	0x00000000,	0x40000000,	0x00000000,
-+	0x008, 0x00002000,
-+	0x90000410,	0x00000000,	0x40000000,	0x00000000,
-+	0x008, 0x0004E400,
-+	0xA0000000,	0x00000000,
-+	0x008, 0x00002000,
-+	0xB0000000,	0x00000000,
-+	0x0EF, 0x00000000,
-+	0x0DF, 0x000000C0,
-+	0x01F, 0x00000064,
-+	0x80000111,	0x00000000,	0x40000000,	0x00000000,
-+	0x058, 0x000A7284,
-+	0x059, 0x000600EC,
-+	0x90000110,	0x00000000,	0x40000000,	0x00000000,
-+	0x058, 0x000A7284,
-+	0x059, 0x000600EC,
-+	0x9000020c,	0x00000000,	0x40000000,	0x00000000,
-+	0x058, 0x00081184,
-+	0x059, 0x0006016C,
-+	0x9000040c,	0x00000000,	0x40000000,	0x00000000,
-+	0x058, 0x00081184,
-+	0x059, 0x0006016C,
-+	0x90000200,	0x00000000,	0x40000000,	0x00000000,
-+	0x058, 0x00081184,
-+	0x059, 0x0006016C,
-+	0x90000410,	0x00000000,	0x40000000,	0x00000000,
-+	0x058, 0x000A7284,
-+	0x059, 0x000600EC,
-+	0xA0000000,	0x00000000,
-+	0x058, 0x00081184,
-+	0x059, 0x0006016C,
-+	0xB0000000,	0x00000000,
-+	0x80000111,	0x00000000,	0x40000000,	0x00000000,
-+	0x061, 0x000E8D73,
-+	0x062, 0x00093FC5,
-+	0x90000110,	0x00000000,	0x40000000,	0x00000000,
-+	0x061, 0x000E8D73,
-+	0x062, 0x00093FC5,
-+	0x90000210,	0x00000000,	0x40000000,	0x00000000,
-+	0x061, 0x000EFD83,
-+	0x062, 0x00093FCC,
-+	0x9000040c,	0x00000000,	0x40000000,	0x00000000,
-+	0x061, 0x000EAD53,
-+	0x062, 0x00093BC4,
-+	0x90000200,	0x00000000,	0x40000000,	0x00000000,
-+	0x061, 0x000EFD83,
-+	0x062, 0x00093FCC,
-+	0x90000410,	0x00000000,	0x40000000,	0x00000000,
-+	0x061, 0x000E8D73,
-+	0x062, 0x00093FC5,
-+	0xA0000000,	0x00000000,
-+	0x061, 0x000EAD53,
-+	0x062, 0x00093BC4,
-+	0xB0000000,	0x00000000,
-+	0x80000111,	0x00000000,	0x40000000,	0x00000000,
-+	0x063, 0x000110E9,
-+	0x90000110,	0x00000000,	0x40000000,	0x00000000,
-+	0x063, 0x000110E9,
-+	0x90000210,	0x00000000,	0x40000000,	0x00000000,
-+	0x063, 0x000110EB,
-+	0x9000020c,	0x00000000,	0x40000000,	0x00000000,
-+	0x063, 0x000110E9,
-+	0x9000040c,	0x00000000,	0x40000000,	0x00000000,
-+	0x063, 0x000110E9,
-+	0x90000200,	0x00000000,	0x40000000,	0x00000000,
-+	0x063, 0x000110EB,
-+	0x90000410,	0x00000000,	0x40000000,	0x00000000,
-+	0x063, 0x000110E9,
-+	0xA0000000,	0x00000000,
-+	0x063, 0x000714E9,
-+	0xB0000000,	0x00000000,
-+	0x80000111,	0x00000000,	0x40000000,	0x00000000,
-+	0x064, 0x0001C27C,
-+	0x90000110,	0x00000000,	0x40000000,	0x00000000,
-+	0x064, 0x0001C27C,
-+	0x90000210,	0x00000000,	0x40000000,	0x00000000,
-+	0x064, 0x0001C27C,
-+	0x9000040c,	0x00000000,	0x40000000,	0x00000000,
-+	0x064, 0x0001C67C,
-+	0x90000200,	0x00000000,	0x40000000,	0x00000000,
-+	0x064, 0x0001C27C,
-+	0x90000410,	0x00000000,	0x40000000,	0x00000000,
-+	0x064, 0x0001C27C,
-+	0xA0000000,	0x00000000,
-+	0x064, 0x0001C67C,
-+	0xB0000000,	0x00000000,
-+	0x80000111,	0x00000000,	0x40000000,	0x00000000,
-+	0x065, 0x00091016,
-+	0x90000110,	0x00000000,	0x40000000,	0x00000000,
-+	0x065, 0x00091016,
-+	0x90000210,	0x00000000,	0x40000000,	0x00000000,
-+	0x065, 0x00093016,
-+	0x9000020c,	0x00000000,	0x40000000,	0x00000000,
-+	0x065, 0x00093015,
-+	0x9000040c,	0x00000000,	0x40000000,	0x00000000,
-+	0x065, 0x00093015,
-+	0x90000200,	0x00000000,	0x40000000,	0x00000000,
-+	0x065, 0x00093016,
-+	0xA0000000,	0x00000000,
-+	0x065, 0x00091016,
-+	0xB0000000,	0x00000000,
-+	0x018, 0x00000006,
-+	0x0EF, 0x00002000,
-+	0x03B, 0x0003824B,
-+	0x03B, 0x0003024B,
-+	0x03B, 0x0002844B,
-+	0x03B, 0x00020F4B,
-+	0x03B, 0x00018F4B,
-+	0x03B, 0x000104B2,
-+	0x03B, 0x00008049,
-+	0x03B, 0x00000148,
-+	0x03B, 0x0007824B,
-+	0x03B, 0x0007024B,
-+	0x03B, 0x0006824B,
-+	0x03B, 0x00060F4B,
-+	0x03B, 0x00058F4B,
-+	0x03B, 0x000504B2,
-+	0x03B, 0x00048049,
-+	0x03B, 0x00040148,
-+	0x0EF, 0x00000000,
-+	0x0EF, 0x00000100,
-+	0x034, 0x0000ADF3,
-+	0x034, 0x00009DF0,
-+	0x034, 0x00008D70,
-+	0x034, 0x00007D6D,
-+	0x034, 0x00006CEE,
-+	0x034, 0x00005CCC,
-+	0x034, 0x000044EC,
-+	0x034, 0x000034AC,
-+	0x034, 0x0000246D,
-+	0x034, 0x0000106F,
-+	0x034, 0x0000006C,
-+	0x0EF, 0x00000000,
-+	0x0ED, 0x00000010,
-+	0x044, 0x0000ADF2,
-+	0x044, 0x00009DEF,
-+	0x044, 0x00008DEC,
-+	0x044, 0x00007DE9,
-+	0x044, 0x00006CEC,
-+	0x044, 0x00005CE9,
-+	0x044, 0x000044EC,
-+	0x044, 0x000034E9,
-+	0x044, 0x0000246C,
-+	0x044, 0x00001469,
-+	0x044, 0x0000006C,
-+	0x0ED, 0x00000000,
-+	0x0ED, 0x00000001,
-+	0x040, 0x00038DA7,
-+	0x040, 0x000300C2,
-+	0x040, 0x000288E2,
-+	0x040, 0x000200B8,
-+	0x040, 0x000188A5,
-+	0x040, 0x00010FBC,
-+	0x040, 0x00008F71,
-+	0x040, 0x00000240,
-+	0x0ED, 0x00000000,
-+	0x0EF, 0x000020A2,
-+	0x0DF, 0x00000080,
-+	0x035, 0x00000120,
-+	0x035, 0x00008120,
-+	0x035, 0x00010120,
-+	0x036, 0x00000085,
-+	0x036, 0x00008085,
-+	0x036, 0x00010085,
-+	0x036, 0x00018085,
-+	0x0EF, 0x00000000,
-+	0x051, 0x00000C31,
-+	0x052, 0x00000622,
-+	0x053, 0x000FC70B,
-+	0x054, 0x0000017E,
-+	0x056, 0x00051DF3,
-+	0x051, 0x00000C01,
-+	0x052, 0x000006D6,
-+	0x053, 0x000FC649,
-+	0x070, 0x00049661,
-+	0x071, 0x0007843E,
-+	0x072, 0x00000382,
-+	0x074, 0x00051400,
-+	0x035, 0x00000160,
-+	0x035, 0x00008160,
-+	0x035, 0x00010160,
-+	0x036, 0x00000124,
-+	0x036, 0x00008124,
-+	0x036, 0x00010124,
-+	0x036, 0x00018124,
-+	0x0ED, 0x0000000C,
-+	0x045, 0x00000140,
-+	0x045, 0x00008140,
-+	0x045, 0x00010140,
-+	0x046, 0x00000124,
-+	0x046, 0x00008124,
-+	0x046, 0x00010124,
-+	0x046, 0x00018124,
-+	0x0DF, 0x00000088,
-+	0x0B3, 0x000F0E18,
-+	0x0B4, 0x0001214C,
-+	0x0B7, 0x0003000C,
-+	0x01C, 0x000539D2,
-+	0x0C4, 0x000AFE00,
-+	0x018, 0x0001F12A,
-+	0xFFE, 0x00000000,
-+	0xFFE, 0x00000000,
-+	0x018, 0x0001712A,
-+};
-+
-+RTW_DECL_TABLE_RF_RADIO(rtw8821a_rf_a, A);
-+
-+static const struct rtw_txpwr_lmt_cfg_pair rtw8821a_txpwr_lmt[] = {
-+	{ 0, 0, 0, 0, 1, 32, },
-+	{ 2, 0, 0, 0, 1, 28, },
-+	{ 1, 0, 0, 0, 1, 32, },
-+	{ 0, 0, 0, 0, 2, 32, },
-+	{ 2, 0, 0, 0, 2, 28, },
-+	{ 1, 0, 0, 0, 2, 32, },
-+	{ 0, 0, 0, 0, 3, 36, },
-+	{ 2, 0, 0, 0, 3, 28, },
-+	{ 1, 0, 0, 0, 3, 32, },
-+	{ 0, 0, 0, 0, 4, 36, },
-+	{ 2, 0, 0, 0, 4, 28, },
-+	{ 1, 0, 0, 0, 4, 32, },
-+	{ 0, 0, 0, 0, 5, 36, },
-+	{ 2, 0, 0, 0, 5, 28, },
-+	{ 1, 0, 0, 0, 5, 32, },
-+	{ 0, 0, 0, 0, 6, 36, },
-+	{ 2, 0, 0, 0, 6, 28, },
-+	{ 1, 0, 0, 0, 6, 32, },
-+	{ 0, 0, 0, 0, 7, 36, },
-+	{ 2, 0, 0, 0, 7, 28, },
-+	{ 1, 0, 0, 0, 7, 32, },
-+	{ 0, 0, 0, 0, 8, 36, },
-+	{ 2, 0, 0, 0, 8, 28, },
-+	{ 1, 0, 0, 0, 8, 32, },
-+	{ 0, 0, 0, 0, 9, 32, },
-+	{ 2, 0, 0, 0, 9, 28, },
-+	{ 1, 0, 0, 0, 9, 32, },
-+	{ 0, 0, 0, 0, 10, 32, },
-+	{ 2, 0, 0, 0, 10, 28, },
-+	{ 1, 0, 0, 0, 10, 32, },
-+	{ 0, 0, 0, 0, 11, 32, },
-+	{ 2, 0, 0, 0, 11, 28, },
-+	{ 1, 0, 0, 0, 11, 32, },
-+	{ 0, 0, 0, 0, 12, 28, },
-+	{ 2, 0, 0, 0, 12, 28, },
-+	{ 1, 0, 0, 0, 12, 32, },
-+	{ 0, 0, 0, 0, 13, 26, },
-+	{ 2, 0, 0, 0, 13, 28, },
-+	{ 1, 0, 0, 0, 13, 32, },
-+	{ 0, 0, 0, 0, 14, 63, },
-+	{ 2, 0, 0, 0, 14, 63, },
-+	{ 1, 0, 0, 0, 14, 32, },
-+	{ 0, 0, 0, 1, 1, 30, },
-+	{ 2, 0, 0, 1, 1, 30, },
-+	{ 1, 0, 0, 1, 1, 32, },
-+	{ 0, 0, 0, 1, 2, 30, },
-+	{ 2, 0, 0, 1, 2, 32, },
-+	{ 1, 0, 0, 1, 2, 32, },
-+	{ 0, 0, 0, 1, 3, 32, },
-+	{ 2, 0, 0, 1, 3, 32, },
-+	{ 1, 0, 0, 1, 3, 32, },
-+	{ 0, 0, 0, 1, 4, 32, },
-+	{ 2, 0, 0, 1, 4, 32, },
-+	{ 1, 0, 0, 1, 4, 32, },
-+	{ 0, 0, 0, 1, 5, 32, },
-+	{ 2, 0, 0, 1, 5, 32, },
-+	{ 1, 0, 0, 1, 5, 32, },
-+	{ 0, 0, 0, 1, 6, 32, },
-+	{ 2, 0, 0, 1, 6, 32, },
-+	{ 1, 0, 0, 1, 6, 32, },
-+	{ 0, 0, 0, 1, 7, 32, },
-+	{ 2, 0, 0, 1, 7, 32, },
-+	{ 1, 0, 0, 1, 7, 32, },
-+	{ 0, 0, 0, 1, 8, 32, },
-+	{ 2, 0, 0, 1, 8, 32, },
-+	{ 1, 0, 0, 1, 8, 32, },
-+	{ 0, 0, 0, 1, 9, 30, },
-+	{ 2, 0, 0, 1, 9, 32, },
-+	{ 1, 0, 0, 1, 9, 32, },
-+	{ 0, 0, 0, 1, 10, 30, },
-+	{ 2, 0, 0, 1, 10, 32, },
-+	{ 1, 0, 0, 1, 10, 32, },
-+	{ 0, 0, 0, 1, 11, 30, },
-+	{ 2, 0, 0, 1, 11, 32, },
-+	{ 1, 0, 0, 1, 11, 32, },
-+	{ 0, 0, 0, 1, 12, 26, },
-+	{ 2, 0, 0, 1, 12, 32, },
-+	{ 1, 0, 0, 1, 12, 32, },
-+	{ 0, 0, 0, 1, 13, 24, },
-+	{ 2, 0, 0, 1, 13, 30, },
-+	{ 1, 0, 0, 1, 13, 32, },
-+	{ 0, 0, 0, 1, 14, 63, },
-+	{ 2, 0, 0, 1, 14, 63, },
-+	{ 1, 0, 0, 1, 14, 63, },
-+	{ 0, 0, 0, 2, 1, 26, },
-+	{ 2, 0, 0, 2, 1, 26, },
-+	{ 1, 0, 0, 2, 1, 32, },
-+	{ 0, 0, 0, 2, 2, 26, },
-+	{ 2, 0, 0, 2, 2, 32, },
-+	{ 1, 0, 0, 2, 2, 32, },
-+	{ 0, 0, 0, 2, 3, 32, },
-+	{ 2, 0, 0, 2, 3, 32, },
-+	{ 1, 0, 0, 2, 3, 32, },
-+	{ 0, 0, 0, 2, 4, 32, },
-+	{ 2, 0, 0, 2, 4, 32, },
-+	{ 1, 0, 0, 2, 4, 32, },
-+	{ 0, 0, 0, 2, 5, 32, },
-+	{ 2, 0, 0, 2, 5, 32, },
-+	{ 1, 0, 0, 2, 5, 32, },
-+	{ 0, 0, 0, 2, 6, 32, },
-+	{ 2, 0, 0, 2, 6, 32, },
-+	{ 1, 0, 0, 2, 6, 32, },
-+	{ 0, 0, 0, 2, 7, 32, },
-+	{ 2, 0, 0, 2, 7, 32, },
-+	{ 1, 0, 0, 2, 7, 32, },
-+	{ 0, 0, 0, 2, 8, 32, },
-+	{ 2, 0, 0, 2, 8, 32, },
-+	{ 1, 0, 0, 2, 8, 32, },
-+	{ 0, 0, 0, 2, 9, 26, },
-+	{ 2, 0, 0, 2, 9, 32, },
-+	{ 1, 0, 0, 2, 9, 32, },
-+	{ 0, 0, 0, 2, 10, 26, },
-+	{ 2, 0, 0, 2, 10, 32, },
-+	{ 1, 0, 0, 2, 10, 32, },
-+	{ 0, 0, 0, 2, 11, 26, },
-+	{ 2, 0, 0, 2, 11, 32, },
-+	{ 1, 0, 0, 2, 11, 32, },
-+	{ 0, 0, 0, 2, 12, 26, },
-+	{ 2, 0, 0, 2, 12, 32, },
-+	{ 1, 0, 0, 2, 12, 32, },
-+	{ 0, 0, 0, 2, 13, 24, },
-+	{ 2, 0, 0, 2, 13, 26, },
-+	{ 1, 0, 0, 2, 13, 32, },
-+	{ 0, 0, 0, 2, 14, 63, },
-+	{ 2, 0, 0, 2, 14, 63, },
-+	{ 1, 0, 0, 2, 14, 63, },
-+	{ 0, 0, 0, 3, 1, 30, },
-+	{ 2, 0, 0, 3, 1, 32, },
-+	{ 1, 0, 0, 3, 1, 32, },
-+	{ 0, 0, 0, 3, 2, 32, },
-+	{ 2, 0, 0, 3, 2, 32, },
-+	{ 1, 0, 0, 3, 2, 32, },
-+	{ 0, 0, 0, 3, 3, 32, },
-+	{ 2, 0, 0, 3, 3, 32, },
-+	{ 1, 0, 0, 3, 3, 32, },
-+	{ 0, 0, 0, 3, 4, 32, },
-+	{ 2, 0, 0, 3, 4, 32, },
-+	{ 1, 0, 0, 3, 4, 32, },
-+	{ 0, 0, 0, 3, 5, 32, },
-+	{ 2, 0, 0, 3, 5, 32, },
-+	{ 1, 0, 0, 3, 5, 32, },
-+	{ 0, 0, 0, 3, 6, 32, },
-+	{ 2, 0, 0, 3, 6, 32, },
-+	{ 1, 0, 0, 3, 6, 32, },
-+	{ 0, 0, 0, 3, 7, 32, },
-+	{ 2, 0, 0, 3, 7, 32, },
-+	{ 1, 0, 0, 3, 7, 32, },
-+	{ 0, 0, 0, 3, 8, 32, },
-+	{ 2, 0, 0, 3, 8, 32, },
-+	{ 1, 0, 0, 3, 8, 32, },
-+	{ 0, 0, 0, 3, 9, 32, },
-+	{ 2, 0, 0, 3, 9, 32, },
-+	{ 1, 0, 0, 3, 9, 32, },
-+	{ 0, 0, 0, 3, 10, 32, },
-+	{ 2, 0, 0, 3, 10, 32, },
-+	{ 1, 0, 0, 3, 10, 32, },
-+	{ 0, 0, 0, 3, 11, 30, },
-+	{ 2, 0, 0, 3, 11, 32, },
-+	{ 1, 0, 0, 3, 11, 32, },
-+	{ 0, 0, 0, 3, 12, 63, },
-+	{ 2, 0, 0, 3, 12, 32, },
-+	{ 1, 0, 0, 3, 12, 32, },
-+	{ 0, 0, 0, 3, 13, 63, },
-+	{ 2, 0, 0, 3, 13, 32, },
-+	{ 1, 0, 0, 3, 13, 32, },
-+	{ 0, 0, 0, 3, 14, 63, },
-+	{ 2, 0, 0, 3, 14, 63, },
-+	{ 1, 0, 0, 3, 14, 63, },
-+	{ 0, 0, 1, 2, 1, 63, },
-+	{ 2, 0, 1, 2, 1, 63, },
-+	{ 1, 0, 1, 2, 1, 63, },
-+	{ 0, 0, 1, 2, 2, 63, },
-+	{ 2, 0, 1, 2, 2, 63, },
-+	{ 1, 0, 1, 2, 2, 63, },
-+	{ 0, 0, 1, 2, 3, 26, },
-+	{ 2, 0, 1, 2, 3, 26, },
-+	{ 1, 0, 1, 2, 3, 32, },
-+	{ 0, 0, 1, 2, 4, 26, },
-+	{ 2, 0, 1, 2, 4, 32, },
-+	{ 1, 0, 1, 2, 4, 32, },
-+	{ 0, 0, 1, 2, 5, 26, },
-+	{ 2, 0, 1, 2, 5, 32, },
-+	{ 1, 0, 1, 2, 5, 32, },
-+	{ 0, 0, 1, 2, 6, 32, },
-+	{ 2, 0, 1, 2, 6, 32, },
-+	{ 1, 0, 1, 2, 6, 32, },
-+	{ 0, 0, 1, 2, 7, 32, },
-+	{ 2, 0, 1, 2, 7, 32, },
-+	{ 1, 0, 1, 2, 7, 32, },
-+	{ 0, 0, 1, 2, 8, 32, },
-+	{ 2, 0, 1, 2, 8, 32, },
-+	{ 1, 0, 1, 2, 8, 32, },
-+	{ 0, 0, 1, 2, 9, 26, },
-+	{ 2, 0, 1, 2, 9, 32, },
-+	{ 1, 0, 1, 2, 9, 32, },
-+	{ 0, 0, 1, 2, 10, 24, },
-+	{ 2, 0, 1, 2, 10, 32, },
-+	{ 1, 0, 1, 2, 10, 32, },
-+	{ 0, 0, 1, 2, 11, 22, },
-+	{ 2, 0, 1, 2, 11, 26, },
-+	{ 1, 0, 1, 2, 11, 32, },
-+	{ 0, 0, 1, 2, 12, 63, },
-+	{ 2, 0, 1, 2, 12, 63, },
-+	{ 1, 0, 1, 2, 12, 63, },
-+	{ 0, 0, 1, 2, 13, 63, },
-+	{ 2, 0, 1, 2, 13, 63, },
-+	{ 1, 0, 1, 2, 13, 63, },
-+	{ 0, 0, 1, 2, 14, 63, },
-+	{ 2, 0, 1, 2, 14, 63, },
-+	{ 1, 0, 1, 2, 14, 63, },
-+	{ 0, 0, 1, 3, 1, 63, },
-+	{ 2, 0, 1, 3, 1, 63, },
-+	{ 1, 0, 1, 3, 1, 63, },
-+	{ 0, 0, 1, 3, 2, 63, },
-+	{ 2, 0, 1, 3, 2, 63, },
-+	{ 1, 0, 1, 3, 2, 63, },
-+	{ 0, 0, 1, 3, 3, 30, },
-+	{ 2, 0, 1, 3, 3, 30, },
-+	{ 1, 0, 1, 3, 3, 30, },
-+	{ 0, 0, 1, 3, 4, 32, },
-+	{ 2, 0, 1, 3, 4, 30, },
-+	{ 1, 0, 1, 3, 4, 30, },
-+	{ 0, 0, 1, 3, 5, 32, },
-+	{ 2, 0, 1, 3, 5, 30, },
-+	{ 1, 0, 1, 3, 5, 30, },
-+	{ 0, 0, 1, 3, 6, 32, },
-+	{ 2, 0, 1, 3, 6, 30, },
-+	{ 1, 0, 1, 3, 6, 30, },
-+	{ 0, 0, 1, 3, 7, 32, },
-+	{ 2, 0, 1, 3, 7, 30, },
-+	{ 1, 0, 1, 3, 7, 30, },
-+	{ 0, 0, 1, 3, 8, 32, },
-+	{ 2, 0, 1, 3, 8, 30, },
-+	{ 1, 0, 1, 3, 8, 30, },
-+	{ 0, 0, 1, 3, 9, 32, },
-+	{ 2, 0, 1, 3, 9, 30, },
-+	{ 1, 0, 1, 3, 9, 30, },
-+	{ 0, 0, 1, 3, 10, 32, },
-+	{ 2, 0, 1, 3, 10, 30, },
-+	{ 1, 0, 1, 3, 10, 30, },
-+	{ 0, 0, 1, 3, 11, 30, },
-+	{ 2, 0, 1, 3, 11, 30, },
-+	{ 1, 0, 1, 3, 11, 30, },
-+	{ 0, 0, 1, 3, 12, 63, },
-+	{ 2, 0, 1, 3, 12, 32, },
-+	{ 1, 0, 1, 3, 12, 32, },
-+	{ 0, 0, 1, 3, 13, 63, },
-+	{ 2, 0, 1, 3, 13, 32, },
-+	{ 1, 0, 1, 3, 13, 32, },
-+	{ 0, 0, 1, 3, 14, 63, },
-+	{ 2, 0, 1, 3, 14, 63, },
-+	{ 1, 0, 1, 3, 14, 63, },
-+	{ 0, 1, 0, 1, 36, 32, },
-+	{ 2, 1, 0, 1, 36, 30, },
-+	{ 1, 1, 0, 1, 36, 30, },
-+	{ 0, 1, 0, 1, 40, 32, },
-+	{ 2, 1, 0, 1, 40, 30, },
-+	{ 1, 1, 0, 1, 40, 30, },
-+	{ 0, 1, 0, 1, 44, 32, },
-+	{ 2, 1, 0, 1, 44, 30, },
-+	{ 1, 1, 0, 1, 44, 30, },
-+	{ 0, 1, 0, 1, 48, 32, },
-+	{ 2, 1, 0, 1, 48, 30, },
-+	{ 1, 1, 0, 1, 48, 30, },
-+	{ 0, 1, 0, 1, 52, 32, },
-+	{ 2, 1, 0, 1, 52, 30, },
-+	{ 1, 1, 0, 1, 52, 30, },
-+	{ 0, 1, 0, 1, 56, 32, },
-+	{ 2, 1, 0, 1, 56, 30, },
-+	{ 1, 1, 0, 1, 56, 30, },
-+	{ 0, 1, 0, 1, 60, 32, },
-+	{ 2, 1, 0, 1, 60, 30, },
-+	{ 1, 1, 0, 1, 60, 30, },
-+	{ 0, 1, 0, 1, 64, 32, },
-+	{ 2, 1, 0, 1, 64, 30, },
-+	{ 1, 1, 0, 1, 64, 30, },
-+	{ 0, 1, 0, 1, 100, 32, },
-+	{ 2, 1, 0, 1, 100, 30, },
-+	{ 1, 1, 0, 1, 100, 30, },
-+	{ 0, 1, 0, 1, 104, 32, },
-+	{ 2, 1, 0, 1, 104, 30, },
-+	{ 1, 1, 0, 1, 104, 30, },
-+	{ 0, 1, 0, 1, 108, 32, },
-+	{ 2, 1, 0, 1, 108, 30, },
-+	{ 1, 1, 0, 1, 108, 30, },
-+	{ 0, 1, 0, 1, 112, 32, },
-+	{ 2, 1, 0, 1, 112, 30, },
-+	{ 1, 1, 0, 1, 112, 30, },
-+	{ 0, 1, 0, 1, 116, 32, },
-+	{ 2, 1, 0, 1, 116, 30, },
-+	{ 1, 1, 0, 1, 116, 30, },
-+	{ 0, 1, 0, 1, 120, 32, },
-+	{ 2, 1, 0, 1, 120, 30, },
-+	{ 1, 1, 0, 1, 120, 30, },
-+	{ 0, 1, 0, 1, 124, 32, },
-+	{ 2, 1, 0, 1, 124, 30, },
-+	{ 1, 1, 0, 1, 124, 30, },
-+	{ 0, 1, 0, 1, 128, 32, },
-+	{ 2, 1, 0, 1, 128, 30, },
-+	{ 1, 1, 0, 1, 128, 30, },
-+	{ 0, 1, 0, 1, 132, 32, },
-+	{ 2, 1, 0, 1, 132, 30, },
-+	{ 1, 1, 0, 1, 132, 30, },
-+	{ 0, 1, 0, 1, 136, 32, },
-+	{ 2, 1, 0, 1, 136, 30, },
-+	{ 1, 1, 0, 1, 136, 30, },
-+	{ 0, 1, 0, 1, 140, 32, },
-+	{ 2, 1, 0, 1, 140, 30, },
-+	{ 1, 1, 0, 1, 140, 30, },
-+	{ 0, 1, 0, 1, 149, 32, },
-+	{ 2, 1, 0, 1, 149, 30, },
-+	{ 1, 1, 0, 1, 149, 63, },
-+	{ 0, 1, 0, 1, 153, 32, },
-+	{ 2, 1, 0, 1, 153, 30, },
-+	{ 1, 1, 0, 1, 153, 63, },
-+	{ 0, 1, 0, 1, 157, 32, },
-+	{ 2, 1, 0, 1, 157, 30, },
-+	{ 1, 1, 0, 1, 157, 63, },
-+	{ 0, 1, 0, 1, 161, 32, },
-+	{ 2, 1, 0, 1, 161, 30, },
-+	{ 1, 1, 0, 1, 161, 63, },
-+	{ 0, 1, 0, 1, 165, 32, },
-+	{ 2, 1, 0, 1, 165, 30, },
-+	{ 1, 1, 0, 1, 165, 63, },
-+	{ 0, 1, 0, 2, 36, 32, },
-+	{ 2, 1, 0, 2, 36, 30, },
-+	{ 1, 1, 0, 2, 36, 30, },
-+	{ 0, 1, 0, 2, 40, 32, },
-+	{ 2, 1, 0, 2, 40, 30, },
-+	{ 1, 1, 0, 2, 40, 30, },
-+	{ 0, 1, 0, 2, 44, 32, },
-+	{ 2, 1, 0, 2, 44, 30, },
-+	{ 1, 1, 0, 2, 44, 30, },
-+	{ 0, 1, 0, 2, 48, 32, },
-+	{ 2, 1, 0, 2, 48, 30, },
-+	{ 1, 1, 0, 2, 48, 30, },
-+	{ 0, 1, 0, 2, 52, 32, },
-+	{ 2, 1, 0, 2, 52, 30, },
-+	{ 1, 1, 0, 2, 52, 30, },
-+	{ 0, 1, 0, 2, 56, 32, },
-+	{ 2, 1, 0, 2, 56, 30, },
-+	{ 1, 1, 0, 2, 56, 30, },
-+	{ 0, 1, 0, 2, 60, 32, },
-+	{ 2, 1, 0, 2, 60, 30, },
-+	{ 1, 1, 0, 2, 60, 30, },
-+	{ 0, 1, 0, 2, 64, 32, },
-+	{ 2, 1, 0, 2, 64, 30, },
-+	{ 1, 1, 0, 2, 64, 30, },
-+	{ 0, 1, 0, 2, 100, 32, },
-+	{ 2, 1, 0, 2, 100, 30, },
-+	{ 1, 1, 0, 2, 100, 30, },
-+	{ 0, 1, 0, 2, 104, 32, },
-+	{ 2, 1, 0, 2, 104, 30, },
-+	{ 1, 1, 0, 2, 104, 30, },
-+	{ 0, 1, 0, 2, 108, 32, },
-+	{ 2, 1, 0, 2, 108, 30, },
-+	{ 1, 1, 0, 2, 108, 30, },
-+	{ 0, 1, 0, 2, 112, 32, },
-+	{ 2, 1, 0, 2, 112, 30, },
-+	{ 1, 1, 0, 2, 112, 30, },
-+	{ 0, 1, 0, 2, 116, 32, },
-+	{ 2, 1, 0, 2, 116, 30, },
-+	{ 1, 1, 0, 2, 116, 30, },
-+	{ 0, 1, 0, 2, 120, 32, },
-+	{ 2, 1, 0, 2, 120, 30, },
-+	{ 1, 1, 0, 2, 120, 30, },
-+	{ 0, 1, 0, 2, 124, 32, },
-+	{ 2, 1, 0, 2, 124, 30, },
-+	{ 1, 1, 0, 2, 124, 30, },
-+	{ 0, 1, 0, 2, 128, 32, },
-+	{ 2, 1, 0, 2, 128, 30, },
-+	{ 1, 1, 0, 2, 128, 30, },
-+	{ 0, 1, 0, 2, 132, 32, },
-+	{ 2, 1, 0, 2, 132, 30, },
-+	{ 1, 1, 0, 2, 132, 30, },
-+	{ 0, 1, 0, 2, 136, 32, },
-+	{ 2, 1, 0, 2, 136, 30, },
-+	{ 1, 1, 0, 2, 136, 30, },
-+	{ 0, 1, 0, 2, 140, 32, },
-+	{ 2, 1, 0, 2, 140, 30, },
-+	{ 1, 1, 0, 2, 140, 30, },
-+	{ 0, 1, 0, 2, 149, 32, },
-+	{ 2, 1, 0, 2, 149, 30, },
-+	{ 1, 1, 0, 2, 149, 63, },
-+	{ 0, 1, 0, 2, 153, 32, },
-+	{ 2, 1, 0, 2, 153, 30, },
-+	{ 1, 1, 0, 2, 153, 63, },
-+	{ 0, 1, 0, 2, 157, 32, },
-+	{ 2, 1, 0, 2, 157, 30, },
-+	{ 1, 1, 0, 2, 157, 63, },
-+	{ 0, 1, 0, 2, 161, 32, },
-+	{ 2, 1, 0, 2, 161, 30, },
-+	{ 1, 1, 0, 2, 161, 63, },
-+	{ 0, 1, 0, 2, 165, 32, },
-+	{ 2, 1, 0, 2, 165, 30, },
-+	{ 1, 1, 0, 2, 165, 63, },
-+	{ 0, 1, 0, 3, 36, 28, },
-+	{ 2, 1, 0, 3, 36, 30, },
-+	{ 1, 1, 0, 3, 36, 30, },
-+	{ 0, 1, 0, 3, 40, 28, },
-+	{ 2, 1, 0, 3, 40, 30, },
-+	{ 1, 1, 0, 3, 40, 30, },
-+	{ 0, 1, 0, 3, 44, 28, },
-+	{ 2, 1, 0, 3, 44, 30, },
-+	{ 1, 1, 0, 3, 44, 30, },
-+	{ 0, 1, 0, 3, 48, 28, },
-+	{ 2, 1, 0, 3, 48, 30, },
-+	{ 1, 1, 0, 3, 48, 30, },
-+	{ 0, 1, 0, 3, 52, 34, },
-+	{ 2, 1, 0, 3, 52, 30, },
-+	{ 1, 1, 0, 3, 52, 30, },
-+	{ 0, 1, 0, 3, 56, 32, },
-+	{ 2, 1, 0, 3, 56, 30, },
-+	{ 1, 1, 0, 3, 56, 30, },
-+	{ 0, 1, 0, 3, 60, 30, },
-+	{ 2, 1, 0, 3, 60, 30, },
-+	{ 1, 1, 0, 3, 60, 30, },
-+	{ 0, 1, 0, 3, 64, 26, },
-+	{ 2, 1, 0, 3, 64, 30, },
-+	{ 1, 1, 0, 3, 64, 30, },
-+	{ 0, 1, 0, 3, 100, 28, },
-+	{ 2, 1, 0, 3, 100, 30, },
-+	{ 1, 1, 0, 3, 100, 30, },
-+	{ 0, 1, 0, 3, 104, 28, },
-+	{ 2, 1, 0, 3, 104, 30, },
-+	{ 1, 1, 0, 3, 104, 30, },
-+	{ 0, 1, 0, 3, 108, 30, },
-+	{ 2, 1, 0, 3, 108, 30, },
-+	{ 1, 1, 0, 3, 108, 30, },
-+	{ 0, 1, 0, 3, 112, 32, },
-+	{ 2, 1, 0, 3, 112, 30, },
-+	{ 1, 1, 0, 3, 112, 30, },
-+	{ 0, 1, 0, 3, 116, 32, },
-+	{ 2, 1, 0, 3, 116, 30, },
-+	{ 1, 1, 0, 3, 116, 30, },
-+	{ 0, 1, 0, 3, 120, 34, },
-+	{ 2, 1, 0, 3, 120, 30, },
-+	{ 1, 1, 0, 3, 120, 30, },
-+	{ 0, 1, 0, 3, 124, 32, },
-+	{ 2, 1, 0, 3, 124, 30, },
-+	{ 1, 1, 0, 3, 124, 30, },
-+	{ 0, 1, 0, 3, 128, 30, },
-+	{ 2, 1, 0, 3, 128, 30, },
-+	{ 1, 1, 0, 3, 128, 30, },
-+	{ 0, 1, 0, 3, 132, 28, },
-+	{ 2, 1, 0, 3, 132, 30, },
-+	{ 1, 1, 0, 3, 132, 30, },
-+	{ 0, 1, 0, 3, 136, 28, },
-+	{ 2, 1, 0, 3, 136, 30, },
-+	{ 1, 1, 0, 3, 136, 30, },
-+	{ 0, 1, 0, 3, 140, 26, },
-+	{ 2, 1, 0, 3, 140, 30, },
-+	{ 1, 1, 0, 3, 140, 30, },
-+	{ 0, 1, 0, 3, 149, 34, },
-+	{ 2, 1, 0, 3, 149, 30, },
-+	{ 1, 1, 0, 3, 149, 63, },
-+	{ 0, 1, 0, 3, 153, 34, },
-+	{ 2, 1, 0, 3, 153, 30, },
-+	{ 1, 1, 0, 3, 153, 63, },
-+	{ 0, 1, 0, 3, 157, 34, },
-+	{ 2, 1, 0, 3, 157, 30, },
-+	{ 1, 1, 0, 3, 157, 63, },
-+	{ 0, 1, 0, 3, 161, 34, },
-+	{ 2, 1, 0, 3, 161, 30, },
-+	{ 1, 1, 0, 3, 161, 63, },
-+	{ 0, 1, 0, 3, 165, 34, },
-+	{ 2, 1, 0, 3, 165, 30, },
-+	{ 1, 1, 0, 3, 165, 63, },
-+	{ 0, 1, 1, 2, 38, 26, },
-+	{ 2, 1, 1, 2, 38, 30, },
-+	{ 1, 1, 1, 2, 38, 30, },
-+	{ 0, 1, 1, 2, 46, 32, },
-+	{ 2, 1, 1, 2, 46, 30, },
-+	{ 1, 1, 1, 2, 46, 30, },
-+	{ 0, 1, 1, 2, 54, 32, },
-+	{ 2, 1, 1, 2, 54, 30, },
-+	{ 1, 1, 1, 2, 54, 30, },
-+	{ 0, 1, 1, 2, 62, 24, },
-+	{ 2, 1, 1, 2, 62, 30, },
-+	{ 1, 1, 1, 2, 62, 30, },
-+	{ 0, 1, 1, 2, 102, 24, },
-+	{ 2, 1, 1, 2, 102, 30, },
-+	{ 1, 1, 1, 2, 102, 30, },
-+	{ 0, 1, 1, 2, 110, 32, },
-+	{ 2, 1, 1, 2, 110, 30, },
-+	{ 1, 1, 1, 2, 110, 30, },
-+	{ 0, 1, 1, 2, 118, 32, },
-+	{ 2, 1, 1, 2, 118, 30, },
-+	{ 1, 1, 1, 2, 118, 30, },
-+	{ 0, 1, 1, 2, 126, 32, },
-+	{ 2, 1, 1, 2, 126, 30, },
-+	{ 1, 1, 1, 2, 126, 30, },
-+	{ 0, 1, 1, 2, 134, 32, },
-+	{ 2, 1, 1, 2, 134, 30, },
-+	{ 1, 1, 1, 2, 134, 30, },
-+	{ 0, 1, 1, 2, 151, 30, },
-+	{ 2, 1, 1, 2, 151, 30, },
-+	{ 1, 1, 1, 2, 151, 63, },
-+	{ 0, 1, 1, 2, 159, 32, },
-+	{ 2, 1, 1, 2, 159, 30, },
-+	{ 1, 1, 1, 2, 159, 63, },
-+	{ 0, 1, 1, 3, 38, 28, },
-+	{ 2, 1, 1, 3, 38, 30, },
-+	{ 1, 1, 1, 3, 38, 30, },
-+	{ 0, 1, 1, 3, 46, 28, },
-+	{ 2, 1, 1, 3, 46, 30, },
-+	{ 1, 1, 1, 3, 46, 30, },
-+	{ 0, 1, 1, 3, 54, 30, },
-+	{ 2, 1, 1, 3, 54, 30, },
-+	{ 1, 1, 1, 3, 54, 30, },
-+	{ 0, 1, 1, 3, 62, 30, },
-+	{ 2, 1, 1, 3, 62, 30, },
-+	{ 1, 1, 1, 3, 62, 30, },
-+	{ 0, 1, 1, 3, 102, 26, },
-+	{ 2, 1, 1, 3, 102, 30, },
-+	{ 1, 1, 1, 3, 102, 30, },
-+	{ 0, 1, 1, 3, 110, 30, },
-+	{ 2, 1, 1, 3, 110, 30, },
-+	{ 1, 1, 1, 3, 110, 30, },
-+	{ 0, 1, 1, 3, 118, 34, },
-+	{ 2, 1, 1, 3, 118, 30, },
-+	{ 1, 1, 1, 3, 118, 30, },
-+	{ 0, 1, 1, 3, 126, 32, },
-+	{ 2, 1, 1, 3, 126, 30, },
-+	{ 1, 1, 1, 3, 126, 30, },
-+	{ 0, 1, 1, 3, 134, 30, },
-+	{ 2, 1, 1, 3, 134, 30, },
-+	{ 1, 1, 1, 3, 134, 30, },
-+	{ 0, 1, 1, 3, 151, 34, },
-+	{ 2, 1, 1, 3, 151, 30, },
-+	{ 1, 1, 1, 3, 151, 63, },
-+	{ 0, 1, 1, 3, 159, 34, },
-+	{ 2, 1, 1, 3, 159, 30, },
-+	{ 1, 1, 1, 3, 159, 63, },
-+	{ 0, 1, 2, 4, 42, 22, },
-+	{ 2, 1, 2, 4, 42, 30, },
-+	{ 1, 1, 2, 4, 42, 30, },
-+	{ 0, 1, 2, 4, 58, 20, },
-+	{ 2, 1, 2, 4, 58, 30, },
-+	{ 1, 1, 2, 4, 58, 30, },
-+	{ 0, 1, 2, 4, 106, 20, },
-+	{ 2, 1, 2, 4, 106, 30, },
-+	{ 1, 1, 2, 4, 106, 30, },
-+	{ 0, 1, 2, 4, 122, 20, },
-+	{ 2, 1, 2, 4, 122, 30, },
-+	{ 1, 1, 2, 4, 122, 30, },
-+	{ 0, 1, 2, 4, 155, 28, },
-+	{ 2, 1, 2, 4, 155, 30, },
-+	{ 1, 1, 2, 4, 155, 63, },
-+	{ 0, 1, 2, 5, 42, 28, },
-+	{ 2, 1, 2, 5, 42, 30, },
-+	{ 1, 1, 2, 5, 42, 30, },
-+	{ 0, 1, 2, 5, 58, 26, },
-+	{ 2, 1, 2, 5, 58, 30, },
-+	{ 1, 1, 2, 5, 58, 30, },
-+	{ 0, 1, 2, 5, 106, 28, },
-+	{ 2, 1, 2, 5, 106, 30, },
-+	{ 1, 1, 2, 5, 106, 30, },
-+	{ 0, 1, 2, 5, 122, 32, },
-+	{ 2, 1, 2, 5, 122, 30, },
-+	{ 1, 1, 2, 5, 122, 30, },
-+	{ 0, 1, 2, 5, 155, 34, },
-+	{ 2, 1, 2, 5, 155, 30, },
-+	{ 1, 1, 2, 5, 155, 63, },
-+};
-+
-+RTW_DECL_TABLE_TXPWR_LMT(rtw8821a_txpwr_lmt);
-+
-+static const struct rtw_pwr_seq_cmd trans_carddis_to_cardemu_8821a[] = {
-+	{0x0005,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(3) | BIT(7), 0},
-+	{0x0086,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_SDIO_MSK,
-+	 RTW_PWR_ADDR_SDIO,
-+	 RTW_PWR_CMD_WRITE, BIT(0), 0},
-+	{0x0086,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_SDIO_MSK,
-+	 RTW_PWR_ADDR_SDIO,
-+	 RTW_PWR_CMD_POLLING, BIT(1), BIT(1)},
-+	{0x004A,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_USB_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(0), 0},
-+	{0x0005,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(3) | BIT(4), 0},
-+	{0x0023,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_SDIO_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(4), 0},
-+	{0x0301,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_PCI_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0},
-+	{0xFFFF,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 0,
-+	 RTW_PWR_CMD_END, 0, 0},
-+};
-+
-+static const struct rtw_pwr_seq_cmd trans_cardemu_to_act_8821a[] = {
-+	{0x0020,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_USB_MSK | RTW_PWR_INTF_SDIO_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(0), BIT(0)},
-+	{0x0067,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_USB_MSK | RTW_PWR_INTF_SDIO_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(4), 0},
-+	{0x0001,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_USB_MSK | RTW_PWR_INTF_SDIO_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_DELAY, 1, RTW_PWR_DELAY_MS},
-+	{0x0000,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_USB_MSK | RTW_PWR_INTF_SDIO_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(5), 0},
-+	{0x0005,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(4) | BIT(3) | BIT(2), 0},
-+	{0x0075,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_PCI_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(0), BIT(0)},
-+	{0x0006,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_POLLING, BIT(1), BIT(1)},
-+	{0x0075,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_PCI_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(0), 0},
-+	{0x0006,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(0), BIT(0)},
-+	{0x0005,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(7), 0},
-+	{0x0005,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(4) | BIT(3), 0},
-+	{0x0005,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(0), BIT(0)},
-+	{0x0005,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_POLLING, BIT(0), 0},
-+	{0x004F,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(0), BIT(0)},
-+	{0x0067,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(5) | BIT(4), BIT(5) | BIT(4)},
-+	{0x0025,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(6), 0},
-+	{0x0049,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(1), BIT(1)},
-+	{0x0063,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(1), BIT(1)},
-+	{0x0062,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(1), 0},
-+	{0x0058,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(0), BIT(0)},
-+	{0x005A,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(1), BIT(1)},
-+	{0x002E,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0x82},
-+	{0x0010,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(6), BIT(6)},
-+	{0xFFFF,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 0,
-+	 RTW_PWR_CMD_END, 0, 0},
-+};
-+
-+static const struct rtw_pwr_seq_cmd trans_act_to_lps_8821a[] = {
-+	{0x0301,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_PCI_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0xFF},
-+	{0x0522,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0xFF},
-+	{0x05F8,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_POLLING, 0xFF, 0},
-+	{0x05F9,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_POLLING, 0xFF, 0},
-+	{0x05FA,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_POLLING, 0xFF, 0},
-+	{0x05FB,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_POLLING, 0xFF, 0},
-+	{0x0002,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(0), 0},
-+	{0x0002,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_DELAY, 0, RTW_PWR_DELAY_US},
-+	{0x0002,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(1), 0},
-+	{0x0100,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0x03},
-+	{0x0101,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(1), 0},
-+	{0x0093,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_SDIO_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0x00},
-+	{0x0553,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(5), BIT(5)},
-+	{0xFFFF,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 0,
-+	 RTW_PWR_CMD_END, 0, 0},
-+};
-+
-+static const struct rtw_pwr_seq_cmd trans_act_to_cardemu_8821a[] = {
-+	{0x001F,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0},
-+	{0x004F,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(0), 0},
-+	{0x0049,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(1), 0},
-+	{0x0006,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_USB_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(0), BIT(0)},
-+	{0x0005,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(1), BIT(1)},
-+	{0x0005,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_POLLING, BIT(1), 0},
-+	{0x0000,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_USB_MSK | RTW_PWR_INTF_SDIO_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(5), BIT(5)},
-+	{0x0020,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_USB_MSK | RTW_PWR_INTF_SDIO_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(0), 0},
-+	{0xFFFF,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 0,
-+	 RTW_PWR_CMD_END, 0, 0},
-+};
-+
-+static const struct rtw_pwr_seq_cmd trans_cardemu_to_carddis_8821a[] = {
-+	{0x0007,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_SDIO_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, 0xFF, 0x20},
-+	{0x0005,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_USB_MSK | RTW_PWR_INTF_SDIO_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(3) | BIT(4), BIT(3)},
-+	{0x0005,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_PCI_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(2), BIT(2)},
-+	{0x004A,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_USB_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(0), 1},
-+	{0x0023,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_SDIO_MSK,
-+	 RTW_PWR_ADDR_MAC,
-+	 RTW_PWR_CMD_WRITE, BIT(4), BIT(4)},
-+	{0x0086,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_SDIO_MSK,
-+	 RTW_PWR_ADDR_SDIO,
-+	 RTW_PWR_CMD_WRITE, BIT(0), BIT(0)},
-+	{0x0086,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_SDIO_MSK,
-+	 RTW_PWR_ADDR_SDIO,
-+	 RTW_PWR_CMD_POLLING, BIT(1), 0},
-+	{0xFFFF,
-+	 RTW_PWR_CUT_ALL_MSK,
-+	 RTW_PWR_INTF_ALL_MSK,
-+	 0,
-+	 RTW_PWR_CMD_END, 0, 0},
-+};
-+
-+const struct rtw_pwr_seq_cmd * const card_enable_flow_8821a[] = {
-+	trans_carddis_to_cardemu_8821a,
-+	trans_cardemu_to_act_8821a,
-+	NULL
-+};
-+
-+const struct rtw_pwr_seq_cmd * const enter_lps_flow_8821a[] = {
-+	trans_act_to_lps_8821a,
-+	NULL
-+};
-+
-+const struct rtw_pwr_seq_cmd * const card_disable_flow_8821a[] = {
-+	trans_act_to_cardemu_8821a,
-+	trans_cardemu_to_carddis_8821a,
-+	NULL
-+};
-+
-+static const u8 rtw8821a_pwrtrk_5gb_n[][RTW_PWR_TRK_TBL_SZ] = {
-+	{0, 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15,
-+	 15, 16, 16, 16, 16, 16, 16, 16, 16},
-+	{0, 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15,
-+	 15, 16, 16, 16, 16, 16, 16, 16, 16},
-+	{0, 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15,
-+	 15, 16, 16, 16, 16, 16, 16, 16, 16},
-+};
-+
-+static const u8 rtw8821a_pwrtrk_5gb_p[][RTW_PWR_TRK_TBL_SZ] = {
-+	{0, 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15,
-+	 15, 16, 16, 16, 16, 16, 16, 16, 16},
-+	{0, 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15,
-+	 15, 16, 16, 16, 16, 16, 16, 16, 16},
-+	{0, 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15,
-+	 15, 16, 16, 16, 16, 16, 16, 16, 16},
-+};
-+
-+static const u8 rtw8821a_pwrtrk_5ga_n[][RTW_PWR_TRK_TBL_SZ] = {
-+	{0, 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15,
-+	 15, 16, 16, 16, 16, 16, 16, 16, 16},
-+	{0, 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15,
-+	 15, 16, 16, 16, 16, 16, 16, 16, 16},
-+	{0, 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15,
-+	 15, 16, 16, 16, 16, 16, 16, 16, 16},
-+};
-+
-+static const u8 rtw8821a_pwrtrk_5ga_p[][RTW_PWR_TRK_TBL_SZ] = {
-+	{0, 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15,
-+	 15, 16, 16, 16, 16, 16, 16, 16, 16},
-+	{0, 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15,
-+	 15, 16, 16, 16, 16, 16, 16, 16, 16},
-+	{0, 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15,
-+	 15, 16, 16, 16, 16, 16, 16, 16, 16},
-+};
-+
-+static const u8 rtw8821a_pwrtrk_2gb_n[] = {
-+	0, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6,
-+	6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10
-+};
-+
-+static const u8 rtw8821a_pwrtrk_2gb_p[] = {
-+	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
-+	8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 12, 12
-+};
-+
-+static const u8 rtw8821a_pwrtrk_2ga_n[] = {
-+	0, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6,
-+	6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10
-+};
-+
-+static const u8 rtw8821a_pwrtrk_2ga_p[] = {
-+	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
-+	8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 12, 12
-+};
-+
-+static const u8 rtw8821a_pwrtrk_2g_cck_b_n[] = {
-+	0, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6,
-+	6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10
-+};
-+
-+static const u8 rtw8821a_pwrtrk_2g_cck_b_p[] = {
-+	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
-+	8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 12, 12
-+};
-+
-+static const u8 rtw8821a_pwrtrk_2g_cck_a_n[] = {
-+	0, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6,
-+	6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10
-+};
-+
-+static const u8 rtw8821a_pwrtrk_2g_cck_a_p[] = {
-+	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
-+	8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 12, 12
-+};
-+
-+const struct rtw_pwr_track_tbl rtw8821a_rtw_pwr_track_tbl = {
-+	.pwrtrk_5gb_n[0] = rtw8821a_pwrtrk_5gb_n[0],
-+	.pwrtrk_5gb_n[1] = rtw8821a_pwrtrk_5gb_n[1],
-+	.pwrtrk_5gb_n[2] = rtw8821a_pwrtrk_5gb_n[2],
-+	.pwrtrk_5gb_p[0] = rtw8821a_pwrtrk_5gb_p[0],
-+	.pwrtrk_5gb_p[1] = rtw8821a_pwrtrk_5gb_p[1],
-+	.pwrtrk_5gb_p[2] = rtw8821a_pwrtrk_5gb_p[2],
-+	.pwrtrk_5ga_n[0] = rtw8821a_pwrtrk_5ga_n[0],
-+	.pwrtrk_5ga_n[1] = rtw8821a_pwrtrk_5ga_n[1],
-+	.pwrtrk_5ga_n[2] = rtw8821a_pwrtrk_5ga_n[2],
-+	.pwrtrk_5ga_p[0] = rtw8821a_pwrtrk_5ga_p[0],
-+	.pwrtrk_5ga_p[1] = rtw8821a_pwrtrk_5ga_p[1],
-+	.pwrtrk_5ga_p[2] = rtw8821a_pwrtrk_5ga_p[2],
-+	.pwrtrk_2gb_n = rtw8821a_pwrtrk_2gb_n,
-+	.pwrtrk_2gb_p = rtw8821a_pwrtrk_2gb_p,
-+	.pwrtrk_2ga_n = rtw8821a_pwrtrk_2ga_n,
-+	.pwrtrk_2ga_p = rtw8821a_pwrtrk_2ga_p,
-+	.pwrtrk_2g_cckb_n = rtw8821a_pwrtrk_2g_cck_b_n,
-+	.pwrtrk_2g_cckb_p = rtw8821a_pwrtrk_2g_cck_b_p,
-+	.pwrtrk_2g_ccka_n = rtw8821a_pwrtrk_2g_cck_a_n,
-+	.pwrtrk_2g_ccka_p = rtw8821a_pwrtrk_2g_cck_a_p,
-+};
---- /dev/null
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8821a_table.h
-@@ -0,0 +1,21 @@
-+/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
-+/* Copyright(c) 2024  Realtek Corporation
-+ */
-+
-+#ifndef __RTW8821A_TABLE_H__
-+#define __RTW8821A_TABLE_H__
-+
-+extern const struct rtw_table rtw8821a_mac_tbl;
-+extern const struct rtw_table rtw8821a_agc_tbl;
-+extern const struct rtw_table rtw8821a_bb_tbl;
-+extern const struct rtw_table rtw8821a_bb_pg_tbl;
-+extern const struct rtw_table rtw8821a_rf_a_tbl;
-+extern const struct rtw_table rtw8821a_txpwr_lmt_tbl;
-+
-+extern const struct rtw_pwr_seq_cmd * const card_enable_flow_8821a[];
-+extern const struct rtw_pwr_seq_cmd * const enter_lps_flow_8821a[];
-+extern const struct rtw_pwr_seq_cmd * const card_disable_flow_8821a[];
-+
-+extern const struct rtw_pwr_track_tbl rtw8821a_rtw_pwr_track_tbl;
-+
-+#endif
diff --git a/package/kernel/mac80211/patches/rtl/041-v6.13-wifi-rtw88-Add-rtw88xxa.-c-h.patch b/package/kernel/mac80211/patches/rtl/041-v6.13-wifi-rtw88-Add-rtw88xxa.-c-h.patch
deleted file mode 100644
index 79e1deebf7..0000000000
--- a/package/kernel/mac80211/patches/rtl/041-v6.13-wifi-rtw88-Add-rtw88xxa.-c-h.patch
+++ /dev/null
@@ -1,2187 +0,0 @@
-From b870b9d31c9e4e6b20c410e1e017f8c87d4c2ae0 Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 30 Oct 2024 20:27:39 +0200
-Subject: [PATCH] wifi: rtw88: Add rtw88xxa.{c,h}
-
-These contain code shared by both RTL8821AU and RTL8812AU chips.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/b8590382-a954-412d-a96b-63e360b97acc@gmail.com
----
- drivers/net/wireless/realtek/rtw88/rtw88xxa.c | 1989 +++++++++++++++++
- drivers/net/wireless/realtek/rtw88/rtw88xxa.h |  175 ++
- 2 files changed, 2164 insertions(+)
- create mode 100644 drivers/net/wireless/realtek/rtw88/rtw88xxa.c
- create mode 100644 drivers/net/wireless/realtek/rtw88/rtw88xxa.h
-
---- /dev/null
-+++ b/drivers/net/wireless/realtek/rtw88/rtw88xxa.c
-@@ -0,0 +1,1989 @@
-+// SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause
-+/* Copyright(c) 2024  Realtek Corporation
-+ */
-+
-+#include <linux/usb.h>
-+#include "main.h"
-+#include "coex.h"
-+#include "phy.h"
-+#include "rtw88xxa.h"
-+#include "mac.h"
-+#include "reg.h"
-+#include "sec.h"
-+#include "debug.h"
-+#include "bf.h"
-+#include "efuse.h"
-+#include "usb.h"
-+
-+void rtw88xxa_efuse_grant(struct rtw_dev *rtwdev, bool on)
-+{
-+	if (on) {
-+		rtw_write8(rtwdev, REG_EFUSE_ACCESS, EFUSE_ACCESS_ON);
-+
-+		rtw_write16_set(rtwdev, REG_SYS_FUNC_EN, BIT_FEN_ELDR);
-+		rtw_write16_set(rtwdev, REG_SYS_CLKR,
-+				BIT_LOADER_CLK_EN | BIT_ANA8M);
-+	} else {
-+		rtw_write8(rtwdev, REG_EFUSE_ACCESS, EFUSE_ACCESS_OFF);
-+	}
-+}
-+EXPORT_SYMBOL(rtw88xxa_efuse_grant);
-+
-+static void rtw8812a_read_amplifier_type(struct rtw_dev *rtwdev)
-+{
-+	struct rtw_efuse *efuse = &rtwdev->efuse;
-+
-+	efuse->ext_pa_2g = (efuse->pa_type_2g & BIT(5)) &&
-+			   (efuse->pa_type_2g & BIT(4));
-+	efuse->ext_lna_2g = (efuse->lna_type_2g & BIT(7)) &&
-+			    (efuse->lna_type_2g & BIT(3));
-+
-+	efuse->ext_pa_5g = (efuse->pa_type_5g & BIT(1)) &&
-+			   (efuse->pa_type_5g & BIT(0));
-+	efuse->ext_lna_5g = (efuse->lna_type_5g & BIT(7)) &&
-+			    (efuse->lna_type_5g & BIT(3));
-+
-+	/* For rtw_phy_cond2: */
-+	if (efuse->ext_pa_2g) {
-+		u8 ext_type_pa_2g_a = u8_get_bits(efuse->lna_type_2g, BIT(2));
-+		u8 ext_type_pa_2g_b = u8_get_bits(efuse->lna_type_2g, BIT(6));
-+
-+		efuse->gpa_type = (ext_type_pa_2g_b << 2) | ext_type_pa_2g_a;
-+	}
-+
-+	if (efuse->ext_pa_5g) {
-+		u8 ext_type_pa_5g_a = u8_get_bits(efuse->lna_type_5g, BIT(2));
-+		u8 ext_type_pa_5g_b = u8_get_bits(efuse->lna_type_5g, BIT(6));
-+
-+		efuse->apa_type = (ext_type_pa_5g_b << 2) | ext_type_pa_5g_a;
-+	}
-+
-+	if (efuse->ext_lna_2g) {
-+		u8 ext_type_lna_2g_a = u8_get_bits(efuse->lna_type_2g,
-+						   BIT(1) | BIT(0));
-+		u8 ext_type_lna_2g_b = u8_get_bits(efuse->lna_type_2g,
-+						   BIT(5) | BIT(4));
-+
-+		efuse->glna_type = (ext_type_lna_2g_b << 2) | ext_type_lna_2g_a;
-+	}
-+
-+	if (efuse->ext_lna_5g) {
-+		u8 ext_type_lna_5g_a = u8_get_bits(efuse->lna_type_5g,
-+						   BIT(1) | BIT(0));
-+		u8 ext_type_lna_5g_b = u8_get_bits(efuse->lna_type_5g,
-+						   BIT(5) | BIT(4));
-+
-+		efuse->alna_type = (ext_type_lna_5g_b << 2) | ext_type_lna_5g_a;
-+	}
-+}
-+
-+static void rtw8812a_read_rfe_type(struct rtw_dev *rtwdev,
-+				   struct rtw88xxa_efuse *map)
-+{
-+	struct rtw_efuse *efuse = &rtwdev->efuse;
-+
-+	if (map->rfe_option == 0xff) {
-+		if (rtwdev->hci.type == RTW_HCI_TYPE_USB)
-+			efuse->rfe_option = 0;
-+		else if (rtwdev->hci.type == RTW_HCI_TYPE_PCIE)
-+			efuse->rfe_option = 2;
-+		else
-+			efuse->rfe_option = 4;
-+	} else if (map->rfe_option & BIT(7)) {
-+		if (efuse->ext_lna_5g) {
-+			if (efuse->ext_pa_5g) {
-+				if (efuse->ext_lna_2g && efuse->ext_pa_2g)
-+					efuse->rfe_option = 3;
-+				else
-+					efuse->rfe_option = 0;
-+			} else {
-+				efuse->rfe_option = 2;
-+			}
-+		} else {
-+			efuse->rfe_option = 4;
-+		}
-+	} else {
-+		efuse->rfe_option = map->rfe_option & 0x3f;
-+
-+		/* Due to other customer already use incorrect EFUSE map for
-+		 * their product. We need to add workaround to prevent to
-+		 * modify spec and notify all customer to revise the IC 0xca
-+		 * content.
-+		 */
-+		if (efuse->rfe_option == 4 &&
-+		    (efuse->ext_pa_5g || efuse->ext_pa_2g ||
-+		     efuse->ext_lna_5g || efuse->ext_lna_2g)) {
-+			if (rtwdev->hci.type == RTW_HCI_TYPE_USB)
-+				efuse->rfe_option = 0;
-+			else if (rtwdev->hci.type == RTW_HCI_TYPE_PCIE)
-+				efuse->rfe_option = 2;
-+		}
-+	}
-+}
-+
-+static void rtw88xxa_read_usb_type(struct rtw_dev *rtwdev)
-+{
-+	struct rtw_efuse *efuse = &rtwdev->efuse;
-+	struct rtw_hal *hal = &rtwdev->hal;
-+	u8 antenna = 0;
-+	u8 wmode = 0;
-+	u8 val8, i;
-+
-+	efuse->hw_cap.bw = BIT(RTW_CHANNEL_WIDTH_20) |
-+			   BIT(RTW_CHANNEL_WIDTH_40) |
-+			   BIT(RTW_CHANNEL_WIDTH_80);
-+	efuse->hw_cap.ptcl = EFUSE_HW_CAP_PTCL_VHT;
-+
-+	if (rtwdev->chip->id == RTW_CHIP_TYPE_8821A)
-+		efuse->hw_cap.nss = 1;
-+	else
-+		efuse->hw_cap.nss = 2;
-+
-+	if (rtwdev->chip->id == RTW_CHIP_TYPE_8821A)
-+		goto print_hw_cap;
-+
-+	for (i = 0; i < 2; i++) {
-+		rtw_read8_physical_efuse(rtwdev, 1019 - i, &val8);
-+
-+		antenna = u8_get_bits(val8, GENMASK(7, 5));
-+		if (antenna)
-+			break;
-+		antenna = u8_get_bits(val8, GENMASK(3, 1));
-+		if (antenna)
-+			break;
-+	}
-+
-+	for (i = 0; i < 2; i++) {
-+		rtw_read8_physical_efuse(rtwdev, 1021 - i, &val8);
-+
-+		wmode = u8_get_bits(val8, GENMASK(3, 2));
-+		if (wmode)
-+			break;
-+	}
-+
-+	if (antenna == 1) {
-+		rtw_info(rtwdev, "This RTL8812AU says it is 1T1R.\n");
-+
-+		efuse->hw_cap.nss = 1;
-+		hal->rf_type = RF_1T1R;
-+		hal->rf_path_num = 1;
-+		hal->rf_phy_num = 1;
-+		hal->antenna_tx = BB_PATH_A;
-+		hal->antenna_rx = BB_PATH_A;
-+	} else {
-+		/* Override rtw_chip_parameter_setup(). It detects 8812au as 1T1R. */
-+		efuse->hw_cap.nss = 2;
-+		hal->rf_type = RF_2T2R;
-+		hal->rf_path_num = 2;
-+		hal->rf_phy_num = 2;
-+		hal->antenna_tx = BB_PATH_AB;
-+		hal->antenna_rx = BB_PATH_AB;
-+
-+		if (antenna == 2 && wmode == 2) {
-+			rtw_info(rtwdev, "This RTL8812AU says it can't do VHT.\n");
-+
-+			/* Can't be EFUSE_HW_CAP_IGNORE and can't be
-+			 * EFUSE_HW_CAP_PTCL_VHT, so make it 1.
-+			 */
-+			efuse->hw_cap.ptcl = 1;
-+			efuse->hw_cap.bw &= ~BIT(RTW_CHANNEL_WIDTH_80);
-+		}
-+	}
-+
-+print_hw_cap:
-+	rtw_dbg(rtwdev, RTW_DBG_EFUSE,
-+		"hw cap: hci=0x%02x, bw=0x%02x, ptcl=0x%02x, ant_num=%d, nss=%d\n",
-+		efuse->hw_cap.hci, efuse->hw_cap.bw, efuse->hw_cap.ptcl,
-+		efuse->hw_cap.ant_num, efuse->hw_cap.nss);
-+}
-+
-+int rtw88xxa_read_efuse(struct rtw_dev *rtwdev, u8 *log_map)
-+{
-+	const struct rtw_chip_info *chip = rtwdev->chip;
-+	struct rtw_efuse *efuse = &rtwdev->efuse;
-+	struct rtw88xxa_efuse *map;
-+	int i;
-+
-+	if (chip->id == RTW_CHIP_TYPE_8812A)
-+		rtwdev->hal.cut_version += 1;
-+
-+	if (rtw_dbg_is_enabled(rtwdev, RTW_DBG_EFUSE))
-+		print_hex_dump(KERN_INFO, "", DUMP_PREFIX_OFFSET, 16, 1,
-+			       log_map, chip->log_efuse_size, true);
-+
-+	map = (struct rtw88xxa_efuse *)log_map;
-+
-+	efuse->rf_board_option = map->rf_board_option;
-+	efuse->crystal_cap = map->xtal_k;
-+	if (efuse->crystal_cap == 0xff)
-+		efuse->crystal_cap = 0x20;
-+	efuse->pa_type_2g = map->pa_type;
-+	efuse->pa_type_5g = map->pa_type;
-+	efuse->lna_type_2g = map->lna_type_2g;
-+	efuse->lna_type_5g = map->lna_type_5g;
-+	if (chip->id == RTW_CHIP_TYPE_8812A) {
-+		rtw8812a_read_amplifier_type(rtwdev);
-+		rtw8812a_read_rfe_type(rtwdev, map);
-+
-+		efuse->usb_mode_switch = u8_get_bits(map->usb_mode, BIT(1));
-+	}
-+	efuse->channel_plan = map->channel_plan;
-+	efuse->country_code[0] = map->country_code[0];
-+	efuse->country_code[1] = map->country_code[1];
-+	efuse->bt_setting = map->rf_bt_setting;
-+	efuse->regd = map->rf_board_option & 0x7;
-+	efuse->thermal_meter[0] = map->thermal_meter;
-+	efuse->thermal_meter[1] = map->thermal_meter;
-+	efuse->thermal_meter_k = map->thermal_meter;
-+	efuse->tx_bb_swing_setting_2g = map->tx_bb_swing_setting_2g;
-+	efuse->tx_bb_swing_setting_5g = map->tx_bb_swing_setting_5g;
-+
-+	rtw88xxa_read_usb_type(rtwdev);
-+
-+	if (chip->id == RTW_CHIP_TYPE_8821A)
-+		efuse->btcoex = rtw_read32_mask(rtwdev, REG_WL_BT_PWR_CTRL,
-+						BIT_BT_FUNC_EN);
-+	else
-+		efuse->btcoex = (map->rf_board_option & 0xe0) == 0x20;
-+	efuse->share_ant = !!(efuse->bt_setting & BIT(0));
-+
-+	/* No antenna diversity because it's disabled in the vendor driver */
-+	efuse->ant_div_cfg = 0;
-+
-+	efuse->ant_div_type = map->rf_antenna_option;
-+	if (efuse->ant_div_type == 0xff)
-+		efuse->ant_div_type = 0x3;
-+
-+	for (i = 0; i < 4; i++)
-+		efuse->txpwr_idx_table[i] = map->txpwr_idx_table[i];
-+
-+	switch (rtw_hci_type(rtwdev)) {
-+	case RTW_HCI_TYPE_USB:
-+		if (chip->id == RTW_CHIP_TYPE_8821A)
-+			ether_addr_copy(efuse->addr, map->rtw8821au.mac_addr);
-+		else
-+			ether_addr_copy(efuse->addr, map->rtw8812au.mac_addr);
-+		break;
-+	case RTW_HCI_TYPE_PCIE:
-+	case RTW_HCI_TYPE_SDIO:
-+	default:
-+		/* unsupported now */
-+		return -EOPNOTSUPP;
-+	}
-+
-+	return 0;
-+}
-+EXPORT_SYMBOL(rtw88xxa_read_efuse);
-+
-+static void rtw88xxa_reset_8051(struct rtw_dev *rtwdev)
-+{
-+	const struct rtw_chip_info *chip = rtwdev->chip;
-+	u8 val8;
-+
-+	/* Reset MCU IO Wrapper */
-+	rtw_write8_clr(rtwdev, REG_RSV_CTRL, BIT(1));
-+	if (chip->id == RTW_CHIP_TYPE_8812A)
-+		rtw_write8_clr(rtwdev, REG_RSV_CTRL + 1, BIT(3));
-+	else
-+		rtw_write8_clr(rtwdev, REG_RSV_CTRL + 1, BIT(0));
-+
-+	val8 = rtw_read8(rtwdev, REG_SYS_FUNC_EN + 1);
-+	rtw_write8(rtwdev, REG_SYS_FUNC_EN + 1, val8 & ~BIT(2));
-+
-+	/* Enable MCU IO Wrapper */
-+	rtw_write8_clr(rtwdev, REG_RSV_CTRL, BIT(1));
-+	if (chip->id == RTW_CHIP_TYPE_8812A)
-+		rtw_write8_set(rtwdev, REG_RSV_CTRL + 1, BIT(3));
-+	else
-+		rtw_write8_set(rtwdev, REG_RSV_CTRL + 1, BIT(0));
-+
-+	rtw_write8(rtwdev, REG_SYS_FUNC_EN + 1, val8 | BIT(2));
-+}
-+
-+/* A lightweight deinit function */
-+static void rtw88xxau_hw_reset(struct rtw_dev *rtwdev)
-+{
-+	u8 val8;
-+
-+	if (!(rtw_read8(rtwdev, REG_MCUFW_CTRL) & BIT_RAM_DL_SEL))
-+		return;
-+
-+	rtw88xxa_reset_8051(rtwdev);
-+	rtw_write8(rtwdev, REG_MCUFW_CTRL, 0x00);
-+
-+	/* before BB reset should do clock gated */
-+	rtw_write32_set(rtwdev, REG_FPGA0_XCD_RF_PARA, BIT(6));
-+
-+	/* reset BB */
-+	rtw_write8_clr(rtwdev, REG_SYS_FUNC_EN, BIT(0) | BIT(1));
-+
-+	/* reset RF */
-+	rtw_write8(rtwdev, REG_RF_CTRL, 0);
-+
-+	/* reset TRX path */
-+	rtw_write16(rtwdev, REG_CR, 0);
-+
-+	/* reset MAC, reg0x5[1], auto FSM off */
-+	rtw_write8_set(rtwdev, REG_APS_FSMCO + 1, APS_FSMCO_MAC_OFF >> 8);
-+
-+	/* check if reg0x5[1] auto cleared */
-+	if (read_poll_timeout_atomic(rtw_read8, val8,
-+				     !(val8 & (APS_FSMCO_MAC_OFF >> 8)),
-+				     1, 5000, false,
-+				     rtwdev, REG_APS_FSMCO + 1))
-+		rtw_err(rtwdev, "%s: timed out waiting for 0x5[1]\n", __func__);
-+
-+	/* reg0x5[0], auto FSM on */
-+	val8 |= APS_FSMCO_MAC_ENABLE >> 8;
-+	rtw_write8(rtwdev, REG_APS_FSMCO + 1, val8);
-+
-+	rtw_write8_clr(rtwdev, REG_SYS_FUNC_EN + 1, BIT(4) | BIT(7));
-+	rtw_write8_set(rtwdev, REG_SYS_FUNC_EN + 1, BIT(4) | BIT(7));
-+}
-+
-+static int rtw88xxau_init_power_on(struct rtw_dev *rtwdev)
-+{
-+	const struct rtw_chip_info *chip = rtwdev->chip;
-+	u16 val16;
-+	int ret;
-+
-+	ret = rtw_pwr_seq_parser(rtwdev, chip->pwr_on_seq);
-+	if (ret) {
-+		rtw_err(rtwdev, "power on flow failed\n");
-+		return ret;
-+	}
-+
-+	rtw_write16(rtwdev, REG_CR, 0);
-+	val16 = BIT_HCI_TXDMA_EN | BIT_HCI_RXDMA_EN | BIT_TXDMA_EN |
-+		BIT_RXDMA_EN | BIT_PROTOCOL_EN | BIT_SCHEDULE_EN |
-+		BIT_MAC_SEC_EN | BIT_32K_CAL_TMR_EN;
-+	rtw_write16_set(rtwdev, REG_CR, val16);
-+
-+	if (chip->id == RTW_CHIP_TYPE_8821A) {
-+		if (rtw_read8(rtwdev, REG_SYS_CFG1 + 3) & BIT(0))
-+			rtw_write8_set(rtwdev, REG_LDO_SWR_CTRL, BIT(6));
-+	}
-+
-+	return ret;
-+}
-+
-+static int rtw88xxa_llt_write(struct rtw_dev *rtwdev, u32 address, u32 data)
-+{
-+	u32 value = BIT_LLT_WRITE_ACCESS | (address << 8) | data;
-+	int count = 0;
-+
-+	rtw_write32(rtwdev, REG_LLT_INIT, value);
-+
-+	do {
-+		if (!rtw_read32_mask(rtwdev, REG_LLT_INIT, BIT(31) | BIT(30)))
-+			break;
-+
-+		if (count > 20) {
-+			rtw_err(rtwdev, "Failed to poll write LLT done at %d!\n",
-+				address);
-+			return -EBUSY;
-+		}
-+	} while (++count);
-+
-+	return 0;
-+}
-+
-+static int rtw88xxa_llt_init(struct rtw_dev *rtwdev, u32 boundary)
-+{
-+	u32 last_entry = 255;
-+	int status = 0;
-+	u32 i;
-+
-+	for (i = 0; i < boundary - 1; i++) {
-+		status = rtw88xxa_llt_write(rtwdev, i, i + 1);
-+		if (status)
-+			return status;
-+	}
-+
-+	status = rtw88xxa_llt_write(rtwdev, boundary - 1, 0xFF);
-+	if (status)
-+		return status;
-+
-+	for (i = boundary; i < last_entry; i++) {
-+		status = rtw88xxa_llt_write(rtwdev, i, i + 1);
-+		if (status)
-+			return status;
-+	}
-+
-+	status = rtw88xxa_llt_write(rtwdev, last_entry, boundary);
-+
-+	return status;
-+}
-+
-+static void rtw88xxau_init_queue_reserved_page(struct rtw_dev *rtwdev)
-+{
-+	const struct rtw_chip_info *chip = rtwdev->chip;
-+	struct rtw_fifo_conf *fifo = &rtwdev->fifo;
-+	const struct rtw_page_table *pg_tbl = NULL;
-+	u16 pubq_num;
-+	u32 val32;
-+
-+	switch (rtw_hci_type(rtwdev)) {
-+	case RTW_HCI_TYPE_PCIE:
-+		pg_tbl = &chip->page_table[1];
-+		break;
-+	case RTW_HCI_TYPE_USB:
-+		if (rtwdev->hci.bulkout_num == 2)
-+			pg_tbl = &chip->page_table[2];
-+		else if (rtwdev->hci.bulkout_num == 3)
-+			pg_tbl = &chip->page_table[3];
-+		else if (rtwdev->hci.bulkout_num == 4)
-+			pg_tbl = &chip->page_table[4];
-+		break;
-+	case RTW_HCI_TYPE_SDIO:
-+		pg_tbl = &chip->page_table[0];
-+		break;
-+	default:
-+		break;
-+	}
-+
-+	pubq_num = fifo->acq_pg_num - pg_tbl->hq_num - pg_tbl->lq_num -
-+		   pg_tbl->nq_num - pg_tbl->exq_num - pg_tbl->gapq_num;
-+
-+	val32 = BIT_RQPN_NE(pg_tbl->nq_num, pg_tbl->exq_num);
-+	rtw_write32(rtwdev, REG_RQPN_NPQ, val32);
-+
-+	val32 = BIT_RQPN_HLP(pg_tbl->hq_num, pg_tbl->lq_num, pubq_num);
-+	rtw_write32(rtwdev, REG_RQPN, val32);
-+}
-+
-+static void rtw88xxau_init_tx_buffer_boundary(struct rtw_dev *rtwdev)
-+{
-+	struct rtw_fifo_conf *fifo = &rtwdev->fifo;
-+
-+	rtw_write8(rtwdev, REG_BCNQ_BDNY, fifo->rsvd_boundary);
-+	rtw_write8(rtwdev, REG_MGQ_BDNY, fifo->rsvd_boundary);
-+	rtw_write8(rtwdev, REG_WMAC_LBK_BF_HD, fifo->rsvd_boundary);
-+	rtw_write8(rtwdev, REG_TRXFF_BNDY, fifo->rsvd_boundary);
-+	rtw_write8(rtwdev, REG_DWBCN0_CTRL + 1, fifo->rsvd_boundary);
-+}
-+
-+static int rtw88xxau_init_queue_priority(struct rtw_dev *rtwdev)
-+{
-+	const struct rtw_chip_info *chip = rtwdev->chip;
-+	u8 bulkout_num = rtwdev->hci.bulkout_num;
-+	const struct rtw_rqpn *rqpn = NULL;
-+	u16 txdma_pq_map;
-+
-+	switch (rtw_hci_type(rtwdev)) {
-+	case RTW_HCI_TYPE_PCIE:
-+		rqpn = &chip->rqpn_table[1];
-+		break;
-+	case RTW_HCI_TYPE_USB:
-+		if (bulkout_num == 2)
-+			rqpn = &chip->rqpn_table[2];
-+		else if (bulkout_num == 3)
-+			rqpn = &chip->rqpn_table[3];
-+		else if (bulkout_num == 4)
-+			rqpn = &chip->rqpn_table[4];
-+		else
-+			return -EINVAL;
-+		break;
-+	case RTW_HCI_TYPE_SDIO:
-+		rqpn = &chip->rqpn_table[0];
-+		break;
-+	default:
-+		return -EINVAL;
-+	}
-+
-+	rtwdev->fifo.rqpn = rqpn;
-+
-+	txdma_pq_map = rtw_read16(rtwdev, REG_TXDMA_PQ_MAP) & 0x7;
-+	txdma_pq_map |= BIT_TXDMA_HIQ_MAP(rqpn->dma_map_hi);
-+	txdma_pq_map |= BIT_TXDMA_MGQ_MAP(rqpn->dma_map_mg);
-+	txdma_pq_map |= BIT_TXDMA_BKQ_MAP(rqpn->dma_map_bk);
-+	txdma_pq_map |= BIT_TXDMA_BEQ_MAP(rqpn->dma_map_be);
-+	txdma_pq_map |= BIT_TXDMA_VIQ_MAP(rqpn->dma_map_vi);
-+	txdma_pq_map |= BIT_TXDMA_VOQ_MAP(rqpn->dma_map_vo);
-+	rtw_write16(rtwdev, REG_TXDMA_PQ_MAP, txdma_pq_map);
-+
-+	/* Packet in Hi Queue Tx immediately (No constraint for ATIM Period). */
-+	if (rtw_hci_type(rtwdev) == RTW_HCI_TYPE_USB && bulkout_num == 4)
-+		rtw_write8(rtwdev, REG_HIQ_NO_LMT_EN, 0xff);
-+
-+	return 0;
-+}
-+
-+static void rtw88xxa_init_wmac_setting(struct rtw_dev *rtwdev)
-+{
-+	rtw_write16(rtwdev, REG_RXFLTMAP0, 0xffff);
-+	rtw_write16(rtwdev, REG_RXFLTMAP1, 0x0400);
-+	rtw_write16(rtwdev, REG_RXFLTMAP2, 0xffff);
-+
-+	rtw_write32(rtwdev, REG_MAR, 0xffffffff);
-+	rtw_write32(rtwdev, REG_MAR + 4, 0xffffffff);
-+}
-+
-+static void rtw88xxa_init_adaptive_ctrl(struct rtw_dev *rtwdev)
-+{
-+	rtw_write32_mask(rtwdev, REG_RRSR, 0xfffff, 0xffff1);
-+	rtw_write16(rtwdev, REG_RETRY_LIMIT, 0x3030);
-+}
-+
-+static void rtw88xxa_init_edca(struct rtw_dev *rtwdev)
-+{
-+	rtw_write16(rtwdev, REG_SPEC_SIFS, 0x100a);
-+	rtw_write16(rtwdev, REG_MAC_SPEC_SIFS, 0x100a);
-+
-+	rtw_write16(rtwdev, REG_SIFS, 0x100a);
-+	rtw_write16(rtwdev, REG_SIFS + 2, 0x100a);
-+
-+	rtw_write32(rtwdev, REG_EDCA_BE_PARAM, 0x005EA42B);
-+	rtw_write32(rtwdev, REG_EDCA_BK_PARAM, 0x0000A44F);
-+	rtw_write32(rtwdev, REG_EDCA_VI_PARAM, 0x005EA324);
-+	rtw_write32(rtwdev, REG_EDCA_VO_PARAM, 0x002FA226);
-+
-+	rtw_write8(rtwdev, REG_USTIME_TSF, 0x50);
-+	rtw_write8(rtwdev, REG_USTIME_EDCA, 0x50);
-+}
-+
-+static void rtw88xxau_tx_aggregation(struct rtw_dev *rtwdev)
-+{
-+	const struct rtw_chip_info *chip = rtwdev->chip;
-+
-+	rtw_write32_mask(rtwdev, REG_DWBCN0_CTRL, 0xf0,
-+			 chip->usb_tx_agg_desc_num);
-+
-+	if (chip->id == RTW_CHIP_TYPE_8821A)
-+		rtw_write8(rtwdev, REG_DWBCN1_CTRL,
-+			   chip->usb_tx_agg_desc_num << 1);
-+}
-+
-+static void rtw88xxa_init_beacon_parameters(struct rtw_dev *rtwdev)
-+{
-+	u16 val16;
-+
-+	val16 = (BIT_DIS_TSF_UDT << 8) | BIT_DIS_TSF_UDT;
-+	if (rtwdev->efuse.btcoex)
-+		val16 |= BIT_EN_BCN_FUNCTION;
-+	rtw_write16(rtwdev, REG_BCN_CTRL, val16);
-+
-+	rtw_write32_mask(rtwdev, REG_TBTT_PROHIBIT, 0xfffff, WLAN_TBTT_TIME);
-+	rtw_write8(rtwdev, REG_DRVERLYINT, 0x05);
-+	rtw_write8(rtwdev, REG_BCNDMATIM, WLAN_BCN_DMA_TIME);
-+	rtw_write16(rtwdev, REG_BCNTCFG, 0x4413);
-+}
-+
-+static void rtw88xxa_phy_bb_config(struct rtw_dev *rtwdev)
-+{
-+	u8 val8, crystal_cap;
-+
-+	/* power on BB/RF domain */
-+	val8 = rtw_read8(rtwdev, REG_SYS_FUNC_EN);
-+	val8 |= BIT_FEN_USBA;
-+	rtw_write8(rtwdev, REG_SYS_FUNC_EN, val8);
-+
-+	/* toggle BB reset */
-+	val8 |= BIT_FEN_BB_RSTB | BIT_FEN_BB_GLB_RST;
-+	rtw_write8(rtwdev, REG_SYS_FUNC_EN, val8);
-+
-+	rtw_write8(rtwdev, REG_RF_CTRL,
-+		   BIT_RF_EN | BIT_RF_RSTB | BIT_RF_SDM_RSTB);
-+	rtw_write8(rtwdev, REG_RF_B_CTRL,
-+		   BIT_RF_EN | BIT_RF_RSTB | BIT_RF_SDM_RSTB);
-+
-+	rtw_load_table(rtwdev, rtwdev->chip->bb_tbl);
-+	rtw_load_table(rtwdev, rtwdev->chip->agc_tbl);
-+
-+	crystal_cap = rtwdev->efuse.crystal_cap & 0x3F;
-+	if (rtwdev->chip->id == RTW_CHIP_TYPE_8812A)
-+		rtw_write32_mask(rtwdev, REG_AFE_CTRL3, 0x7FF80000,
-+				 crystal_cap | (crystal_cap << 6));
-+	else
-+		rtw_write32_mask(rtwdev, REG_AFE_CTRL3, 0x00FFF000,
-+				 crystal_cap | (crystal_cap << 6));
-+}
-+
-+static void rtw88xxa_phy_rf_config(struct rtw_dev *rtwdev)
-+{
-+	u8 rf_path;
-+
-+	for (rf_path = 0; rf_path < rtwdev->hal.rf_path_num; rf_path++)
-+		rtw_load_table(rtwdev, rtwdev->chip->rf_tbl[rf_path]);
-+}
-+
-+static void rtw8812a_config_1t(struct rtw_dev *rtwdev)
-+{
-+	/* BB OFDM RX Path_A */
-+	rtw_write32_mask(rtwdev, REG_RXPSEL, 0xff, 0x11);
-+
-+	/* BB OFDM TX Path_A */
-+	rtw_write32_mask(rtwdev, REG_TXPSEL, MASKLWORD, 0x1111);
-+
-+	/* BB CCK R/Rx Path_A */
-+	rtw_write32_mask(rtwdev, REG_CCK_RX, 0x0c000000, 0x0);
-+
-+	/* MCS support */
-+	rtw_write32_mask(rtwdev, REG_RX_MCS_LIMIT, 0xc0000060, 0x4);
-+
-+	/* RF Path_B HSSI OFF */
-+	rtw_write32_mask(rtwdev, REG_3WIRE_SWB, 0xf, 0x4);
-+
-+	/* RF Path_B Power Down */
-+	rtw_write32_mask(rtwdev, REG_LSSI_WRITE_B, MASKDWORD, 0);
-+
-+	/* ADDA Path_B OFF */
-+	rtw_write32_mask(rtwdev, REG_AFE_PWR1_B, MASKDWORD, 0);
-+	rtw_write32_mask(rtwdev, REG_AFE_PWR2_B, MASKDWORD, 0);
-+}
-+
-+static const u32 rtw88xxa_txscale_tbl[] = {
-+	0x081, 0x088, 0x090, 0x099, 0x0a2, 0x0ac, 0x0b6, 0x0c0, 0x0cc, 0x0d8,
-+	0x0e5, 0x0f2, 0x101, 0x110, 0x120, 0x131, 0x143, 0x156, 0x16a, 0x180,
-+	0x197, 0x1af, 0x1c8, 0x1e3, 0x200, 0x21e, 0x23e, 0x261, 0x285, 0x2ab,
-+	0x2d3, 0x2fe, 0x32b, 0x35c, 0x38e, 0x3c4, 0x3fe
-+};
-+
-+static u32 rtw88xxa_get_bb_swing(struct rtw_dev *rtwdev, u8 band, u8 path)
-+{
-+	static const u32 swing2setting[4] = {0x200, 0x16a, 0x101, 0x0b6};
-+	struct rtw_efuse *efuse = &rtwdev->efuse;
-+	u8 tx_bb_swing;
-+
-+	if (band == RTW_BAND_2G)
-+		tx_bb_swing = efuse->tx_bb_swing_setting_2g;
-+	else
-+		tx_bb_swing = efuse->tx_bb_swing_setting_5g;
-+
-+	if (path == RF_PATH_B)
-+		tx_bb_swing >>= 2;
-+	tx_bb_swing &= 0x3;
-+
-+	return swing2setting[tx_bb_swing];
-+}
-+
-+static u8 rtw88xxa_get_swing_index(struct rtw_dev *rtwdev)
-+{
-+	u32 swing, table_value;
-+	u8 i;
-+
-+	swing = rtw88xxa_get_bb_swing(rtwdev, rtwdev->hal.current_band_type,
-+				      RF_PATH_A);
-+
-+	for (i = 0; i < ARRAY_SIZE(rtw88xxa_txscale_tbl); i++) {
-+		table_value = rtw88xxa_txscale_tbl[i];
-+		if (swing == table_value)
-+			return i;
-+	}
-+
-+	return 24;
-+}
-+
-+static void rtw88xxa_pwrtrack_init(struct rtw_dev *rtwdev)
-+{
-+	struct rtw_dm_info *dm_info = &rtwdev->dm_info;
-+	u8 path;
-+
-+	dm_info->default_ofdm_index = rtw88xxa_get_swing_index(rtwdev);
-+
-+	if (rtwdev->chip->id == RTW_CHIP_TYPE_8821A)
-+		dm_info->default_cck_index = 0;
-+	else
-+		dm_info->default_cck_index = 24;
-+
-+	for (path = RF_PATH_A; path < rtwdev->hal.rf_path_num; path++) {
-+		ewma_thermal_init(&dm_info->avg_thermal[path]);
-+		dm_info->delta_power_index[path] = 0;
-+		dm_info->delta_power_index_last[path] = 0;
-+	}
-+
-+	dm_info->pwr_trk_triggered = false;
-+	dm_info->pwr_trk_init_trigger = true;
-+	dm_info->thermal_meter_k = rtwdev->efuse.thermal_meter_k;
-+}
-+
-+void rtw88xxa_power_off(struct rtw_dev *rtwdev,
-+			const struct rtw_pwr_seq_cmd *const *enter_lps_flow)
-+{
-+	struct rtw_usb *rtwusb = rtw_get_usb_priv(rtwdev);
-+	enum usb_device_speed speed = rtwusb->udev->speed;
-+	u16 ori_fsmc0;
-+	u8 reg_cr;
-+
-+	reg_cr = rtw_read8(rtwdev, REG_CR);
-+
-+	/* Already powered off */
-+	if (reg_cr == 0 || reg_cr == 0xEA)
-+		return;
-+
-+	rtw_hci_stop(rtwdev);
-+
-+	if (!rtwdev->efuse.btcoex)
-+		rtw_write16_clr(rtwdev, REG_GPIO_MUXCFG, BIT_EN_SIC);
-+
-+	/* set Reg 0xf008[3:4] to 2'11 to enable U1/U2 Mode in USB3.0. */
-+	if (speed == USB_SPEED_SUPER)
-+		rtw_write8_set(rtwdev, REG_USB_MOD, 0x18);
-+
-+	rtw_write32(rtwdev, REG_HISR0, 0xffffffff);
-+	rtw_write32(rtwdev, REG_HISR1, 0xffffffff);
-+	rtw_write32(rtwdev, REG_HIMR0, 0);
-+	rtw_write32(rtwdev, REG_HIMR1, 0);
-+
-+	if (rtwdev->efuse.btcoex)
-+		rtw_coex_power_off_setting(rtwdev);
-+
-+	ori_fsmc0 = rtw_read16(rtwdev, REG_APS_FSMCO);
-+	rtw_write16(rtwdev, REG_APS_FSMCO, ori_fsmc0 & ~APS_FSMCO_HW_POWERDOWN);
-+
-+	/* Stop Tx Report Timer. */
-+	rtw_write8_clr(rtwdev, REG_TX_RPT_CTRL, BIT(1));
-+
-+	/* Stop Rx */
-+	rtw_write8(rtwdev, REG_CR, 0);
-+
-+	rtw_pwr_seq_parser(rtwdev, enter_lps_flow);
-+
-+	if (rtw_read8(rtwdev, REG_MCUFW_CTRL) & BIT_RAM_DL_SEL)
-+		rtw88xxa_reset_8051(rtwdev);
-+
-+	rtw_write8_clr(rtwdev, REG_SYS_FUNC_EN + 1, BIT(2));
-+	rtw_write8(rtwdev, REG_MCUFW_CTRL, 0);
-+
-+	rtw_pwr_seq_parser(rtwdev, rtwdev->chip->pwr_off_seq);
-+
-+	if (ori_fsmc0 & APS_FSMCO_HW_POWERDOWN)
-+		rtw_write16_set(rtwdev, REG_APS_FSMCO, APS_FSMCO_HW_POWERDOWN);
-+
-+	clear_bit(RTW_FLAG_POWERON, rtwdev->flags);
-+}
-+EXPORT_SYMBOL(rtw88xxa_power_off);
-+
-+static void rtw88xxa_set_channel_bb_swing(struct rtw_dev *rtwdev, u8 band)
-+{
-+	rtw_write32_mask(rtwdev, REG_TXSCALE_A, BB_SWING_MASK,
-+			 rtw88xxa_get_bb_swing(rtwdev, band, RF_PATH_A));
-+	rtw_write32_mask(rtwdev, REG_TXSCALE_B, BB_SWING_MASK,
-+			 rtw88xxa_get_bb_swing(rtwdev, band, RF_PATH_B));
-+	rtw88xxa_pwrtrack_init(rtwdev);
-+}
-+
-+static void rtw8821a_set_ext_band_switch(struct rtw_dev *rtwdev, u8 band)
-+{
-+	rtw_write32_mask(rtwdev, REG_LED_CFG, BIT_DPDT_SEL_EN, 0);
-+	rtw_write32_mask(rtwdev, REG_LED_CFG, BIT_DPDT_WL_SEL, 1);
-+	rtw_write32_mask(rtwdev, REG_RFE_INV_A, 0xf, 7);
-+	rtw_write32_mask(rtwdev, REG_RFE_INV_A, 0xf0, 7);
-+
-+	if (band == RTW_BAND_2G)
-+		rtw_write32_mask(rtwdev, REG_RFE_INV_A, BIT(29) | BIT(28), 1);
-+	else
-+		rtw_write32_mask(rtwdev, REG_RFE_INV_A, BIT(29) | BIT(28), 2);
-+}
-+
-+static void rtw8821a_phy_set_rfe_reg_24g(struct rtw_dev *rtwdev)
-+{
-+	struct rtw_efuse *efuse = &rtwdev->efuse;
-+
-+	/* Turn off RF PA and LNA */
-+
-+	/* 0xCB0[15:12] = 0x7 (LNA_On)*/
-+	rtw_write32_mask(rtwdev, REG_RFE_PINMUX_A, 0xF000, 0x7);
-+	/* 0xCB0[7:4] = 0x7 (PAPE_A)*/
-+	rtw_write32_mask(rtwdev, REG_RFE_PINMUX_A, 0xF0, 0x7);
-+
-+	if (efuse->ext_lna_2g) {
-+		/* Turn on 2.4G External LNA */
-+		rtw_write32_mask(rtwdev, REG_RFE_INV_A, BIT(20), 1);
-+		rtw_write32_mask(rtwdev, REG_RFE_INV_A, BIT(22), 0);
-+		rtw_write32_mask(rtwdev, REG_RFE_PINMUX_A, GENMASK(2, 0), 0x2);
-+		rtw_write32_mask(rtwdev, REG_RFE_PINMUX_A, GENMASK(10, 8), 0x2);
-+	} else {
-+		/* Bypass 2.4G External LNA */
-+		rtw_write32_mask(rtwdev, REG_RFE_INV_A, BIT(20), 0);
-+		rtw_write32_mask(rtwdev, REG_RFE_INV_A, BIT(22), 0);
-+		rtw_write32_mask(rtwdev, REG_RFE_PINMUX_A, GENMASK(2, 0), 0x7);
-+		rtw_write32_mask(rtwdev, REG_RFE_PINMUX_A, GENMASK(10, 8), 0x7);
-+	}
-+}
-+
-+static void rtw8821a_phy_set_rfe_reg_5g(struct rtw_dev *rtwdev)
-+{
-+	/* Turn ON RF PA and LNA */
-+
-+	/* 0xCB0[15:12] = 0x7 (LNA_On)*/
-+	rtw_write32_mask(rtwdev, REG_RFE_PINMUX_A, 0xF000, 0x5);
-+	/* 0xCB0[7:4] = 0x7 (PAPE_A)*/
-+	rtw_write32_mask(rtwdev, REG_RFE_PINMUX_A, 0xF0, 0x4);
-+
-+	/* Bypass 2.4G External LNA */
-+	rtw_write32_mask(rtwdev, REG_RFE_INV_A, BIT(20), 0);
-+	rtw_write32_mask(rtwdev, REG_RFE_INV_A, BIT(22), 0);
-+	rtw_write32_mask(rtwdev, REG_RFE_PINMUX_A, GENMASK(2, 0), 0x7);
-+	rtw_write32_mask(rtwdev, REG_RFE_PINMUX_A, GENMASK(10, 8), 0x7);
-+}
-+
-+static void rtw8812a_phy_set_rfe_reg_24g(struct rtw_dev *rtwdev)
-+{
-+	switch (rtwdev->efuse.rfe_option) {
-+	case 0:
-+	case 2:
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_A, 0x77777777);
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x77777777);
-+		rtw_write32_mask(rtwdev, REG_RFE_INV_A, RFE_INV_MASK, 0x000);
-+		rtw_write32_mask(rtwdev, REG_RFE_INV_B, RFE_INV_MASK, 0x000);
-+		break;
-+	case 1:
-+		if (rtwdev->efuse.btcoex) {
-+			rtw_write32_mask(rtwdev, REG_RFE_PINMUX_A, 0xffffff, 0x777777);
-+			rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x77777777);
-+			rtw_write32_mask(rtwdev, REG_RFE_INV_A, 0x33f00000, 0x000);
-+			rtw_write32_mask(rtwdev, REG_RFE_INV_B, RFE_INV_MASK, 0x000);
-+		} else {
-+			rtw_write32(rtwdev, REG_RFE_PINMUX_A, 0x77777777);
-+			rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x77777777);
-+			rtw_write32_mask(rtwdev, REG_RFE_INV_A, RFE_INV_MASK, 0x000);
-+			rtw_write32_mask(rtwdev, REG_RFE_INV_B, RFE_INV_MASK, 0x000);
-+		}
-+		break;
-+	case 3:
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_A, 0x54337770);
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x54337770);
-+		rtw_write32_mask(rtwdev, REG_RFE_INV_A, RFE_INV_MASK, 0x010);
-+		rtw_write32_mask(rtwdev, REG_RFE_INV_B, RFE_INV_MASK, 0x010);
-+		rtw_write32_mask(rtwdev, REG_ANTSEL_SW, 0x00000303, 0x1);
-+		break;
-+	case 4:
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_A, 0x77777777);
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x77777777);
-+		rtw_write32_mask(rtwdev, REG_RFE_INV_A, RFE_INV_MASK, 0x001);
-+		rtw_write32_mask(rtwdev, REG_RFE_INV_B, RFE_INV_MASK, 0x001);
-+		break;
-+	case 5:
-+		rtw_write8(rtwdev, REG_RFE_PINMUX_A + 2, 0x77);
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x77777777);
-+		rtw_write8_clr(rtwdev, REG_RFE_INV_A + 3, BIT(0));
-+		rtw_write32_mask(rtwdev, REG_RFE_INV_B, RFE_INV_MASK, 0x000);
-+		break;
-+	case 6:
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_A, 0x07772770);
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x07772770);
-+		rtw_write32(rtwdev, REG_RFE_INV_A, 0x00000077);
-+		rtw_write32(rtwdev, REG_RFE_INV_B, 0x00000077);
-+		break;
-+	default:
-+		break;
-+	}
-+}
-+
-+static void rtw8812a_phy_set_rfe_reg_5g(struct rtw_dev *rtwdev)
-+{
-+	switch (rtwdev->efuse.rfe_option) {
-+	case 0:
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_A, 0x77337717);
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x77337717);
-+		rtw_write32_mask(rtwdev, REG_RFE_INV_A, RFE_INV_MASK, 0x010);
-+		rtw_write32_mask(rtwdev, REG_RFE_INV_B, RFE_INV_MASK, 0x010);
-+		break;
-+	case 1:
-+		if (rtwdev->efuse.btcoex) {
-+			rtw_write32_mask(rtwdev, REG_RFE_PINMUX_A, 0xffffff, 0x337717);
-+			rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x77337717);
-+			rtw_write32_mask(rtwdev, REG_RFE_INV_A, 0x33f00000, 0x000);
-+			rtw_write32_mask(rtwdev, REG_RFE_INV_B, RFE_INV_MASK, 0x000);
-+		} else {
-+			rtw_write32(rtwdev, REG_RFE_PINMUX_A, 0x77337717);
-+			rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x77337717);
-+			rtw_write32_mask(rtwdev, REG_RFE_INV_A, RFE_INV_MASK, 0x000);
-+			rtw_write32_mask(rtwdev, REG_RFE_INV_B, RFE_INV_MASK, 0x000);
-+		}
-+		break;
-+	case 2:
-+	case 4:
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_A, 0x77337777);
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x77337777);
-+		rtw_write32_mask(rtwdev, REG_RFE_INV_A, RFE_INV_MASK, 0x010);
-+		rtw_write32_mask(rtwdev, REG_RFE_INV_B, RFE_INV_MASK, 0x010);
-+		break;
-+	case 3:
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_A, 0x54337717);
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x54337717);
-+		rtw_write32_mask(rtwdev, REG_RFE_INV_A, RFE_INV_MASK, 0x010);
-+		rtw_write32_mask(rtwdev, REG_RFE_INV_B, RFE_INV_MASK, 0x010);
-+		rtw_write32_mask(rtwdev, REG_ANTSEL_SW, 0x00000303, 0x1);
-+		break;
-+	case 5:
-+		rtw_write8(rtwdev, REG_RFE_PINMUX_A + 2, 0x33);
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x77337777);
-+		rtw_write8_set(rtwdev, REG_RFE_INV_A + 3, BIT(0));
-+		rtw_write32_mask(rtwdev, REG_RFE_INV_B, RFE_INV_MASK, 0x010);
-+		break;
-+	case 6:
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_A, 0x07737717);
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x07737717);
-+		rtw_write32(rtwdev, REG_RFE_INV_A, 0x00000077);
-+		rtw_write32(rtwdev, REG_RFE_INV_B, 0x00000077);
-+		break;
-+	default:
-+		break;
-+	}
-+}
-+
-+static void rtw88xxa_switch_band(struct rtw_dev *rtwdev, u8 new_band, u8 bw)
-+{
-+	const struct rtw_chip_info *chip = rtwdev->chip;
-+	u16 basic_rates, reg_41a;
-+
-+	/* 8811au one antenna module doesn't support antenna div, so driver must
-+	 * control antenna band, otherwise one of the band will have issue
-+	 */
-+	if (chip->id == RTW_CHIP_TYPE_8821A && !rtwdev->efuse.btcoex &&
-+	    rtwdev->efuse.ant_div_cfg == 0)
-+		rtw8821a_set_ext_band_switch(rtwdev, new_band);
-+
-+	if (new_band == RTW_BAND_2G) {
-+		rtw_write32_set(rtwdev, REG_RXPSEL, BIT_RX_PSEL_RST);
-+
-+		if (chip->id == RTW_CHIP_TYPE_8821A) {
-+			rtw8821a_phy_set_rfe_reg_24g(rtwdev);
-+
-+			rtw_write32_mask(rtwdev, REG_TXSCALE_A, 0xf00, 0);
-+		} else {
-+			rtw_write32_mask(rtwdev, REG_BWINDICATION, 0x3, 0x1);
-+			rtw_write32_mask(rtwdev, REG_PDMFTH, GENMASK(17, 13), 0x17);
-+
-+			if (bw == RTW_CHANNEL_WIDTH_20 &&
-+			    rtwdev->hal.rf_type == RF_1T1R &&
-+			    !rtwdev->efuse.ext_lna_2g)
-+				rtw_write32_mask(rtwdev, REG_PDMFTH, GENMASK(3, 1), 0x02);
-+			else
-+				rtw_write32_mask(rtwdev, REG_PDMFTH, GENMASK(3, 1), 0x04);
-+
-+			rtw_write32_mask(rtwdev, REG_CCASEL, 0x3, 0);
-+
-+			rtw8812a_phy_set_rfe_reg_24g(rtwdev);
-+		}
-+
-+		rtw_write32_mask(rtwdev, REG_TXPSEL, 0xf0, 0x1);
-+		rtw_write32_mask(rtwdev, REG_CCK_RX, 0x0f000000, 0x1);
-+
-+		basic_rates = BIT(DESC_RATE1M) | BIT(DESC_RATE2M) |
-+			      BIT(DESC_RATE5_5M) | BIT(DESC_RATE11M) |
-+			      BIT(DESC_RATE6M) | BIT(DESC_RATE12M) |
-+			      BIT(DESC_RATE24M);
-+		rtw_write32_mask(rtwdev, REG_RRSR, 0xfffff, basic_rates);
-+
-+		rtw_write8_clr(rtwdev, REG_CCK_CHECK, BIT_CHECK_CCK_EN);
-+	} else { /* RTW_BAND_5G */
-+		if (chip->id == RTW_CHIP_TYPE_8821A)
-+			rtw8821a_phy_set_rfe_reg_5g(rtwdev);
-+
-+		rtw_write8_set(rtwdev, REG_CCK_CHECK, BIT_CHECK_CCK_EN);
-+
-+		read_poll_timeout_atomic(rtw_read16, reg_41a, (reg_41a & 0x30) == 0x30,
-+					 50, 2500, false, rtwdev, REG_TXPKT_EMPTY);
-+
-+		rtw_write32_set(rtwdev, REG_RXPSEL, BIT_RX_PSEL_RST);
-+
-+		if (chip->id == RTW_CHIP_TYPE_8821A) {
-+			rtw_write32_mask(rtwdev, REG_TXSCALE_A, 0xf00, 1);
-+		} else {
-+			rtw_write32_mask(rtwdev, REG_BWINDICATION, 0x3, 0x2);
-+			rtw_write32_mask(rtwdev, REG_PDMFTH, GENMASK(17, 13), 0x15);
-+			rtw_write32_mask(rtwdev, REG_PDMFTH, GENMASK(3, 1), 0x04);
-+
-+			rtw_write32_mask(rtwdev, REG_CCASEL, 0x3, 1);
-+
-+			rtw8812a_phy_set_rfe_reg_5g(rtwdev);
-+		}
-+
-+		rtw_write32_mask(rtwdev, REG_TXPSEL, 0xf0, 0);
-+		rtw_write32_mask(rtwdev, REG_CCK_RX, 0x0f000000, 0xf);
-+
-+		basic_rates = BIT(DESC_RATE6M) | BIT(DESC_RATE12M) |
-+			      BIT(DESC_RATE24M);
-+		rtw_write32_mask(rtwdev, REG_RRSR, 0xfffff, basic_rates);
-+	}
-+
-+	rtw88xxa_set_channel_bb_swing(rtwdev, new_band);
-+}
-+
-+int rtw88xxa_power_on(struct rtw_dev *rtwdev)
-+{
-+	struct rtw_usb *rtwusb = rtw_get_usb_priv(rtwdev);
-+	const struct rtw_chip_info *chip = rtwdev->chip;
-+	struct rtw_efuse *efuse = &rtwdev->efuse;
-+	struct rtw_hal *hal = &rtwdev->hal;
-+	int ret;
-+
-+	if (test_bit(RTW_FLAG_POWERON, rtwdev->flags))
-+		return 0;
-+
-+	/* Override rtw_chip_efuse_info_setup() */
-+	if (chip->id == RTW_CHIP_TYPE_8821A)
-+		efuse->btcoex = rtw_read32_mask(rtwdev, REG_WL_BT_PWR_CTRL,
-+						BIT_BT_FUNC_EN);
-+
-+	/* Override rtw_chip_efuse_info_setup() */
-+	if (chip->id == RTW_CHIP_TYPE_8812A)
-+		rtw8812a_read_amplifier_type(rtwdev);
-+
-+	ret = rtw_hci_setup(rtwdev);
-+	if (ret) {
-+		rtw_err(rtwdev, "failed to setup hci\n");
-+		goto err;
-+	}
-+
-+	/* Revise for U2/U3 switch we can not update RF-A/B reset.
-+	 * Reset after MAC power on to prevent RF R/W error.
-+	 * Is it a right method?
-+	 */
-+	if (chip->id == RTW_CHIP_TYPE_8812A) {
-+		rtw_write8(rtwdev, REG_RF_CTRL, 5);
-+		rtw_write8(rtwdev, REG_RF_CTRL, 7);
-+		rtw_write8(rtwdev, REG_RF_B_CTRL, 5);
-+		rtw_write8(rtwdev, REG_RF_B_CTRL, 7);
-+	}
-+
-+	/* If HW didn't go through a complete de-initial procedure,
-+	 * it probably occurs some problem for double initial
-+	 * procedure.
-+	 */
-+	rtw88xxau_hw_reset(rtwdev);
-+
-+	ret = rtw88xxau_init_power_on(rtwdev);
-+	if (ret) {
-+		rtw_err(rtwdev, "failed to power on\n");
-+		goto err;
-+	}
-+
-+	ret = rtw_set_trx_fifo_info(rtwdev);
-+	if (ret) {
-+		rtw_err(rtwdev, "failed to set trx fifo info\n");
-+		goto err;
-+	}
-+
-+	ret = rtw88xxa_llt_init(rtwdev, rtwdev->fifo.rsvd_boundary);
-+	if (ret) {
-+		rtw_err(rtwdev, "failed to init llt\n");
-+		goto err;
-+	}
-+
-+	rtw_write32_set(rtwdev, REG_TXDMA_OFFSET_CHK, BIT_DROP_DATA_EN);
-+
-+	ret = rtw_wait_firmware_completion(rtwdev);
-+	if (ret) {
-+		rtw_err(rtwdev, "failed to wait firmware completion\n");
-+		goto err_off;
-+	}
-+
-+	ret = rtw_download_firmware(rtwdev, &rtwdev->fw);
-+	if (ret) {
-+		rtw_err(rtwdev, "failed to download firmware\n");
-+		goto err_off;
-+	}
-+
-+	rtw_write8(rtwdev, REG_HMETFR, 0xf);
-+
-+	rtw_load_table(rtwdev, chip->mac_tbl);
-+
-+	rtw88xxau_init_queue_reserved_page(rtwdev);
-+	rtw88xxau_init_tx_buffer_boundary(rtwdev);
-+	rtw88xxau_init_queue_priority(rtwdev);
-+
-+	rtw_write16(rtwdev, REG_TRXFF_BNDY + 2,
-+		    chip->rxff_size - REPORT_BUF - 1);
-+
-+	if (chip->id == RTW_CHIP_TYPE_8812A)
-+		rtw_write8(rtwdev, REG_PBP,
-+			   u8_encode_bits(PBP_512, PBP_TX_MASK) |
-+			   u8_encode_bits(PBP_64, PBP_RX_MASK));
-+
-+	rtw_write8(rtwdev, REG_RX_DRVINFO_SZ, PHY_STATUS_SIZE);
-+
-+	rtw_write32(rtwdev, REG_HIMR0, 0);
-+	rtw_write32(rtwdev, REG_HIMR1, 0);
-+
-+	rtw_write32_mask(rtwdev, REG_CR, 0x30000, 0x2);
-+
-+	rtw88xxa_init_wmac_setting(rtwdev);
-+	rtw88xxa_init_adaptive_ctrl(rtwdev);
-+	rtw88xxa_init_edca(rtwdev);
-+
-+	rtw_write8_set(rtwdev, REG_FWHW_TXQ_CTRL, BIT(7));
-+	rtw_write8(rtwdev, REG_ACKTO, 0x80);
-+
-+	rtw88xxau_tx_aggregation(rtwdev);
-+
-+	rtw88xxa_init_beacon_parameters(rtwdev);
-+	rtw_write8(rtwdev, REG_BCN_MAX_ERR, 0xff);
-+
-+	rtw_hci_interface_cfg(rtwdev);
-+
-+	/* usb3 rx interval */
-+	rtw_write8(rtwdev, REG_USB3_RXITV, 0x01);
-+
-+	/* burst length=4, set 0x3400 for burst length=2 */
-+	rtw_write16(rtwdev, REG_RXDMA_STATUS, 0x7400);
-+	rtw_write8(rtwdev, REG_RXDMA_STATUS + 1, 0xf5);
-+
-+	/* 0x456 = 0x70, sugguested by Zhilin */
-+	if (chip->id == RTW_CHIP_TYPE_8821A)
-+		rtw_write8(rtwdev, REG_AMPDU_MAX_TIME, 0x5e);
-+	else
-+		rtw_write8(rtwdev, REG_AMPDU_MAX_TIME, 0x70);
-+
-+	rtw_write32(rtwdev, REG_AMPDU_MAX_LENGTH, 0xffffffff);
-+	rtw_write8(rtwdev, REG_USTIME_TSF, 0x50);
-+	rtw_write8(rtwdev, REG_USTIME_EDCA, 0x50);
-+
-+	if (rtwusb->udev->speed == USB_SPEED_SUPER)
-+		/* Disable U1/U2 Mode to avoid 2.5G spur in USB3.0. */
-+		rtw_write8_clr(rtwdev, REG_USB_MOD, BIT(4) | BIT(3));
-+
-+	rtw_write8_set(rtwdev, REG_SINGLE_AMPDU_CTRL, BIT_EN_SINGLE_APMDU);
-+
-+	/* for VHT packet length 11K */
-+	rtw_write8(rtwdev, REG_RX_PKT_LIMIT, 0x18);
-+
-+	rtw_write8(rtwdev, REG_PIFS, 0x00);
-+
-+	if (chip->id == RTW_CHIP_TYPE_8821A) {
-+		/* 0x0a0a too small, it can't pass AC logo. change to 0x1f1f */
-+		rtw_write16(rtwdev, REG_MAX_AGGR_NUM, 0x1f1f);
-+		rtw_write8(rtwdev, REG_FWHW_TXQ_CTRL, 0x80);
-+		rtw_write32(rtwdev, REG_FAST_EDCA_CTRL, 0x03087777);
-+	} else {
-+		rtw_write16(rtwdev, REG_MAX_AGGR_NUM, 0x1f1f);
-+		rtw_write8_clr(rtwdev, REG_FWHW_TXQ_CTRL, BIT(7));
-+	}
-+
-+	 /* to prevent mac is reseted by bus. */
-+	rtw_write8_set(rtwdev, REG_RSV_CTRL, BIT(5) | BIT(6));
-+
-+	/* ARFB table 9 for 11ac 5G 2SS */
-+	rtw_write32(rtwdev, REG_ARFR0, 0x00000010);
-+	rtw_write32(rtwdev, REG_ARFRH0, 0xfffff000);
-+
-+	/* ARFB table 10 for 11ac 5G 1SS */
-+	rtw_write32(rtwdev, REG_ARFR1_V1, 0x00000010);
-+	rtw_write32(rtwdev, REG_ARFRH1_V1, 0x003ff000);
-+
-+	/* ARFB table 11 for 11ac 24G 1SS */
-+	rtw_write32(rtwdev, REG_ARFR2_V1, 0x00000015);
-+	rtw_write32(rtwdev, REG_ARFRH2_V1, 0x003ff000);
-+
-+	/* ARFB table 12 for 11ac 24G 2SS */
-+	rtw_write32(rtwdev, REG_ARFR3_V1, 0x00000015);
-+	rtw_write32(rtwdev, REG_ARFRH3_V1, 0xffcff000);
-+
-+	rtw_write8_set(rtwdev, REG_CR, BIT_MACTXEN | BIT_MACRXEN);
-+
-+	rtw88xxa_phy_bb_config(rtwdev);
-+	rtw88xxa_phy_rf_config(rtwdev);
-+
-+	if (chip->id == RTW_CHIP_TYPE_8812A && hal->rf_path_num == 1)
-+		rtw8812a_config_1t(rtwdev);
-+
-+	rtw88xxa_switch_band(rtwdev, RTW_BAND_2G, RTW_CHANNEL_WIDTH_20);
-+
-+	rtw_write32(rtwdev, RTW_SEC_CMD_REG, BIT(31) | BIT(30));
-+
-+	rtw_write8(rtwdev, REG_HWSEQ_CTRL, 0xff);
-+	rtw_write32(rtwdev, REG_BAR_MODE_CTRL, 0x0201ffff);
-+	rtw_write8(rtwdev, REG_NAV_CTRL + 2, 0);
-+
-+	rtw_write8_clr(rtwdev, REG_GPIO_MUXCFG, BIT(5));
-+
-+	rtw_phy_init(rtwdev);
-+
-+	rtw88xxa_pwrtrack_init(rtwdev);
-+
-+	/* 0x4c6[3] 1: RTS BW = Data BW
-+	 * 0: RTS BW depends on CCA / secondary CCA result.
-+	 */
-+	rtw_write8_clr(rtwdev, REG_QUEUE_CTRL, BIT(3));
-+
-+	/* enable Tx report. */
-+	rtw_write8(rtwdev, REG_FWHW_TXQ_CTRL + 1, 0x0f);
-+
-+	/* Pretx_en, for WEP/TKIP SEC */
-+	rtw_write8(rtwdev, REG_EARLY_MODE_CONTROL + 3, 0x01);
-+
-+	rtw_write16(rtwdev, REG_TX_RPT_TIME, 0x3df0);
-+
-+	/* Reset USB mode switch setting */
-+	rtw_write8(rtwdev, REG_SYS_SDIO_CTRL, 0x0);
-+	rtw_write8(rtwdev, REG_ACLK_MON, 0x0);
-+
-+	rtw_write8(rtwdev, REG_USB_HRPWM, 0);
-+
-+	/* ack for xmit mgmt frames. */
-+	rtw_write32_set(rtwdev, REG_FWHW_TXQ_CTRL, BIT(12));
-+
-+	hal->cck_high_power = rtw_read32_mask(rtwdev, REG_CCK_RPT_FORMAT,
-+					      BIT_CCK_RPT_FORMAT);
-+
-+	ret = rtw_hci_start(rtwdev);
-+	if (ret) {
-+		rtw_err(rtwdev, "failed to start hci\n");
-+		goto err_off;
-+	}
-+
-+	if (efuse->btcoex) {
-+		rtw_coex_power_on_setting(rtwdev);
-+		rtw_coex_init_hw_config(rtwdev, false);
-+	}
-+
-+	set_bit(RTW_FLAG_POWERON, rtwdev->flags);
-+
-+	return 0;
-+
-+err_off:
-+	chip->ops->power_off(rtwdev);
-+
-+err:
-+	return ret;
-+}
-+EXPORT_SYMBOL(rtw88xxa_power_on);
-+
-+u32 rtw88xxa_phy_read_rf(struct rtw_dev *rtwdev,
-+			 enum rtw_rf_path rf_path, u32 addr, u32 mask)
-+{
-+	static const u32 pi_addr[2] = { REG_3WIRE_SWA, REG_3WIRE_SWB };
-+	static const u32 read_addr[2][2] = {
-+		{ REG_SI_READ_A, REG_SI_READ_B },
-+		{ REG_PI_READ_A, REG_PI_READ_B }
-+	};
-+	const struct rtw_chip_info *chip = rtwdev->chip;
-+	const struct rtw_hal *hal = &rtwdev->hal;
-+	bool set_cca, pi_mode;
-+	u32 val;
-+
-+	if (rf_path >= hal->rf_phy_num) {
-+		rtw_err(rtwdev, "unsupported rf path (%d)\n", rf_path);
-+		return INV_RF_DATA;
-+	}
-+
-+	/* CCA off to avoid reading the wrong value.
-+	 * Toggling CCA would affect RF 0x0, skip it.
-+	 */
-+	set_cca = addr != 0x0 && chip->id == RTW_CHIP_TYPE_8812A &&
-+		  hal->cut_version != RTW_CHIP_VER_CUT_C;
-+
-+	if (set_cca)
-+		rtw_write32_set(rtwdev, REG_CCA2ND, BIT(3));
-+
-+	addr &= 0xff;
-+
-+	pi_mode = rtw_read32_mask(rtwdev, pi_addr[rf_path], 0x4);
-+
-+	rtw_write32_mask(rtwdev, REG_HSSI_READ, MASKBYTE0, addr);
-+
-+	if (chip->id == RTW_CHIP_TYPE_8821A ||
-+	    hal->cut_version == RTW_CHIP_VER_CUT_C)
-+		udelay(20);
-+
-+	val = rtw_read32_mask(rtwdev, read_addr[pi_mode][rf_path], mask);
-+
-+	/* CCA on */
-+	if (set_cca)
-+		rtw_write32_clr(rtwdev, REG_CCA2ND, BIT(3));
-+
-+	return val;
-+}
-+EXPORT_SYMBOL(rtw88xxa_phy_read_rf);
-+
-+static void rtw8812a_phy_fix_spur(struct rtw_dev *rtwdev, u8 channel, u8 bw)
-+{
-+	/* C cut Item12 ADC FIFO CLOCK */
-+	if (rtwdev->hal.cut_version == RTW_CHIP_VER_CUT_C) {
-+		if (bw == RTW_CHANNEL_WIDTH_40 && channel == 11)
-+			rtw_write32_mask(rtwdev, REG_ADCCLK, 0xC00, 0x3);
-+		else
-+			rtw_write32_mask(rtwdev, REG_ADCCLK, 0xC00, 0x2);
-+
-+		/* A workaround to resolve 2480Mhz spur by setting ADC clock
-+		 * as 160M.
-+		 */
-+		if (bw == RTW_CHANNEL_WIDTH_20 && (channel == 13 || channel == 14)) {
-+			rtw_write32_mask(rtwdev, REG_ADCCLK, 0x300, 0x3);
-+			rtw_write32_mask(rtwdev, REG_ADC160, BIT(30), 1);
-+		} else if (bw == RTW_CHANNEL_WIDTH_40 && channel == 11) {
-+			rtw_write32_mask(rtwdev, REG_ADC160, BIT(30), 1);
-+		} else if (bw != RTW_CHANNEL_WIDTH_80) {
-+			rtw_write32_mask(rtwdev, REG_ADCCLK, 0x300, 0x2);
-+			rtw_write32_mask(rtwdev, REG_ADC160, BIT(30), 0);
-+		}
-+	} else {
-+		/* A workaround to resolve 2480Mhz spur by setting ADC clock
-+		 * as 160M.
-+		 */
-+		if (bw == RTW_CHANNEL_WIDTH_20 && (channel == 13 || channel == 14))
-+			rtw_write32_mask(rtwdev, REG_ADCCLK, 0x300, 0x3);
-+		else if (channel <= 14) /* 2.4G only */
-+			rtw_write32_mask(rtwdev, REG_ADCCLK, 0x300, 0x2);
-+	}
-+}
-+
-+static void rtw88xxa_switch_channel(struct rtw_dev *rtwdev, u8 channel, u8 bw)
-+{
-+	struct rtw_hal *hal = &rtwdev->hal;
-+	u32 fc_area, rf_mod_ag;
-+	u8 path;
-+
-+	switch (channel) {
-+	case 36 ... 48:
-+		fc_area = 0x494;
-+		break;
-+	case 50 ... 64:
-+		fc_area = 0x453;
-+		break;
-+	case 100 ... 116:
-+		fc_area = 0x452;
-+		break;
-+	default:
-+		if (channel >= 118)
-+			fc_area = 0x412;
-+		else
-+			fc_area = 0x96a;
-+		break;
-+	}
-+
-+	rtw_write32_mask(rtwdev, REG_CLKTRK, 0x1ffe0000, fc_area);
-+
-+	for (path = 0; path < hal->rf_path_num; path++) {
-+		switch (channel) {
-+		case 36 ... 64:
-+			rf_mod_ag = 0x101;
-+			break;
-+		case 100 ... 140:
-+			rf_mod_ag = 0x301;
-+			break;
-+		default:
-+			if (channel > 140)
-+				rf_mod_ag = 0x501;
-+			else
-+				rf_mod_ag = 0x000;
-+			break;
-+		}
-+
-+		rtw_write_rf(rtwdev, path, RF_CFGCH,
-+			     RF18_RFSI_MASK | RF18_BAND_MASK, rf_mod_ag);
-+
-+		if (rtwdev->chip->id == RTW_CHIP_TYPE_8812A)
-+			rtw8812a_phy_fix_spur(rtwdev, channel, bw);
-+
-+		rtw_write_rf(rtwdev, path, RF_CFGCH, RF18_CHANNEL_MASK, channel);
-+	}
-+}
-+
-+static void rtw88xxa_set_reg_bw(struct rtw_dev *rtwdev, u8 bw)
-+{
-+	u16 val16 = rtw_read16(rtwdev, REG_WMAC_TRXPTCL_CTL);
-+
-+	val16 &= ~BIT_RFMOD;
-+	if (bw == RTW_CHANNEL_WIDTH_80)
-+		val16 |= BIT_RFMOD_80M;
-+	else if (bw == RTW_CHANNEL_WIDTH_40)
-+		val16 |= BIT_RFMOD_40M;
-+
-+	rtw_write16(rtwdev, REG_WMAC_TRXPTCL_CTL, val16);
-+}
-+
-+static void rtw88xxa_post_set_bw_mode(struct rtw_dev *rtwdev, u8 channel,
-+				      u8 bw, u8 primary_chan_idx)
-+{
-+	struct rtw_hal *hal = &rtwdev->hal;
-+	u8 txsc40 = 0, txsc20, txsc;
-+	u8 reg_837, l1pkval;
-+
-+	rtw88xxa_set_reg_bw(rtwdev, bw);
-+
-+	txsc20 = primary_chan_idx;
-+	if (bw == RTW_CHANNEL_WIDTH_80) {
-+		if (txsc20 == RTW_SC_20_UPPER || txsc20 == RTW_SC_20_UPMOST)
-+			txsc40 = RTW_SC_40_UPPER;
-+		else
-+			txsc40 = RTW_SC_40_LOWER;
-+	}
-+
-+	txsc = BIT_TXSC_20M(txsc20) | BIT_TXSC_40M(txsc40);
-+	rtw_write8(rtwdev, REG_DATA_SC, txsc);
-+
-+	reg_837 = rtw_read8(rtwdev, REG_BWINDICATION + 3);
-+
-+	switch (bw) {
-+	default:
-+	case RTW_CHANNEL_WIDTH_20:
-+		rtw_write32_mask(rtwdev, REG_ADCCLK, 0x003003C3, 0x00300200);
-+		rtw_write32_mask(rtwdev, REG_ADC160, BIT(30), 0);
-+
-+		if (hal->rf_type == RF_2T2R)
-+			rtw_write32_mask(rtwdev, REG_L1PKTH, 0x03C00000, 7);
-+		else
-+			rtw_write32_mask(rtwdev, REG_L1PKTH, 0x03C00000, 8);
-+
-+		break;
-+	case RTW_CHANNEL_WIDTH_40:
-+		rtw_write32_mask(rtwdev, REG_ADCCLK, 0x003003C3, 0x00300201);
-+		rtw_write32_mask(rtwdev, REG_ADC160, BIT(30), 0);
-+		rtw_write32_mask(rtwdev, REG_ADCCLK, 0x3C, txsc);
-+		rtw_write32_mask(rtwdev, REG_CCA2ND, 0xf0000000, txsc);
-+
-+		if (reg_837 & BIT(2)) {
-+			l1pkval = 6;
-+		} else {
-+			if (hal->rf_type == RF_2T2R)
-+				l1pkval = 7;
-+			else
-+				l1pkval = 8;
-+		}
-+
-+		rtw_write32_mask(rtwdev, REG_L1PKTH, 0x03C00000, l1pkval);
-+
-+		if (txsc == RTW_SC_20_UPPER)
-+			rtw_write32_set(rtwdev, REG_RXSB, BIT(4));
-+		else
-+			rtw_write32_clr(rtwdev, REG_RXSB, BIT(4));
-+
-+		break;
-+	case RTW_CHANNEL_WIDTH_80:
-+		rtw_write32_mask(rtwdev, REG_ADCCLK, 0x003003C3, 0x00300202);
-+		rtw_write32_mask(rtwdev, REG_ADC160, BIT(30), 1);
-+		rtw_write32_mask(rtwdev, REG_ADCCLK, 0x3C, txsc);
-+		rtw_write32_mask(rtwdev, REG_CCA2ND, 0xf0000000, txsc);
-+
-+		if (reg_837 & BIT(2)) {
-+			l1pkval = 5;
-+		} else {
-+			if (hal->rf_type == RF_2T2R)
-+				l1pkval = 6;
-+			else
-+				l1pkval = 7;
-+		}
-+
-+		rtw_write32_mask(rtwdev, REG_L1PKTH, 0x03C00000, l1pkval);
-+
-+		break;
-+	}
-+}
-+
-+static void rtw88xxa_set_channel_rf(struct rtw_dev *rtwdev, u8 channel, u8 bw)
-+{
-+	u8 path;
-+
-+	for (path = RF_PATH_A; path < rtwdev->hal.rf_path_num; path++) {
-+		switch (bw) {
-+		case RTW_CHANNEL_WIDTH_5:
-+		case RTW_CHANNEL_WIDTH_10:
-+		case RTW_CHANNEL_WIDTH_20:
-+		default:
-+			rtw_write_rf(rtwdev, path, RF_CFGCH, RF18_BW_MASK, 3);
-+			break;
-+		case RTW_CHANNEL_WIDTH_40:
-+			rtw_write_rf(rtwdev, path, RF_CFGCH, RF18_BW_MASK, 1);
-+			break;
-+		case RTW_CHANNEL_WIDTH_80:
-+			rtw_write_rf(rtwdev, path, RF_CFGCH, RF18_BW_MASK, 0);
-+			break;
-+		}
-+	}
-+}
-+
-+void rtw88xxa_set_channel(struct rtw_dev *rtwdev, u8 channel, u8 bw,
-+			  u8 primary_chan_idx)
-+{
-+	u8 old_band, new_band;
-+
-+	if (rtw_read8(rtwdev, REG_CCK_CHECK) & BIT_CHECK_CCK_EN)
-+		old_band = RTW_BAND_5G;
-+	else
-+		old_band = RTW_BAND_2G;
-+
-+	if (channel > 14)
-+		new_band = RTW_BAND_5G;
-+	else
-+		new_band = RTW_BAND_2G;
-+
-+	if (new_band != old_band)
-+		rtw88xxa_switch_band(rtwdev, new_band, bw);
-+
-+	rtw88xxa_switch_channel(rtwdev, channel, bw);
-+
-+	rtw88xxa_post_set_bw_mode(rtwdev, channel, bw, primary_chan_idx);
-+
-+	if (rtwdev->chip->id == RTW_CHIP_TYPE_8812A)
-+		rtw8812a_phy_fix_spur(rtwdev, channel, bw);
-+
-+	rtw88xxa_set_channel_rf(rtwdev, channel, bw);
-+}
-+EXPORT_SYMBOL(rtw88xxa_set_channel);
-+
-+void rtw88xxa_query_phy_status(struct rtw_dev *rtwdev, u8 *phy_status,
-+			       struct rtw_rx_pkt_stat *pkt_stat,
-+			       s8 (*cck_rx_pwr)(u8 lna_idx, u8 vga_idx))
-+{
-+	struct rtw_dm_info *dm_info = &rtwdev->dm_info;
-+	struct rtw_jaguar_phy_status_rpt *rpt;
-+	u8 gain[RTW_RF_PATH_MAX], rssi, i;
-+	s8 rx_pwr_db, power_a, power_b;
-+	const s8 min_rx_power = -120;
-+	u8 lna_idx, vga_idx;
-+
-+	rpt = (struct rtw_jaguar_phy_status_rpt *)phy_status;
-+
-+	if (pkt_stat->rate <= DESC_RATE11M) {
-+		lna_idx = le32_get_bits(rpt->w1, RTW_JGRPHY_W1_AGC_RPT_LNA_IDX);
-+		vga_idx = le32_get_bits(rpt->w1, RTW_JGRPHY_W1_AGC_RPT_VGA_IDX);
-+
-+		rx_pwr_db = cck_rx_pwr(lna_idx, vga_idx);
-+
-+		pkt_stat->rx_power[RF_PATH_A] = rx_pwr_db;
-+		pkt_stat->rssi = rtw_phy_rf_power_2_rssi(pkt_stat->rx_power, 1);
-+		dm_info->rssi[RF_PATH_A] = pkt_stat->rssi;
-+		pkt_stat->bw = RTW_CHANNEL_WIDTH_20;
-+		pkt_stat->signal_power = rx_pwr_db;
-+	} else { /* OFDM rate */
-+		gain[RF_PATH_A] = le32_get_bits(rpt->w0, RTW_JGRPHY_W0_GAIN_A);
-+		gain[RF_PATH_B] = le32_get_bits(rpt->w0, RTW_JGRPHY_W0_GAIN_B);
-+
-+		for (i = RF_PATH_A; i < rtwdev->hal.rf_path_num; i++) {
-+			pkt_stat->rx_power[i] = gain[i] - 110;
-+			rssi = rtw_phy_rf_power_2_rssi(&pkt_stat->rx_power[i], 1);
-+			dm_info->rssi[i] = rssi;
-+		}
-+
-+		pkt_stat->rssi = rtw_phy_rf_power_2_rssi(pkt_stat->rx_power,
-+							 rtwdev->hal.rf_path_num);
-+
-+		power_a = pkt_stat->rx_power[RF_PATH_A];
-+		power_b = pkt_stat->rx_power[RF_PATH_B];
-+		if (rtwdev->hal.rf_path_num == 1)
-+			power_b = power_a;
-+
-+		pkt_stat->signal_power = max3(power_a, power_b, min_rx_power);
-+	}
-+}
-+EXPORT_SYMBOL(rtw88xxa_query_phy_status);
-+
-+static void
-+rtw88xxa_set_tx_power_index_by_rate(struct rtw_dev *rtwdev, u8 path,
-+				    u8 rs, u32 *phy_pwr_idx)
-+{
-+	static const u32 offset_txagc[2] = {
-+		REG_TX_AGC_A_CCK_11_CCK_1, REG_TX_AGC_B_CCK_11_CCK_1
-+	};
-+	u8 rate, rate_idx, pwr_index, shift;
-+	struct rtw_hal *hal = &rtwdev->hal;
-+	bool write_1ss_mcs9;
-+	u32 mask;
-+	int j;
-+
-+	for (j = 0; j < rtw_rate_size[rs]; j++) {
-+		rate = rtw_rate_section[rs][j];
-+
-+		pwr_index = hal->tx_pwr_tbl[path][rate];
-+
-+		shift = rate & 0x3;
-+		*phy_pwr_idx |= ((u32)pwr_index << (shift * 8));
-+
-+		write_1ss_mcs9 = rate == DESC_RATEVHT1SS_MCS9 &&
-+				 hal->rf_path_num == 1;
-+
-+		if (write_1ss_mcs9)
-+			mask = MASKLWORD;
-+		else
-+			mask = MASKDWORD;
-+
-+		if (shift == 0x3 || write_1ss_mcs9) {
-+			rate_idx = rate & 0xfc;
-+			if (rate >= DESC_RATEVHT1SS_MCS0)
-+				rate_idx -= 0x10;
-+
-+			rtw_write32_mask(rtwdev, offset_txagc[path] + rate_idx,
-+					 mask, *phy_pwr_idx);
-+
-+			*phy_pwr_idx = 0;
-+		}
-+	}
-+}
-+
-+static void rtw88xxa_tx_power_training(struct rtw_dev *rtwdev, u8 bw,
-+				       u8 channel, u8 path)
-+{
-+	static const u32 write_offset[] = {
-+		REG_TX_PWR_TRAINING_A, REG_TX_PWR_TRAINING_B,
-+	};
-+	u32 power_level, write_data;
-+	u8 i;
-+
-+	power_level = rtwdev->hal.tx_pwr_tbl[path][DESC_RATEMCS7];
-+	write_data = 0;
-+
-+	for (i = 0; i < 3; i++) {
-+		if (i == 0)
-+			power_level -= 10;
-+		else if (i == 1)
-+			power_level -= 8;
-+		else
-+			power_level -= 6;
-+
-+		write_data |= max_t(u32, power_level, 2) << (i * 8);
-+	}
-+
-+	rtw_write32_mask(rtwdev, write_offset[path], 0xffffff, write_data);
-+}
-+
-+void rtw88xxa_set_tx_power_index(struct rtw_dev *rtwdev)
-+{
-+	struct rtw_hal *hal = &rtwdev->hal;
-+	u32 phy_pwr_idx = 0;
-+	int rs, path;
-+
-+	for (path = 0; path < hal->rf_path_num; path++) {
-+		for (rs = 0; rs < RTW_RATE_SECTION_MAX; rs++) {
-+			if (hal->rf_path_num == 1 &&
-+			    (rs == RTW_RATE_SECTION_HT_2S ||
-+			     rs == RTW_RATE_SECTION_VHT_2S))
-+				continue;
-+
-+			if (test_bit(RTW_FLAG_SCANNING, rtwdev->flags) &&
-+			    rs > RTW_RATE_SECTION_OFDM)
-+				continue;
-+
-+			if (hal->current_band_type == RTW_BAND_5G &&
-+			    rs == RTW_RATE_SECTION_CCK)
-+				continue;
-+
-+			rtw88xxa_set_tx_power_index_by_rate(rtwdev, path, rs,
-+							    &phy_pwr_idx);
-+		}
-+
-+		rtw88xxa_tx_power_training(rtwdev, hal->current_band_width,
-+					   hal->current_channel, path);
-+	}
-+}
-+EXPORT_SYMBOL(rtw88xxa_set_tx_power_index);
-+
-+void rtw88xxa_false_alarm_statistics(struct rtw_dev *rtwdev)
-+{
-+	struct rtw_dm_info *dm_info = &rtwdev->dm_info;
-+	u32 cck_fa_cnt, ofdm_fa_cnt;
-+	u32 crc32_cnt, cca32_cnt;
-+	u32 cck_enable;
-+
-+	cck_enable = rtw_read32(rtwdev, REG_RXPSEL) & BIT(28);
-+	cck_fa_cnt = rtw_read16(rtwdev, REG_FA_CCK);
-+	ofdm_fa_cnt = rtw_read16(rtwdev, REG_FA_OFDM);
-+
-+	dm_info->cck_fa_cnt = cck_fa_cnt;
-+	dm_info->ofdm_fa_cnt = ofdm_fa_cnt;
-+	dm_info->total_fa_cnt = ofdm_fa_cnt;
-+	if (cck_enable)
-+		dm_info->total_fa_cnt += cck_fa_cnt;
-+
-+	crc32_cnt = rtw_read32(rtwdev, REG_CRC_CCK);
-+	dm_info->cck_ok_cnt = u32_get_bits(crc32_cnt, MASKLWORD);
-+	dm_info->cck_err_cnt = u32_get_bits(crc32_cnt, MASKHWORD);
-+
-+	crc32_cnt = rtw_read32(rtwdev, REG_CRC_OFDM);
-+	dm_info->ofdm_ok_cnt = u32_get_bits(crc32_cnt, MASKLWORD);
-+	dm_info->ofdm_err_cnt = u32_get_bits(crc32_cnt, MASKHWORD);
-+
-+	crc32_cnt = rtw_read32(rtwdev, REG_CRC_HT);
-+	dm_info->ht_ok_cnt = u32_get_bits(crc32_cnt, MASKLWORD);
-+	dm_info->ht_err_cnt = u32_get_bits(crc32_cnt, MASKHWORD);
-+
-+	crc32_cnt = rtw_read32(rtwdev, REG_CRC_VHT);
-+	dm_info->vht_ok_cnt = u32_get_bits(crc32_cnt, MASKLWORD);
-+	dm_info->vht_err_cnt = u32_get_bits(crc32_cnt, MASKHWORD);
-+
-+	cca32_cnt = rtw_read32(rtwdev, REG_CCA_OFDM);
-+	dm_info->ofdm_cca_cnt = u32_get_bits(cca32_cnt, MASKHWORD);
-+	dm_info->total_cca_cnt = dm_info->ofdm_cca_cnt;
-+	if (cck_enable) {
-+		cca32_cnt = rtw_read32(rtwdev, REG_CCA_CCK);
-+		dm_info->cck_cca_cnt = u32_get_bits(cca32_cnt, MASKLWORD);
-+		dm_info->total_cca_cnt += dm_info->cck_cca_cnt;
-+	}
-+
-+	rtw_write32_set(rtwdev, REG_FAS, BIT(17));
-+	rtw_write32_clr(rtwdev, REG_FAS, BIT(17));
-+	rtw_write32_clr(rtwdev, REG_CCK0_FAREPORT, BIT(15));
-+	rtw_write32_set(rtwdev, REG_CCK0_FAREPORT, BIT(15));
-+	rtw_write32_set(rtwdev, REG_CNTRST, BIT(0));
-+	rtw_write32_clr(rtwdev, REG_CNTRST, BIT(0));
-+}
-+EXPORT_SYMBOL(rtw88xxa_false_alarm_statistics);
-+
-+void rtw88xxa_iqk_backup_mac_bb(struct rtw_dev *rtwdev,
-+				u32 *macbb_backup,
-+				const u32 *backup_macbb_reg,
-+				u32 macbb_num)
-+{
-+	u32 i;
-+
-+	/* [31] = 0 --> Page C */
-+	rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+
-+	/* save MACBB default value */
-+	for (i = 0; i < macbb_num; i++)
-+		macbb_backup[i] = rtw_read32(rtwdev, backup_macbb_reg[i]);
-+}
-+EXPORT_SYMBOL(rtw88xxa_iqk_backup_mac_bb);
-+
-+void rtw88xxa_iqk_backup_afe(struct rtw_dev *rtwdev, u32 *afe_backup,
-+			     const u32 *backup_afe_reg, u32 afe_num)
-+{
-+	u32 i;
-+
-+	/* [31] = 0 --> Page C */
-+	rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+
-+	/* Save AFE Parameters */
-+	for (i = 0; i < afe_num; i++)
-+		afe_backup[i] = rtw_read32(rtwdev, backup_afe_reg[i]);
-+}
-+EXPORT_SYMBOL(rtw88xxa_iqk_backup_afe);
-+
-+void rtw88xxa_iqk_restore_mac_bb(struct rtw_dev *rtwdev,
-+				 u32 *macbb_backup,
-+				 const u32 *backup_macbb_reg,
-+				 u32 macbb_num)
-+{
-+	u32 i;
-+
-+	/* [31] = 0 --> Page C */
-+	rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+
-+	/* Reload MacBB Parameters */
-+	for (i = 0; i < macbb_num; i++)
-+		rtw_write32(rtwdev, backup_macbb_reg[i], macbb_backup[i]);
-+}
-+EXPORT_SYMBOL(rtw88xxa_iqk_restore_mac_bb);
-+
-+void rtw88xxa_iqk_configure_mac(struct rtw_dev *rtwdev)
-+{
-+	/* [31] = 0 --> Page C */
-+	rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+
-+	rtw_write8(rtwdev, REG_TXPAUSE, 0x3f);
-+	rtw_write32_mask(rtwdev, REG_BCN_CTRL,
-+			 (BIT_EN_BCN_FUNCTION << 8) | BIT_EN_BCN_FUNCTION, 0x0);
-+
-+	/* RX ante off */
-+	rtw_write8(rtwdev, REG_RXPSEL, 0x00);
-+
-+	/* CCA off */
-+	rtw_write32_mask(rtwdev, REG_CCA2ND, 0xf, 0xc);
-+
-+	/* CCK RX path off */
-+	rtw_write8(rtwdev, REG_CCK_RX + 3, 0xf);
-+}
-+EXPORT_SYMBOL(rtw88xxa_iqk_configure_mac);
-+
-+bool rtw88xxa_iqk_finish(int average, int threshold,
-+			 int *x_temp, int *y_temp, int *x, int *y,
-+			 bool break_inner, bool break_outer)
-+{
-+	bool finish = false;
-+	int i, ii, dx, dy;
-+
-+	for (i = 0; i < average; i++) {
-+		for (ii = i + 1; ii < average; ii++) {
-+			dx = abs_diff(x_temp[i] >> 21, x_temp[ii] >> 21);
-+			dy = abs_diff(y_temp[i] >> 21, y_temp[ii] >> 21);
-+
-+			if (dx < threshold && dy < threshold) {
-+				*x = ((x_temp[i] >> 21) + (x_temp[ii] >> 21));
-+				*y = ((y_temp[i] >> 21) + (y_temp[ii] >> 21));
-+
-+				*x /= 2;
-+				*y /= 2;
-+
-+				finish = true;
-+
-+				if (break_inner)
-+					break;
-+			}
-+		}
-+
-+		if (finish && break_outer)
-+			break;
-+	}
-+
-+	return finish;
-+}
-+EXPORT_SYMBOL(rtw88xxa_iqk_finish);
-+
-+static void rtw88xxa_pwrtrack_set(struct rtw_dev *rtwdev, u8 tx_rate, u8 path)
-+{
-+	static const u32 reg_txscale[2] = { REG_TXSCALE_A, REG_TXSCALE_B };
-+	struct rtw_dm_info *dm_info = &rtwdev->dm_info;
-+	u8 cck_swing_idx, ofdm_swing_idx;
-+	u8 pwr_tracking_limit;
-+
-+	switch (tx_rate) {
-+	case DESC_RATE1M ... DESC_RATE11M:
-+		pwr_tracking_limit = 32;
-+		break;
-+	case DESC_RATE6M ... DESC_RATE48M:
-+	case DESC_RATEMCS3 ... DESC_RATEMCS4:
-+	case DESC_RATEMCS11 ... DESC_RATEMCS12:
-+	case DESC_RATEVHT1SS_MCS3 ... DESC_RATEVHT1SS_MCS4:
-+	case DESC_RATEVHT2SS_MCS3 ... DESC_RATEVHT2SS_MCS4:
-+		pwr_tracking_limit = 30;
-+		break;
-+	case DESC_RATE54M:
-+	case DESC_RATEMCS5 ... DESC_RATEMCS7:
-+	case DESC_RATEMCS13 ... DESC_RATEMCS15:
-+	case DESC_RATEVHT1SS_MCS5 ... DESC_RATEVHT1SS_MCS6:
-+	case DESC_RATEVHT2SS_MCS5 ... DESC_RATEVHT2SS_MCS6:
-+		pwr_tracking_limit = 28;
-+		break;
-+	case DESC_RATEMCS0 ... DESC_RATEMCS2:
-+	case DESC_RATEMCS8 ... DESC_RATEMCS10:
-+	case DESC_RATEVHT1SS_MCS0 ... DESC_RATEVHT1SS_MCS2:
-+	case DESC_RATEVHT2SS_MCS0 ... DESC_RATEVHT2SS_MCS2:
-+		pwr_tracking_limit = 34;
-+		break;
-+	case DESC_RATEVHT1SS_MCS7:
-+	case DESC_RATEVHT2SS_MCS7:
-+		pwr_tracking_limit = 26;
-+		break;
-+	default:
-+	case DESC_RATEVHT1SS_MCS8:
-+	case DESC_RATEVHT2SS_MCS8:
-+		pwr_tracking_limit = 24;
-+		break;
-+	case DESC_RATEVHT1SS_MCS9:
-+	case DESC_RATEVHT2SS_MCS9:
-+		pwr_tracking_limit = 22;
-+		break;
-+	}
-+
-+	cck_swing_idx = dm_info->delta_power_index[path] + dm_info->default_cck_index;
-+	ofdm_swing_idx = dm_info->delta_power_index[path] + dm_info->default_ofdm_index;
-+
-+	if (ofdm_swing_idx > pwr_tracking_limit) {
-+		if (path == RF_PATH_A)
-+			dm_info->txagc_remnant_cck = cck_swing_idx - pwr_tracking_limit;
-+		dm_info->txagc_remnant_ofdm[path] = ofdm_swing_idx - pwr_tracking_limit;
-+
-+		ofdm_swing_idx = pwr_tracking_limit;
-+	} else if (ofdm_swing_idx == 0) {
-+		if (path == RF_PATH_A)
-+			dm_info->txagc_remnant_cck = cck_swing_idx;
-+		dm_info->txagc_remnant_ofdm[path] = ofdm_swing_idx;
-+	} else {
-+		if (path == RF_PATH_A)
-+			dm_info->txagc_remnant_cck = 0;
-+		dm_info->txagc_remnant_ofdm[path] = 0;
-+	}
-+
-+	rtw_write32_mask(rtwdev, reg_txscale[path], GENMASK(31, 21),
-+			 rtw88xxa_txscale_tbl[ofdm_swing_idx]);
-+}
-+
-+void rtw88xxa_phy_pwrtrack(struct rtw_dev *rtwdev,
-+			   void (*do_lck)(struct rtw_dev *rtwdev),
-+			   void (*do_iqk)(struct rtw_dev *rtwdev))
-+{
-+	struct rtw_dm_info *dm_info = &rtwdev->dm_info;
-+	struct rtw_hal *hal = &rtwdev->hal;
-+	struct rtw_swing_table swing_table;
-+	s8 remnant_pre[RTW_RF_PATH_MAX];
-+	u8 thermal_value, delta, path;
-+	bool need_iqk;
-+
-+	rtw_phy_config_swing_table(rtwdev, &swing_table);
-+
-+	if (rtwdev->efuse.thermal_meter[0] == 0xff) {
-+		pr_err_once("efuse thermal meter is 0xff\n");
-+		return;
-+	}
-+
-+	thermal_value = rtw_read_rf(rtwdev, RF_PATH_A, RF_T_METER, 0xfc00);
-+
-+	rtw_phy_pwrtrack_avg(rtwdev, thermal_value, RF_PATH_A);
-+
-+	need_iqk = rtw_phy_pwrtrack_need_iqk(rtwdev);
-+
-+	if (need_iqk && do_lck)
-+		do_lck(rtwdev);
-+
-+	if (dm_info->pwr_trk_init_trigger)
-+		dm_info->pwr_trk_init_trigger = false;
-+	else if (!rtw_phy_pwrtrack_thermal_changed(rtwdev, thermal_value,
-+						   RF_PATH_A))
-+		goto iqk;
-+
-+	delta = rtw_phy_pwrtrack_get_delta(rtwdev, RF_PATH_A);
-+
-+	for (path = RF_PATH_A; path < hal->rf_path_num; path++) {
-+		remnant_pre[path] = dm_info->txagc_remnant_ofdm[path];
-+
-+		dm_info->delta_power_index[path] =
-+			rtw_phy_pwrtrack_get_pwridx(rtwdev, &swing_table, path,
-+						    RF_PATH_A, delta);
-+
-+		if (dm_info->delta_power_index[path] !=
-+		    dm_info->delta_power_index_last[path]) {
-+			dm_info->delta_power_index_last[path] =
-+				dm_info->delta_power_index[path];
-+
-+			rtw88xxa_pwrtrack_set(rtwdev, dm_info->tx_rate, path);
-+		}
-+	}
-+
-+	for (path = RF_PATH_A; path < hal->rf_path_num; path++) {
-+		if (remnant_pre[path] != dm_info->txagc_remnant_ofdm[path]) {
-+			rtw_phy_set_tx_power_level(rtwdev,
-+						   hal->current_channel);
-+			break;
-+		}
-+	}
-+
-+iqk:
-+	if (need_iqk)
-+		do_iqk(rtwdev);
-+}
-+EXPORT_SYMBOL(rtw88xxa_phy_pwrtrack);
-+
-+void rtw88xxa_phy_cck_pd_set(struct rtw_dev *rtwdev, u8 new_lvl)
-+{
-+	static const u8 pd[CCK_PD_LV_MAX] = {0x40, 0x83, 0xcd, 0xdd, 0xed};
-+	struct rtw_dm_info *dm_info = &rtwdev->dm_info;
-+
-+	/* Override rtw_phy_cck_pd_lv_link(). It implements something
-+	 * like type 2/3/4. We need type 1 here.
-+	 */
-+	if (rtw_is_assoc(rtwdev)) {
-+		if (dm_info->min_rssi > 60) {
-+			new_lvl = CCK_PD_LV3;
-+		} else if (dm_info->min_rssi > 35) {
-+			new_lvl = CCK_PD_LV2;
-+		} else if (dm_info->min_rssi > 20) {
-+			if (dm_info->cck_fa_avg > 500)
-+				new_lvl = CCK_PD_LV2;
-+			else if (dm_info->cck_fa_avg < 250)
-+				new_lvl = CCK_PD_LV1;
-+			else
-+				return;
-+		} else {
-+			new_lvl = CCK_PD_LV1;
-+		}
-+	}
-+
-+	rtw_dbg(rtwdev, RTW_DBG_PHY, "lv: (%d) -> (%d)\n",
-+		dm_info->cck_pd_lv[RTW_CHANNEL_WIDTH_20][RF_PATH_A], new_lvl);
-+
-+	if (dm_info->cck_pd_lv[RTW_CHANNEL_WIDTH_20][RF_PATH_A] == new_lvl)
-+		return;
-+
-+	dm_info->cck_fa_avg = CCK_FA_AVG_RESET;
-+	dm_info->cck_pd_lv[RTW_CHANNEL_WIDTH_20][RF_PATH_A] = new_lvl;
-+
-+	rtw_write8(rtwdev, REG_CCK_PD_TH, pd[new_lvl]);
-+}
-+EXPORT_SYMBOL(rtw88xxa_phy_cck_pd_set);
-+
-+MODULE_AUTHOR("Realtek Corporation");
-+MODULE_DESCRIPTION("Realtek 802.11ac wireless 8821a/8811a/8812a common code");
-+MODULE_LICENSE("Dual BSD/GPL");
---- /dev/null
-+++ b/drivers/net/wireless/realtek/rtw88/rtw88xxa.h
-@@ -0,0 +1,175 @@
-+/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
-+/* Copyright(c) 2024  Realtek Corporation
-+ */
-+
-+#ifndef __RTW88XXA_H__
-+#define __RTW88XXA_H__
-+
-+#include <asm/byteorder.h>
-+#include "reg.h"
-+
-+struct rtw8821au_efuse {
-+	u8 res4[48];			/* 0xd0 */
-+	u8 vid[2];			/* 0x100 */
-+	u8 pid[2];
-+	u8 res8[3];
-+	u8 mac_addr[ETH_ALEN];		/* 0x107 */
-+	u8 res9[243];
-+} __packed;
-+
-+struct rtw8812au_efuse {
-+	u8 vid[2];			/* 0xd0 */
-+	u8 pid[2];			/* 0xd2 */
-+	u8 res0[3];
-+	u8 mac_addr[ETH_ALEN];		/* 0xd7 */
-+	u8 res1[291];
-+} __packed;
-+
-+struct rtw88xxa_efuse {
-+	__le16 rtl_id;
-+	u8 res0[6];			/* 0x02 */
-+	u8 usb_mode;			/* 0x08 */
-+	u8 res1[7];			/* 0x09 */
-+
-+	/* power index for four RF paths */
-+	struct rtw_txpwr_idx txpwr_idx_table[4];
-+
-+	u8 channel_plan;		/* 0xb8 */
-+	u8 xtal_k;
-+	u8 thermal_meter;
-+	u8 iqk_lck;
-+	u8 pa_type;			/* 0xbc */
-+	u8 lna_type_2g;			/* 0xbd */
-+	u8 res2;
-+	u8 lna_type_5g;			/* 0xbf */
-+	u8 res3;
-+	u8 rf_board_option;		/* 0xc1 */
-+	u8 rf_feature_option;
-+	u8 rf_bt_setting;
-+	u8 eeprom_version;
-+	u8 eeprom_customer_id;		/* 0xc5 */
-+	u8 tx_bb_swing_setting_2g;
-+	u8 tx_bb_swing_setting_5g;
-+	u8 tx_pwr_calibrate_rate;
-+	u8 rf_antenna_option;		/* 0xc9 */
-+	u8 rfe_option;
-+	u8 country_code[2];
-+	u8 res4[3];
-+	union {
-+		struct rtw8821au_efuse rtw8821au;
-+		struct rtw8812au_efuse rtw8812au;
-+	};
-+} __packed;
-+
-+static_assert(sizeof(struct rtw88xxa_efuse) == 512);
-+
-+#define WLAN_BCN_DMA_TIME			0x02
-+#define WLAN_TBTT_PROHIBIT			0x04
-+#define WLAN_TBTT_HOLD_TIME			0x064
-+#define WLAN_TBTT_TIME	(WLAN_TBTT_PROHIBIT |\
-+			(WLAN_TBTT_HOLD_TIME << BIT_SHIFT_TBTT_HOLD_TIME_AP))
-+
-+struct rtw_jaguar_phy_status_rpt {
-+	__le32 w0;
-+	__le32 w1;
-+	__le32 w2;
-+	__le32 w3;
-+	__le32 w4;
-+	__le32 w5;
-+	__le32 w6;
-+} __packed;
-+
-+#define RTW_JGRPHY_W0_GAIN_A		GENMASK(6, 0)
-+#define RTW_JGRPHY_W0_TRSW_A		BIT(7)
-+#define RTW_JGRPHY_W0_GAIN_B		GENMASK(14, 8)
-+#define RTW_JGRPHY_W0_TRSW_B		BIT(15)
-+#define RTW_JGRPHY_W0_CHL_NUM		GENMASK(25, 16)
-+#define RTW_JGRPHY_W0_SUB_CHNL		GENMASK(29, 26)
-+#define RTW_JGRPHY_W0_R_RFMOD		GENMASK(31, 30)
-+
-+/* CCK: */
-+#define RTW_JGRPHY_W1_SIG_QUAL		GENMASK(7, 0)
-+#define RTW_JGRPHY_W1_AGC_RPT_VGA_IDX	GENMASK(12, 8)
-+#define RTW_JGRPHY_W1_AGC_RPT_LNA_IDX	GENMASK(15, 13)
-+#define RTW_JGRPHY_W1_BB_POWER		GENMASK(23, 16)
-+/* OFDM: */
-+#define RTW_JGRPHY_W1_PWDB_ALL		GENMASK(7, 0)
-+#define RTW_JGRPHY_W1_CFO_SHORT_A	GENMASK(15, 8)	/* s8 */
-+#define RTW_JGRPHY_W1_CFO_SHORT_B	GENMASK(23, 16)	/* s8 */
-+#define RTW_JGRPHY_W1_BT_RF_CH_MSB	GENMASK(31, 30)
-+
-+#define RTW_JGRPHY_W2_ANT_DIV_SW_A	BIT(0)
-+#define RTW_JGRPHY_W2_ANT_DIV_SW_B	BIT(1)
-+#define RTW_JGRPHY_W2_BT_RF_CH_LSB	GENMASK(7, 2)
-+#define RTW_JGRPHY_W2_CFO_TAIL_A	GENMASK(15, 8)	/* s8 */
-+#define RTW_JGRPHY_W2_CFO_TAIL_B	GENMASK(23, 16)	/* s8 */
-+#define RTW_JGRPHY_W2_PCTS_MSK_RPT_0	GENMASK(31, 24)
-+
-+#define RTW_JGRPHY_W3_PCTS_MSK_RPT_1	GENMASK(7, 0)
-+/* Stream 1 and 2 RX EVM: */
-+#define RTW_JGRPHY_W3_RXEVM_1		GENMASK(15, 8)	/* s8 */
-+#define RTW_JGRPHY_W3_RXEVM_2		GENMASK(23, 16)	/* s8 */
-+#define RTW_JGRPHY_W3_RXSNR_A		GENMASK(31, 24)	/* s8 */
-+
-+#define RTW_JGRPHY_W4_RXSNR_B		GENMASK(7, 0)	/* s8 */
-+#define RTW_JGRPHY_W4_PCTS_MSK_RPT_2	GENMASK(21, 8)
-+#define RTW_JGRPHY_W4_PCTS_RPT_VALID	BIT(22)
-+#define RTW_JGRPHY_W4_RXEVM_3		GENMASK(31, 24)	/* s8 */
-+
-+#define RTW_JGRPHY_W5_RXEVM_4		GENMASK(7, 0)	/* s8 */
-+/* 8812a, stream 1 and 2 CSI: */
-+#define RTW_JGRPHY_W5_CSI_CURRENT_1	GENMASK(15, 8)
-+#define RTW_JGRPHY_W5_CSI_CURRENT_2	GENMASK(23, 16)
-+/* 8814a: */
-+#define RTW_JGRPHY_W5_RXSNR_C		GENMASK(15, 8)	/* s8 */
-+#define RTW_JGRPHY_W5_RXSNR_D		GENMASK(23, 16)	/* s8 */
-+#define RTW_JGRPHY_W5_GAIN_C		GENMASK(30, 24)
-+#define RTW_JGRPHY_W5_TRSW_C		BIT(31)
-+
-+#define RTW_JGRPHY_W6_GAIN_D		GENMASK(6, 0)
-+#define RTW_JGRPHY_W6_TRSW_D		BIT(7)
-+#define RTW_JGRPHY_W6_SIGEVM		GENMASK(15, 8)	/* s8 */
-+#define RTW_JGRPHY_W6_ANTIDX_ANTC	GENMASK(18, 16)
-+#define RTW_JGRPHY_W6_ANTIDX_ANTD	GENMASK(21, 19)
-+#define RTW_JGRPHY_W6_DPDT_CTRL_KEEP	BIT(22)
-+#define RTW_JGRPHY_W6_GNT_BT_KEEP	BIT(23)
-+#define RTW_JGRPHY_W6_ANTIDX_ANTA	GENMASK(26, 24)
-+#define RTW_JGRPHY_W6_ANTIDX_ANTB	GENMASK(29, 27)
-+#define RTW_JGRPHY_W6_HW_ANTSW_OCCUR	GENMASK(31, 30)
-+
-+#define RF18_BW_MASK		(BIT(11) | BIT(10))
-+
-+void rtw88xxa_efuse_grant(struct rtw_dev *rtwdev, bool on);
-+int rtw88xxa_read_efuse(struct rtw_dev *rtwdev, u8 *log_map);
-+void rtw88xxa_power_off(struct rtw_dev *rtwdev,
-+			const struct rtw_pwr_seq_cmd *const *enter_lps_flow);
-+int rtw88xxa_power_on(struct rtw_dev *rtwdev);
-+u32 rtw88xxa_phy_read_rf(struct rtw_dev *rtwdev,
-+			 enum rtw_rf_path rf_path, u32 addr, u32 mask);
-+void rtw88xxa_set_channel(struct rtw_dev *rtwdev, u8 channel, u8 bw,
-+			  u8 primary_chan_idx);
-+void rtw88xxa_query_phy_status(struct rtw_dev *rtwdev, u8 *phy_status,
-+			       struct rtw_rx_pkt_stat *pkt_stat,
-+			       s8 (*cck_rx_pwr)(u8 lna_idx, u8 vga_idx));
-+void rtw88xxa_set_tx_power_index(struct rtw_dev *rtwdev);
-+void rtw88xxa_false_alarm_statistics(struct rtw_dev *rtwdev);
-+void rtw88xxa_iqk_backup_mac_bb(struct rtw_dev *rtwdev,
-+				u32 *macbb_backup,
-+				const u32 *backup_macbb_reg,
-+				u32 macbb_num);
-+void rtw88xxa_iqk_backup_afe(struct rtw_dev *rtwdev, u32 *afe_backup,
-+			     const u32 *backup_afe_reg, u32 afe_num);
-+void rtw88xxa_iqk_restore_mac_bb(struct rtw_dev *rtwdev,
-+				 u32 *macbb_backup,
-+				 const u32 *backup_macbb_reg,
-+				 u32 macbb_num);
-+void rtw88xxa_iqk_configure_mac(struct rtw_dev *rtwdev);
-+bool rtw88xxa_iqk_finish(int average, int threshold,
-+			 int *x_temp, int *y_temp, int *x, int *y,
-+			 bool break_inner, bool break_outer);
-+void rtw88xxa_phy_pwrtrack(struct rtw_dev *rtwdev,
-+			   void (*do_lck)(struct rtw_dev *rtwdev),
-+			   void (*do_iqk)(struct rtw_dev *rtwdev));
-+void rtw88xxa_phy_cck_pd_set(struct rtw_dev *rtwdev, u8 new_lvl);
-+
-+#endif
diff --git a/package/kernel/mac80211/patches/rtl/042-v6.13-wifi-rtw88-Add-rtw8821a.-c-h.patch b/package/kernel/mac80211/patches/rtl/042-v6.13-wifi-rtw88-Add-rtw8821a.-c-h.patch
deleted file mode 100644
index dca3f7b275..0000000000
--- a/package/kernel/mac80211/patches/rtl/042-v6.13-wifi-rtw88-Add-rtw8821a.-c-h.patch
+++ /dev/null
@@ -1,1230 +0,0 @@
-From 32e284a238806d1984ea68cda25f6b09a4053b94 Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 30 Oct 2024 20:28:15 +0200
-Subject: [PATCH] wifi: rtw88: Add rtw8821a.{c,h}
-
-These contain code specific to RTL8821AU.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/37218648-ada7-4fad-b7bd-d2aee28cefb9@gmail.com
----
- drivers/net/wireless/realtek/rtw88/rtw8821a.c | 1197 +++++++++++++++++
- drivers/net/wireless/realtek/rtw88/rtw8821a.h |   10 +
- 2 files changed, 1207 insertions(+)
- create mode 100644 drivers/net/wireless/realtek/rtw88/rtw8821a.c
- create mode 100644 drivers/net/wireless/realtek/rtw88/rtw8821a.h
-
---- /dev/null
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8821a.c
-@@ -0,0 +1,1197 @@
-+// SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause
-+/* Copyright(c) 2024  Realtek Corporation
-+ */
-+
-+#include "main.h"
-+#include "coex.h"
-+#include "phy.h"
-+#include "reg.h"
-+#include "rtw88xxa.h"
-+#include "rtw8821a.h"
-+#include "rtw8821a_table.h"
-+#include "tx.h"
-+
-+static void rtw8821a_power_off(struct rtw_dev *rtwdev)
-+{
-+	rtw88xxa_power_off(rtwdev, enter_lps_flow_8821a);
-+}
-+
-+static s8 rtw8821a_cck_rx_pwr(u8 lna_idx, u8 vga_idx)
-+{
-+	static const s8 lna_gain_table[] = {15, -1, -17, 0, -30, -38};
-+	s8 rx_pwr_all = 0;
-+	s8 lna_gain;
-+
-+	switch (lna_idx) {
-+	case 5:
-+	case 4:
-+	case 2:
-+	case 1:
-+	case 0:
-+		lna_gain = lna_gain_table[lna_idx];
-+		rx_pwr_all = lna_gain - 2 * vga_idx;
-+		break;
-+	default:
-+		break;
-+	}
-+
-+	return rx_pwr_all;
-+}
-+
-+static void rtw8821a_query_phy_status(struct rtw_dev *rtwdev, u8 *phy_status,
-+				      struct rtw_rx_pkt_stat *pkt_stat)
-+{
-+	rtw88xxa_query_phy_status(rtwdev, phy_status, pkt_stat,
-+				  rtw8821a_cck_rx_pwr);
-+}
-+
-+static void rtw8821a_cfg_ldo25(struct rtw_dev *rtwdev, bool enable)
-+{
-+}
-+
-+#define CAL_NUM_8821A 3
-+#define MACBB_REG_NUM_8821A 8
-+#define AFE_REG_NUM_8821A 4
-+#define RF_REG_NUM_8821A 3
-+
-+static void rtw8821a_iqk_backup_rf(struct rtw_dev *rtwdev, u32 *rfa_backup,
-+				   const u32 *backup_rf_reg, u32 rf_num)
-+{
-+	u32 i;
-+
-+	/* [31] = 0 --> Page C */
-+	rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+
-+	/* Save RF Parameters */
-+	for (i = 0; i < rf_num; i++)
-+		rfa_backup[i] = rtw_read_rf(rtwdev, RF_PATH_A,
-+					    backup_rf_reg[i], MASKDWORD);
-+}
-+
-+static void rtw8821a_iqk_restore_rf(struct rtw_dev *rtwdev,
-+				    const u32 *backup_rf_reg,
-+				    u32 *RF_backup, u32 rf_reg_num)
-+{
-+	u32 i;
-+
-+	/* [31] = 0 --> Page C */
-+	rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+
-+	for (i = 0; i < rf_reg_num; i++)
-+		rtw_write_rf(rtwdev, RF_PATH_A, backup_rf_reg[i],
-+			     RFREG_MASK, RF_backup[i]);
-+}
-+
-+static void rtw8821a_iqk_restore_afe(struct rtw_dev *rtwdev, u32 *afe_backup,
-+				     const u32 *backup_afe_reg, u32 afe_num)
-+{
-+	u32 i;
-+
-+	/* [31] = 0 --> Page C */
-+	rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+
-+	/* Reload AFE Parameters */
-+	for (i = 0; i < afe_num; i++)
-+		rtw_write32(rtwdev, backup_afe_reg[i], afe_backup[i]);
-+
-+	/* [31] = 1 --> Page C1 */
-+	rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x1);
-+
-+	rtw_write32(rtwdev, REG_OFDM0_XA_TX_IQ_IMBALANCE, 0x0);
-+	rtw_write32(rtwdev, REG_OFDM0_A_TX_AFE, 0x0);
-+	rtw_write32(rtwdev, REG_OFDM0_XB_TX_IQ_IMBALANCE, 0x0);
-+	rtw_write32(rtwdev, REG_TSSI_TRK_SW, 0x3c000000);
-+	rtw_write32(rtwdev, REG_LSSI_WRITE_A, 0x00000080);
-+	rtw_write32(rtwdev, REG_TXAGCIDX, 0x00000000);
-+	rtw_write32(rtwdev, REG_IQK_DPD_CFG, 0x20040000);
-+	rtw_write32(rtwdev, REG_CFG_PMPD, 0x20000000);
-+	rtw_write32(rtwdev, REG_RFECTL_A, 0x0);
-+}
-+
-+static void rtw8821a_iqk_rx_fill(struct rtw_dev *rtwdev,
-+				 unsigned int rx_x, unsigned int rx_y)
-+{
-+	/* [31] = 0 --> Page C */
-+	rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+
-+	rtw_write32_mask(rtwdev, REG_RX_IQC_AB_A,
-+			 0x000003ff, rx_x >> 1);
-+	rtw_write32_mask(rtwdev, REG_RX_IQC_AB_A,
-+			 0x03ff0000, (rx_y >> 1) & 0x3ff);
-+}
-+
-+static void rtw8821a_iqk_tx_fill(struct rtw_dev *rtwdev,
-+				 unsigned int tx_x, unsigned int tx_y)
-+{
-+	/* [31] = 1 --> Page C1 */
-+	rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x1);
-+
-+	rtw_write32(rtwdev, REG_LSSI_WRITE_A, 0x00000080);
-+	rtw_write32(rtwdev, REG_IQK_DPD_CFG, 0x20040000);
-+	rtw_write32(rtwdev, REG_CFG_PMPD, 0x20000000);
-+	rtw_write32_mask(rtwdev, REG_IQC_Y, 0x000007ff, tx_y);
-+	rtw_write32_mask(rtwdev, REG_IQC_X, 0x000007ff, tx_x);
-+}
-+
-+static void rtw8821a_iqk_tx_vdf_true(struct rtw_dev *rtwdev, u32 cal,
-+				     bool *tx0iqkok,
-+				     int tx_x0[CAL_NUM_8821A],
-+				     int tx_y0[CAL_NUM_8821A])
-+{
-+	u32 cal_retry, delay_count, iqk_ready, tx_fail;
-+	int tx_dt[3], vdf_y[3], vdf_x[3];
-+	int k;
-+
-+	for (k = 0; k < 3; k++) {
-+		switch (k) {
-+		case 0:
-+			/* TX_Tone_idx[9:0], TxK_Mask[29] TX_Tone = 16 */
-+			rtw_write32(rtwdev, REG_OFDM0_XA_TX_IQ_IMBALANCE,
-+				    0x18008c38);
-+			/* RX_Tone_idx[9:0], RxK_Mask[29] */
-+			rtw_write32(rtwdev, REG_OFDM0_A_TX_AFE, 0x38008c38);
-+			rtw_write32_mask(rtwdev, REG_INTPO_SETA, BIT(31), 0x0);
-+			break;
-+		case 1:
-+			rtw_write32_mask(rtwdev, REG_OFDM0_XA_TX_IQ_IMBALANCE,
-+					 BIT(28), 0x0);
-+			rtw_write32_mask(rtwdev, REG_OFDM0_A_TX_AFE,
-+					 BIT(28), 0x0);
-+			rtw_write32_mask(rtwdev, REG_INTPO_SETA, BIT(31), 0x0);
-+			break;
-+		case 2:
-+			rtw_dbg(rtwdev, RTW_DBG_RFK,
-+				"vdf_y[1] = %x vdf_y[0] = %x\n",
-+				vdf_y[1] >> 21 & 0x00007ff,
-+				vdf_y[0] >> 21 & 0x00007ff);
-+
-+			rtw_dbg(rtwdev, RTW_DBG_RFK,
-+				"vdf_x[1] = %x vdf_x[0] = %x\n",
-+				vdf_x[1] >> 21 & 0x00007ff,
-+				vdf_x[0] >> 21 & 0x00007ff);
-+
-+			tx_dt[cal] = (vdf_y[1] >> 20) - (vdf_y[0] >> 20);
-+			tx_dt[cal] = (16 * tx_dt[cal]) * 10000 / 15708;
-+			tx_dt[cal] = (tx_dt[cal] >> 1) + (tx_dt[cal] & BIT(0));
-+
-+			/* TX_Tone_idx[9:0], TxK_Mask[29] TX_Tone = 16 */
-+			rtw_write32(rtwdev, REG_OFDM0_XA_TX_IQ_IMBALANCE,
-+				    0x18008c20);
-+			/* RX_Tone_idx[9:0], RxK_Mask[29] */
-+			rtw_write32(rtwdev, REG_OFDM0_A_TX_AFE, 0x38008c20);
-+			rtw_write32_mask(rtwdev, REG_INTPO_SETA, BIT(31), 0x1);
-+			rtw_write32_mask(rtwdev, REG_INTPO_SETA, 0x3fff0000,
-+					 tx_dt[cal] & 0x00003fff);
-+			break;
-+		}
-+
-+		rtw_write32(rtwdev, REG_RFECTL_A, 0x00100000);
-+
-+		for (cal_retry = 0; cal_retry < 10; cal_retry++) {
-+			/* one shot */
-+			rtw_write32(rtwdev, REG_IQK_COM64, 0xfa000000);
-+			rtw_write32(rtwdev, REG_IQK_COM64, 0xf8000000);
-+
-+			mdelay(10);
-+
-+			rtw_write32(rtwdev, REG_RFECTL_A, 0x00000000);
-+
-+			for (delay_count = 0; delay_count < 20; delay_count++) {
-+				iqk_ready = rtw_read32_mask(rtwdev,
-+							    REG_IQKA_END,
-+							    BIT(10));
-+
-+				/* Originally: if (~iqk_ready || delay_count > 20)
-+				 * that looks like a typo so make it more explicit
-+				 */
-+				iqk_ready = true;
-+
-+				if (iqk_ready)
-+					break;
-+
-+				mdelay(1);
-+			}
-+
-+			if (delay_count < 20) {
-+				/* ============TXIQK Check============== */
-+				tx_fail = rtw_read32_mask(rtwdev,
-+							  REG_IQKA_END,
-+							  BIT(12));
-+
-+				/* Originally: if (~tx_fail) {
-+				 * It looks like a typo, so make it more explicit.
-+				 */
-+				tx_fail = false;
-+
-+				if (!tx_fail) {
-+					rtw_write32(rtwdev, REG_RFECTL_A,
-+						    0x02000000);
-+					vdf_x[k] = rtw_read32_mask(rtwdev,
-+								   REG_IQKA_END,
-+								   0x07ff0000);
-+					vdf_x[k] <<= 21;
-+
-+					rtw_write32(rtwdev, REG_RFECTL_A,
-+						    0x04000000);
-+					vdf_y[k] = rtw_read32_mask(rtwdev,
-+								   REG_IQKA_END,
-+								   0x07ff0000);
-+					vdf_y[k] <<= 21;
-+
-+					*tx0iqkok = true;
-+					break;
-+				}
-+
-+				rtw_write32_mask(rtwdev, REG_IQC_Y,
-+						 0x000007ff, 0x0);
-+				rtw_write32_mask(rtwdev, REG_IQC_X,
-+						 0x000007ff, 0x200);
-+			}
-+
-+			*tx0iqkok = false;
-+		}
-+	}
-+
-+	if (k == 3) {
-+		tx_x0[cal] = vdf_x[k - 1];
-+		tx_y0[cal] = vdf_y[k - 1];
-+	}
-+}
-+
-+static void rtw8821a_iqk_tx_vdf_false(struct rtw_dev *rtwdev, u32 cal,
-+				      bool *tx0iqkok,
-+				      int tx_x0[CAL_NUM_8821A],
-+				      int tx_y0[CAL_NUM_8821A])
-+{
-+	u32 cal_retry, delay_count, iqk_ready, tx_fail;
-+
-+	/* TX_Tone_idx[9:0], TxK_Mask[29] TX_Tone = 16 */
-+	rtw_write32(rtwdev, REG_OFDM0_XA_TX_IQ_IMBALANCE, 0x18008c10);
-+	/* RX_Tone_idx[9:0], RxK_Mask[29] */
-+	rtw_write32(rtwdev, REG_OFDM0_A_TX_AFE, 0x38008c10);
-+	rtw_write32(rtwdev, REG_RFECTL_A, 0x00100000);
-+
-+	for (cal_retry = 0; cal_retry < 10; cal_retry++) {
-+		/* one shot */
-+		rtw_write32(rtwdev, REG_IQK_COM64, 0xfa000000);
-+		rtw_write32(rtwdev, REG_IQK_COM64, 0xf8000000);
-+
-+		mdelay(10);
-+		rtw_write32(rtwdev, REG_RFECTL_A, 0x00000000);
-+
-+		for (delay_count = 0; delay_count < 20; delay_count++) {
-+			iqk_ready = rtw_read32_mask(rtwdev, REG_IQKA_END, BIT(10));
-+
-+			/* Originally: if (~iqk_ready || delay_count > 20)
-+			 * that looks like a typo so make it more explicit
-+			 */
-+			iqk_ready = true;
-+
-+			if (iqk_ready)
-+				break;
-+
-+			mdelay(1);
-+		}
-+
-+		if (delay_count < 20) {
-+			/* ============TXIQK Check============== */
-+			tx_fail = rtw_read32_mask(rtwdev, REG_IQKA_END, BIT(12));
-+
-+			/* Originally: if (~tx_fail) {
-+			 * It looks like a typo, so make it more explicit.
-+			 */
-+			tx_fail = false;
-+
-+			if (!tx_fail) {
-+				rtw_write32(rtwdev, REG_RFECTL_A, 0x02000000);
-+				tx_x0[cal] = rtw_read32_mask(rtwdev, REG_IQKA_END,
-+							     0x07ff0000);
-+				tx_x0[cal] <<= 21;
-+
-+				rtw_write32(rtwdev, REG_RFECTL_A, 0x04000000);
-+				tx_y0[cal] = rtw_read32_mask(rtwdev, REG_IQKA_END,
-+							     0x07ff0000);
-+				tx_y0[cal] <<= 21;
-+
-+				*tx0iqkok = true;
-+				break;
-+			}
-+
-+			rtw_write32_mask(rtwdev, REG_IQC_Y, 0x000007ff, 0x0);
-+			rtw_write32_mask(rtwdev, REG_IQC_X, 0x000007ff, 0x200);
-+		}
-+
-+		*tx0iqkok = false;
-+	}
-+}
-+
-+static void rtw8821a_iqk_rx(struct rtw_dev *rtwdev, u32 cal, bool *rx0iqkok,
-+			    int rx_x0[CAL_NUM_8821A],
-+			    int rx_y0[CAL_NUM_8821A])
-+{
-+	u32 cal_retry, delay_count, iqk_ready, rx_fail;
-+
-+	rtw_write32(rtwdev, REG_RFECTL_A, 0x00100000);
-+
-+	for (cal_retry = 0; cal_retry < 10; cal_retry++) {
-+		/* one shot */
-+		rtw_write32(rtwdev, REG_IQK_COM64, 0xfa000000);
-+		rtw_write32(rtwdev, REG_IQK_COM64, 0xf8000000);
-+
-+		mdelay(10);
-+
-+		rtw_write32(rtwdev, REG_RFECTL_A, 0x00000000);
-+
-+		for (delay_count = 0; delay_count < 20; delay_count++) {
-+			iqk_ready = rtw_read32_mask(rtwdev, REG_IQKA_END, BIT(10));
-+
-+			/* Originally: if (~iqk_ready || delay_count > 20)
-+			 * that looks like a typo so make it more explicit
-+			 */
-+			iqk_ready = true;
-+
-+			if (iqk_ready)
-+				break;
-+
-+			mdelay(1);
-+		}
-+
-+		if (delay_count < 20) {
-+			/* ============RXIQK Check============== */
-+			rx_fail = rtw_read32_mask(rtwdev, REG_IQKA_END, BIT(11));
-+			if (!rx_fail) {
-+				rtw_write32(rtwdev, REG_RFECTL_A, 0x06000000);
-+				rx_x0[cal] = rtw_read32_mask(rtwdev, REG_IQKA_END,
-+							     0x07ff0000);
-+				rx_x0[cal] <<= 21;
-+
-+				rtw_write32(rtwdev, REG_RFECTL_A, 0x08000000);
-+				rx_y0[cal] = rtw_read32_mask(rtwdev, REG_IQKA_END,
-+							     0x07ff0000);
-+				rx_y0[cal] <<= 21;
-+
-+				*rx0iqkok = true;
-+				break;
-+			}
-+
-+			rtw_write32_mask(rtwdev, REG_RX_IQC_AB_A,
-+					 0x000003ff, 0x200 >> 1);
-+			rtw_write32_mask(rtwdev, REG_RX_IQC_AB_A,
-+					 0x03ff0000, 0x0 >> 1);
-+		}
-+
-+		*rx0iqkok = false;
-+	}
-+}
-+
-+static void rtw8821a_iqk(struct rtw_dev *rtwdev)
-+{
-+	int tx_average = 0, rx_average = 0, rx_iqk_loop = 0;
-+	const struct rtw_efuse *efuse = &rtwdev->efuse;
-+	int tx_x = 0, tx_y = 0, rx_x = 0, rx_y = 0;
-+	const struct rtw_hal *hal = &rtwdev->hal;
-+	bool tx0iqkok = false, rx0iqkok = false;
-+	int rx_x_temp = 0, rx_y_temp = 0;
-+	int rx_x0[2][CAL_NUM_8821A];
-+	int rx_y0[2][CAL_NUM_8821A];
-+	int tx_x0[CAL_NUM_8821A];
-+	int tx_y0[CAL_NUM_8821A];
-+	bool rx_finish1 = false;
-+	bool rx_finish2 = false;
-+	bool vdf_enable;
-+	u32 cal;
-+	int i;
-+
-+	rtw_dbg(rtwdev, RTW_DBG_RFK,
-+		"band_width = %d, ext_pa = %d, ext_pa_5g = %d\n",
-+		hal->current_band_width, efuse->ext_pa_2g, efuse->ext_pa_5g);
-+
-+	vdf_enable = hal->current_band_width == RTW_CHANNEL_WIDTH_80;
-+
-+	for (cal = 0; cal < CAL_NUM_8821A; cal++) {
-+		/* path-A LOK */
-+
-+		/* [31] = 0 --> Page C */
-+		rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+
-+		/* ========path-A AFE all on======== */
-+		/* Port 0 DAC/ADC on */
-+		rtw_write32(rtwdev, REG_AFE_PWR1_A, 0x77777777);
-+		rtw_write32(rtwdev, REG_AFE_PWR2_A, 0x77777777);
-+
-+		rtw_write32(rtwdev, REG_RX_WAIT_CCA_TX_CCK_RFON_A, 0x19791979);
-+
-+		/* hardware 3-wire off */
-+		rtw_write32_mask(rtwdev, REG_3WIRE_SWA, 0xf, 0x4);
-+
-+		/* LOK setting */
-+
-+		/* 1. DAC/ADC sampling rate (160 MHz) */
-+		rtw_write32_mask(rtwdev, REG_CK_MONHA, GENMASK(26, 24), 0x7);
-+
-+		/* 2. LoK RF setting (at BW = 20M) */
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_LUTWE, RFREG_MASK, 0x80002);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_CFGCH, 0x00c00, 0x3);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_MODE_TABLE_ADDR, RFREG_MASK,
-+			     0x20000);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_MODE_TABLE_DATA0, RFREG_MASK,
-+			     0x0003f);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_MODE_TABLE_DATA1, RFREG_MASK,
-+			     0xf3fc3);
-+
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_TXA_PREPAD, RFREG_MASK,
-+			     0x931d5);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_RXBB2, RFREG_MASK, 0x8a001);
-+		rtw_write32(rtwdev, REG_DAC_RSTB, 0x00008000);
-+		rtw_write32_mask(rtwdev, REG_TXAGCIDX, BIT(0), 0x1);
-+		/* TX (X,Y) */
-+		rtw_write32(rtwdev, REG_IQK_COM00, 0x29002000);
-+		/* RX (X,Y) */
-+		rtw_write32(rtwdev, REG_IQK_COM32, 0xa9002000);
-+		/* [0]:AGC_en, [15]:idac_K_Mask */
-+		rtw_write32(rtwdev, REG_IQK_COM96, 0x00462910);
-+
-+		/* [31] = 1 --> Page C1 */
-+		rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x1);
-+
-+		if (efuse->ext_pa_5g)
-+			rtw_write32(rtwdev, REG_OFDM0_XB_TX_IQ_IMBALANCE,
-+				    0x821403f7);
-+		else
-+			rtw_write32(rtwdev, REG_OFDM0_XB_TX_IQ_IMBALANCE,
-+				    0x821403f4);
-+
-+		if (hal->current_band_type == RTW_BAND_5G)
-+			rtw_write32(rtwdev, REG_TSSI_TRK_SW, 0x68163e96);
-+		else
-+			rtw_write32(rtwdev, REG_TSSI_TRK_SW, 0x28163e96);
-+
-+		/* TX_Tone_idx[9:0], TxK_Mask[29] TX_Tone = 16 */
-+		rtw_write32(rtwdev, REG_OFDM0_XA_TX_IQ_IMBALANCE, 0x18008c10);
-+		/* RX_Tone_idx[9:0], RxK_Mask[29] */
-+		rtw_write32(rtwdev, REG_OFDM0_A_TX_AFE, 0x38008c10);
-+		rtw_write32(rtwdev, REG_RFECTL_A, 0x00100000);
-+		rtw_write32(rtwdev, REG_IQK_COM64, 0xfa000000);
-+		rtw_write32(rtwdev, REG_IQK_COM64, 0xf8000000);
-+
-+		mdelay(10);
-+		rtw_write32(rtwdev, REG_RFECTL_A, 0x00000000);
-+
-+		/* [31] = 0 --> Page C */
-+		rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_TXMOD, 0x7fe00,
-+			     rtw_read_rf(rtwdev, RF_PATH_A, RF_DTXLOK, 0xffc00));
-+
-+		if (hal->current_band_width == RTW_CHANNEL_WIDTH_40)
-+			rtw_write_rf(rtwdev, RF_PATH_A, RF_CFGCH,
-+				     RF18_BW_MASK, 0x1);
-+		else if (hal->current_band_width == RTW_CHANNEL_WIDTH_80)
-+			rtw_write_rf(rtwdev, RF_PATH_A, RF_CFGCH,
-+				     RF18_BW_MASK, 0x0);
-+
-+		/* [31] = 1 --> Page C1 */
-+		rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x1);
-+
-+		/* 3. TX RF setting */
-+		/* [31] = 0 --> Page C */
-+		rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_LUTWE, RFREG_MASK, 0x80000);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_MODE_TABLE_ADDR, RFREG_MASK,
-+			     0x20000);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_MODE_TABLE_DATA0, RFREG_MASK,
-+			     0x0003f);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_MODE_TABLE_DATA1, RFREG_MASK,
-+			     0xf3fc3);
-+
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_TXA_PREPAD, RFREG_MASK, 0x931d5);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_RXBB2, RFREG_MASK, 0x8a001);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_LUTWE, RFREG_MASK, 0x00000);
-+		rtw_write32(rtwdev, REG_DAC_RSTB, 0x00008000);
-+		rtw_write32_mask(rtwdev, REG_TXAGCIDX, BIT(0), 0x1);
-+		/* TX (X,Y) */
-+		rtw_write32(rtwdev, REG_IQK_COM00, 0x29002000);
-+		/* RX (X,Y) */
-+		rtw_write32(rtwdev, REG_IQK_COM32, 0xa9002000);
-+		/* [0]:AGC_en, [15]:idac_K_Mask */
-+		rtw_write32(rtwdev, REG_IQK_COM96, 0x0046a910);
-+
-+		/* [31] = 1 --> Page C1 */
-+		rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x1);
-+
-+		if (efuse->ext_pa_5g)
-+			rtw_write32(rtwdev, REG_OFDM0_XB_TX_IQ_IMBALANCE,
-+				    0x821403f7);
-+		else
-+			rtw_write32(rtwdev, REG_OFDM0_XB_TX_IQ_IMBALANCE,
-+				    0x821403e3);
-+
-+		if (hal->current_band_type == RTW_BAND_5G)
-+			rtw_write32(rtwdev, REG_TSSI_TRK_SW, 0x40163e96);
-+		else
-+			rtw_write32(rtwdev, REG_TSSI_TRK_SW, 0x00163e96);
-+
-+		if (vdf_enable)
-+			rtw8821a_iqk_tx_vdf_true(rtwdev, cal, &tx0iqkok,
-+						 tx_x0, tx_y0);
-+		else
-+			rtw8821a_iqk_tx_vdf_false(rtwdev, cal, &tx0iqkok,
-+						  tx_x0, tx_y0);
-+
-+		if (!tx0iqkok)
-+			break; /* TXK fail, Don't do RXK */
-+
-+		/* ====== RX IQK ====== */
-+		/* [31] = 0 --> Page C */
-+		rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+		/* 1. RX RF setting */
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_LUTWE, RFREG_MASK, 0x80000);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_MODE_TABLE_ADDR, RFREG_MASK,
-+			     0x30000);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_MODE_TABLE_DATA0, RFREG_MASK,
-+			     0x0002f);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_MODE_TABLE_DATA1, RFREG_MASK,
-+			     0xfffbb);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_RXBB2, RFREG_MASK, 0x88001);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_TXA_PREPAD, RFREG_MASK, 0x931d8);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_LUTWE, RFREG_MASK, 0x00000);
-+
-+		rtw_write32_mask(rtwdev, REG_IQK_COM00, 0x03FF8000,
-+				 (tx_x0[cal] >> 21) & 0x000007ff);
-+		rtw_write32_mask(rtwdev, REG_IQK_COM00, 0x000007FF,
-+				 (tx_y0[cal] >> 21) & 0x000007ff);
-+		rtw_write32_mask(rtwdev, REG_IQK_COM00, BIT(31), 0x1);
-+		rtw_write32_mask(rtwdev, REG_IQK_COM00, BIT(31), 0x0);
-+		rtw_write32(rtwdev, REG_DAC_RSTB, 0x00008000);
-+		rtw_write32(rtwdev, REG_IQK_COM96, 0x0046a911);
-+
-+		/* [31] = 1 --> Page C1 */
-+		rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x1);
-+
-+		/* TX_Tone_idx[9:0], TxK_Mask[29] TX_Tone = 16 */
-+		rtw_write32(rtwdev, REG_OFDM0_XA_TX_IQ_IMBALANCE, 0x38008c10);
-+		/* RX_Tone_idx[9:0], RxK_Mask[29] */
-+		rtw_write32(rtwdev, REG_OFDM0_A_TX_AFE, 0x18008c10);
-+		rtw_write32(rtwdev, REG_OFDM0_XB_TX_IQ_IMBALANCE, 0x02140119);
-+
-+		if (rtw_hci_type(rtwdev) == RTW_HCI_TYPE_PCIE)
-+			rx_iqk_loop = 2; /* for 2% fail; */
-+		else
-+			rx_iqk_loop = 1;
-+
-+		for (i = 0; i < rx_iqk_loop; i++) {
-+			if (rtw_hci_type(rtwdev) == RTW_HCI_TYPE_PCIE && i == 0)
-+				rtw_write32(rtwdev, REG_TSSI_TRK_SW, 0x28161100); /* Good */
-+			else
-+				rtw_write32(rtwdev, REG_TSSI_TRK_SW, 0x28160d00);
-+
-+			rtw8821a_iqk_rx(rtwdev, cal, &rx0iqkok,
-+					rx_x0[i], rx_y0[i]);
-+		}
-+
-+		if (tx0iqkok)
-+			tx_average++;
-+		if (rx0iqkok)
-+			rx_average++;
-+	}
-+
-+	/* FillIQK Result */
-+
-+	if (tx_average == 0)
-+		return;
-+
-+	for (i = 0; i < tx_average; i++)
-+		rtw_dbg(rtwdev, RTW_DBG_RFK,
-+			"tx_x0[%d] = %x ;; tx_y0[%d] = %x\n",
-+			i, (tx_x0[i] >> 21) & 0x000007ff,
-+			i, (tx_y0[i] >> 21) & 0x000007ff);
-+
-+	if (rtw88xxa_iqk_finish(tx_average, 3, tx_x0, tx_y0,
-+				&tx_x, &tx_y, true, true))
-+		rtw8821a_iqk_tx_fill(rtwdev, tx_x, tx_y);
-+	else
-+		rtw8821a_iqk_tx_fill(rtwdev, 0x200, 0x0);
-+
-+	if (rx_average == 0)
-+		return;
-+
-+	for (i = 0; i < rx_average; i++) {
-+		rtw_dbg(rtwdev, RTW_DBG_RFK,
-+			"rx_x0[0][%d] = %x ;; rx_y0[0][%d] = %x\n",
-+			i, (rx_x0[0][i] >> 21) & 0x000007ff,
-+			i, (rx_y0[0][i] >> 21) & 0x000007ff);
-+
-+		if (rx_iqk_loop == 2)
-+			rtw_dbg(rtwdev, RTW_DBG_RFK,
-+				"rx_x0[1][%d] = %x ;; rx_y0[1][%d] = %x\n",
-+				i, (rx_x0[1][i] >> 21) & 0x000007ff,
-+				i, (rx_y0[1][i] >> 21) & 0x000007ff);
-+	}
-+
-+	rx_finish1 = rtw88xxa_iqk_finish(rx_average, 4, rx_x0[0], rx_y0[0],
-+					 &rx_x_temp, &rx_y_temp, true, true);
-+
-+	if (rx_finish1) {
-+		rx_x = rx_x_temp;
-+		rx_y = rx_y_temp;
-+	}
-+
-+	if (rx_iqk_loop == 2) {
-+		rx_finish2 = rtw88xxa_iqk_finish(rx_average, 4,
-+						 rx_x0[1], rx_y0[1],
-+						 &rx_x, &rx_y, true, true);
-+
-+		if (rx_finish1 && rx_finish2) {
-+			rx_x = (rx_x + rx_x_temp) / 2;
-+			rx_y = (rx_y + rx_y_temp) / 2;
-+		}
-+	}
-+
-+	if (rx_finish1 || rx_finish2)
-+		rtw8821a_iqk_rx_fill(rtwdev, rx_x, rx_y);
-+	else
-+		rtw8821a_iqk_rx_fill(rtwdev, 0x200, 0x0);
-+}
-+
-+static void rtw8821a_do_iqk(struct rtw_dev *rtwdev)
-+{
-+	static const u32 backup_macbb_reg[MACBB_REG_NUM_8821A] = {
-+		0x520, 0x550, 0x808, 0xa04, 0x90c, 0xc00, 0x838, 0x82c
-+	};
-+	static const u32 backup_afe_reg[AFE_REG_NUM_8821A] = {
-+		0xc5c, 0xc60, 0xc64, 0xc68
-+	};
-+	static const u32 backup_rf_reg[RF_REG_NUM_8821A] = {
-+		0x65, 0x8f, 0x0
-+	};
-+	u32 macbb_backup[MACBB_REG_NUM_8821A];
-+	u32 afe_backup[AFE_REG_NUM_8821A];
-+	u32 rfa_backup[RF_REG_NUM_8821A];
-+
-+	rtw88xxa_iqk_backup_mac_bb(rtwdev, macbb_backup,
-+				   backup_macbb_reg, MACBB_REG_NUM_8821A);
-+	rtw88xxa_iqk_backup_afe(rtwdev, afe_backup,
-+				backup_afe_reg, AFE_REG_NUM_8821A);
-+	rtw8821a_iqk_backup_rf(rtwdev, rfa_backup,
-+			       backup_rf_reg, RF_REG_NUM_8821A);
-+
-+	rtw88xxa_iqk_configure_mac(rtwdev);
-+
-+	rtw8821a_iqk(rtwdev);
-+
-+	rtw8821a_iqk_restore_rf(rtwdev, backup_rf_reg,
-+				rfa_backup, RF_REG_NUM_8821A);
-+	rtw8821a_iqk_restore_afe(rtwdev, afe_backup,
-+				 backup_afe_reg, AFE_REG_NUM_8821A);
-+	rtw88xxa_iqk_restore_mac_bb(rtwdev, macbb_backup,
-+				    backup_macbb_reg, MACBB_REG_NUM_8821A);
-+}
-+
-+static void rtw8821a_phy_calibration(struct rtw_dev *rtwdev)
-+{
-+	rtw8821a_do_iqk(rtwdev);
-+}
-+
-+static void rtw8821a_pwr_track(struct rtw_dev *rtwdev)
-+{
-+	struct rtw_dm_info *dm_info = &rtwdev->dm_info;
-+
-+	if (!dm_info->pwr_trk_triggered) {
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_T_METER,
-+			     GENMASK(17, 16), 0x03);
-+		dm_info->pwr_trk_triggered = true;
-+		return;
-+	}
-+
-+	rtw88xxa_phy_pwrtrack(rtwdev, NULL, rtw8821a_do_iqk);
-+	dm_info->pwr_trk_triggered = false;
-+}
-+
-+static void rtw8821a_fill_txdesc_checksum(struct rtw_dev *rtwdev,
-+					  struct rtw_tx_pkt_info *pkt_info,
-+					  u8 *txdesc)
-+{
-+	fill_txdesc_checksum_common(txdesc, 16);
-+}
-+
-+static void rtw8821a_coex_cfg_init(struct rtw_dev *rtwdev)
-+{
-+	u8 val8;
-+
-+	/* BT report packet sample rate */
-+	rtw_write8_mask(rtwdev, REG_BT_TDMA_TIME, BIT_MASK_SAMPLE_RATE, 0x5);
-+
-+	val8 = BIT_STATIS_BT_EN;
-+	if (rtwdev->efuse.share_ant)
-+		val8 |= BIT_R_GRANTALL_WLMASK;
-+	rtw_write8(rtwdev, REG_BT_COEX_ENH_INTR_CTRL, val8);
-+
-+	/* enable BT counter statistics */
-+	rtw_write8(rtwdev, REG_BT_STAT_CTRL, 0x3);
-+
-+	/* enable PTA */
-+	rtw_write32_set(rtwdev, REG_GPIO_MUXCFG, BIT_BT_PTA_EN);
-+}
-+
-+static void rtw8821a_coex_cfg_ant_switch(struct rtw_dev *rtwdev, u8 ctrl_type,
-+					 u8 pos_type)
-+{
-+	bool share_ant = rtwdev->efuse.share_ant;
-+	struct rtw_coex *coex = &rtwdev->coex;
-+	struct rtw_coex_dm *coex_dm = &coex->dm;
-+	u32 phase = coex_dm->cur_ant_pos_type;
-+
-+	if (!rtwdev->efuse.btcoex)
-+		return;
-+
-+	switch (phase) {
-+	case COEX_SET_ANT_POWERON:
-+	case COEX_SET_ANT_INIT:
-+		rtw_write32_clr(rtwdev, REG_LED_CFG, BIT_DPDT_SEL_EN);
-+		rtw_write32_set(rtwdev, REG_LED_CFG, BIT_DPDT_WL_SEL);
-+		rtw_write8_set(rtwdev, REG_GNT_BT, BIT_PTA_SW_CTL);
-+
-+		rtw_write8(rtwdev, REG_RFE_CTRL8,
-+			   share_ant ? PTA_CTRL_PIN : DPDT_CTRL_PIN);
-+		rtw_write32_mask(rtwdev, REG_RFE_CTRL8, 0x30000000, 0x1);
-+		break;
-+	case COEX_SET_ANT_WONLY:
-+		rtw_write32_clr(rtwdev, REG_LED_CFG, BIT_DPDT_SEL_EN);
-+		rtw_write32_set(rtwdev, REG_LED_CFG, BIT_DPDT_WL_SEL);
-+		rtw_write8_clr(rtwdev, REG_GNT_BT, BIT_PTA_SW_CTL);
-+
-+		rtw_write8(rtwdev, REG_RFE_CTRL8, DPDT_CTRL_PIN);
-+		rtw_write32_mask(rtwdev, REG_RFE_CTRL8, 0x30000000, 0x1);
-+		break;
-+	case COEX_SET_ANT_2G:
-+		rtw_write32_clr(rtwdev, REG_LED_CFG, BIT_DPDT_SEL_EN);
-+		rtw_write32_set(rtwdev, REG_LED_CFG, BIT_DPDT_WL_SEL);
-+		rtw_write8_clr(rtwdev, REG_GNT_BT, BIT_PTA_SW_CTL);
-+
-+		rtw_write8(rtwdev, REG_RFE_CTRL8,
-+			   share_ant ? PTA_CTRL_PIN : DPDT_CTRL_PIN);
-+		rtw_write32_mask(rtwdev, REG_RFE_CTRL8, 0x30000000, 0x1);
-+		break;
-+	case COEX_SET_ANT_5G:
-+		rtw_write32_clr(rtwdev, REG_LED_CFG, BIT_DPDT_SEL_EN);
-+		rtw_write32_set(rtwdev, REG_LED_CFG, BIT_DPDT_WL_SEL);
-+		rtw_write8_set(rtwdev, REG_GNT_BT, BIT_PTA_SW_CTL);
-+
-+		rtw_write8(rtwdev, REG_RFE_CTRL8, DPDT_CTRL_PIN);
-+		rtw_write32_mask(rtwdev, REG_RFE_CTRL8, 0x30000000,
-+				 share_ant ? 0x2 : 0x1);
-+		break;
-+	case COEX_SET_ANT_WOFF:
-+		rtw_write32_clr(rtwdev, REG_LED_CFG, BIT_DPDT_SEL_EN);
-+		rtw_write32_clr(rtwdev, REG_LED_CFG, BIT_DPDT_WL_SEL);
-+		rtw_write8_set(rtwdev, REG_GNT_BT, BIT_PTA_SW_CTL);
-+
-+		rtw_write8(rtwdev, REG_RFE_CTRL8, DPDT_CTRL_PIN);
-+		rtw_write32_mask(rtwdev, REG_RFE_CTRL8, 0x30000000,
-+				 share_ant ? 0x2 : 0x1);
-+		break;
-+	default:
-+		rtw_warn(rtwdev, "%s: not handling phase %d\n",
-+			 __func__, phase);
-+		break;
-+	}
-+}
-+
-+static void rtw8821a_coex_cfg_gnt_fix(struct rtw_dev *rtwdev)
-+{
-+}
-+
-+static void rtw8821a_coex_cfg_gnt_debug(struct rtw_dev *rtwdev)
-+{
-+}
-+
-+static void rtw8821a_coex_cfg_rfe_type(struct rtw_dev *rtwdev)
-+{
-+	struct rtw_coex *coex = &rtwdev->coex;
-+	struct rtw_coex_rfe *coex_rfe = &coex->rfe;
-+
-+	coex_rfe->ant_switch_exist = true;
-+}
-+
-+static void rtw8821a_coex_cfg_wl_tx_power(struct rtw_dev *rtwdev, u8 wl_pwr)
-+{
-+	struct rtw_coex *coex = &rtwdev->coex;
-+	struct rtw_coex_dm *coex_dm = &coex->dm;
-+	struct rtw_efuse *efuse = &rtwdev->efuse;
-+	bool share_ant = efuse->share_ant;
-+
-+	if (share_ant)
-+		return;
-+
-+	if (wl_pwr == coex_dm->cur_wl_pwr_lvl)
-+		return;
-+
-+	coex_dm->cur_wl_pwr_lvl = wl_pwr;
-+}
-+
-+static void rtw8821a_coex_cfg_wl_rx_gain(struct rtw_dev *rtwdev, bool low_gain)
-+{
-+}
-+
-+static const struct rtw_chip_ops rtw8821a_ops = {
-+	.power_on		= rtw88xxa_power_on,
-+	.power_off		= rtw8821a_power_off,
-+	.phy_set_param		= NULL,
-+	.read_efuse		= rtw88xxa_read_efuse,
-+	.query_phy_status	= rtw8821a_query_phy_status,
-+	.set_channel		= rtw88xxa_set_channel,
-+	.mac_init		= NULL,
-+	.read_rf		= rtw88xxa_phy_read_rf,
-+	.write_rf		= rtw_phy_write_rf_reg_sipi,
-+	.set_antenna		= NULL,
-+	.set_tx_power_index	= rtw88xxa_set_tx_power_index,
-+	.cfg_ldo25		= rtw8821a_cfg_ldo25,
-+	.efuse_grant		= rtw88xxa_efuse_grant,
-+	.false_alarm_statistics	= rtw88xxa_false_alarm_statistics,
-+	.phy_calibration	= rtw8821a_phy_calibration,
-+	.cck_pd_set		= rtw88xxa_phy_cck_pd_set,
-+	.pwr_track		= rtw8821a_pwr_track,
-+	.config_bfee		= NULL,
-+	.set_gid_table		= NULL,
-+	.cfg_csi_rate		= NULL,
-+	.fill_txdesc_checksum	= rtw8821a_fill_txdesc_checksum,
-+	.coex_set_init		= rtw8821a_coex_cfg_init,
-+	.coex_set_ant_switch	= rtw8821a_coex_cfg_ant_switch,
-+	.coex_set_gnt_fix	= rtw8821a_coex_cfg_gnt_fix,
-+	.coex_set_gnt_debug	= rtw8821a_coex_cfg_gnt_debug,
-+	.coex_set_rfe_type	= rtw8821a_coex_cfg_rfe_type,
-+	.coex_set_wl_tx_power	= rtw8821a_coex_cfg_wl_tx_power,
-+	.coex_set_wl_rx_gain	= rtw8821a_coex_cfg_wl_rx_gain,
-+};
-+
-+static const struct rtw_page_table page_table_8821a[] = {
-+	/* hq_num, nq_num, lq_num, exq_num, gapq_num */
-+	{0, 0, 0, 0, 0},	/* SDIO */
-+	{0, 0, 0, 0, 0},	/* PCI */
-+	{8, 0, 0, 0, 1},	/* 2 bulk out endpoints */
-+	{8, 0, 8, 0, 1},	/* 3 bulk out endpoints */
-+	{8, 0, 8, 4, 1},	/* 4 bulk out endpoints */
-+};
-+
-+static const struct rtw_rqpn rqpn_table_8821a[] = {
-+	{RTW_DMA_MAPPING_NORMAL, RTW_DMA_MAPPING_NORMAL,
-+	 RTW_DMA_MAPPING_LOW, RTW_DMA_MAPPING_LOW,
-+	 RTW_DMA_MAPPING_EXTRA, RTW_DMA_MAPPING_HIGH},
-+
-+	{RTW_DMA_MAPPING_NORMAL, RTW_DMA_MAPPING_NORMAL,
-+	 RTW_DMA_MAPPING_LOW, RTW_DMA_MAPPING_LOW,
-+	 RTW_DMA_MAPPING_EXTRA, RTW_DMA_MAPPING_HIGH},
-+
-+	{RTW_DMA_MAPPING_HIGH, RTW_DMA_MAPPING_HIGH,
-+	 RTW_DMA_MAPPING_NORMAL, RTW_DMA_MAPPING_NORMAL,
-+	 RTW_DMA_MAPPING_HIGH, RTW_DMA_MAPPING_HIGH},
-+
-+	{RTW_DMA_MAPPING_HIGH, RTW_DMA_MAPPING_NORMAL,
-+	 RTW_DMA_MAPPING_LOW, RTW_DMA_MAPPING_LOW,
-+	 RTW_DMA_MAPPING_HIGH, RTW_DMA_MAPPING_HIGH},
-+
-+	{RTW_DMA_MAPPING_NORMAL, RTW_DMA_MAPPING_NORMAL,
-+	 RTW_DMA_MAPPING_LOW, RTW_DMA_MAPPING_LOW,
-+	 RTW_DMA_MAPPING_EXTRA, RTW_DMA_MAPPING_HIGH},
-+};
-+
-+static const struct rtw_prioq_addrs prioq_addrs_8821a = {
-+	.prio[RTW_DMA_MAPPING_EXTRA] = {
-+		.rsvd = REG_RQPN_NPQ + 2, .avail = REG_RQPN_NPQ + 3,
-+	},
-+	.prio[RTW_DMA_MAPPING_LOW] = {
-+		.rsvd = REG_RQPN + 1, .avail = REG_FIFOPAGE_CTRL_2 + 1,
-+	},
-+	.prio[RTW_DMA_MAPPING_NORMAL] = {
-+		.rsvd = REG_RQPN_NPQ, .avail = REG_RQPN_NPQ + 1,
-+	},
-+	.prio[RTW_DMA_MAPPING_HIGH] = {
-+		.rsvd = REG_RQPN, .avail = REG_FIFOPAGE_CTRL_2,
-+	},
-+	.wsize = false,
-+};
-+
-+static const struct rtw_hw_reg rtw8821a_dig[] = {
-+	[0] = { .addr = REG_RXIGI_A, .mask = 0x7f },
-+};
-+
-+static const struct rtw_rfe_def rtw8821a_rfe_defs[] = {
-+	[0] = { .phy_pg_tbl	= &rtw8821a_bb_pg_tbl,
-+		.txpwr_lmt_tbl	= &rtw8821a_txpwr_lmt_tbl,
-+		.pwr_track_tbl	= &rtw8821a_rtw_pwr_track_tbl, },
-+};
-+
-+/* TODO */
-+/* rssi in percentage % (dbm = % - 100) */
-+static const u8 wl_rssi_step_8821a[] = {101, 45, 101, 40};
-+static const u8 bt_rssi_step_8821a[] = {101, 101, 101, 101};
-+
-+/* table_sant_8821a, table_nsant_8821a, tdma_sant_8821a, and tdma_nsant_8821a
-+ * are copied from rtw8821c.c because the 8821au driver's tables are not
-+ * compatible with the coex code in rtw88.
-+ *
-+ * tdma case 112 (A2DP) byte 0 had to be modified from 0x61 to 0x51,
-+ * otherwise the firmware gets confused after pausing the music:
-+ * rtw_8821au 1-2:1.2: [BTCoex], Bt_info[1], len=7, data=[81 00 0a 01 00 00]
-+ * - 81 means PAN (personal area network) when it should be 4x (A2DP)
-+ * The music is not smooth with the PAN algorithm.
-+ */
-+
-+/* Shared-Antenna Coex Table */
-+static const struct coex_table_para table_sant_8821a[] = {
-+	{0x55555555, 0x55555555}, /* case-0 */
-+	{0x55555555, 0x55555555},
-+	{0x66555555, 0x66555555},
-+	{0xaaaaaaaa, 0xaaaaaaaa},
-+	{0x5a5a5a5a, 0x5a5a5a5a},
-+	{0xfafafafa, 0xfafafafa}, /* case-5 */
-+	{0x6a5a5555, 0xaaaaaaaa},
-+	{0x6a5a56aa, 0x6a5a56aa},
-+	{0x6a5a5a5a, 0x6a5a5a5a},
-+	{0x66555555, 0x5a5a5a5a},
-+	{0x66555555, 0x6a5a5a5a}, /* case-10 */
-+	{0x66555555, 0xaaaaaaaa},
-+	{0x66555555, 0x6a5a5aaa},
-+	{0x66555555, 0x6aaa6aaa},
-+	{0x66555555, 0x6a5a5aaa},
-+	{0x66555555, 0xaaaaaaaa}, /* case-15 */
-+	{0xffff55ff, 0xfafafafa},
-+	{0xffff55ff, 0x6afa5afa},
-+	{0xaaffffaa, 0xfafafafa},
-+	{0xaa5555aa, 0x5a5a5a5a},
-+	{0xaa5555aa, 0x6a5a5a5a}, /* case-20 */
-+	{0xaa5555aa, 0xaaaaaaaa},
-+	{0xffffffff, 0x55555555},
-+	{0xffffffff, 0x5a5a5a5a},
-+	{0xffffffff, 0x5a5a5a5a},
-+	{0xffffffff, 0x5a5a5aaa}, /* case-25 */
-+	{0x55555555, 0x5a5a5a5a},
-+	{0x55555555, 0xaaaaaaaa},
-+	{0x66555555, 0x6a5a6a5a},
-+	{0x66556655, 0x66556655},
-+	{0x66556aaa, 0x6a5a6aaa}, /* case-30 */
-+	{0xffffffff, 0x5aaa5aaa},
-+	{0x56555555, 0x5a5a5aaa}
-+};
-+
-+/* Non-Shared-Antenna Coex Table */
-+static const struct coex_table_para table_nsant_8821a[] = {
-+	{0xffffffff, 0xffffffff}, /* case-100 */
-+	{0xffff55ff, 0xfafafafa},
-+	{0x66555555, 0x66555555},
-+	{0xaaaaaaaa, 0xaaaaaaaa},
-+	{0x5a5a5a5a, 0x5a5a5a5a},
-+	{0xffffffff, 0xffffffff}, /* case-105 */
-+	{0x5afa5afa, 0x5afa5afa},
-+	{0x55555555, 0xfafafafa},
-+	{0x66555555, 0xfafafafa},
-+	{0x66555555, 0x5a5a5a5a},
-+	{0x66555555, 0x6a5a5a5a}, /* case-110 */
-+	{0x66555555, 0xaaaaaaaa},
-+	{0xffff55ff, 0xfafafafa},
-+	{0xffff55ff, 0x5afa5afa},
-+	{0xffff55ff, 0xaaaaaaaa},
-+	{0xffff55ff, 0xffff55ff}, /* case-115 */
-+	{0xaaffffaa, 0x5afa5afa},
-+	{0xaaffffaa, 0xaaaaaaaa},
-+	{0xffffffff, 0xfafafafa},
-+	{0xffff55ff, 0xfafafafa},
-+	{0xffffffff, 0xaaaaaaaa}, /* case-120 */
-+	{0xffff55ff, 0x5afa5afa},
-+	{0xffff55ff, 0x5afa5afa},
-+	{0x55ff55ff, 0x55ff55ff}
-+};
-+
-+/* Shared-Antenna TDMA */
-+static const struct coex_tdma_para tdma_sant_8821a[] = {
-+	{ {0x00, 0x00, 0x00, 0x00, 0x00} }, /* case-0 */
-+	{ {0x61, 0x45, 0x03, 0x11, 0x11} }, /* case-1 */
-+	{ {0x61, 0x3a, 0x03, 0x11, 0x11} },
-+	{ {0x61, 0x35, 0x03, 0x11, 0x11} },
-+	{ {0x61, 0x20, 0x03, 0x11, 0x11} },
-+	{ {0x61, 0x3a, 0x03, 0x11, 0x11} }, /* case-5 */
-+	{ {0x61, 0x45, 0x03, 0x11, 0x10} },
-+	{ {0x61, 0x35, 0x03, 0x11, 0x10} },
-+	{ {0x61, 0x30, 0x03, 0x11, 0x10} },
-+	{ {0x61, 0x20, 0x03, 0x11, 0x10} },
-+	{ {0x61, 0x10, 0x03, 0x11, 0x10} }, /* case-10 */
-+	{ {0x61, 0x08, 0x03, 0x11, 0x15} },
-+	{ {0x61, 0x08, 0x03, 0x10, 0x14} },
-+	{ {0x51, 0x08, 0x03, 0x10, 0x54} },
-+	{ {0x51, 0x08, 0x03, 0x10, 0x55} },
-+	{ {0x51, 0x08, 0x07, 0x10, 0x54} }, /* case-15 */
-+	{ {0x51, 0x45, 0x03, 0x10, 0x50} },
-+	{ {0x51, 0x3a, 0x03, 0x11, 0x50} },
-+	{ {0x51, 0x30, 0x03, 0x10, 0x50} },
-+	{ {0x51, 0x21, 0x03, 0x10, 0x50} },
-+	{ {0x51, 0x10, 0x03, 0x10, 0x50} }, /* case-20 */
-+	{ {0x51, 0x4a, 0x03, 0x10, 0x50} },
-+	{ {0x51, 0x08, 0x03, 0x30, 0x54} },
-+	{ {0x55, 0x08, 0x03, 0x10, 0x54} },
-+	{ {0x65, 0x10, 0x03, 0x11, 0x10} },
-+	{ {0x51, 0x10, 0x03, 0x10, 0x51} }, /* case-25 */
-+	{ {0x51, 0x21, 0x03, 0x10, 0x50} },
-+	{ {0x61, 0x08, 0x03, 0x11, 0x11} }
-+};
-+
-+/* Non-Shared-Antenna TDMA */
-+static const struct coex_tdma_para tdma_nsant_8821a[] = {
-+	{ {0x00, 0x00, 0x00, 0x40, 0x00} }, /* case-100 */
-+	{ {0x61, 0x45, 0x03, 0x11, 0x11} },
-+	{ {0x61, 0x25, 0x03, 0x11, 0x11} },
-+	{ {0x61, 0x35, 0x03, 0x11, 0x11} },
-+	{ {0x61, 0x20, 0x03, 0x11, 0x11} },
-+	{ {0x61, 0x10, 0x03, 0x11, 0x11} }, /* case-105 */
-+	{ {0x61, 0x45, 0x03, 0x11, 0x10} },
-+	{ {0x61, 0x30, 0x03, 0x11, 0x10} },
-+	{ {0x61, 0x30, 0x03, 0x11, 0x10} },
-+	{ {0x61, 0x20, 0x03, 0x11, 0x10} },
-+	{ {0x61, 0x10, 0x03, 0x11, 0x10} }, /* case-110 */
-+	{ {0x61, 0x10, 0x03, 0x11, 0x11} },
-+	{ {0x51, 0x08, 0x03, 0x10, 0x14} }, /* a2dp high rssi */
-+	{ {0x51, 0x08, 0x03, 0x10, 0x54} }, /* a2dp not high rssi */
-+	{ {0x51, 0x08, 0x03, 0x10, 0x55} },
-+	{ {0x51, 0x08, 0x07, 0x10, 0x54} }, /* case-115 */
-+	{ {0x51, 0x45, 0x03, 0x10, 0x50} },
-+	{ {0x51, 0x3a, 0x03, 0x10, 0x50} },
-+	{ {0x51, 0x30, 0x03, 0x10, 0x50} },
-+	{ {0x51, 0x21, 0x03, 0x10, 0x50} },
-+	{ {0x51, 0x21, 0x03, 0x10, 0x50} }, /* case-120 */
-+	{ {0x51, 0x10, 0x03, 0x10, 0x50} }
-+};
-+
-+/* TODO */
-+static const struct coex_rf_para rf_para_tx_8821a[] = {
-+	{0, 0, false, 7},  /* for normal */
-+	{0, 20, false, 7}, /* for WL-CPT */
-+	{8, 17, true, 4},
-+	{7, 18, true, 4},
-+	{6, 19, true, 4},
-+	{5, 20, true, 4}
-+};
-+
-+static const struct coex_rf_para rf_para_rx_8821a[] = {
-+	{0, 0, false, 7},  /* for normal */
-+	{0, 20, false, 7}, /* for WL-CPT */
-+	{3, 24, true, 5},
-+	{2, 26, true, 5},
-+	{1, 27, true, 5},
-+	{0, 28, true, 5}
-+};
-+
-+static_assert(ARRAY_SIZE(rf_para_tx_8821a) == ARRAY_SIZE(rf_para_rx_8821a));
-+
-+static const struct coex_5g_afh_map afh_5g_8821a[] = { {0, 0, 0} };
-+
-+static const struct rtw_reg_domain coex_info_hw_regs_8821a[] = {
-+	{0xCB0, MASKDWORD, RTW_REG_DOMAIN_MAC32},
-+	{0xCB4, MASKDWORD, RTW_REG_DOMAIN_MAC32},
-+	{0xCBA, MASKBYTE0, RTW_REG_DOMAIN_MAC8},
-+	{0, 0, RTW_REG_DOMAIN_NL},
-+	{0x430, MASKDWORD, RTW_REG_DOMAIN_MAC32},
-+	{0x434, MASKDWORD, RTW_REG_DOMAIN_MAC32},
-+	{0x42a, MASKLWORD, RTW_REG_DOMAIN_MAC16},
-+	{0x426, MASKBYTE0, RTW_REG_DOMAIN_MAC8},
-+	{0x45e, BIT(3), RTW_REG_DOMAIN_MAC8},
-+	{0x454, MASKLWORD, RTW_REG_DOMAIN_MAC16},
-+	{0, 0, RTW_REG_DOMAIN_NL},
-+	{0x4c, BIT(24) | BIT(23), RTW_REG_DOMAIN_MAC32},
-+	{0x64, BIT(0), RTW_REG_DOMAIN_MAC8},
-+	{0x4c6, BIT(4), RTW_REG_DOMAIN_MAC8},
-+	{0x40, BIT(5), RTW_REG_DOMAIN_MAC8},
-+	{0x1, RFREG_MASK, RTW_REG_DOMAIN_RF_A},
-+	{0, 0, RTW_REG_DOMAIN_NL},
-+	{0x550, MASKDWORD, RTW_REG_DOMAIN_MAC32},
-+	{0x522, MASKBYTE0, RTW_REG_DOMAIN_MAC8},
-+	{0x953, BIT(1), RTW_REG_DOMAIN_MAC8},
-+	{0xc50,  MASKBYTE0, RTW_REG_DOMAIN_MAC8},
-+	{0x60A, MASKBYTE0, RTW_REG_DOMAIN_MAC8},
-+};
-+
-+const struct rtw_chip_info rtw8821a_hw_spec = {
-+	.ops = &rtw8821a_ops,
-+	.id = RTW_CHIP_TYPE_8821A,
-+	.fw_name = "rtw88/rtw8821a_fw.bin",
-+	.wlan_cpu = RTW_WCPU_11N,
-+	.tx_pkt_desc_sz = 40,
-+	.tx_buf_desc_sz = 16,
-+	.rx_pkt_desc_sz = 24,
-+	.rx_buf_desc_sz = 8,
-+	.phy_efuse_size = 512,
-+	.log_efuse_size = 512,
-+	.ptct_efuse_size = 96 + 1, /* TODO or just 18? */
-+	.txff_size = 65536,
-+	.rxff_size = 16128,
-+	.rsvd_drv_pg_num = 8,
-+	.txgi_factor = 1,
-+	.is_pwr_by_rate_dec = true,
-+	.max_power_index = 0x3f,
-+	.csi_buf_pg_num = 0,
-+	.band = RTW_BAND_2G | RTW_BAND_5G,
-+	.page_size = 256,
-+	.dig_min = 0x20,
-+	.ht_supported = true,
-+	.vht_supported = true,
-+	.lps_deep_mode_supported = 0,
-+	.sys_func_en = 0xFD,
-+	.pwr_on_seq = card_enable_flow_8821a,
-+	.pwr_off_seq = card_disable_flow_8821a,
-+	.page_table = page_table_8821a,
-+	.rqpn_table = rqpn_table_8821a,
-+	.prioq_addrs = &prioq_addrs_8821a,
-+	.intf_table = NULL,
-+	.dig = rtw8821a_dig,
-+	.rf_sipi_addr = {REG_LSSI_WRITE_A, REG_LSSI_WRITE_B},
-+	.ltecoex_addr = NULL,
-+	.mac_tbl = &rtw8821a_mac_tbl,
-+	.agc_tbl = &rtw8821a_agc_tbl,
-+	.bb_tbl = &rtw8821a_bb_tbl,
-+	.rf_tbl = {&rtw8821a_rf_a_tbl},
-+	.rfe_defs = rtw8821a_rfe_defs,
-+	.rfe_defs_size = ARRAY_SIZE(rtw8821a_rfe_defs),
-+	.rx_ldpc = false,
-+	.hw_feature_report = false,
-+	.c2h_ra_report_size = 4,
-+	.old_datarate_fb_limit = true,
-+	.usb_tx_agg_desc_num = 6,
-+	.iqk_threshold = 8,
-+	.ampdu_density = IEEE80211_HT_MPDU_DENSITY_16,
-+	.max_scan_ie_len = IEEE80211_MAX_DATA_LEN,
-+
-+	.coex_para_ver = 20190509, /* glcoex_ver_date_8821a_1ant */
-+	.bt_desired_ver = 0x62, /* But for 2 ant it's 0x5c */
-+	.scbd_support = false,
-+	.new_scbd10_def = false,
-+	.ble_hid_profile_support = false,
-+	.wl_mimo_ps_support = false,
-+	.pstdma_type = COEX_PSTDMA_FORCE_LPSOFF,
-+	.bt_rssi_type = COEX_BTRSSI_RATIO,
-+	.ant_isolation = 10,
-+	.rssi_tolerance = 2,
-+	.wl_rssi_step = wl_rssi_step_8821a,
-+	.bt_rssi_step = bt_rssi_step_8821a,
-+	.table_sant_num = ARRAY_SIZE(table_sant_8821a),
-+	.table_sant = table_sant_8821a,
-+	.table_nsant_num = ARRAY_SIZE(table_nsant_8821a),
-+	.table_nsant = table_nsant_8821a,
-+	.tdma_sant_num = ARRAY_SIZE(tdma_sant_8821a),
-+	.tdma_sant = tdma_sant_8821a,
-+	.tdma_nsant_num = ARRAY_SIZE(tdma_nsant_8821a),
-+	.tdma_nsant = tdma_nsant_8821a,
-+	.wl_rf_para_num = ARRAY_SIZE(rf_para_tx_8821a),
-+	.wl_rf_para_tx = rf_para_tx_8821a,
-+	.wl_rf_para_rx = rf_para_rx_8821a,
-+	.bt_afh_span_bw20 = 0x20,
-+	.bt_afh_span_bw40 = 0x30,
-+	.afh_5g_num = ARRAY_SIZE(afh_5g_8821a),
-+	.afh_5g = afh_5g_8821a,
-+
-+	.coex_info_hw_regs_num = ARRAY_SIZE(coex_info_hw_regs_8821a),
-+	.coex_info_hw_regs = coex_info_hw_regs_8821a,
-+};
-+EXPORT_SYMBOL(rtw8821a_hw_spec);
-+
-+MODULE_FIRMWARE("rtw88/rtw8821a_fw.bin");
-+
-+MODULE_AUTHOR("Realtek Corporation");
-+MODULE_DESCRIPTION("Realtek 802.11ac wireless 8821a/8811a driver");
-+MODULE_LICENSE("Dual BSD/GPL");
---- /dev/null
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8821a.h
-@@ -0,0 +1,10 @@
-+/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
-+/* Copyright(c) 2024  Realtek Corporation
-+ */
-+
-+#ifndef __RTW8821A_H__
-+#define __RTW8821A_H__
-+
-+extern const struct rtw_chip_info rtw8821a_hw_spec;
-+
-+#endif
diff --git a/package/kernel/mac80211/patches/rtl/043-v6.13-wifi-rtw88-Add-rtw8812a.-c-h.patch b/package/kernel/mac80211/patches/rtl/043-v6.13-wifi-rtw88-Add-rtw8812a.-c-h.patch
deleted file mode 100644
index 610dca037a..0000000000
--- a/package/kernel/mac80211/patches/rtl/043-v6.13-wifi-rtw88-Add-rtw8812a.-c-h.patch
+++ /dev/null
@@ -1,1135 +0,0 @@
-From 4f8ec8927bc292b2a71cd5a253c96ce3c6b2927f Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 30 Oct 2024 20:28:49 +0200
-Subject: [PATCH] wifi: rtw88: Add rtw8812a.{c,h}
-
-These contain code specific to RTL8812AU.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/a0057683-79eb-4ab2-8f74-11a3bc58adfb@gmail.com
----
- drivers/net/wireless/realtek/rtw88/rtw8812a.c | 1102 +++++++++++++++++
- drivers/net/wireless/realtek/rtw88/rtw8812a.h |   10 +
- 2 files changed, 1112 insertions(+)
- create mode 100644 drivers/net/wireless/realtek/rtw88/rtw8812a.c
- create mode 100644 drivers/net/wireless/realtek/rtw88/rtw8812a.h
-
---- /dev/null
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8812a.c
-@@ -0,0 +1,1102 @@
-+// SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause
-+/* Copyright(c) 2024  Realtek Corporation
-+ */
-+
-+#include "main.h"
-+#include "coex.h"
-+#include "phy.h"
-+#include "reg.h"
-+#include "rtw88xxa.h"
-+#include "rtw8812a.h"
-+#include "rtw8812a_table.h"
-+#include "tx.h"
-+
-+static void rtw8812a_power_off(struct rtw_dev *rtwdev)
-+{
-+	rtw88xxa_power_off(rtwdev, enter_lps_flow_8812a);
-+}
-+
-+static s8 rtw8812a_cck_rx_pwr(u8 lna_idx, u8 vga_idx)
-+{
-+	s8 rx_pwr_all = 0;
-+
-+	switch (lna_idx) {
-+	case 7:
-+		if (vga_idx <= 27)
-+			rx_pwr_all = -94 + 2 * (27 - vga_idx);
-+		else
-+			rx_pwr_all = -94;
-+		break;
-+	case 6:
-+		rx_pwr_all = -42 + 2 * (2 - vga_idx);
-+		break;
-+	case 5:
-+		rx_pwr_all = -36 + 2 * (7 - vga_idx);
-+		break;
-+	case 4:
-+		rx_pwr_all = -30 + 2 * (7 - vga_idx);
-+		break;
-+	case 3:
-+		rx_pwr_all = -18 + 2 * (7 - vga_idx);
-+		break;
-+	case 2:
-+		rx_pwr_all = 2 * (5 - vga_idx);
-+		break;
-+	case 1:
-+		rx_pwr_all = 14 - 2 * vga_idx;
-+		break;
-+	case 0:
-+		rx_pwr_all = 20 - 2 * vga_idx;
-+		break;
-+	default:
-+		break;
-+	}
-+
-+	return rx_pwr_all;
-+}
-+
-+static void rtw8812a_query_phy_status(struct rtw_dev *rtwdev, u8 *phy_status,
-+				      struct rtw_rx_pkt_stat *pkt_stat)
-+{
-+	rtw88xxa_query_phy_status(rtwdev, phy_status, pkt_stat,
-+				  rtw8812a_cck_rx_pwr);
-+
-+	if (pkt_stat->rate >= DESC_RATE6M)
-+		return;
-+
-+	if (rtwdev->hal.cck_high_power)
-+		return;
-+
-+	if (pkt_stat->rssi >= 80)
-+		pkt_stat->rssi = ((pkt_stat->rssi - 80) << 1) +
-+				 ((pkt_stat->rssi - 80) >> 1) + 80;
-+	else if (pkt_stat->rssi <= 78 && pkt_stat->rssi >= 20)
-+		pkt_stat->rssi += 3;
-+}
-+
-+static void rtw8812a_cfg_ldo25(struct rtw_dev *rtwdev, bool enable)
-+{
-+}
-+
-+static void rtw8812a_do_lck(struct rtw_dev *rtwdev)
-+{
-+	u32 cont_tx, lc_cal, i;
-+
-+	cont_tx = rtw_read32_mask(rtwdev, REG_SINGLE_TONE_CONT_TX, 0x70000);
-+
-+	lc_cal = rtw_read_rf(rtwdev, RF_PATH_A, RF_CFGCH, RFREG_MASK);
-+
-+	if (!cont_tx)
-+		rtw_write8(rtwdev, REG_TXPAUSE, 0xff);
-+
-+	rtw_write_rf(rtwdev, RF_PATH_A, RF_LCK, BIT(14), 1);
-+
-+	rtw_write_rf(rtwdev, RF_PATH_A, RF_CFGCH, 0x08000, 1);
-+
-+	mdelay(150);
-+
-+	for (i = 0; i < 5; i++) {
-+		if (rtw_read_rf(rtwdev, RF_PATH_A, RF_CFGCH, 0x08000) != 1)
-+			break;
-+
-+		mdelay(10);
-+	}
-+
-+	if (i == 5)
-+		rtw_dbg(rtwdev, RTW_DBG_RFK, "LCK timed out\n");
-+
-+	rtw_write_rf(rtwdev, RF_PATH_A, RF_CFGCH, RFREG_MASK, lc_cal);
-+
-+	rtw_write_rf(rtwdev, RF_PATH_A, RF_LCK, BIT(14), 0);
-+
-+	if (!cont_tx)
-+		rtw_write8(rtwdev, REG_TXPAUSE, 0);
-+
-+	rtw_write_rf(rtwdev, RF_PATH_A, RF_CFGCH, RFREG_MASK, lc_cal);
-+}
-+
-+static void rtw8812a_iqk_backup_rf(struct rtw_dev *rtwdev, u32 *rfa_backup,
-+				   u32 *rfb_backup, const u32 *backup_rf_reg,
-+				   u32 rf_num)
-+{
-+	u32 i;
-+
-+	/* [31] = 0 --> Page C */
-+	rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+
-+	/* Save RF Parameters */
-+	for (i = 0; i < rf_num; i++) {
-+		rfa_backup[i] = rtw_read_rf(rtwdev, RF_PATH_A,
-+					    backup_rf_reg[i], MASKDWORD);
-+		rfb_backup[i] = rtw_read_rf(rtwdev, RF_PATH_B,
-+					    backup_rf_reg[i], MASKDWORD);
-+	}
-+}
-+
-+static void rtw8812a_iqk_restore_rf(struct rtw_dev *rtwdev,
-+				    enum rtw_rf_path path,
-+				    const u32 *backup_rf_reg,
-+				    u32 *RF_backup, u32 rf_reg_num)
-+{
-+	u32 i;
-+
-+	/* [31] = 0 --> Page C */
-+	rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+
-+	for (i = 0; i < rf_reg_num; i++)
-+		rtw_write_rf(rtwdev, path, backup_rf_reg[i],
-+			     RFREG_MASK, RF_backup[i]);
-+
-+	rtw_write_rf(rtwdev, path, RF_LUTWE, RFREG_MASK, 0);
-+}
-+
-+static void rtw8812a_iqk_restore_afe(struct rtw_dev *rtwdev, u32 *afe_backup,
-+				     const u32 *backup_afe_reg, u32 afe_num)
-+{
-+	u32 i;
-+
-+	/* [31] = 0 --> Page C */
-+	rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+
-+	/* Reload AFE Parameters */
-+	for (i = 0; i < afe_num; i++)
-+		rtw_write32(rtwdev, backup_afe_reg[i], afe_backup[i]);
-+
-+	/* [31] = 1 --> Page C1 */
-+	rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x1);
-+
-+	rtw_write32(rtwdev, REG_OFDM0_XA_TX_IQ_IMBALANCE, 0x0);
-+	rtw_write32(rtwdev, REG_OFDM0_A_TX_AFE, 0x0);
-+	rtw_write32(rtwdev, REG_OFDM0_XB_TX_IQ_IMBALANCE, 0x0);
-+	rtw_write32(rtwdev, REG_TSSI_TRK_SW, 0x3c000000);
-+	rtw_write32_mask(rtwdev, REG_LSSI_WRITE_A, BIT(7), 1);
-+	rtw_write32_mask(rtwdev, REG_IQK_DPD_CFG, BIT(18), 1);
-+	rtw_write32_mask(rtwdev, REG_IQK_DPD_CFG, BIT(29), 1);
-+	rtw_write32_mask(rtwdev, REG_CFG_PMPD, BIT(29), 1);
-+
-+	rtw_write32(rtwdev, REG_TXTONEB, 0x0);
-+	rtw_write32(rtwdev, REG_RXTONEB, 0x0);
-+	rtw_write32(rtwdev, REG_TXPITMB, 0x0);
-+	rtw_write32(rtwdev, REG_RXPITMB, 0x3c000000);
-+	rtw_write32_mask(rtwdev, REG_LSSI_WRITE_B, BIT(7), 1);
-+	rtw_write32_mask(rtwdev, REG_BPBDB, BIT(18), 1);
-+	rtw_write32_mask(rtwdev, REG_BPBDB, BIT(29), 1);
-+	rtw_write32_mask(rtwdev, REG_PHYTXONB, BIT(29), 1);
-+}
-+
-+static void rtw8812a_iqk_rx_fill(struct rtw_dev *rtwdev, enum rtw_rf_path path,
-+				 unsigned int rx_x, unsigned int rx_y)
-+{
-+	switch (path) {
-+	case RF_PATH_A:
-+		/* [31] = 0 --> Page C */
-+		rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+		if (rx_x >> 1 >= 0x112 ||
-+		    (rx_y >> 1 >= 0x12 && rx_y >> 1 <= 0x3ee)) {
-+			rtw_write32_mask(rtwdev, REG_RX_IQC_AB_A,
-+					 0x000003ff, 0x100);
-+			rtw_write32_mask(rtwdev, REG_RX_IQC_AB_A,
-+					 0x03ff0000, 0);
-+		} else {
-+			rtw_write32_mask(rtwdev, REG_RX_IQC_AB_A,
-+					 0x000003ff, rx_x >> 1);
-+			rtw_write32_mask(rtwdev, REG_RX_IQC_AB_A,
-+					 0x03ff0000, rx_y >> 1);
-+		}
-+		rtw_dbg(rtwdev, RTW_DBG_RFK,
-+			"rx_x = %x;;rx_y = %x ====>fill to IQC\n",
-+			rx_x >> 1 & 0x000003ff, rx_y >> 1 & 0x000003ff);
-+		rtw_dbg(rtwdev, RTW_DBG_RFK, "0xc10 = %x ====>fill to IQC\n",
-+			rtw_read32(rtwdev, REG_RX_IQC_AB_A));
-+		break;
-+	case RF_PATH_B:
-+		/* [31] = 0 --> Page C */
-+		rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+		if (rx_x >> 1 >= 0x112 ||
-+		    (rx_y >> 1 >= 0x12 && rx_y >> 1 <= 0x3ee)) {
-+			rtw_write32_mask(rtwdev, REG_RX_IQC_AB_B,
-+					 0x000003ff, 0x100);
-+			rtw_write32_mask(rtwdev, REG_RX_IQC_AB_B,
-+					 0x03ff0000, 0);
-+		} else {
-+			rtw_write32_mask(rtwdev, REG_RX_IQC_AB_B,
-+					 0x000003ff, rx_x >> 1);
-+			rtw_write32_mask(rtwdev, REG_RX_IQC_AB_B,
-+					 0x03ff0000, rx_y >> 1);
-+		}
-+		rtw_dbg(rtwdev, RTW_DBG_RFK,
-+			"rx_x = %x;;rx_y = %x ====>fill to IQC\n",
-+			rx_x >> 1 & 0x000003ff, rx_y >> 1 & 0x000003ff);
-+		rtw_dbg(rtwdev, RTW_DBG_RFK, "0xe10 = %x====>fill to IQC\n",
-+			rtw_read32(rtwdev, REG_RX_IQC_AB_B));
-+		break;
-+	default:
-+		break;
-+	}
-+}
-+
-+static void rtw8812a_iqk_tx_fill(struct rtw_dev *rtwdev, enum rtw_rf_path path,
-+				 unsigned int tx_x, unsigned int tx_y)
-+{
-+	switch (path) {
-+	case RF_PATH_A:
-+		/* [31] = 1 --> Page C1 */
-+		rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x1);
-+		rtw_write32_mask(rtwdev, REG_PREDISTA, BIT(7), 0x1);
-+		rtw_write32_mask(rtwdev, REG_IQK_DPD_CFG, BIT(18), 0x1);
-+		rtw_write32_mask(rtwdev, REG_IQK_DPD_CFG, BIT(29), 0x1);
-+		rtw_write32_mask(rtwdev, REG_CFG_PMPD, BIT(29), 0x1);
-+		rtw_write32_mask(rtwdev, REG_IQC_Y, 0x000007ff, tx_y);
-+		rtw_write32_mask(rtwdev, REG_IQC_X, 0x000007ff, tx_x);
-+		rtw_dbg(rtwdev, RTW_DBG_RFK,
-+			"tx_x = %x;;tx_y = %x =====> fill to IQC\n",
-+			tx_x & 0x000007ff, tx_y & 0x000007ff);
-+		rtw_dbg(rtwdev, RTW_DBG_RFK,
-+			"0xcd4 = %x;;0xccc = %x ====>fill to IQC\n",
-+			rtw_read32_mask(rtwdev, REG_IQC_X, 0x000007ff),
-+			rtw_read32_mask(rtwdev, REG_IQC_Y, 0x000007ff));
-+		break;
-+	case RF_PATH_B:
-+		/* [31] = 1 --> Page C1 */
-+		rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x1);
-+		rtw_write32_mask(rtwdev, REG_PREDISTB, BIT(7), 0x1);
-+		rtw_write32_mask(rtwdev, REG_BPBDB, BIT(18), 0x1);
-+		rtw_write32_mask(rtwdev, REG_BPBDB, BIT(29), 0x1);
-+		rtw_write32_mask(rtwdev, REG_PHYTXONB, BIT(29), 0x1);
-+		rtw_write32_mask(rtwdev, REG_IQKYB, 0x000007ff, tx_y);
-+		rtw_write32_mask(rtwdev, REG_IQKXB, 0x000007ff, tx_x);
-+		rtw_dbg(rtwdev, RTW_DBG_RFK,
-+			"tx_x = %x;;tx_y = %x =====> fill to IQC\n",
-+			tx_x & 0x000007ff, tx_y & 0x000007ff);
-+		rtw_dbg(rtwdev, RTW_DBG_RFK,
-+			"0xed4 = %x;;0xecc = %x ====>fill to IQC\n",
-+			rtw_read32_mask(rtwdev, REG_IQKXB, 0x000007ff),
-+			rtw_read32_mask(rtwdev, REG_IQKYB, 0x000007ff));
-+		break;
-+	default:
-+		break;
-+	}
-+}
-+
-+static void rtw8812a_iqk(struct rtw_dev *rtwdev)
-+{
-+	int tx_x0_temp[10], tx_y0_temp[10], tx_x1_temp[10], tx_y1_temp[10];
-+	int rx_x0_temp[10], rx_y0_temp[10], rx_x1_temp[10], rx_y1_temp[10];
-+	bool iqk0_ready = false, tx0_finish = false, rx0_finish = false;
-+	bool iqk1_ready = false, tx1_finish = false, rx1_finish = false;
-+	u8 tx0_avg = 0, tx1_avg = 0, rx0_avg = 0, rx1_avg = 0;
-+	int tx_x0 = 0, tx_y0 = 0, tx_x1 = 0, tx_y1 = 0;
-+	int rx_x0 = 0, rx_y0 = 0, rx_x1 = 0, rx_y1 = 0;
-+	struct rtw_efuse *efuse = &rtwdev->efuse;
-+	bool tx0_fail = true, rx0_fail = true;
-+	bool tx1_fail = true, rx1_fail = true;
-+	u8 cal0_retry, cal1_retry;
-+	u8 delay_count;
-+
-+	/* [31] = 0 --> Page C */
-+	rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+
-+	/* ========path-A AFE all on======== */
-+	/* Port 0 DAC/ADC on */
-+	rtw_write32(rtwdev, REG_AFE_PWR1_A, 0x77777777);
-+	rtw_write32(rtwdev, REG_AFE_PWR2_A, 0x77777777);
-+
-+	/* Port 1 DAC/ADC on */
-+	rtw_write32(rtwdev, REG_AFE_PWR1_B, 0x77777777);
-+	rtw_write32(rtwdev, REG_AFE_PWR2_B, 0x77777777);
-+
-+	rtw_write32(rtwdev, REG_RX_WAIT_CCA_TX_CCK_RFON_A, 0x19791979);
-+	rtw_write32(rtwdev, REG_RX_WAIT_CCA_TX_CCK_RFON_B, 0x19791979);
-+
-+	/* hardware 3-wire off */
-+	rtw_write32_mask(rtwdev, REG_3WIRE_SWA, 0xf, 0x4);
-+	rtw_write32_mask(rtwdev, REG_3WIRE_SWB, 0xf, 0x4);
-+
-+	/* DAC/ADC sampling rate (160 MHz) */
-+	rtw_write32_mask(rtwdev, REG_CK_MONHA, GENMASK(26, 24), 0x7);
-+	rtw_write32_mask(rtwdev, REG_CK_MONHB, GENMASK(26, 24), 0x7);
-+
-+	/* [31] = 0 --> Page C */
-+	rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+	/* ====== path A TX IQK RF setting ====== */
-+	rtw_write_rf(rtwdev, RF_PATH_A, RF_LUTWE, RFREG_MASK, 0x80002);
-+	rtw_write_rf(rtwdev, RF_PATH_A, RF_MODE_TABLE_ADDR, RFREG_MASK, 0x20000);
-+	rtw_write_rf(rtwdev, RF_PATH_A, RF_MODE_TABLE_DATA0, RFREG_MASK, 0x3fffd);
-+	rtw_write_rf(rtwdev, RF_PATH_A, RF_MODE_TABLE_DATA1, RFREG_MASK, 0xfe83f);
-+	rtw_write_rf(rtwdev, RF_PATH_A, RF_TXA_PREPAD, RFREG_MASK, 0x931d5);
-+	rtw_write_rf(rtwdev, RF_PATH_A, RF_RXBB2, RFREG_MASK, 0x8a001);
-+
-+	/* ====== path B TX IQK RF setting ====== */
-+	rtw_write_rf(rtwdev, RF_PATH_B, RF_LUTWE, RFREG_MASK, 0x80002);
-+	rtw_write_rf(rtwdev, RF_PATH_B, RF_MODE_TABLE_ADDR, RFREG_MASK, 0x20000);
-+	rtw_write_rf(rtwdev, RF_PATH_B, RF_MODE_TABLE_DATA0, RFREG_MASK, 0x3fffd);
-+	rtw_write_rf(rtwdev, RF_PATH_B, RF_MODE_TABLE_DATA1, RFREG_MASK, 0xfe83f);
-+	rtw_write_rf(rtwdev, RF_PATH_B, RF_TXA_PREPAD, RFREG_MASK, 0x931d5);
-+	rtw_write_rf(rtwdev, RF_PATH_B, RF_RXBB2, RFREG_MASK, 0x8a001);
-+
-+	rtw_write32(rtwdev, REG_DAC_RSTB, 0x00008000);
-+	rtw_write32_mask(rtwdev, REG_TXAGCIDX, BIT(0), 0x1);
-+	rtw_write32_mask(rtwdev, REG_INIDLYB, BIT(0), 0x1);
-+	rtw_write32(rtwdev, REG_IQK_COM00, 0x29002000); /* TX (X,Y) */
-+	rtw_write32(rtwdev, REG_IQK_COM32, 0xa9002000); /* RX (X,Y) */
-+	rtw_write32(rtwdev, REG_IQK_COM96, 0x00462910); /* [0]:AGC_en, [15]:idac_K_Mask */
-+	/* [31] = 1 --> Page C1 */
-+	rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x1);
-+
-+	if (efuse->ext_pa_5g) {
-+		if (efuse->rfe_option == 1) {
-+			rtw_write32(rtwdev, REG_OFDM0_XB_TX_IQ_IMBALANCE, 0x821403e3);
-+			rtw_write32(rtwdev, REG_TXPITMB, 0x821403e3);
-+		} else {
-+			rtw_write32(rtwdev, REG_OFDM0_XB_TX_IQ_IMBALANCE, 0x821403f7);
-+			rtw_write32(rtwdev, REG_TXPITMB, 0x821403f7);
-+		}
-+	} else {
-+		rtw_write32(rtwdev, REG_OFDM0_XB_TX_IQ_IMBALANCE, 0x821403f1);
-+		rtw_write32(rtwdev, REG_TXPITMB, 0x821403f1);
-+	}
-+
-+	if (rtwdev->hal.current_band_type == RTW_BAND_5G) {
-+		rtw_write32(rtwdev, REG_TSSI_TRK_SW, 0x68163e96);
-+		rtw_write32(rtwdev, REG_RXPITMB, 0x68163e96);
-+	} else {
-+		rtw_write32(rtwdev, REG_TSSI_TRK_SW, 0x28163e96);
-+		rtw_write32(rtwdev, REG_RXPITMB, 0x28163e96);
-+
-+		if (efuse->rfe_option == 3) {
-+			if (efuse->ext_pa_2g)
-+				rtw_write32(rtwdev, REG_OFDM0_XB_TX_IQ_IMBALANCE,
-+					    0x821403e3);
-+			else
-+				rtw_write32(rtwdev, REG_OFDM0_XB_TX_IQ_IMBALANCE,
-+					    0x821403f7);
-+		}
-+	}
-+
-+	/* TX_Tone_idx[9:0], TxK_Mask[29] TX_Tone = 16 */
-+	rtw_write32(rtwdev, REG_OFDM0_XA_TX_IQ_IMBALANCE, 0x18008c10);
-+	/* RX_Tone_idx[9:0], RxK_Mask[29] */
-+	rtw_write32(rtwdev, REG_OFDM0_A_TX_AFE, 0x38008c10);
-+	rtw_write32(rtwdev, REG_INTPO_SETA, 0x00000000);
-+	/* TX_Tone_idx[9:0], TxK_Mask[29] TX_Tone = 16 */
-+	rtw_write32(rtwdev, REG_TXTONEB, 0x18008c10);
-+	/* RX_Tone_idx[9:0], RxK_Mask[29] */
-+	rtw_write32(rtwdev, REG_RXTONEB, 0x38008c10);
-+	rtw_write32(rtwdev, REG_INTPO_SETB, 0x00000000);
-+
-+	cal0_retry = 0;
-+	cal1_retry = 0;
-+	while (1) {
-+		/* one shot */
-+		rtw_write32(rtwdev, REG_RFECTL_A, 0x00100000);
-+		rtw_write32(rtwdev, REG_RFECTL_B, 0x00100000);
-+		rtw_write32(rtwdev, REG_IQK_COM64, 0xfa000000);
-+		rtw_write32(rtwdev, REG_IQK_COM64, 0xf8000000);
-+
-+		mdelay(10);
-+
-+		rtw_write32(rtwdev, REG_RFECTL_A, 0x00000000);
-+		rtw_write32(rtwdev, REG_RFECTL_B, 0x00000000);
-+
-+		for (delay_count = 0; delay_count < 20; delay_count++) {
-+			if (!tx0_finish)
-+				iqk0_ready = rtw_read32_mask(rtwdev,
-+							     REG_IQKA_END,
-+							     BIT(10));
-+			if (!tx1_finish)
-+				iqk1_ready = rtw_read32_mask(rtwdev,
-+							     REG_IQKB_END,
-+							     BIT(10));
-+			if (iqk0_ready && iqk1_ready)
-+				break;
-+
-+			mdelay(1);
-+		}
-+
-+		rtw_dbg(rtwdev, RTW_DBG_RFK, "TX delay_count = %d\n",
-+			delay_count);
-+
-+		if (delay_count < 20) { /* If 20ms No Result, then cal_retry++ */
-+			/* ============TXIQK Check============== */
-+			tx0_fail = rtw_read32_mask(rtwdev, REG_IQKA_END, BIT(12));
-+			tx1_fail = rtw_read32_mask(rtwdev, REG_IQKB_END, BIT(12));
-+
-+			if (!(tx0_fail || tx0_finish)) {
-+				rtw_write32(rtwdev, REG_RFECTL_A, 0x02000000);
-+				tx_x0_temp[tx0_avg] = rtw_read32_mask(rtwdev,
-+								      REG_IQKA_END,
-+								      0x07ff0000);
-+				rtw_write32(rtwdev, REG_RFECTL_A, 0x04000000);
-+				tx_y0_temp[tx0_avg] = rtw_read32_mask(rtwdev,
-+								      REG_IQKA_END,
-+								      0x07ff0000);
-+
-+				rtw_dbg(rtwdev, RTW_DBG_RFK,
-+					"tx_x0[%d] = %x ;; tx_y0[%d] = %x\n",
-+					tx0_avg, tx_x0_temp[tx0_avg],
-+					tx0_avg, tx_y0_temp[tx0_avg]);
-+
-+				tx_x0_temp[tx0_avg] <<= 21;
-+				tx_y0_temp[tx0_avg] <<= 21;
-+
-+				tx0_avg++;
-+			} else {
-+				cal0_retry++;
-+				if (cal0_retry == 10)
-+					break;
-+			}
-+
-+			if (!(tx1_fail || tx1_finish)) {
-+				rtw_write32(rtwdev, REG_RFECTL_B, 0x02000000);
-+				tx_x1_temp[tx1_avg] = rtw_read32_mask(rtwdev,
-+								      REG_IQKB_END,
-+								      0x07ff0000);
-+				rtw_write32(rtwdev, REG_RFECTL_B, 0x04000000);
-+				tx_y1_temp[tx1_avg] = rtw_read32_mask(rtwdev,
-+								      REG_IQKB_END,
-+								      0x07ff0000);
-+
-+				rtw_dbg(rtwdev, RTW_DBG_RFK,
-+					"tx_x1[%d] = %x ;; tx_y1[%d] = %x\n",
-+					tx1_avg, tx_x1_temp[tx1_avg],
-+					tx1_avg, tx_y1_temp[tx1_avg]);
-+
-+				tx_x1_temp[tx1_avg] <<= 21;
-+				tx_y1_temp[tx1_avg] <<= 21;
-+
-+				tx1_avg++;
-+			} else {
-+				cal1_retry++;
-+				if (cal1_retry == 10)
-+					break;
-+			}
-+		} else {
-+			cal0_retry++;
-+			cal1_retry++;
-+
-+			rtw_dbg(rtwdev, RTW_DBG_RFK,
-+				"delay 20ms TX IQK Not Ready!!!!!\n");
-+
-+			if (cal0_retry == 10)
-+				break;
-+		}
-+
-+		if (tx0_avg >= 2)
-+			tx0_finish = rtw88xxa_iqk_finish(tx0_avg, 4,
-+							 tx_x0_temp, tx_y0_temp, &tx_x0, &tx_y0,
-+							 false, false);
-+
-+		if (tx1_avg >= 2)
-+			tx1_finish = rtw88xxa_iqk_finish(tx1_avg, 4,
-+							 tx_x1_temp, tx_y1_temp, &tx_x1, &tx_y1,
-+							 false, false);
-+
-+		rtw_dbg(rtwdev, RTW_DBG_RFK,
-+			"tx0_average = %d, tx1_average = %d\n",
-+			tx0_avg, tx1_avg);
-+		rtw_dbg(rtwdev, RTW_DBG_RFK,
-+			"tx0_finish = %d, tx1_finish = %d\n",
-+			tx0_finish, tx1_finish);
-+
-+		if (tx0_finish && tx1_finish)
-+			break;
-+
-+		if ((cal0_retry + tx0_avg) >= 10 ||
-+		    (cal1_retry + tx1_avg) >= 10)
-+			break;
-+	}
-+
-+	rtw_dbg(rtwdev, RTW_DBG_RFK, "TXA_cal_retry = %d\n", cal0_retry);
-+	rtw_dbg(rtwdev, RTW_DBG_RFK, "TXB_cal_retry = %d\n", cal1_retry);
-+
-+	/* [31] = 0 --> Page C */
-+	rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+	/* Load LOK */
-+	rtw_write_rf(rtwdev, RF_PATH_A, RF_TXMOD, 0x7fe00,
-+		     rtw_read_rf(rtwdev, RF_PATH_A, RF_DTXLOK, 0xffc00));
-+	rtw_write_rf(rtwdev, RF_PATH_B, RF_TXMOD, 0x7fe00,
-+		     rtw_read_rf(rtwdev, RF_PATH_B, RF_DTXLOK, 0xffc00));
-+	/* [31] = 1 --> Page C1 */
-+	rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x1);
-+
-+	/* [31] = 0 --> Page C */
-+	rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+	if (tx0_finish) {
-+		/* ====== path A RX IQK RF setting====== */
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_LUTWE, RFREG_MASK, 0x80000);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_MODE_TABLE_ADDR, RFREG_MASK,
-+			     0x30000);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_MODE_TABLE_DATA0, RFREG_MASK,
-+			     0x3f7ff);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_MODE_TABLE_DATA1, RFREG_MASK,
-+			     0xfe7bf);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_RXBB2, RFREG_MASK, 0x88001);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_TXA_PREPAD, RFREG_MASK, 0x931d1);
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_LUTWE, RFREG_MASK, 0x00000);
-+	}
-+	if (tx1_finish) {
-+		/* ====== path B RX IQK RF setting====== */
-+		rtw_write_rf(rtwdev, RF_PATH_B, RF_LUTWE, RFREG_MASK, 0x80000);
-+		rtw_write_rf(rtwdev, RF_PATH_B, RF_MODE_TABLE_ADDR, RFREG_MASK,
-+			     0x30000);
-+		rtw_write_rf(rtwdev, RF_PATH_B, RF_MODE_TABLE_DATA0, RFREG_MASK,
-+			     0x3f7ff);
-+		rtw_write_rf(rtwdev, RF_PATH_B, RF_MODE_TABLE_DATA1, RFREG_MASK,
-+			     0xfe7bf);
-+		rtw_write_rf(rtwdev, RF_PATH_B, RF_RXBB2, RFREG_MASK, 0x88001);
-+		rtw_write_rf(rtwdev, RF_PATH_B, RF_TXA_PREPAD, RFREG_MASK, 0x931d1);
-+		rtw_write_rf(rtwdev, RF_PATH_B, RF_LUTWE, RFREG_MASK, 0x00000);
-+	}
-+
-+	rtw_write32_mask(rtwdev, REG_IQK_COM00, BIT(31), 0x1);
-+	rtw_write32_mask(rtwdev, REG_IQK_COM00, BIT(31), 0x0);
-+	rtw_write32(rtwdev, REG_DAC_RSTB, 0x00008000);
-+
-+	if (rtwdev->hci.type == RTW_HCI_TYPE_PCIE)
-+		rtw_write32(rtwdev, REG_IQK_COM96, 0x0046a911);
-+	else
-+		rtw_write32(rtwdev, REG_IQK_COM96, 0x0046a890);
-+
-+	if (efuse->rfe_option == 1) {
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_A, 0x77777717);
-+		rtw_write32(rtwdev, REG_RFE_INV_A, 0x00000077);
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x77777717);
-+		rtw_write32(rtwdev, REG_RFE_INV_B, 0x00000077);
-+	} else {
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_A, 0x77777717);
-+		rtw_write32(rtwdev, REG_RFE_INV_A, 0x02000077);
-+		rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x77777717);
-+		rtw_write32(rtwdev, REG_RFE_INV_B, 0x02000077);
-+	}
-+
-+	/* [31] = 1 --> Page C1 */
-+	rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x1);
-+
-+	if (tx0_finish) {
-+		/* TX_Tone_idx[9:0], TxK_Mask[29] TX_Tone = 16 */
-+		rtw_write32(rtwdev, REG_OFDM0_XA_TX_IQ_IMBALANCE, 0x38008c10);
-+		/* RX_Tone_idx[9:0], RxK_Mask[29] */
-+		rtw_write32(rtwdev, REG_OFDM0_A_TX_AFE, 0x18008c10);
-+		rtw_write32(rtwdev, REG_OFDM0_XB_TX_IQ_IMBALANCE, 0x82140119);
-+	}
-+	if (tx1_finish) {
-+		/* TX_Tone_idx[9:0], TxK_Mask[29] TX_Tone = 16 */
-+		rtw_write32(rtwdev, REG_TXTONEB, 0x38008c10);
-+		/* RX_Tone_idx[9:0], RxK_Mask[29] */
-+		rtw_write32(rtwdev, REG_RXTONEB, 0x18008c10);
-+		rtw_write32(rtwdev, REG_TXPITMB, 0x82140119);
-+	}
-+
-+	cal0_retry = 0;
-+	cal1_retry = 0;
-+	while (1) {
-+		/* one shot */
-+		/* [31] = 0 --> Page C */
-+		rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+
-+		if (tx0_finish) {
-+			rtw_write32_mask(rtwdev, REG_IQK_COM00, 0x03FF8000,
-+					 tx_x0 & 0x000007ff);
-+			rtw_write32_mask(rtwdev, REG_IQK_COM00, 0x000007FF,
-+					 tx_y0 & 0x000007ff);
-+			/* [31] = 1 --> Page C1 */
-+			rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x1);
-+			if (efuse->rfe_option == 1)
-+				rtw_write32(rtwdev, REG_TSSI_TRK_SW, 0x28161500);
-+			else
-+				rtw_write32(rtwdev, REG_TSSI_TRK_SW, 0x28160cc0);
-+			rtw_write32(rtwdev, REG_RFECTL_A, 0x00300000);
-+			rtw_write32(rtwdev, REG_RFECTL_A, 0x00100000);
-+			mdelay(5);
-+			rtw_write32(rtwdev, REG_TSSI_TRK_SW, 0x3c000000);
-+			rtw_write32(rtwdev, REG_RFECTL_A, 0x00000000);
-+		}
-+
-+		if (tx1_finish) {
-+			/* [31] = 0 --> Page C */
-+			rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x0);
-+			rtw_write32_mask(rtwdev, REG_IQK_COM00, 0x03FF8000,
-+					 tx_x1 & 0x000007ff);
-+			rtw_write32_mask(rtwdev, REG_IQK_COM00, 0x000007FF,
-+					 tx_y1 & 0x000007ff);
-+			/* [31] = 1 --> Page C1 */
-+			rtw_write32_mask(rtwdev, REG_CCASEL, BIT(31), 0x1);
-+			if (efuse->rfe_option == 1)
-+				rtw_write32(rtwdev, REG_RXPITMB, 0x28161500);
-+			else
-+				rtw_write32(rtwdev, REG_RXPITMB, 0x28160ca0);
-+			rtw_write32(rtwdev, REG_RFECTL_B, 0x00300000);
-+			rtw_write32(rtwdev, REG_RFECTL_B, 0x00100000);
-+			mdelay(5);
-+			rtw_write32(rtwdev, REG_RXPITMB, 0x3c000000);
-+			rtw_write32(rtwdev, REG_RFECTL_B, 0x00000000);
-+		}
-+
-+		for (delay_count = 0; delay_count < 20; delay_count++) {
-+			if (!rx0_finish && tx0_finish)
-+				iqk0_ready = rtw_read32_mask(rtwdev,
-+							     REG_IQKA_END,
-+							     BIT(10));
-+			if (!rx1_finish && tx1_finish)
-+				iqk1_ready = rtw_read32_mask(rtwdev,
-+							     REG_IQKB_END,
-+							     BIT(10));
-+			if (iqk0_ready && iqk1_ready)
-+				break;
-+
-+			mdelay(1);
-+		}
-+
-+		rtw_dbg(rtwdev, RTW_DBG_RFK, "RX delay_count = %d\n",
-+			delay_count);
-+
-+		if (delay_count < 20) { /* If 20ms No Result, then cal_retry++ */
-+			/* ============RXIQK Check============== */
-+			rx0_fail = rtw_read32_mask(rtwdev, REG_IQKA_END, BIT(11));
-+			rx1_fail = rtw_read32_mask(rtwdev, REG_IQKB_END, BIT(11));
-+
-+			if (!(rx0_fail || rx0_finish) && tx0_finish) {
-+				rtw_write32(rtwdev, REG_RFECTL_A, 0x06000000);
-+				rx_x0_temp[rx0_avg] = rtw_read32_mask(rtwdev,
-+								      REG_IQKA_END,
-+								      0x07ff0000);
-+				rtw_write32(rtwdev, REG_RFECTL_A, 0x08000000);
-+				rx_y0_temp[rx0_avg] = rtw_read32_mask(rtwdev,
-+								      REG_IQKA_END,
-+								      0x07ff0000);
-+
-+				rtw_dbg(rtwdev, RTW_DBG_RFK,
-+					"rx_x0[%d] = %x ;; rx_y0[%d] = %x\n",
-+					rx0_avg, rx_x0_temp[rx0_avg],
-+					rx0_avg, rx_y0_temp[rx0_avg]);
-+
-+				rx_x0_temp[rx0_avg] <<= 21;
-+				rx_y0_temp[rx0_avg] <<= 21;
-+
-+				rx0_avg++;
-+			} else {
-+				rtw_dbg(rtwdev, RTW_DBG_RFK,
-+					"1. RXA_cal_retry = %d\n", cal0_retry);
-+
-+				cal0_retry++;
-+				if (cal0_retry == 10)
-+					break;
-+			}
-+
-+			if (!(rx1_fail || rx1_finish) && tx1_finish) {
-+				rtw_write32(rtwdev, REG_RFECTL_B, 0x06000000);
-+				rx_x1_temp[rx1_avg] = rtw_read32_mask(rtwdev,
-+								      REG_IQKB_END,
-+								      0x07ff0000);
-+				rtw_write32(rtwdev, REG_RFECTL_B, 0x08000000);
-+				rx_y1_temp[rx1_avg] = rtw_read32_mask(rtwdev,
-+								      REG_IQKB_END,
-+								      0x07ff0000);
-+
-+				rtw_dbg(rtwdev, RTW_DBG_RFK,
-+					"rx_x1[%d] = %x ;; rx_y1[%d] = %x\n",
-+					rx1_avg, rx_x1_temp[rx1_avg],
-+					rx1_avg, rx_y1_temp[rx1_avg]);
-+
-+				rx_x1_temp[rx1_avg] <<= 21;
-+				rx_y1_temp[rx1_avg] <<= 21;
-+
-+				rx1_avg++;
-+			} else {
-+				cal1_retry++;
-+				if (cal1_retry == 10)
-+					break;
-+			}
-+		} else {
-+			rtw_dbg(rtwdev, RTW_DBG_RFK,
-+				"2. RXA_cal_retry = %d\n", cal0_retry);
-+
-+			cal0_retry++;
-+			cal1_retry++;
-+
-+			rtw_dbg(rtwdev, RTW_DBG_RFK,
-+				"delay 20ms RX IQK Not Ready!!!!!\n");
-+
-+			if (cal0_retry == 10)
-+				break;
-+		}
-+
-+		rtw_dbg(rtwdev, RTW_DBG_RFK, "3. RXA_cal_retry = %d\n",
-+			cal0_retry);
-+
-+		if (rx0_avg >= 2)
-+			rx0_finish = rtw88xxa_iqk_finish(rx0_avg, 4,
-+							 rx_x0_temp, rx_y0_temp,
-+							 &rx_x0, &rx_y0,
-+							 true, false);
-+
-+		if (rx1_avg >= 2)
-+			rx1_finish = rtw88xxa_iqk_finish(rx1_avg, 4,
-+							 rx_x1_temp, rx_y1_temp,
-+							 &rx_x1, &rx_y1,
-+							 true, false);
-+
-+		rtw_dbg(rtwdev, RTW_DBG_RFK,
-+			"rx0_average = %d, rx1_average = %d\n",
-+			rx0_avg, rx1_avg);
-+		rtw_dbg(rtwdev, RTW_DBG_RFK,
-+			"rx0_finish = %d, rx1_finish = %d\n",
-+			rx0_finish, rx1_finish);
-+
-+		if ((rx0_finish || !tx0_finish) && (rx1_finish || !tx1_finish))
-+			break;
-+
-+		if ((cal0_retry + rx0_avg) >= 10 ||
-+		    (cal1_retry + rx1_avg) >= 10 ||
-+		    rx0_avg == 3 || rx1_avg == 3)
-+			break;
-+	}
-+
-+	rtw_dbg(rtwdev, RTW_DBG_RFK, "RXA_cal_retry = %d\n", cal0_retry);
-+	rtw_dbg(rtwdev, RTW_DBG_RFK, "RXB_cal_retry = %d\n", cal1_retry);
-+
-+	/* FillIQK Result */
-+	rtw_dbg(rtwdev, RTW_DBG_RFK, "========Path_A =======\n");
-+
-+	if (tx0_finish)
-+		rtw8812a_iqk_tx_fill(rtwdev, RF_PATH_A, tx_x0, tx_y0);
-+	else
-+		rtw8812a_iqk_tx_fill(rtwdev, RF_PATH_A, 0x200, 0x0);
-+
-+	if (rx0_finish)
-+		rtw8812a_iqk_rx_fill(rtwdev, RF_PATH_A, rx_x0, rx_y0);
-+	else
-+		rtw8812a_iqk_rx_fill(rtwdev, RF_PATH_A, 0x200, 0x0);
-+
-+	rtw_dbg(rtwdev, RTW_DBG_RFK, "========Path_B =======\n");
-+
-+	if (tx1_finish)
-+		rtw8812a_iqk_tx_fill(rtwdev, RF_PATH_B, tx_x1, tx_y1);
-+	else
-+		rtw8812a_iqk_tx_fill(rtwdev, RF_PATH_B, 0x200, 0x0);
-+
-+	if (rx1_finish)
-+		rtw8812a_iqk_rx_fill(rtwdev, RF_PATH_B, rx_x1, rx_y1);
-+	else
-+		rtw8812a_iqk_rx_fill(rtwdev, RF_PATH_B, 0x200, 0x0);
-+}
-+
-+#define MACBB_REG_NUM_8812A 9
-+#define AFE_REG_NUM_8812A 12
-+#define RF_REG_NUM_8812A 3
-+
-+static void rtw8812a_do_iqk(struct rtw_dev *rtwdev)
-+{
-+	static const u32 backup_macbb_reg[MACBB_REG_NUM_8812A] = {
-+		0x520, 0x550, 0x808, 0xa04, 0x90c, 0xc00, 0xe00, 0x838, 0x82c
-+	};
-+	static const u32 backup_afe_reg[AFE_REG_NUM_8812A] = {
-+		0xc5c, 0xc60, 0xc64, 0xc68, 0xcb0, 0xcb4,
-+		0xe5c, 0xe60, 0xe64, 0xe68, 0xeb0, 0xeb4
-+	};
-+	static const u32 backup_rf_reg[RF_REG_NUM_8812A] = {
-+		0x65, 0x8f, 0x0
-+	};
-+	u32 macbb_backup[MACBB_REG_NUM_8812A] = {};
-+	u32 afe_backup[AFE_REG_NUM_8812A] = {};
-+	u32 rfa_backup[RF_REG_NUM_8812A] = {};
-+	u32 rfb_backup[RF_REG_NUM_8812A] = {};
-+	u32 reg_cb8, reg_eb8;
-+
-+	rtw88xxa_iqk_backup_mac_bb(rtwdev, macbb_backup,
-+				   backup_macbb_reg, MACBB_REG_NUM_8812A);
-+
-+	rtw_write32_set(rtwdev, REG_CCASEL, BIT(31));
-+	reg_cb8 = rtw_read32(rtwdev, REG_RFECTL_A);
-+	reg_eb8 = rtw_read32(rtwdev, REG_RFECTL_B);
-+	rtw_write32_clr(rtwdev, REG_CCASEL, BIT(31));
-+
-+	rtw88xxa_iqk_backup_afe(rtwdev, afe_backup,
-+				backup_afe_reg, AFE_REG_NUM_8812A);
-+	rtw8812a_iqk_backup_rf(rtwdev, rfa_backup, rfb_backup,
-+			       backup_rf_reg, RF_REG_NUM_8812A);
-+
-+	rtw88xxa_iqk_configure_mac(rtwdev);
-+
-+	rtw8812a_iqk(rtwdev);
-+
-+	rtw8812a_iqk_restore_rf(rtwdev, RF_PATH_A, backup_rf_reg,
-+				rfa_backup, RF_REG_NUM_8812A);
-+	rtw8812a_iqk_restore_rf(rtwdev, RF_PATH_B, backup_rf_reg,
-+				rfb_backup, RF_REG_NUM_8812A);
-+
-+	rtw8812a_iqk_restore_afe(rtwdev, afe_backup,
-+				 backup_afe_reg, AFE_REG_NUM_8812A);
-+
-+	rtw_write32_set(rtwdev, REG_CCASEL, BIT(31));
-+	rtw_write32(rtwdev, REG_RFECTL_A, reg_cb8);
-+	rtw_write32(rtwdev, REG_RFECTL_B, reg_eb8);
-+	rtw_write32_clr(rtwdev, REG_CCASEL, BIT(31));
-+
-+	rtw88xxa_iqk_restore_mac_bb(rtwdev, macbb_backup,
-+				    backup_macbb_reg, MACBB_REG_NUM_8812A);
-+}
-+
-+static void rtw8812a_phy_calibration(struct rtw_dev *rtwdev)
-+{
-+	u8 channel = rtwdev->hal.current_channel;
-+
-+	rtw8812a_do_iqk(rtwdev);
-+
-+	/* The official driver wants to do this after connecting
-+	 * but before first writing a new igi (phydm_get_new_igi).
-+	 * Here seems close enough.
-+	 */
-+	if (channel >= 36 && channel <= 64)
-+		rtw_load_table(rtwdev, &rtw8812a_agc_diff_lb_tbl);
-+	else if (channel >= 100)
-+		rtw_load_table(rtwdev, &rtw8812a_agc_diff_hb_tbl);
-+}
-+
-+static void rtw8812a_pwr_track(struct rtw_dev *rtwdev)
-+{
-+	struct rtw_dm_info *dm_info = &rtwdev->dm_info;
-+
-+	if (!dm_info->pwr_trk_triggered) {
-+		rtw_write_rf(rtwdev, RF_PATH_A, RF_T_METER,
-+			     GENMASK(17, 16), 0x03);
-+		dm_info->pwr_trk_triggered = true;
-+		return;
-+	}
-+
-+	rtw88xxa_phy_pwrtrack(rtwdev, rtw8812a_do_lck, rtw8812a_do_iqk);
-+	dm_info->pwr_trk_triggered = false;
-+}
-+
-+static void rtw8812a_fill_txdesc_checksum(struct rtw_dev *rtwdev,
-+					  struct rtw_tx_pkt_info *pkt_info,
-+					  u8 *txdesc)
-+{
-+	fill_txdesc_checksum_common(txdesc, 16);
-+}
-+
-+static void rtw8812a_coex_cfg_init(struct rtw_dev *rtwdev)
-+{
-+}
-+
-+static void rtw8812a_coex_cfg_gnt_fix(struct rtw_dev *rtwdev)
-+{
-+}
-+
-+static void rtw8821a_coex_cfg_rfe_type(struct rtw_dev *rtwdev)
-+{
-+}
-+
-+static void rtw8821a_coex_cfg_wl_tx_power(struct rtw_dev *rtwdev, u8 wl_pwr)
-+{
-+}
-+
-+static void rtw8821a_coex_cfg_wl_rx_gain(struct rtw_dev *rtwdev, bool low_gain)
-+{
-+}
-+
-+static const struct rtw_chip_ops rtw8812a_ops = {
-+	.power_on		= rtw88xxa_power_on,
-+	.power_off		= rtw8812a_power_off,
-+	.phy_set_param		= NULL,
-+	.read_efuse		= rtw88xxa_read_efuse,
-+	.query_phy_status	= rtw8812a_query_phy_status,
-+	.set_channel		= rtw88xxa_set_channel,
-+	.mac_init		= NULL,
-+	.read_rf		= rtw88xxa_phy_read_rf,
-+	.write_rf		= rtw_phy_write_rf_reg_sipi,
-+	.set_antenna		= NULL,
-+	.set_tx_power_index	= rtw88xxa_set_tx_power_index,
-+	.cfg_ldo25		= rtw8812a_cfg_ldo25,
-+	.efuse_grant		= rtw88xxa_efuse_grant,
-+	.false_alarm_statistics	= rtw88xxa_false_alarm_statistics,
-+	.phy_calibration	= rtw8812a_phy_calibration,
-+	.cck_pd_set		= rtw88xxa_phy_cck_pd_set,
-+	.pwr_track		= rtw8812a_pwr_track,
-+	.config_bfee		= NULL,
-+	.set_gid_table		= NULL,
-+	.cfg_csi_rate		= NULL,
-+	.fill_txdesc_checksum	= rtw8812a_fill_txdesc_checksum,
-+	.coex_set_init		= rtw8812a_coex_cfg_init,
-+	.coex_set_ant_switch	= NULL,
-+	.coex_set_gnt_fix	= rtw8812a_coex_cfg_gnt_fix,
-+	.coex_set_gnt_debug	= NULL,
-+	.coex_set_rfe_type	= rtw8821a_coex_cfg_rfe_type,
-+	.coex_set_wl_tx_power	= rtw8821a_coex_cfg_wl_tx_power,
-+	.coex_set_wl_rx_gain	= rtw8821a_coex_cfg_wl_rx_gain,
-+};
-+
-+static const struct rtw_page_table page_table_8812a[] = {
-+	/* hq_num, nq_num, lq_num, exq_num, gapq_num */
-+	{0, 0, 0, 0, 0},	/* SDIO */
-+	{0, 0, 0, 0, 0},	/* PCI */
-+	{16, 0, 0, 0, 1},	/* 2 bulk out endpoints */
-+	{16, 0, 16, 0, 1},	/* 3 bulk out endpoints */
-+	{16, 0, 16, 0, 1},	/* 4 bulk out endpoints */
-+};
-+
-+static const struct rtw_rqpn rqpn_table_8812a[] = {
-+	{RTW_DMA_MAPPING_NORMAL, RTW_DMA_MAPPING_NORMAL,
-+	 RTW_DMA_MAPPING_LOW, RTW_DMA_MAPPING_LOW,
-+	 RTW_DMA_MAPPING_EXTRA, RTW_DMA_MAPPING_HIGH},
-+
-+	{RTW_DMA_MAPPING_NORMAL, RTW_DMA_MAPPING_NORMAL,
-+	 RTW_DMA_MAPPING_LOW, RTW_DMA_MAPPING_LOW,
-+	 RTW_DMA_MAPPING_EXTRA, RTW_DMA_MAPPING_HIGH},
-+
-+	{RTW_DMA_MAPPING_HIGH, RTW_DMA_MAPPING_HIGH,
-+	 RTW_DMA_MAPPING_NORMAL, RTW_DMA_MAPPING_NORMAL,
-+	 RTW_DMA_MAPPING_HIGH, RTW_DMA_MAPPING_HIGH},
-+
-+	{RTW_DMA_MAPPING_HIGH, RTW_DMA_MAPPING_NORMAL,
-+	 RTW_DMA_MAPPING_LOW, RTW_DMA_MAPPING_LOW,
-+	 RTW_DMA_MAPPING_HIGH, RTW_DMA_MAPPING_HIGH},
-+
-+	{RTW_DMA_MAPPING_NORMAL, RTW_DMA_MAPPING_NORMAL,
-+	 RTW_DMA_MAPPING_LOW, RTW_DMA_MAPPING_LOW,
-+	 RTW_DMA_MAPPING_EXTRA, RTW_DMA_MAPPING_HIGH},
-+};
-+
-+static const struct rtw_prioq_addrs prioq_addrs_8812a = {
-+	.prio[RTW_DMA_MAPPING_EXTRA] = {
-+		.rsvd = REG_RQPN_NPQ + 2, .avail = REG_RQPN_NPQ + 3,
-+	},
-+	.prio[RTW_DMA_MAPPING_LOW] = {
-+		.rsvd = REG_RQPN + 1, .avail = REG_FIFOPAGE_CTRL_2 + 1,
-+	},
-+	.prio[RTW_DMA_MAPPING_NORMAL] = {
-+		.rsvd = REG_RQPN_NPQ, .avail = REG_RQPN_NPQ + 1,
-+	},
-+	.prio[RTW_DMA_MAPPING_HIGH] = {
-+		.rsvd = REG_RQPN, .avail = REG_FIFOPAGE_CTRL_2,
-+	},
-+	.wsize = false,
-+};
-+
-+static const struct rtw_hw_reg rtw8812a_dig[] = {
-+	[0] = { .addr = REG_RXIGI_A, .mask = 0x7f },
-+	[1] = { .addr = REG_RXIGI_B, .mask = 0x7f },
-+};
-+
-+static const struct rtw_rfe_def rtw8812a_rfe_defs[] = {
-+	[0] = { .phy_pg_tbl	= &rtw8812a_bb_pg_tbl,
-+		.txpwr_lmt_tbl	= &rtw8812a_txpwr_lmt_tbl,
-+		.pwr_track_tbl	= &rtw8812a_rtw_pwr_track_tbl, },
-+	[1] = { .phy_pg_tbl	= &rtw8812a_bb_pg_tbl,
-+		.txpwr_lmt_tbl	= &rtw8812a_txpwr_lmt_tbl,
-+		.pwr_track_tbl	= &rtw8812a_rtw_pwr_track_tbl, },
-+	[3] = { .phy_pg_tbl	= &rtw8812a_bb_pg_rfe3_tbl,
-+		.txpwr_lmt_tbl	= &rtw8812a_txpwr_lmt_tbl,
-+		.pwr_track_tbl	= &rtw8812a_rtw_pwr_track_rfe3_tbl, },
-+};
-+
-+static const u8 wl_rssi_step_8812a[] = {101, 45, 101, 40};
-+static const u8 bt_rssi_step_8812a[] = {101, 101, 101, 101};
-+
-+static const struct coex_rf_para rf_para_tx_8812a[] = {
-+	{0, 0, false, 7},  /* for normal */
-+	{0, 20, false, 7}, /* for WL-CPT */
-+	{8, 17, true, 4},
-+	{7, 18, true, 4},
-+	{6, 19, true, 4},
-+	{5, 20, true, 4}
-+};
-+
-+static const struct coex_rf_para rf_para_rx_8812a[] = {
-+	{0, 0, false, 7},  /* for normal */
-+	{0, 20, false, 7}, /* for WL-CPT */
-+	{3, 24, true, 5},
-+	{2, 26, true, 5},
-+	{1, 27, true, 5},
-+	{0, 28, true, 5}
-+};
-+
-+static_assert(ARRAY_SIZE(rf_para_tx_8812a) == ARRAY_SIZE(rf_para_rx_8812a));
-+
-+const struct rtw_chip_info rtw8812a_hw_spec = {
-+	.ops = &rtw8812a_ops,
-+	.id = RTW_CHIP_TYPE_8812A,
-+	.fw_name = "rtw88/rtw8812a_fw.bin",
-+	.wlan_cpu = RTW_WCPU_11N,
-+	.tx_pkt_desc_sz = 40,
-+	.tx_buf_desc_sz = 16,
-+	.rx_pkt_desc_sz = 24,
-+	.rx_buf_desc_sz = 8,
-+	.phy_efuse_size = 512,
-+	.log_efuse_size = 512,
-+	.ptct_efuse_size = 96 + 1, /* TODO or just 18? */
-+	.txff_size = 131072,
-+	.rxff_size = 16128,
-+	.rsvd_drv_pg_num = 9,
-+	.txgi_factor = 1,
-+	.is_pwr_by_rate_dec = true,
-+	.max_power_index = 0x3f,
-+	.csi_buf_pg_num = 0,
-+	.band = RTW_BAND_2G | RTW_BAND_5G,
-+	.page_size = 512,
-+	.dig_min = 0x20,
-+	.ht_supported = true,
-+	.vht_supported = true,
-+	.lps_deep_mode_supported = 0,
-+	.sys_func_en = 0xFD,
-+	.pwr_on_seq = card_enable_flow_8812a,
-+	.pwr_off_seq = card_disable_flow_8812a,
-+	.page_table = page_table_8812a,
-+	.rqpn_table = rqpn_table_8812a,
-+	.prioq_addrs = &prioq_addrs_8812a,
-+	.intf_table = NULL,
-+	.dig = rtw8812a_dig,
-+	.rf_sipi_addr = {REG_LSSI_WRITE_A, REG_LSSI_WRITE_B},
-+	.ltecoex_addr = NULL,
-+	.mac_tbl = &rtw8812a_mac_tbl,
-+	.agc_tbl = &rtw8812a_agc_tbl,
-+	.bb_tbl = &rtw8812a_bb_tbl,
-+	.rf_tbl = {&rtw8812a_rf_a_tbl, &rtw8812a_rf_b_tbl},
-+	.rfe_defs = rtw8812a_rfe_defs,
-+	.rfe_defs_size = ARRAY_SIZE(rtw8812a_rfe_defs),
-+	.rx_ldpc = false,
-+	.hw_feature_report = false,
-+	.c2h_ra_report_size = 4,
-+	.old_datarate_fb_limit = true,
-+	.usb_tx_agg_desc_num = 1,
-+	.iqk_threshold = 8,
-+	.ampdu_density = IEEE80211_HT_MPDU_DENSITY_16,
-+	.max_scan_ie_len = IEEE80211_MAX_DATA_LEN,
-+
-+	.coex_para_ver = 0, /* no coex code in 8812au driver */
-+	.bt_desired_ver = 0,
-+	.scbd_support = false,
-+	.new_scbd10_def = false,
-+	.ble_hid_profile_support = false,
-+	.wl_mimo_ps_support = false,
-+	.pstdma_type = COEX_PSTDMA_FORCE_LPSOFF,
-+	.bt_rssi_type = COEX_BTRSSI_RATIO,
-+	.ant_isolation = 15,
-+	.rssi_tolerance = 2,
-+	.wl_rssi_step = wl_rssi_step_8812a,
-+	.bt_rssi_step = bt_rssi_step_8812a,
-+	.table_sant_num = 0,
-+	.table_sant = NULL,
-+	.table_nsant_num = 0,
-+	.table_nsant = NULL,
-+	.tdma_sant_num = 0,
-+	.tdma_sant = NULL,
-+	.tdma_nsant_num = 0,
-+	.tdma_nsant = NULL,
-+	.wl_rf_para_num = ARRAY_SIZE(rf_para_tx_8812a),
-+	.wl_rf_para_tx = rf_para_tx_8812a,
-+	.wl_rf_para_rx = rf_para_rx_8812a,
-+	.bt_afh_span_bw20 = 0x20,
-+	.bt_afh_span_bw40 = 0x30,
-+	.afh_5g_num = 0,
-+	.afh_5g = NULL,
-+	.coex_info_hw_regs_num = 0,
-+	.coex_info_hw_regs = NULL,
-+};
-+EXPORT_SYMBOL(rtw8812a_hw_spec);
-+
-+MODULE_FIRMWARE("rtw88/rtw8812a_fw.bin");
-+
-+MODULE_AUTHOR("Realtek Corporation");
-+MODULE_DESCRIPTION("Realtek 802.11ac wireless 8812a driver");
-+MODULE_LICENSE("Dual BSD/GPL");
---- /dev/null
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8812a.h
-@@ -0,0 +1,10 @@
-+/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
-+/* Copyright(c) 2024  Realtek Corporation
-+ */
-+
-+#ifndef __RTW8812A_H__
-+#define __RTW8812A_H__
-+
-+extern const struct rtw_chip_info rtw8812a_hw_spec;
-+
-+#endif
diff --git a/package/kernel/mac80211/patches/rtl/044-v6.13-wifi-rtw88-Add-rtw8821au.c-and-rtw8812au.c.patch b/package/kernel/mac80211/patches/rtl/044-v6.13-wifi-rtw88-Add-rtw8821au.c-and-rtw8812au.c.patch
deleted file mode 100644
index a37f131bab..0000000000
--- a/package/kernel/mac80211/patches/rtl/044-v6.13-wifi-rtw88-Add-rtw8821au.c-and-rtw8812au.c.patch
+++ /dev/null
@@ -1,80 +0,0 @@
-From 8f82bb2cfaf7b8992e0e8493cb765138254f87c9 Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 30 Oct 2024 20:29:28 +0200
-Subject: [PATCH] wifi: rtw88: Add rtw8821au.c and rtw8812au.c
-
-These are the entry points for the new modules rtw88_8821au
-(RTL8821AU/RTL8811AU) and rtw88_8812au (RTL8812AU).
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/91c495f8-a607-429b-8bc0-5a45d3c1393e@gmail.com
----
- .../net/wireless/realtek/rtw88/rtw8812au.c    | 28 +++++++++++++++++++
- .../net/wireless/realtek/rtw88/rtw8821au.c    | 28 +++++++++++++++++++
- 2 files changed, 56 insertions(+)
- create mode 100644 drivers/net/wireless/realtek/rtw88/rtw8812au.c
- create mode 100644 drivers/net/wireless/realtek/rtw88/rtw8821au.c
-
---- /dev/null
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8812au.c
-@@ -0,0 +1,28 @@
-+// SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause
-+/* Copyright(c) 2024  Realtek Corporation
-+ */
-+
-+#include <linux/module.h>
-+#include <linux/usb.h>
-+#include "main.h"
-+#include "rtw8812a.h"
-+#include "usb.h"
-+
-+static const struct usb_device_id rtw_8812au_id_table[] = {
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x2604, 0x0012, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) },
-+	{},
-+};
-+MODULE_DEVICE_TABLE(usb, rtw_8812au_id_table);
-+
-+static struct usb_driver rtw_8812au_driver = {
-+	.name = "rtw_8812au",
-+	.id_table = rtw_8812au_id_table,
-+	.probe = rtw_usb_probe,
-+	.disconnect = rtw_usb_disconnect,
-+};
-+module_usb_driver(rtw_8812au_driver);
-+
-+MODULE_AUTHOR("Bitterblue Smith <rtl8821cerfe2@gmail.com>");
-+MODULE_DESCRIPTION("Realtek 802.11ac wireless 8812au driver");
-+MODULE_LICENSE("Dual BSD/GPL");
---- /dev/null
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8821au.c
-@@ -0,0 +1,28 @@
-+// SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause
-+/* Copyright(c) 2024  Realtek Corporation
-+ */
-+
-+#include <linux/module.h>
-+#include <linux/usb.h>
-+#include "main.h"
-+#include "rtw8821a.h"
-+#include "usb.h"
-+
-+static const struct usb_device_id rtw_8821au_id_table[] = {
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x2357, 0x011e, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) },
-+	{},
-+};
-+MODULE_DEVICE_TABLE(usb, rtw_8821au_id_table);
-+
-+static struct usb_driver rtw_8821au_driver = {
-+	.name = "rtw_8821au",
-+	.id_table = rtw_8821au_id_table,
-+	.probe = rtw_usb_probe,
-+	.disconnect = rtw_usb_disconnect,
-+};
-+module_usb_driver(rtw_8821au_driver);
-+
-+MODULE_AUTHOR("Bitterblue Smith <rtl8821cerfe2@gmail.com>");
-+MODULE_DESCRIPTION("Realtek 802.11ac wireless 8821au/8811au driver");
-+MODULE_LICENSE("Dual BSD/GPL");
diff --git a/package/kernel/mac80211/patches/rtl/045-v6.13-wifi-rtw88-Enable-the-new-RTL8821AU-RTL8812AU-driver.patch b/package/kernel/mac80211/patches/rtl/045-v6.13-wifi-rtw88-Enable-the-new-RTL8821AU-RTL8812AU-driver.patch
deleted file mode 100644
index 6a4a2aff69..0000000000
--- a/package/kernel/mac80211/patches/rtl/045-v6.13-wifi-rtw88-Enable-the-new-RTL8821AU-RTL8812AU-driver.patch
+++ /dev/null
@@ -1,153 +0,0 @@
-From 0e3e8284f8e1bf2fc0f7bf247194efe5cfc568c1 Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Wed, 30 Oct 2024 20:31:28 +0200
-Subject: [PATCH] wifi: rtw88: Enable the new RTL8821AU/RTL8812AU drivers
-
-These are older Wifi 5 chips. RTL8821AU is 1x1, with or without
-Bluetooth. RTL8812AU is 2x2, without Bluetooth.
-
-Beamforming is not implemented. It looks like these chips need a
-different implementation than what is in bf.c.
-
-Speed tests with RTL8821AU: 137 Mbps download, 144 Mbps upload.
-Speed tests with RTL8812AU: 344 Mbps download, 387 Mbps upload.
-
-Station mode and AP mode were tested.
-
-Bluetooth coexistence works. I used my Bluetooth headphones for
-several days, listening to music and watching videos. There is only
-a problem with the wifi speeds with one router:
-
-With ISP's HG6544C router:
-Official driver: 3/5 Mbps.
-rtw88: a bit more, but not steady at all. Not enough to watch a 1080p
-Youtube video.
-
-With my D-Link Eagle R32 router running Openwrt, on the same channel:
-Official driver: 6/10 Mbps.
-rtw88: download starts around 30, climbs to 50 / upload is 10 Mbps.
-I can watch a 1080p Youtube video.
-
-The music doesn't cut out during any speed tests.
-
-I also tested transferring files to and from my phone. I don't have
-other types of Bluetooth devices to test.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
-Link: https://patch.msgid.link/0b8e8093-8103-4999-86bf-0055ec52ea64@gmail.com
----
-Kconfig.local                               | 15 ++++++++
- drivers/net/wireless/realtek/rtw88/Kconfig  | 40 ++++++++++++++++++++-
- drivers/net/wireless/realtek/rtw88/Makefile | 15 ++++++++
- 3 files changed, 69 insertions(+), 1 deletion(-)
-
---- a/Kconfig.local
-+++ b/Kconfig.local
-@@ -1144,6 +1144,15 @@ config BACKPORTED_RTW88_8723D
- config BACKPORTED_RTW88_8821C
- 	tristate
- 	default RTW88_8821C
-+config BACKPORTED_RTW88_88XXA
-+	tristate
-+	default RTW88_88XXA
-+config BACKPORTED_RTW88_8821A
-+	tristate
-+	default RTW88_8821A
-+config BACKPORTED_RTW88_8812A
-+	tristate
-+	default RTW88_8812A
- config BACKPORTED_RTW88_8822BE
- 	tristate
- 	default RTW88_8822BE
-@@ -1183,6 +1192,12 @@ config BACKPORTED_RTW88_8821CS
- config BACKPORTED_RTW88_8821CU
- 	tristate
- 	default RTW88_8821CU
-+config BACKPORTED_RTW88_8821AU
-+	tristate
-+	default RTW88_8821AU
-+config BACKPORTED_RTW88_8812AU
-+	tristate
-+	default RTW88_8812AU
- config BACKPORTED_RTW88_DEBUG
- 	tristate
- 	default RTW88_DEBUG
---- a/drivers/net/wireless/realtek/rtw88/Kconfig
-+++ b/drivers/net/wireless/realtek/rtw88/Kconfig
-@@ -54,6 +54,20 @@ config RTW88_8821C
- 	tristate
- 	depends on m
- 
-+config RTW88_88XXA
-+	tristate
-+	depends on m
-+
-+config RTW88_8821A
-+	tristate
-+	depends on m
-+	select RTW88_88XXA
-+
-+config RTW88_8812A
-+	tristate
-+	depends on m
-+	select RTW88_88XXA
-+
- config RTW88_8822BE
- 	tristate "Realtek 8822BE PCI wireless network adapter"
- 	depends on m
-@@ -213,6 +227,30 @@ config RTW88_8821CU
- 
- 	  802.11ac USB wireless network adapter
- 
-+config RTW88_8821AU
-+	tristate "Realtek 8821AU/8811AU USB wireless network adapter"
-+	depends on m
-+	depends on USB
-+	select RTW88_CORE
-+	select RTW88_USB
-+	select RTW88_8821A
-+	help
-+	  Select this option will enable support for 8821AU and 8811AU chipset
-+
-+	  802.11ac USB wireless network adapter
-+
-+config RTW88_8812AU
-+	tristate "Realtek 8812AU USB wireless network adapter"
-+	depends on m
-+	depends on USB
-+	select RTW88_CORE
-+	select RTW88_USB
-+	select RTW88_8812A
-+	help
-+	  Select this option will enable support for 8812AU chipset
-+
-+	  802.11ac USB wireless network adapter
-+
- config RTW88_DEBUG
- 	bool "Realtek rtw88 debug support"
- 	depends on RTW88_CORE
---- a/drivers/net/wireless/realtek/rtw88/Makefile
-+++ b/drivers/net/wireless/realtek/rtw88/Makefile
-@@ -77,6 +77,21 @@ rtw88_8821cs-objs		:= rtw8821cs.o
- obj-$(CPTCFG_RTW88_8821CU)	+= rtw88_8821cu.o
- rtw88_8821cu-objs		:= rtw8821cu.o
- 
-+obj-$(CPTCFG_RTW88_88XXA)	+= rtw88_88xxa.o
-+rtw88_88xxa-objs		:= rtw88xxa.o
-+
-+obj-$(CPTCFG_RTW88_8821A)	+= rtw88_8821a.o
-+rtw88_8821a-objs		:= rtw8821a.o rtw8821a_table.o
-+
-+obj-$(CPTCFG_RTW88_8812A)	+= rtw88_8812a.o
-+rtw88_8812a-objs		:= rtw8812a.o rtw8812a_table.o
-+
-+obj-$(CPTCFG_RTW88_8821AU)	+= rtw88_8821au.o
-+rtw88_8821au-objs		:= rtw8821au.o
-+
-+obj-$(CPTCFG_RTW88_8812AU)	+= rtw88_8812au.o
-+rtw88_8812au-objs		:= rtw8812au.o
-+
- obj-$(CPTCFG_RTW88_PCI)		+= rtw88_pci.o
- rtw88_pci-objs			:= pci.o
- 
diff --git a/package/kernel/mac80211/patches/rtl/046-wifi-rtw88-8821au-Add-additional-devices-to-the-USB_.patch b/package/kernel/mac80211/patches/rtl/046-wifi-rtw88-8821au-Add-additional-devices-to-the-USB_.patch
deleted file mode 100644
index a83094b3c3..0000000000
--- a/package/kernel/mac80211/patches/rtl/046-wifi-rtw88-8821au-Add-additional-devices-to-the-USB_.patch
+++ /dev/null
@@ -1,77 +0,0 @@
-From ff5a1c94e53c0d24f610c2c30add82f75b728737 Mon Sep 17 00:00:00 2001
-From: Larry Finger <Larry.Finger@gmail.com>
-Date: Wed, 6 Nov 2024 15:55:31 +0200
-Subject: [PATCH 1/6] wifi: rtw88: 8821au: Add additional devices to the
- USB_DEVICE list
-
-These are the entries that Nick Morrow provided. From
-https://github.com/morrownr/8821au-20210708
-
-Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
----
- .../net/wireless/realtek/rtw88/rtw8821au.c    | 52 ++++++++++++++++++-
- 1 file changed, 51 insertions(+), 1 deletion(-)
-
---- a/drivers/net/wireless/realtek/rtw88/rtw8821au.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8821au.c
-@@ -9,8 +9,58 @@
- #include "usb.h"
- 
- static const struct usb_device_id rtw_8821au_id_table[] = {
--	{ USB_DEVICE_AND_INTERFACE_INFO(0x2357, 0x011e, 0xff, 0xff, 0xff),
-+	{ USB_DEVICE_AND_INTERFACE_INFO(RTW_USB_VENDOR_ID_REALTEK, 0x0811, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) },
-+	{ USB_DEVICE_AND_INTERFACE_INFO(RTW_USB_VENDOR_ID_REALTEK, 0x0820, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) },
-+	{ USB_DEVICE_AND_INTERFACE_INFO(RTW_USB_VENDOR_ID_REALTEK, 0x0821, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) },
-+	{ USB_DEVICE_AND_INTERFACE_INFO(RTW_USB_VENDOR_ID_REALTEK, 0x8822, 0xff, 0xff, 0xff),
- 	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) },
-+	{ USB_DEVICE_AND_INTERFACE_INFO(RTW_USB_VENDOR_ID_REALTEK, 0x0823, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) },
-+	{ USB_DEVICE_AND_INTERFACE_INFO(RTW_USB_VENDOR_ID_REALTEK, 0xa811, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) },
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x0411, 0x0242, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) }, /* Buffalo */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x0411, 0x029b, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) }, /* Buffalo */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x04bb, 0x0953, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) }, /* I-O DATA */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x056e, 0x4007, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) }, /* ELECOM */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x056e, 0x400e, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) }, /* ELECOM */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x056e, 0x400f, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) }, /* ELECOM */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x0846, 0x9052, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) }, /* Netgear */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x0e66, 0x0023, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) }, /* HAWKING */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x2001, 0x3314, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) }, /* D-Link */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x2001, 0x3318, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) }, /* D-Link */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x2019, 0xab32, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) }, /* Planex */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x20f4, 0x804b, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) }, /* TRENDnet */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x2357, 0x011e, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) }, /* TP Link */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x2357, 0x011f, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) }, /* TP Link */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x2357, 0x0120, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) }, /* TP Link */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x3823, 0x6249, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) }, /* Obihai */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x7392, 0xa811, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) }, /* Edimax */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x7392, 0xa812, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) }, /* Edimax */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x7392, 0xa813, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) }, /* Edimax */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x7392, 0xb611, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8821a_hw_spec) }, /* Edimax */
- 	{},
- };
- MODULE_DEVICE_TABLE(usb, rtw_8821au_id_table);
diff --git a/package/kernel/mac80211/patches/rtl/047-wifi-rtw88-8812au-Add-more-device-IDs.patch b/package/kernel/mac80211/patches/rtl/047-wifi-rtw88-8812au-Add-more-device-IDs.patch
deleted file mode 100644
index a93f9219d9..0000000000
--- a/package/kernel/mac80211/patches/rtl/047-wifi-rtw88-8812au-Add-more-device-IDs.patch
+++ /dev/null
@@ -1,91 +0,0 @@
-From d21ad2e4edfb64d3f32685607a457576eea3c5cd Mon Sep 17 00:00:00 2001
-From: Nick Morrow <usbwifi2024@gmail.com>
-Date: Wed, 6 Nov 2024 15:57:10 +0200
-Subject: [PATCH 2/6] wifi: rtw88: 8812au: Add more device IDs
-
-From https://github.com/morrownr/8812au-20210820.
-
-Signed-off-by: Nick Morrow <usbwifi2024@gmail.com>
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
----
- .../net/wireless/realtek/rtw88/rtw8812au.c    | 68 ++++++++++++++++++-
- 1 file changed, 67 insertions(+), 1 deletion(-)
-
---- a/drivers/net/wireless/realtek/rtw88/rtw8812au.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8812au.c
-@@ -9,8 +9,74 @@
- #include "usb.h"
- 
- static const struct usb_device_id rtw_8812au_id_table[] = {
--	{ USB_DEVICE_AND_INTERFACE_INFO(0x2604, 0x0012, 0xff, 0xff, 0xff),
-+	{ USB_DEVICE_AND_INTERFACE_INFO(RTW_USB_VENDOR_ID_REALTEK, 0x8812, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) },
-+	{ USB_DEVICE_AND_INTERFACE_INFO(RTW_USB_VENDOR_ID_REALTEK, 0x881a, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) },
-+	{ USB_DEVICE_AND_INTERFACE_INFO(RTW_USB_VENDOR_ID_REALTEK, 0x881b, 0xff, 0xff, 0xff),
- 	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) },
-+	{ USB_DEVICE_AND_INTERFACE_INFO(RTW_USB_VENDOR_ID_REALTEK, 0x881c, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) },
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x0409, 0x0408, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* NEC */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x0411, 0x025d, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* Buffalo */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x04bb, 0x0952, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* I-O DATA */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x050d, 0x1106, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* Belkin */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x050d, 0x1109, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* Belkin */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x0586, 0x3426, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* ZyXEL */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x0789, 0x016e, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* Logitec */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x07b8, 0x8812, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* Abocom */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x0846, 0x9051, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* Netgear */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x0b05, 0x17d2, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* ASUS */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x0df6, 0x0074, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* Sitecom */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x0e66, 0x0022, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* Hawking */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x1058, 0x0632, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* WD */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x13b1, 0x003f, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* Linksys */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x148f, 0x9097, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* Amped Wireless */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x1740, 0x0100, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* EnGenius */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x2001, 0x330e, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* D-Link */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x2001, 0x3313, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* D-Link */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x2001, 0x3315, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* D-Link */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x2001, 0x3316, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* D-Link */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x2019, 0xab30, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* Planex */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x20f4, 0x805b, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* TRENDnet */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x2357, 0x0101, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* TP-Link */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x2357, 0x0103, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* TP-Link */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x2357, 0x010d, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* TP-Link */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x2357, 0x010e, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* TP-Link */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x2357, 0x010f, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* TP-Link */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x2357, 0x0122, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* TP-Link */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x2604, 0x0012, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* Tenda */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x7392, 0xa822, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8812a_hw_spec) }, /* Edimax */
- 	{},
- };
- MODULE_DEVICE_TABLE(usb, rtw_8812au_id_table);
diff --git a/package/kernel/mac80211/patches/rtl/048-wifi-rtw88-usb-Support-USB-3-with-RTL8812AU.patch b/package/kernel/mac80211/patches/rtl/048-wifi-rtw88-usb-Support-USB-3-with-RTL8812AU.patch
deleted file mode 100644
index 33ca91d77d..0000000000
--- a/package/kernel/mac80211/patches/rtl/048-wifi-rtw88-usb-Support-USB-3-with-RTL8812AU.patch
+++ /dev/null
@@ -1,69 +0,0 @@
-From 213dfa630285bb0241f3eaeb778db8ff128f10ba Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Fri, 8 Nov 2024 01:41:08 +0200
-Subject: [PATCH 3/6] wifi: rtw88: usb: Support USB 3 with RTL8812AU
-
-Add the function to automatically switch the RTL8812AU into USB 3 mode.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
----
- drivers/net/wireless/realtek/rtw88/usb.c | 34 ++++++++++++++++++++++--
- 1 file changed, 32 insertions(+), 2 deletions(-)
-
---- a/drivers/net/wireless/realtek/rtw88/usb.c
-+++ b/drivers/net/wireless/realtek/rtw88/usb.c
-@@ -930,6 +930,32 @@ static void rtw_usb_intf_deinit(struct r
- 	usb_set_intfdata(intf, NULL);
- }
- 
-+static int rtw_usb_switch_mode_old(struct rtw_dev *rtwdev)
-+{
-+	struct rtw_usb *rtwusb = rtw_get_usb_priv(rtwdev);
-+	enum usb_device_speed cur_speed = rtwusb->udev->speed;
-+	u8 hci_opt;
-+
-+	if (cur_speed == USB_SPEED_HIGH) {
-+		hci_opt = rtw_read8(rtwdev, REG_HCI_OPT_CTRL);
-+
-+		if ((hci_opt & (BIT(2) | BIT(3))) != BIT(3)) {
-+			rtw_write8(rtwdev, REG_HCI_OPT_CTRL, 0x8);
-+			rtw_write8(rtwdev, REG_SYS_SDIO_CTRL, 0x2);
-+			rtw_write8(rtwdev, REG_ACLK_MON, 0x1);
-+			rtw_write8(rtwdev, 0x3d, 0x3);
-+			/* usb disconnect */
-+			rtw_write8(rtwdev, REG_SYS_PW_CTRL + 1, 0x80);
-+			return 1;
-+		}
-+	} else if (cur_speed == USB_SPEED_SUPER) {
-+		rtw_write8_clr(rtwdev, REG_SYS_SDIO_CTRL, BIT(1));
-+		rtw_write8_clr(rtwdev, REG_ACLK_MON, BIT(0));
-+	}
-+
-+	return 0;
-+}
-+
- static int rtw_usb_switch_mode_new(struct rtw_dev *rtwdev)
- {
- 	enum usb_device_speed cur_speed;
-@@ -983,7 +1009,8 @@ static int rtw_usb_switch_mode(struct rt
- {
- 	u8 id = rtwdev->chip->id;
- 
--	if (id != RTW_CHIP_TYPE_8822C && id != RTW_CHIP_TYPE_8822B)
-+	if (id != RTW_CHIP_TYPE_8822C && id != RTW_CHIP_TYPE_8822B &&
-+	    id != RTW_CHIP_TYPE_8812A)
- 		return 0;
- 
- 	if (!rtwdev->efuse.usb_mode_switch) {
-@@ -998,7 +1025,10 @@ static int rtw_usb_switch_mode(struct rt
- 		return 0;
- 	}
- 
--	return rtw_usb_switch_mode_new(rtwdev);
-+	if (id == RTW_CHIP_TYPE_8812A)
-+		return rtw_usb_switch_mode_old(rtwdev);
-+	else /* RTL8822CU, RTL8822BU */
-+		return rtw_usb_switch_mode_new(rtwdev);
- }
- 
- int rtw_usb_probe(struct usb_interface *intf, const struct usb_device_id *id)
diff --git a/package/kernel/mac80211/patches/rtl/049-wifi-rtw88-usb-Enable-RX-aggregation-for-8821au-8812.patch b/package/kernel/mac80211/patches/rtl/049-wifi-rtw88-usb-Enable-RX-aggregation-for-8821au-8812.patch
deleted file mode 100644
index d4c3ef3495..0000000000
--- a/package/kernel/mac80211/patches/rtl/049-wifi-rtw88-usb-Enable-RX-aggregation-for-8821au-8812.patch
+++ /dev/null
@@ -1,65 +0,0 @@
-From 2b38362bd3b8e0a3691f0a8e82444a54f702e384 Mon Sep 17 00:00:00 2001
-From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
-Date: Fri, 8 Nov 2024 01:43:50 +0200
-Subject: [PATCH 4/6] wifi: rtw88: usb: Enable RX aggregation for 8821au/8812au
-
-USB RX aggregation improves the RX speed on certain ARM systems, like
-the NanoPi NEO Core2. With RTL8811AU, before: 30 Mbps, after: 224 Mbps.
-
-The out-of-tree driver uses aggregation size of 7 in USB 3 mode, but
-that doesn't work here. rtw88 advertises support for receiving AMSDU
-in AMPDU, so the AP sends larger frames, up to ~5100 bytes. With a size
-of 7 RTL8812AU frequently tries to aggregate more frames than will fit
-in 32768 bytes. Use a size of 6 instead.
-
-Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
----
- drivers/net/wireless/realtek/rtw88/usb.c | 30 ++++++++++++++++++++++++
- 1 file changed, 30 insertions(+)
-
---- a/drivers/net/wireless/realtek/rtw88/usb.c
-+++ b/drivers/net/wireless/realtek/rtw88/usb.c
-@@ -789,6 +789,32 @@ static void rtw_usb_dynamic_rx_agg_v1(st
- 	rtw_write16(rtwdev, REG_RXDMA_AGG_PG_TH, val16);
- }
- 
-+static void rtw_usb_dynamic_rx_agg_v2(struct rtw_dev *rtwdev, bool enable)
-+{
-+	struct rtw_usb *rtwusb = rtw_get_usb_priv(rtwdev);
-+	u8 size, timeout;
-+	u16 val16;
-+
-+	if (rtwusb->udev->speed == USB_SPEED_SUPER) {
-+		size = 0x6;
-+		timeout = 0x1a;
-+	} else {
-+		size = 0x5;
-+		timeout = 0x20;
-+	}
-+
-+	if (!enable) {
-+		size = 0x0;
-+		timeout = 0x1;
-+	}
-+
-+	val16 = u16_encode_bits(size, BIT_RXDMA_AGG_PG_TH) |
-+		u16_encode_bits(timeout, BIT_DMA_AGG_TO_V1);
-+
-+	rtw_write16(rtwdev, REG_RXDMA_AGG_PG_TH, val16);
-+	rtw_write8_set(rtwdev, REG_TXDMA_PQ_MAP, BIT_RXDMA_AGG_EN);
-+}
-+
- static void rtw_usb_dynamic_rx_agg(struct rtw_dev *rtwdev, bool enable)
- {
- 	switch (rtwdev->chip->id) {
-@@ -797,6 +823,10 @@ static void rtw_usb_dynamic_rx_agg(struc
- 	case RTW_CHIP_TYPE_8821C:
- 		rtw_usb_dynamic_rx_agg_v1(rtwdev, enable);
- 		break;
-+	case RTW_CHIP_TYPE_8821A:
-+	case RTW_CHIP_TYPE_8812A:
-+		rtw_usb_dynamic_rx_agg_v2(rtwdev, enable);
-+		break;
- 	case RTW_CHIP_TYPE_8723D:
- 		/* Doesn't like aggregation. */
- 		break;
diff --git a/package/kernel/mac80211/patches/rtl/050-wifi-rtlwifi-rtl8821ae-phy-restore-removed-code-to-f.patch b/package/kernel/mac80211/patches/rtl/050-wifi-rtlwifi-rtl8821ae-phy-restore-removed-code-to-f.patch
deleted file mode 100644
index 798a59351f..0000000000
--- a/package/kernel/mac80211/patches/rtl/050-wifi-rtlwifi-rtl8821ae-phy-restore-removed-code-to-f.patch
+++ /dev/null
@@ -1,32 +0,0 @@
-From 927dcd0ab53f39ee00a2d1f204b5aac77e28fcf9 Mon Sep 17 00:00:00 2001
-From: Colin Ian King <colin.i.king@gmail.com>
-Date: Wed, 6 Nov 2024 15:46:42 +0000
-Subject: [PATCH 5/6] wifi: rtlwifi: rtl8821ae: phy: restore removed code to
- fix infinite loop
-
-A previous clean-up fix removed the assignment of v2 inside a while loop
-that turned it into an infinite loop. Fix this by restoring the assignment
-of v2 from array[] so that v2 is updated inside the loop.
-
-Fixes: cda37445718d ("wifi: rtlwifi: rtl8821ae: phy: remove some useless code")
-Signed-off-by: Colin Ian King <colin.i.king@gmail.com>
-Tested-by: Ping-Ke Shih <pkshih@realtek.com>
-Reviewed-by: Su Hui <suhui@nfschina.com>
----
- drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c | 4 +++-
- 1 file changed, 3 insertions(+), 1 deletion(-)
-
---- a/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c
-+++ b/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c
-@@ -2033,8 +2033,10 @@ static bool _rtl8821ae_phy_config_bb_wit
- 			if (!_rtl8821ae_check_condition(hw, v1)) {
- 				i += 2; /* skip the pair of expression*/
- 				v2 = array[i+1];
--				while (v2 != 0xDEAD)
-+				while (v2 != 0xDEAD) {
- 					i += 3;
-+					v2 = array[i + 1];
-+				}
- 			}
- 		}
- 	}
diff --git a/package/kernel/mac80211/patches/rtl/051-wifi-rtw88-Add-additional-USB-IDs-for-RTL8812BU.patch b/package/kernel/mac80211/patches/rtl/051-wifi-rtw88-Add-additional-USB-IDs-for-RTL8812BU.patch
deleted file mode 100644
index e4e26c7975..0000000000
--- a/package/kernel/mac80211/patches/rtl/051-wifi-rtw88-Add-additional-USB-IDs-for-RTL8812BU.patch
+++ /dev/null
@@ -1,31 +0,0 @@
-From acadf3a63b39ad03167a633fa3cea8c0fc2ab87f Mon Sep 17 00:00:00 2001
-From: Nick Morrow <usbwifi2024@gmail.com>
-Date: Thu, 7 Nov 2024 08:28:46 +0800
-Subject: [PATCH 6/6] wifi: rtw88: Add additional USB IDs for RTL8812BU
-
-Add three additional USB IDs found in
-https://github.com/morrownr/88x2bu-20210702
-to support more RTL8812BU devices.
-
-Signed-off-by: Nick Morrow <usbwifi2024@gmail.com>
-Signed-off-by: Zenm Chen <zenmchen@gmail.com>
-Signed-off-by: Mikhail Novosyolov <m.novosyolov@rosalinux.ru>
----
- drivers/net/wireless/realtek/rtw88/rtw8822bu.c | 6 ++++++
- 1 file changed, 6 insertions(+)
-
---- a/drivers/net/wireless/realtek/rtw88/rtw8822bu.c
-+++ b/drivers/net/wireless/realtek/rtw88/rtw8822bu.c
-@@ -67,6 +67,12 @@ static const struct usb_device_id rtw_88
- 	  .driver_info = (kernel_ulong_t)&(rtw8822b_hw_spec) }, /* LiteOn */
- 	{ USB_DEVICE_AND_INTERFACE_INFO(0x20f4, 0x808a, 0xff, 0xff, 0xff),
- 	  .driver_info = (kernel_ulong_t)&(rtw8822b_hw_spec) }, /* TRENDnet TEW-808UBM */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x20f4, 0x805a, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8822b_hw_spec) }, /* TRENDnet TEW-805UBH */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x056e, 0x4011, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8822b_hw_spec) }, /* ELECOM WDB-867DU3S */
-+	{ USB_DEVICE_AND_INTERFACE_INFO(0x2c4e, 0x0107, 0xff, 0xff, 0xff),
-+	  .driver_info = (kernel_ulong_t)&(rtw8822b_hw_spec) }, /* Mercusys MA30H */
- 	{},
- };
- MODULE_DEVICE_TABLE(usb, rtw_8822bu_id_table);
diff --git a/package/kernel/mac80211/patches/rtl/065-v6.15-wifi-rtw88-Don-t-use-static-local-variable-in-rtw882.patch b/package/kernel/mac80211/patches/rtl/065-v6.15-wifi-rtw88-Don-t-use-static-local-variable-in-rtw882.patch
new file mode 100644
index 0000000000..ff04eead91
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/065-v6.15-wifi-rtw88-Don-t-use-static-local-variable-in-rtw882.patch
@@ -0,0 +1,71 @@
+From 0d1d165eff9d6cfad51113e18d9d8c9a8de27d6d Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Sun, 26 Jan 2025 16:04:21 +0200
+Subject: [PATCH] wifi: rtw88: Don't use static local variable in
+ rtw8821c_set_tx_power_index_by_rate
+
+Some users want to plug two identical USB devices at the same time.
+This static variable could theoretically cause them to use incorrect
+TX power values.
+
+Move the variable to the caller and pass a pointer to it to
+rtw8821c_set_tx_power_index_by_rate().
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/fe42858c-9b9f-4f03-9aaa-737472c2cd90@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/rtw8821c.c | 14 ++++++++------
+ 1 file changed, 8 insertions(+), 6 deletions(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/rtw8821c.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8821c.c
+@@ -680,11 +680,11 @@ static void query_phy_status(struct rtw_
+ }
+ 
+ static void
+-rtw8821c_set_tx_power_index_by_rate(struct rtw_dev *rtwdev, u8 path, u8 rs)
++rtw8821c_set_tx_power_index_by_rate(struct rtw_dev *rtwdev, u8 path,
++				    u8 rs, u32 *phy_pwr_idx)
+ {
+ 	struct rtw_hal *hal = &rtwdev->hal;
+ 	static const u32 offset_txagc[2] = {0x1d00, 0x1d80};
+-	static u32 phy_pwr_idx;
+ 	u8 rate, rate_idx, pwr_index, shift;
+ 	int j;
+ 
+@@ -692,12 +692,12 @@ rtw8821c_set_tx_power_index_by_rate(stru
+ 		rate = rtw_rate_section[rs][j];
+ 		pwr_index = hal->tx_pwr_tbl[path][rate];
+ 		shift = rate & 0x3;
+-		phy_pwr_idx |= ((u32)pwr_index << (shift * 8));
++		*phy_pwr_idx |= ((u32)pwr_index << (shift * 8));
+ 		if (shift == 0x3 || rate == DESC_RATEVHT1SS_MCS9) {
+ 			rate_idx = rate & 0xfc;
+ 			rtw_write32(rtwdev, offset_txagc[path] + rate_idx,
+-				    phy_pwr_idx);
+-			phy_pwr_idx = 0;
++				    *phy_pwr_idx);
++			*phy_pwr_idx = 0;
+ 		}
+ 	}
+ }
+@@ -705,6 +705,7 @@ rtw8821c_set_tx_power_index_by_rate(stru
+ static void rtw8821c_set_tx_power_index(struct rtw_dev *rtwdev)
+ {
+ 	struct rtw_hal *hal = &rtwdev->hal;
++	u32 phy_pwr_idx = 0;
+ 	int rs, path;
+ 
+ 	for (path = 0; path < hal->rf_path_num; path++) {
+@@ -712,7 +713,8 @@ static void rtw8821c_set_tx_power_index(
+ 			if (rs == RTW_RATE_SECTION_HT_2S ||
+ 			    rs == RTW_RATE_SECTION_VHT_2S)
+ 				continue;
+-			rtw8821c_set_tx_power_index_by_rate(rtwdev, path, rs);
++			rtw8821c_set_tx_power_index_by_rate(rtwdev, path, rs,
++							    &phy_pwr_idx);
+ 		}
+ 	}
+ }
diff --git a/package/kernel/mac80211/patches/rtl/066-v6.15-wifi-rtw88-Fix-a-typo-of-debug-message-in-rtw8723d_i.patch b/package/kernel/mac80211/patches/rtl/066-v6.15-wifi-rtw88-Fix-a-typo-of-debug-message-in-rtw8723d_i.patch
new file mode 100644
index 0000000000..a2404bafe8
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/066-v6.15-wifi-rtw88-Fix-a-typo-of-debug-message-in-rtw8723d_i.patch
@@ -0,0 +1,39 @@
+From 105dc94233e48ff30e572a50fb39d7e3dec810fa Mon Sep 17 00:00:00 2001
+From: Andrew Kreimer <algonell@gmail.com>
+Date: Mon, 3 Feb 2025 20:08:27 +0200
+Subject: [PATCH] wifi: rtw88: Fix a typo of debug message in
+ rtw8723d_iqk_check_tx_failed()
+
+There is a typo in debug messages:
+ - afer -> after
+
+Fix it via codespell.
+
+Signed-off-by: Andrew Kreimer <algonell@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/20250203180913.5435-1-algonell@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/rtw8723d.c | 4 ++--
+ 1 file changed, 2 insertions(+), 2 deletions(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/rtw8723d.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8723d.c
+@@ -444,7 +444,7 @@ static u8 rtw8723d_iqk_check_tx_failed(s
+ 		rtw_read32(rtwdev, REG_IQK_RES_TX),
+ 		rtw_read32(rtwdev, REG_IQK_RES_TY));
+ 	rtw_dbg(rtwdev, RTW_DBG_RFK,
+-		"[IQK] 0xe90(before IQK)= 0x%x, 0xe98(afer IQK) = 0x%x\n",
++		"[IQK] 0xe90(before IQK)= 0x%x, 0xe98(after IQK) = 0x%x\n",
+ 		rtw_read32(rtwdev, 0xe90),
+ 		rtw_read32(rtwdev, 0xe98));
+ 
+@@ -472,7 +472,7 @@ static u8 rtw8723d_iqk_check_rx_failed(s
+ 		rtw_read32(rtwdev, REG_IQK_RES_RY));
+ 
+ 	rtw_dbg(rtwdev, RTW_DBG_RFK,
+-		"[IQK] 0xea0(before IQK)= 0x%x, 0xea8(afer IQK) = 0x%x\n",
++		"[IQK] 0xea0(before IQK)= 0x%x, 0xea8(after IQK) = 0x%x\n",
+ 		rtw_read32(rtwdev, 0xea0),
+ 		rtw_read32(rtwdev, 0xea8));
+ 
diff --git a/package/kernel/mac80211/patches/rtl/069-v6.15-wifi-rtw88-Extend-struct-rtw_pwr_track_tbl-for-RTL88.patch b/package/kernel/mac80211/patches/rtl/069-v6.15-wifi-rtw88-Extend-struct-rtw_pwr_track_tbl-for-RTL88.patch
new file mode 100644
index 0000000000..dec5d5986e
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/069-v6.15-wifi-rtw88-Extend-struct-rtw_pwr_track_tbl-for-RTL88.patch
@@ -0,0 +1,46 @@
+From 62f726848da42554e6d270dfda17ed19bfa3456f Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Tue, 4 Feb 2025 20:38:17 +0200
+Subject: [PATCH] wifi: rtw88: Extend struct rtw_pwr_track_tbl for RTL8814AU
+
+Currently this struct has the members required for chips with 2 RF
+paths. Add more members to support chips with 4 RF paths, like the
+RTL8814AU.
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/be5a73f4-a0fe-43d6-9457-930cde199284@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/main.h | 12 ++++++++++++
+ 1 file changed, 12 insertions(+)
+
+--- a/drivers/net/wireless/realtek/rtw88/main.h
++++ b/drivers/net/wireless/realtek/rtw88/main.h
+@@ -1131,14 +1131,26 @@ struct rtw_rfe_def {
+  * For 2G there are cck rate and ofdm rate with different settings.
+  */
+ struct rtw_pwr_track_tbl {
++	const u8 *pwrtrk_5gd_n[RTW_PWR_TRK_5G_NUM];
++	const u8 *pwrtrk_5gd_p[RTW_PWR_TRK_5G_NUM];
++	const u8 *pwrtrk_5gc_n[RTW_PWR_TRK_5G_NUM];
++	const u8 *pwrtrk_5gc_p[RTW_PWR_TRK_5G_NUM];
+ 	const u8 *pwrtrk_5gb_n[RTW_PWR_TRK_5G_NUM];
+ 	const u8 *pwrtrk_5gb_p[RTW_PWR_TRK_5G_NUM];
+ 	const u8 *pwrtrk_5ga_n[RTW_PWR_TRK_5G_NUM];
+ 	const u8 *pwrtrk_5ga_p[RTW_PWR_TRK_5G_NUM];
++	const u8 *pwrtrk_2gd_n;
++	const u8 *pwrtrk_2gd_p;
++	const u8 *pwrtrk_2gc_n;
++	const u8 *pwrtrk_2gc_p;
+ 	const u8 *pwrtrk_2gb_n;
+ 	const u8 *pwrtrk_2gb_p;
+ 	const u8 *pwrtrk_2ga_n;
+ 	const u8 *pwrtrk_2ga_p;
++	const u8 *pwrtrk_2g_cckd_n;
++	const u8 *pwrtrk_2g_cckd_p;
++	const u8 *pwrtrk_2g_cckc_n;
++	const u8 *pwrtrk_2g_cckc_p;
+ 	const u8 *pwrtrk_2g_cckb_n;
+ 	const u8 *pwrtrk_2g_cckb_p;
+ 	const u8 *pwrtrk_2g_ccka_n;
diff --git a/package/kernel/mac80211/patches/rtl/070-v6.15-wifi-rtw88-Extend-rf_base_addr-and-rf_sipi_addr-for-.patch b/package/kernel/mac80211/patches/rtl/070-v6.15-wifi-rtw88-Extend-rf_base_addr-and-rf_sipi_addr-for-.patch
new file mode 100644
index 0000000000..393c75453f
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/070-v6.15-wifi-rtw88-Extend-rf_base_addr-and-rf_sipi_addr-for-.patch
@@ -0,0 +1,32 @@
+From d80e7d9b6ba38102f92559dbb647330216ea290b Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Tue, 4 Feb 2025 20:38:43 +0200
+Subject: [PATCH] wifi: rtw88: Extend rf_base_addr and rf_sipi_addr for
+ RTL8814AU
+
+These members of struct rtw_chip_info each have a size of 2. Increase
+their size to 4, which is the number of RF paths the RTL8814AU has.
+
+This is required to read and write the RF registers of the RTL8814AU.
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/7a4d8209-b8af-4943-b5de-f53d6edf591a@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/main.h | 4 ++--
+ 1 file changed, 2 insertions(+), 2 deletions(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/main.h
++++ b/drivers/net/wireless/realtek/rtw88/main.h
+@@ -1240,8 +1240,8 @@ struct rtw_chip_info {
+ 
+ 	const struct rtw_hw_reg *dig;
+ 	const struct rtw_hw_reg *dig_cck;
+-	u32 rf_base_addr[2];
+-	u32 rf_sipi_addr[2];
++	u32 rf_base_addr[RTW_RF_PATH_MAX];
++	u32 rf_sipi_addr[RTW_RF_PATH_MAX];
+ 	const struct rtw_rf_sipi_addr *rf_sipi_read_addr;
+ 	u8 fix_rf_phy_num;
+ 	const struct rtw_ltecoex_addr *ltecoex_addr;
diff --git a/package/kernel/mac80211/patches/rtl/072-v6.15-wifi-rtw88-Constify-some-more-structs-and-arrays.patch b/package/kernel/mac80211/patches/rtl/072-v6.15-wifi-rtw88-Constify-some-more-structs-and-arrays.patch
new file mode 100644
index 0000000000..fe16a7ec20
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/072-v6.15-wifi-rtw88-Constify-some-more-structs-and-arrays.patch
@@ -0,0 +1,213 @@
+From e66f3b5c7535bb508e9c561a047b32de4ddc1cda Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Tue, 4 Feb 2025 20:40:22 +0200
+Subject: [PATCH] wifi: rtw88: Constify some more structs and arrays
+
+These structs and arrays are never modified, so make them const:
+
+rtw_band_2ghz
+rtw_band_5ghz
+rtw_pci_tx_queue_idx_addr
+rtw_pci_ops
+rtw_cck_rates
+rtw_ofdm_rates
+rtw_ht_1s_rates
+rtw_ht_2s_rates
+rtw_vht_1s_rates
+rtw_vht_2s_rates
+rtw_rate_section
+rtw_rate_size
+rtw_sdio_ops
+rtw_usb_ops
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/502f124e-ccf3-4c09-80a4-1e5c5304822b@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/main.c |  4 ++--
+ drivers/net/wireless/realtek/rtw88/main.h |  2 +-
+ drivers/net/wireless/realtek/rtw88/pci.c  |  4 ++--
+ drivers/net/wireless/realtek/rtw88/phy.c  | 26 ++++++++++++++---------
+ drivers/net/wireless/realtek/rtw88/phy.h  | 16 +++++++-------
+ drivers/net/wireless/realtek/rtw88/sdio.c |  2 +-
+ drivers/net/wireless/realtek/rtw88/usb.c  |  2 +-
+ 7 files changed, 31 insertions(+), 25 deletions(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/main.c
++++ b/drivers/net/wireless/realtek/rtw88/main.c
+@@ -136,7 +136,7 @@ u16 rtw_desc_to_bitrate(u8 desc_rate)
+ 	return rate.bitrate;
+ }
+ 
+-static struct ieee80211_supported_band rtw_band_2ghz = {
++static const struct ieee80211_supported_band rtw_band_2ghz = {
+ 	.band = NL80211_BAND_2GHZ,
+ 
+ 	.channels = rtw_channeltable_2g,
+@@ -149,7 +149,7 @@ static struct ieee80211_supported_band r
+ 	.vht_cap = {0},
+ };
+ 
+-static struct ieee80211_supported_band rtw_band_5ghz = {
++static const struct ieee80211_supported_band rtw_band_5ghz = {
+ 	.band = NL80211_BAND_5GHZ,
+ 
+ 	.channels = rtw_channeltable_5g,
+--- a/drivers/net/wireless/realtek/rtw88/main.h
++++ b/drivers/net/wireless/realtek/rtw88/main.h
+@@ -61,7 +61,7 @@ enum rtw_hci_type {
+ };
+ 
+ struct rtw_hci {
+-	struct rtw_hci_ops *ops;
++	const struct rtw_hci_ops *ops;
+ 	enum rtw_hci_type type;
+ 
+ 	u32 rpwm_addr;
+--- a/drivers/net/wireless/realtek/rtw88/pci.c
++++ b/drivers/net/wireless/realtek/rtw88/pci.c
+@@ -20,7 +20,7 @@ module_param_named(disable_aspm, rtw_pci
+ MODULE_PARM_DESC(disable_msi, "Set Y to disable MSI interrupt support");
+ MODULE_PARM_DESC(disable_aspm, "Set Y to disable PCI ASPM support");
+ 
+-static u32 rtw_pci_tx_queue_idx_addr[] = {
++static const u32 rtw_pci_tx_queue_idx_addr[] = {
+ 	[RTW_TX_QUEUE_BK]	= RTK_PCI_TXBD_IDX_BKQ,
+ 	[RTW_TX_QUEUE_BE]	= RTK_PCI_TXBD_IDX_BEQ,
+ 	[RTW_TX_QUEUE_VI]	= RTK_PCI_TXBD_IDX_VIQ,
+@@ -1591,7 +1591,7 @@ static void rtw_pci_destroy(struct rtw_d
+ 	rtw_pci_io_unmapping(rtwdev, pdev);
+ }
+ 
+-static struct rtw_hci_ops rtw_pci_ops = {
++static const struct rtw_hci_ops rtw_pci_ops = {
+ 	.tx_write = rtw_pci_tx_write,
+ 	.tx_kick_off = rtw_pci_tx_kick_off,
+ 	.flush_queues = rtw_pci_flush_queues,
+--- a/drivers/net/wireless/realtek/rtw88/phy.c
++++ b/drivers/net/wireless/realtek/rtw88/phy.c
+@@ -52,44 +52,50 @@ static const u32 db_invert_table[12][8]
+ 	 1995262315,	2511886432U,	3162277660U,	3981071706U}
+ };
+ 
+-u8 rtw_cck_rates[] = { DESC_RATE1M, DESC_RATE2M, DESC_RATE5_5M, DESC_RATE11M };
+-u8 rtw_ofdm_rates[] = {
++const u8 rtw_cck_rates[] = { DESC_RATE1M, DESC_RATE2M, DESC_RATE5_5M, DESC_RATE11M };
++
++const u8 rtw_ofdm_rates[] = {
+ 	DESC_RATE6M,  DESC_RATE9M,  DESC_RATE12M,
+ 	DESC_RATE18M, DESC_RATE24M, DESC_RATE36M,
+ 	DESC_RATE48M, DESC_RATE54M
+ };
+-u8 rtw_ht_1s_rates[] = {
++
++const u8 rtw_ht_1s_rates[] = {
+ 	DESC_RATEMCS0, DESC_RATEMCS1, DESC_RATEMCS2,
+ 	DESC_RATEMCS3, DESC_RATEMCS4, DESC_RATEMCS5,
+ 	DESC_RATEMCS6, DESC_RATEMCS7
+ };
+-u8 rtw_ht_2s_rates[] = {
++
++const u8 rtw_ht_2s_rates[] = {
+ 	DESC_RATEMCS8,  DESC_RATEMCS9,  DESC_RATEMCS10,
+ 	DESC_RATEMCS11, DESC_RATEMCS12, DESC_RATEMCS13,
+ 	DESC_RATEMCS14, DESC_RATEMCS15
+ };
+-u8 rtw_vht_1s_rates[] = {
++
++const u8 rtw_vht_1s_rates[] = {
+ 	DESC_RATEVHT1SS_MCS0, DESC_RATEVHT1SS_MCS1,
+ 	DESC_RATEVHT1SS_MCS2, DESC_RATEVHT1SS_MCS3,
+ 	DESC_RATEVHT1SS_MCS4, DESC_RATEVHT1SS_MCS5,
+ 	DESC_RATEVHT1SS_MCS6, DESC_RATEVHT1SS_MCS7,
+ 	DESC_RATEVHT1SS_MCS8, DESC_RATEVHT1SS_MCS9
+ };
+-u8 rtw_vht_2s_rates[] = {
++
++const u8 rtw_vht_2s_rates[] = {
+ 	DESC_RATEVHT2SS_MCS0, DESC_RATEVHT2SS_MCS1,
+ 	DESC_RATEVHT2SS_MCS2, DESC_RATEVHT2SS_MCS3,
+ 	DESC_RATEVHT2SS_MCS4, DESC_RATEVHT2SS_MCS5,
+ 	DESC_RATEVHT2SS_MCS6, DESC_RATEVHT2SS_MCS7,
+ 	DESC_RATEVHT2SS_MCS8, DESC_RATEVHT2SS_MCS9
+ };
+-u8 *rtw_rate_section[RTW_RATE_SECTION_MAX] = {
++
++const u8 * const rtw_rate_section[RTW_RATE_SECTION_MAX] = {
+ 	rtw_cck_rates, rtw_ofdm_rates,
+ 	rtw_ht_1s_rates, rtw_ht_2s_rates,
+ 	rtw_vht_1s_rates, rtw_vht_2s_rates
+ };
+ EXPORT_SYMBOL(rtw_rate_section);
+ 
+-u8 rtw_rate_size[RTW_RATE_SECTION_MAX] = {
++const u8 rtw_rate_size[RTW_RATE_SECTION_MAX] = {
+ 	ARRAY_SIZE(rtw_cck_rates),
+ 	ARRAY_SIZE(rtw_ofdm_rates),
+ 	ARRAY_SIZE(rtw_ht_1s_rates),
+@@ -2214,7 +2220,7 @@ static void rtw_phy_set_tx_power_index_b
+ {
+ 	struct rtw_hal *hal = &rtwdev->hal;
+ 	u8 regd = rtw_regd_get(rtwdev);
+-	u8 *rates;
++	const u8 *rates;
+ 	u8 size;
+ 	u8 rate;
+ 	u8 pwr_idx;
+@@ -2274,7 +2280,7 @@ EXPORT_SYMBOL(rtw_phy_set_tx_power_level
+ 
+ static void
+ rtw_phy_tx_power_by_rate_config_by_path(struct rtw_hal *hal, u8 path,
+-					u8 rs, u8 size, u8 *rates)
++					u8 rs, u8 size, const u8 *rates)
+ {
+ 	u8 rate;
+ 	u8 base_idx, rate_idx;
+--- a/drivers/net/wireless/realtek/rtw88/phy.h
++++ b/drivers/net/wireless/realtek/rtw88/phy.h
+@@ -7,14 +7,14 @@
+ 
+ #include "debug.h"
+ 
+-extern u8 rtw_cck_rates[];
+-extern u8 rtw_ofdm_rates[];
+-extern u8 rtw_ht_1s_rates[];
+-extern u8 rtw_ht_2s_rates[];
+-extern u8 rtw_vht_1s_rates[];
+-extern u8 rtw_vht_2s_rates[];
+-extern u8 *rtw_rate_section[];
+-extern u8 rtw_rate_size[];
++extern const u8 rtw_cck_rates[];
++extern const u8 rtw_ofdm_rates[];
++extern const u8 rtw_ht_1s_rates[];
++extern const u8 rtw_ht_2s_rates[];
++extern const u8 rtw_vht_1s_rates[];
++extern const u8 rtw_vht_2s_rates[];
++extern const u8 * const rtw_rate_section[];
++extern const u8 rtw_rate_size[];
+ 
+ void rtw_phy_init(struct rtw_dev *rtwdev);
+ void rtw_phy_dynamic_mechanism(struct rtw_dev *rtwdev);
+--- a/drivers/net/wireless/realtek/rtw88/sdio.c
++++ b/drivers/net/wireless/realtek/rtw88/sdio.c
+@@ -1147,7 +1147,7 @@ static void rtw_sdio_declaim(struct rtw_
+ 	sdio_release_host(sdio_func);
+ }
+ 
+-static struct rtw_hci_ops rtw_sdio_ops = {
++static const struct rtw_hci_ops rtw_sdio_ops = {
+ 	.tx_write = rtw_sdio_tx_write,
+ 	.tx_kick_off = rtw_sdio_tx_kick_off,
+ 	.setup = rtw_sdio_setup,
+--- a/drivers/net/wireless/realtek/rtw88/usb.c
++++ b/drivers/net/wireless/realtek/rtw88/usb.c
+@@ -881,7 +881,7 @@ static void rtw_usb_dynamic_rx_agg(struc
+ 	}
+ }
+ 
+-static struct rtw_hci_ops rtw_usb_ops = {
++static const struct rtw_hci_ops rtw_usb_ops = {
+ 	.tx_write = rtw_usb_tx_write,
+ 	.tx_kick_off = rtw_usb_tx_kick_off,
+ 	.setup = rtw_usb_setup,
diff --git a/package/kernel/mac80211/patches/rtl/073-v6.15-wifi-rtw88-Rename-RTW_RATE_SECTION_MAX-to-RTW_RATE_S.patch b/package/kernel/mac80211/patches/rtl/073-v6.15-wifi-rtw88-Rename-RTW_RATE_SECTION_MAX-to-RTW_RATE_S.patch
new file mode 100644
index 0000000000..4a6d512154
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/073-v6.15-wifi-rtw88-Rename-RTW_RATE_SECTION_MAX-to-RTW_RATE_S.patch
@@ -0,0 +1,227 @@
+From ad815f3920035a0c5b6ffe45bddc9fb308194b49 Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Tue, 4 Feb 2025 20:40:58 +0200
+Subject: [PATCH] wifi: rtw88: Rename RTW_RATE_SECTION_MAX to
+ RTW_RATE_SECTION_NUM
+
+It fits the meaning of the enum better.
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/5a1c5a46-8ebb-43b0-9ab1-b78e2a22b3d2@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/main.h     | 12 +++++-----
+ drivers/net/wireless/realtek/rtw88/phy.c      | 24 +++++++++----------
+ drivers/net/wireless/realtek/rtw88/rtw8821c.c |  2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8822b.c |  2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8822c.c |  2 +-
+ drivers/net/wireless/realtek/rtw88/rtw88xxa.c |  2 +-
+ drivers/net/wireless/realtek/rtw88/sar.c      |  2 +-
+ 7 files changed, 23 insertions(+), 23 deletions(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/main.h
++++ b/drivers/net/wireless/realtek/rtw88/main.h
+@@ -168,7 +168,7 @@ enum rtw_rate_section {
+ 	RTW_RATE_SECTION_VHT_2S,
+ 
+ 	/* keep last */
+-	RTW_RATE_SECTION_MAX,
++	RTW_RATE_SECTION_NUM,
+ };
+ 
+ enum rtw_wireless_set {
+@@ -1937,7 +1937,7 @@ union rtw_sar_cfg {
+ 
+ struct rtw_sar {
+ 	enum rtw_sar_sources src;
+-	union rtw_sar_cfg cfg[RTW_RF_PATH_MAX][RTW_RATE_SECTION_MAX];
++	union rtw_sar_cfg cfg[RTW_RF_PATH_MAX][RTW_RATE_SECTION_NUM];
+ };
+ 
+ struct rtw_hal {
+@@ -1981,16 +1981,16 @@ struct rtw_hal {
+ 	s8 tx_pwr_by_rate_offset_5g[RTW_RF_PATH_MAX]
+ 				   [DESC_RATE_MAX];
+ 	s8 tx_pwr_by_rate_base_2g[RTW_RF_PATH_MAX]
+-				 [RTW_RATE_SECTION_MAX];
++				 [RTW_RATE_SECTION_NUM];
+ 	s8 tx_pwr_by_rate_base_5g[RTW_RF_PATH_MAX]
+-				 [RTW_RATE_SECTION_MAX];
++				 [RTW_RATE_SECTION_NUM];
+ 	s8 tx_pwr_limit_2g[RTW_REGD_MAX]
+ 			  [RTW_CHANNEL_WIDTH_MAX]
+-			  [RTW_RATE_SECTION_MAX]
++			  [RTW_RATE_SECTION_NUM]
+ 			  [RTW_MAX_CHANNEL_NUM_2G];
+ 	s8 tx_pwr_limit_5g[RTW_REGD_MAX]
+ 			  [RTW_CHANNEL_WIDTH_MAX]
+-			  [RTW_RATE_SECTION_MAX]
++			  [RTW_RATE_SECTION_NUM]
+ 			  [RTW_MAX_CHANNEL_NUM_5G];
+ 	s8 tx_pwr_tbl[RTW_RF_PATH_MAX]
+ 		     [DESC_RATE_MAX];
+--- a/drivers/net/wireless/realtek/rtw88/phy.c
++++ b/drivers/net/wireless/realtek/rtw88/phy.c
+@@ -88,14 +88,14 @@ const u8 rtw_vht_2s_rates[] = {
+ 	DESC_RATEVHT2SS_MCS8, DESC_RATEVHT2SS_MCS9
+ };
+ 
+-const u8 * const rtw_rate_section[RTW_RATE_SECTION_MAX] = {
++const u8 * const rtw_rate_section[RTW_RATE_SECTION_NUM] = {
+ 	rtw_cck_rates, rtw_ofdm_rates,
+ 	rtw_ht_1s_rates, rtw_ht_2s_rates,
+ 	rtw_vht_1s_rates, rtw_vht_2s_rates
+ };
+ EXPORT_SYMBOL(rtw_rate_section);
+ 
+-const u8 rtw_rate_size[RTW_RATE_SECTION_MAX] = {
++const u8 rtw_rate_size[RTW_RATE_SECTION_NUM] = {
+ 	ARRAY_SIZE(rtw_cck_rates),
+ 	ARRAY_SIZE(rtw_ofdm_rates),
+ 	ARRAY_SIZE(rtw_ht_1s_rates),
+@@ -1596,7 +1596,7 @@ static void rtw_phy_set_tx_power_limit(s
+ 	ch_idx = rtw_channel_to_idx(band, ch);
+ 
+ 	if (regd >= RTW_REGD_MAX || bw >= RTW_CHANNEL_WIDTH_MAX ||
+-	    rs >= RTW_RATE_SECTION_MAX || ch_idx < 0) {
++	    rs >= RTW_RATE_SECTION_NUM || ch_idx < 0) {
+ 		WARN(1,
+ 		     "wrong txpwr_lmt regd=%u, band=%u bw=%u, rs=%u, ch_idx=%u, pwr_limit=%d\n",
+ 		     regd, band, bw, rs, ch_idx, pwr_limit);
+@@ -1701,7 +1701,7 @@ rtw_cfg_txpwr_lmt_by_alt(struct rtw_dev
+ 	u8 bw, rs;
+ 
+ 	for (bw = 0; bw < RTW_CHANNEL_WIDTH_MAX; bw++)
+-		for (rs = 0; rs < RTW_RATE_SECTION_MAX; rs++)
++		for (rs = 0; rs < RTW_RATE_SECTION_NUM; rs++)
+ 			__cfg_txpwr_lmt_by_alt(&rtwdev->hal, regd, regd_alt,
+ 					       bw, rs);
+ }
+@@ -2060,7 +2060,7 @@ static u8 rtw_phy_get_5g_tx_power_index(
+ 	return tx_power;
+ }
+ 
+-/* return RTW_RATE_SECTION_MAX to indicate rate is invalid */
++/* return RTW_RATE_SECTION_NUM to indicate rate is invalid */
+ static u8 rtw_phy_rate_to_rate_section(u8 rate)
+ {
+ 	if (rate >= DESC_RATE1M && rate <= DESC_RATE11M)
+@@ -2076,7 +2076,7 @@ static u8 rtw_phy_rate_to_rate_section(u
+ 	else if (rate >= DESC_RATEVHT2SS_MCS0 && rate <= DESC_RATEVHT2SS_MCS9)
+ 		return RTW_RATE_SECTION_VHT_2S;
+ 	else
+-		return RTW_RATE_SECTION_MAX;
++		return RTW_RATE_SECTION_NUM;
+ }
+ 
+ static s8 rtw_phy_get_tx_power_limit(struct rtw_dev *rtwdev, u8 band,
+@@ -2094,7 +2094,7 @@ static s8 rtw_phy_get_tx_power_limit(str
+ 	if (regd > RTW_REGD_WW)
+ 		return power_limit;
+ 
+-	if (rs == RTW_RATE_SECTION_MAX)
++	if (rs == RTW_RATE_SECTION_NUM)
+ 		goto err;
+ 
+ 	/* only 20M BW with cck and ofdm */
+@@ -2138,7 +2138,7 @@ static s8 rtw_phy_get_tx_power_sar(struc
+ 		.rs = rs,
+ 	};
+ 
+-	if (rs == RTW_RATE_SECTION_MAX)
++	if (rs == RTW_RATE_SECTION_NUM)
+ 		goto err;
+ 
+ 	return rtw_query_sar(rtwdev, &arg);
+@@ -2227,7 +2227,7 @@ static void rtw_phy_set_tx_power_index_b
+ 	u8 bw;
+ 	int i;
+ 
+-	if (rs >= RTW_RATE_SECTION_MAX)
++	if (rs >= RTW_RATE_SECTION_NUM)
+ 		return;
+ 
+ 	rates = rtw_rate_section[rs];
+@@ -2258,7 +2258,7 @@ static void rtw_phy_set_tx_power_level_b
+ 	else
+ 		rs = RTW_RATE_SECTION_OFDM;
+ 
+-	for (; rs < RTW_RATE_SECTION_MAX; rs++)
++	for (; rs < RTW_RATE_SECTION_NUM; rs++)
+ 		rtw_phy_set_tx_power_index_by_rs(rtwdev, ch, path, rs);
+ }
+ 
+@@ -2353,7 +2353,7 @@ void rtw_phy_tx_power_limit_config(struc
+ 
+ 	for (regd = 0; regd < RTW_REGD_MAX; regd++)
+ 		for (bw = 0; bw < RTW_CHANNEL_WIDTH_MAX; bw++)
+-			for (rs = 0; rs < RTW_RATE_SECTION_MAX; rs++)
++			for (rs = 0; rs < RTW_RATE_SECTION_NUM; rs++)
+ 				__rtw_phy_tx_power_limit_config(hal, regd, bw, rs);
+ }
+ 
+@@ -2389,7 +2389,7 @@ void rtw_phy_init_tx_power(struct rtw_de
+ 	/* init tx power limit */
+ 	for (regd = 0; regd < RTW_REGD_MAX; regd++)
+ 		for (bw = 0; bw < RTW_CHANNEL_WIDTH_MAX; bw++)
+-			for (rs = 0; rs < RTW_RATE_SECTION_MAX; rs++)
++			for (rs = 0; rs < RTW_RATE_SECTION_NUM; rs++)
+ 				rtw_phy_init_tx_power_limit(rtwdev, regd, bw,
+ 							    rs);
+ }
+--- a/drivers/net/wireless/realtek/rtw88/rtw8821c.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8821c.c
+@@ -709,7 +709,7 @@ static void rtw8821c_set_tx_power_index(
+ 	int rs, path;
+ 
+ 	for (path = 0; path < hal->rf_path_num; path++) {
+-		for (rs = 0; rs < RTW_RATE_SECTION_MAX; rs++) {
++		for (rs = 0; rs < RTW_RATE_SECTION_NUM; rs++) {
+ 			if (rs == RTW_RATE_SECTION_HT_2S ||
+ 			    rs == RTW_RATE_SECTION_VHT_2S)
+ 				continue;
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822b.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822b.c
+@@ -964,7 +964,7 @@ static void rtw8822b_set_tx_power_index(
+ 	int rs, path;
+ 
+ 	for (path = 0; path < hal->rf_path_num; path++) {
+-		for (rs = 0; rs < RTW_RATE_SECTION_MAX; rs++)
++		for (rs = 0; rs < RTW_RATE_SECTION_NUM; rs++)
+ 			rtw8822b_set_tx_power_index_by_rate(rtwdev, path, rs,
+ 							    &phy_pwr_idx);
+ 	}
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822c.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822c.c
+@@ -2746,7 +2746,7 @@ static void rtw8822c_set_tx_power_index(
+ 	s8 diff_idx[4];
+ 
+ 	rtw8822c_set_write_tx_power_ref(rtwdev, pwr_ref_cck, pwr_ref_ofdm);
+-	for (rs = 0; rs < RTW_RATE_SECTION_MAX; rs++) {
++	for (rs = 0; rs < RTW_RATE_SECTION_NUM; rs++) {
+ 		for (j = 0; j < rtw_rate_size[rs]; j++) {
+ 			rate = rtw_rate_section[rs][j];
+ 			pwr_a = hal->tx_pwr_tbl[RF_PATH_A][rate];
+--- a/drivers/net/wireless/realtek/rtw88/rtw88xxa.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw88xxa.c
+@@ -1637,7 +1637,7 @@ void rtw88xxa_set_tx_power_index(struct
+ 	int rs, path;
+ 
+ 	for (path = 0; path < hal->rf_path_num; path++) {
+-		for (rs = 0; rs < RTW_RATE_SECTION_MAX; rs++) {
++		for (rs = 0; rs < RTW_RATE_SECTION_NUM; rs++) {
+ 			if (hal->rf_path_num == 1 &&
+ 			    (rs == RTW_RATE_SECTION_HT_2S ||
+ 			     rs == RTW_RATE_SECTION_VHT_2S))
+--- a/drivers/net/wireless/realtek/rtw88/sar.c
++++ b/drivers/net/wireless/realtek/rtw88/sar.c
+@@ -97,7 +97,7 @@ int rtw_set_sar_specs(struct rtw_dev *rt
+ 			power, BIT(RTW_COMMON_SAR_FCT));
+ 
+ 		for (j = 0; j < RTW_RF_PATH_MAX; j++) {
+-			for (k = 0; k < RTW_RATE_SECTION_MAX; k++) {
++			for (k = 0; k < RTW_RATE_SECTION_NUM; k++) {
+ 				arg = (struct rtw_sar_arg){
+ 					.sar_band = idx,
+ 					.path = j,
diff --git a/package/kernel/mac80211/patches/rtl/074-v6.15-wifi-rtw88-Extend-TX-power-stuff-for-3-4-spatial-str.patch b/package/kernel/mac80211/patches/rtl/074-v6.15-wifi-rtw88-Extend-TX-power-stuff-for-3-4-spatial-str.patch
new file mode 100644
index 0000000000..fc9aa3b971
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/074-v6.15-wifi-rtw88-Extend-TX-power-stuff-for-3-4-spatial-str.patch
@@ -0,0 +1,369 @@
+From 0f98a59596579b34932c06aec7d52c1e835fa1f0 Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Tue, 4 Feb 2025 20:41:43 +0200
+Subject: [PATCH] wifi: rtw88: Extend TX power stuff for 3-4 spatial streams
+
+Although the RTL8814AU only has 3 spatial streams, maybe some other chip
+has 4.
+
+Correct the TX power index and TX power limit calculations for 3SS and
+4SS HT/VHT rates.
+
+With this the RTL8814AU can set the TX power correctly.
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/d0c0e126-0794-4c4e-9203-ea39a707b673@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/main.h     |   5 +
+ drivers/net/wireless/realtek/rtw88/phy.c      | 145 ++++++++++++------
+ drivers/net/wireless/realtek/rtw88/phy.h      |   4 +
+ drivers/net/wireless/realtek/rtw88/rtw8821c.c |   2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8822b.c |   2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8822c.c |   2 +-
+ drivers/net/wireless/realtek/rtw88/rtw88xxa.c |   2 +-
+ 7 files changed, 111 insertions(+), 51 deletions(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/main.h
++++ b/drivers/net/wireless/realtek/rtw88/main.h
+@@ -166,6 +166,11 @@ enum rtw_rate_section {
+ 	RTW_RATE_SECTION_HT_2S,
+ 	RTW_RATE_SECTION_VHT_1S,
+ 	RTW_RATE_SECTION_VHT_2S,
++	__RTW_RATE_SECTION_2SS_MAX = RTW_RATE_SECTION_VHT_2S,
++	RTW_RATE_SECTION_HT_3S,
++	RTW_RATE_SECTION_HT_4S,
++	RTW_RATE_SECTION_VHT_3S,
++	RTW_RATE_SECTION_VHT_4S,
+ 
+ 	/* keep last */
+ 	RTW_RATE_SECTION_NUM,
+--- a/drivers/net/wireless/realtek/rtw88/phy.c
++++ b/drivers/net/wireless/realtek/rtw88/phy.c
+@@ -88,10 +88,40 @@ const u8 rtw_vht_2s_rates[] = {
+ 	DESC_RATEVHT2SS_MCS8, DESC_RATEVHT2SS_MCS9
+ };
+ 
++const u8 rtw_ht_3s_rates[] = {
++	DESC_RATEMCS16, DESC_RATEMCS17, DESC_RATEMCS18,
++	DESC_RATEMCS19, DESC_RATEMCS20, DESC_RATEMCS21,
++	DESC_RATEMCS22, DESC_RATEMCS23
++};
++
++const u8 rtw_ht_4s_rates[] = {
++	DESC_RATEMCS24, DESC_RATEMCS25, DESC_RATEMCS26,
++	DESC_RATEMCS27, DESC_RATEMCS28, DESC_RATEMCS29,
++	DESC_RATEMCS30, DESC_RATEMCS31
++};
++
++const u8 rtw_vht_3s_rates[] = {
++	DESC_RATEVHT3SS_MCS0, DESC_RATEVHT3SS_MCS1,
++	DESC_RATEVHT3SS_MCS2, DESC_RATEVHT3SS_MCS3,
++	DESC_RATEVHT3SS_MCS4, DESC_RATEVHT3SS_MCS5,
++	DESC_RATEVHT3SS_MCS6, DESC_RATEVHT3SS_MCS7,
++	DESC_RATEVHT3SS_MCS8, DESC_RATEVHT3SS_MCS9
++};
++
++const u8 rtw_vht_4s_rates[] = {
++	DESC_RATEVHT4SS_MCS0, DESC_RATEVHT4SS_MCS1,
++	DESC_RATEVHT4SS_MCS2, DESC_RATEVHT4SS_MCS3,
++	DESC_RATEVHT4SS_MCS4, DESC_RATEVHT4SS_MCS5,
++	DESC_RATEVHT4SS_MCS6, DESC_RATEVHT4SS_MCS7,
++	DESC_RATEVHT4SS_MCS8, DESC_RATEVHT4SS_MCS9
++};
++
+ const u8 * const rtw_rate_section[RTW_RATE_SECTION_NUM] = {
+ 	rtw_cck_rates, rtw_ofdm_rates,
+ 	rtw_ht_1s_rates, rtw_ht_2s_rates,
+-	rtw_vht_1s_rates, rtw_vht_2s_rates
++	rtw_vht_1s_rates, rtw_vht_2s_rates,
++	rtw_ht_3s_rates, rtw_ht_4s_rates,
++	rtw_vht_3s_rates, rtw_vht_4s_rates
+ };
+ EXPORT_SYMBOL(rtw_rate_section);
+ 
+@@ -101,17 +131,14 @@ const u8 rtw_rate_size[RTW_RATE_SECTION_
+ 	ARRAY_SIZE(rtw_ht_1s_rates),
+ 	ARRAY_SIZE(rtw_ht_2s_rates),
+ 	ARRAY_SIZE(rtw_vht_1s_rates),
+-	ARRAY_SIZE(rtw_vht_2s_rates)
++	ARRAY_SIZE(rtw_vht_2s_rates),
++	ARRAY_SIZE(rtw_ht_3s_rates),
++	ARRAY_SIZE(rtw_ht_4s_rates),
++	ARRAY_SIZE(rtw_vht_3s_rates),
++	ARRAY_SIZE(rtw_vht_4s_rates)
+ };
+ EXPORT_SYMBOL(rtw_rate_size);
+ 
+-static const u8 rtw_cck_size = ARRAY_SIZE(rtw_cck_rates);
+-static const u8 rtw_ofdm_size = ARRAY_SIZE(rtw_ofdm_rates);
+-static const u8 rtw_ht_1s_size = ARRAY_SIZE(rtw_ht_1s_rates);
+-static const u8 rtw_ht_2s_size = ARRAY_SIZE(rtw_ht_2s_rates);
+-static const u8 rtw_vht_1s_size = ARRAY_SIZE(rtw_vht_1s_rates);
+-static const u8 rtw_vht_2s_size = ARRAY_SIZE(rtw_vht_2s_rates);
+-
+ enum rtw_phy_band_type {
+ 	PHY_BAND_2G	= 0,
+ 	PHY_BAND_5G	= 1,
+@@ -1640,11 +1667,15 @@ rtw_xref_5g_txpwr_lmt(struct rtw_dev *rt
+ static void
+ rtw_xref_txpwr_lmt_by_rs(struct rtw_dev *rtwdev, u8 regd, u8 bw, u8 ch_idx)
+ {
++	static const u8 rs_cmp[4][2] = {
++		{RTW_RATE_SECTION_HT_1S, RTW_RATE_SECTION_VHT_1S},
++		{RTW_RATE_SECTION_HT_2S, RTW_RATE_SECTION_VHT_2S},
++		{RTW_RATE_SECTION_HT_3S, RTW_RATE_SECTION_VHT_3S},
++		{RTW_RATE_SECTION_HT_4S, RTW_RATE_SECTION_VHT_4S}
++	};
+ 	u8 rs_idx, rs_ht, rs_vht;
+-	u8 rs_cmp[2][2] = {{RTW_RATE_SECTION_HT_1S, RTW_RATE_SECTION_VHT_1S},
+-			   {RTW_RATE_SECTION_HT_2S, RTW_RATE_SECTION_VHT_2S} };
+ 
+-	for (rs_idx = 0; rs_idx < 2; rs_idx++) {
++	for (rs_idx = 0; rs_idx < 4; rs_idx++) {
+ 		rs_ht = rs_cmp[rs_idx][0];
+ 		rs_vht = rs_cmp[rs_idx][1];
+ 
+@@ -1965,10 +1996,10 @@ static u8 rtw_phy_get_2g_tx_power_index(
+ 					u8 rate, u8 group)
+ {
+ 	const struct rtw_chip_info *chip = rtwdev->chip;
+-	u8 tx_power;
+-	bool mcs_rate;
+-	bool above_2ss;
++	bool above_2ss, above_3ss, above_4ss;
+ 	u8 factor = chip->txgi_factor;
++	bool mcs_rate;
++	u8 tx_power;
+ 
+ 	if (rate <= DESC_RATE11M)
+ 		tx_power = pwr_idx_2g->cck_base[group];
+@@ -1978,11 +2009,15 @@ static u8 rtw_phy_get_2g_tx_power_index(
+ 	if (rate >= DESC_RATE6M && rate <= DESC_RATE54M)
+ 		tx_power += pwr_idx_2g->ht_1s_diff.ofdm * factor;
+ 
+-	mcs_rate = (rate >= DESC_RATEMCS0 && rate <= DESC_RATEMCS15) ||
++	mcs_rate = (rate >= DESC_RATEMCS0 && rate <= DESC_RATEMCS31) ||
+ 		   (rate >= DESC_RATEVHT1SS_MCS0 &&
+-		    rate <= DESC_RATEVHT2SS_MCS9);
+-	above_2ss = (rate >= DESC_RATEMCS8 && rate <= DESC_RATEMCS15) ||
++		    rate <= DESC_RATEVHT4SS_MCS9);
++	above_2ss = (rate >= DESC_RATEMCS8 && rate <= DESC_RATEMCS31) ||
+ 		    (rate >= DESC_RATEVHT2SS_MCS0);
++	above_3ss = (rate >= DESC_RATEMCS16 && rate <= DESC_RATEMCS31) ||
++		    (rate >= DESC_RATEVHT3SS_MCS0);
++	above_4ss = (rate >= DESC_RATEMCS24 && rate <= DESC_RATEMCS31) ||
++		    (rate >= DESC_RATEVHT4SS_MCS0);
+ 
+ 	if (!mcs_rate)
+ 		return tx_power;
+@@ -1995,11 +2030,19 @@ static u8 rtw_phy_get_2g_tx_power_index(
+ 		tx_power += pwr_idx_2g->ht_1s_diff.bw20 * factor;
+ 		if (above_2ss)
+ 			tx_power += pwr_idx_2g->ht_2s_diff.bw20 * factor;
++		if (above_3ss)
++			tx_power += pwr_idx_2g->ht_3s_diff.bw20 * factor;
++		if (above_4ss)
++			tx_power += pwr_idx_2g->ht_4s_diff.bw20 * factor;
+ 		break;
+ 	case RTW_CHANNEL_WIDTH_40:
+ 		/* bw40 is the base power */
+ 		if (above_2ss)
+ 			tx_power += pwr_idx_2g->ht_2s_diff.bw40 * factor;
++		if (above_3ss)
++			tx_power += pwr_idx_2g->ht_3s_diff.bw40 * factor;
++		if (above_4ss)
++			tx_power += pwr_idx_2g->ht_4s_diff.bw40 * factor;
+ 		break;
+ 	}
+ 
+@@ -2012,19 +2055,23 @@ static u8 rtw_phy_get_5g_tx_power_index(
+ 					u8 rate, u8 group)
+ {
+ 	const struct rtw_chip_info *chip = rtwdev->chip;
+-	u8 tx_power;
++	bool above_2ss, above_3ss, above_4ss;
++	u8 factor = chip->txgi_factor;
+ 	u8 upper, lower;
+ 	bool mcs_rate;
+-	bool above_2ss;
+-	u8 factor = chip->txgi_factor;
++	u8 tx_power;
+ 
+ 	tx_power = pwr_idx_5g->bw40_base[group];
+ 
+-	mcs_rate = (rate >= DESC_RATEMCS0 && rate <= DESC_RATEMCS15) ||
++	mcs_rate = (rate >= DESC_RATEMCS0 && rate <= DESC_RATEMCS31) ||
+ 		   (rate >= DESC_RATEVHT1SS_MCS0 &&
+-		    rate <= DESC_RATEVHT2SS_MCS9);
+-	above_2ss = (rate >= DESC_RATEMCS8 && rate <= DESC_RATEMCS15) ||
++		    rate <= DESC_RATEVHT4SS_MCS9);
++	above_2ss = (rate >= DESC_RATEMCS8 && rate <= DESC_RATEMCS31) ||
+ 		    (rate >= DESC_RATEVHT2SS_MCS0);
++	above_3ss = (rate >= DESC_RATEMCS16 && rate <= DESC_RATEMCS31) ||
++		    (rate >= DESC_RATEVHT3SS_MCS0);
++	above_4ss = (rate >= DESC_RATEMCS24 && rate <= DESC_RATEMCS31) ||
++		    (rate >= DESC_RATEVHT4SS_MCS0);
+ 
+ 	if (!mcs_rate) {
+ 		tx_power += pwr_idx_5g->ht_1s_diff.ofdm * factor;
+@@ -2039,11 +2086,19 @@ static u8 rtw_phy_get_5g_tx_power_index(
+ 		tx_power += pwr_idx_5g->ht_1s_diff.bw20 * factor;
+ 		if (above_2ss)
+ 			tx_power += pwr_idx_5g->ht_2s_diff.bw20 * factor;
++		if (above_3ss)
++			tx_power += pwr_idx_5g->ht_3s_diff.bw20 * factor;
++		if (above_4ss)
++			tx_power += pwr_idx_5g->ht_4s_diff.bw20 * factor;
+ 		break;
+ 	case RTW_CHANNEL_WIDTH_40:
+ 		/* bw40 is the base power */
+ 		if (above_2ss)
+ 			tx_power += pwr_idx_5g->ht_2s_diff.bw40 * factor;
++		if (above_3ss)
++			tx_power += pwr_idx_5g->ht_3s_diff.bw40 * factor;
++		if (above_4ss)
++			tx_power += pwr_idx_5g->ht_4s_diff.bw40 * factor;
+ 		break;
+ 	case RTW_CHANNEL_WIDTH_80:
+ 		/* the base idx of bw80 is the average of bw40+/bw40- */
+@@ -2054,6 +2109,10 @@ static u8 rtw_phy_get_5g_tx_power_index(
+ 		tx_power += pwr_idx_5g->vht_1s_diff.bw80 * factor;
+ 		if (above_2ss)
+ 			tx_power += pwr_idx_5g->vht_2s_diff.bw80 * factor;
++		if (above_3ss)
++			tx_power += pwr_idx_5g->vht_3s_diff.bw80 * factor;
++		if (above_4ss)
++			tx_power += pwr_idx_5g->vht_4s_diff.bw80 * factor;
+ 		break;
+ 	}
+ 
+@@ -2071,10 +2130,18 @@ static u8 rtw_phy_rate_to_rate_section(u
+ 		return RTW_RATE_SECTION_HT_1S;
+ 	else if (rate >= DESC_RATEMCS8 && rate <= DESC_RATEMCS15)
+ 		return RTW_RATE_SECTION_HT_2S;
++	else if (rate >= DESC_RATEMCS16 && rate <= DESC_RATEMCS23)
++		return RTW_RATE_SECTION_HT_3S;
++	else if (rate >= DESC_RATEMCS24 && rate <= DESC_RATEMCS31)
++		return RTW_RATE_SECTION_HT_4S;
+ 	else if (rate >= DESC_RATEVHT1SS_MCS0 && rate <= DESC_RATEVHT1SS_MCS9)
+ 		return RTW_RATE_SECTION_VHT_1S;
+ 	else if (rate >= DESC_RATEVHT2SS_MCS0 && rate <= DESC_RATEVHT2SS_MCS9)
+ 		return RTW_RATE_SECTION_VHT_2S;
++	else if (rate >= DESC_RATEVHT3SS_MCS0 && rate <= DESC_RATEVHT3SS_MCS9)
++		return RTW_RATE_SECTION_VHT_3S;
++	else if (rate >= DESC_RATEVHT4SS_MCS0 && rate <= DESC_RATEVHT4SS_MCS9)
++		return RTW_RATE_SECTION_VHT_4S;
+ 	else
+ 		return RTW_RATE_SECTION_NUM;
+ }
+@@ -2102,7 +2169,7 @@ static s8 rtw_phy_get_tx_power_limit(str
+ 		bw = RTW_CHANNEL_WIDTH_20;
+ 
+ 	/* only 20/40M BW with ht */
+-	if (rs == RTW_RATE_SECTION_HT_1S || rs == RTW_RATE_SECTION_HT_2S)
++	if (rate >= DESC_RATEMCS0 && rate <= DESC_RATEMCS31)
+ 		bw = min_t(u8, bw, RTW_CHANNEL_WIDTH_40);
+ 
+ 	/* select min power limit among [20M BW ~ current BW] */
+@@ -2286,7 +2353,7 @@ rtw_phy_tx_power_by_rate_config_by_path(
+ 	u8 base_idx, rate_idx;
+ 	s8 base_2g, base_5g;
+ 
+-	if (rs >= RTW_RATE_SECTION_VHT_1S)
++	if (size == 10) /* VHT rates */
+ 		base_idx = rates[size - 3];
+ 	else
+ 		base_idx = rates[size - 1];
+@@ -2303,28 +2370,12 @@ rtw_phy_tx_power_by_rate_config_by_path(
+ 
+ void rtw_phy_tx_power_by_rate_config(struct rtw_hal *hal)
+ {
+-	u8 path;
++	u8 path, rs;
+ 
+-	for (path = 0; path < RTW_RF_PATH_MAX; path++) {
+-		rtw_phy_tx_power_by_rate_config_by_path(hal, path,
+-				RTW_RATE_SECTION_CCK,
+-				rtw_cck_size, rtw_cck_rates);
+-		rtw_phy_tx_power_by_rate_config_by_path(hal, path,
+-				RTW_RATE_SECTION_OFDM,
+-				rtw_ofdm_size, rtw_ofdm_rates);
+-		rtw_phy_tx_power_by_rate_config_by_path(hal, path,
+-				RTW_RATE_SECTION_HT_1S,
+-				rtw_ht_1s_size, rtw_ht_1s_rates);
+-		rtw_phy_tx_power_by_rate_config_by_path(hal, path,
+-				RTW_RATE_SECTION_HT_2S,
+-				rtw_ht_2s_size, rtw_ht_2s_rates);
+-		rtw_phy_tx_power_by_rate_config_by_path(hal, path,
+-				RTW_RATE_SECTION_VHT_1S,
+-				rtw_vht_1s_size, rtw_vht_1s_rates);
+-		rtw_phy_tx_power_by_rate_config_by_path(hal, path,
+-				RTW_RATE_SECTION_VHT_2S,
+-				rtw_vht_2s_size, rtw_vht_2s_rates);
+-	}
++	for (path = 0; path < RTW_RF_PATH_MAX; path++)
++		for (rs = 0; rs < RTW_RATE_SECTION_NUM; rs++)
++			rtw_phy_tx_power_by_rate_config_by_path(hal, path, rs,
++				rtw_rate_size[rs], rtw_rate_section[rs]);
+ }
+ 
+ static void
+--- a/drivers/net/wireless/realtek/rtw88/phy.h
++++ b/drivers/net/wireless/realtek/rtw88/phy.h
+@@ -13,6 +13,10 @@ extern const u8 rtw_ht_1s_rates[];
+ extern const u8 rtw_ht_2s_rates[];
+ extern const u8 rtw_vht_1s_rates[];
+ extern const u8 rtw_vht_2s_rates[];
++extern const u8 rtw_ht_3s_rates[];
++extern const u8 rtw_ht_4s_rates[];
++extern const u8 rtw_vht_3s_rates[];
++extern const u8 rtw_vht_4s_rates[];
+ extern const u8 * const rtw_rate_section[];
+ extern const u8 rtw_rate_size[];
+ 
+--- a/drivers/net/wireless/realtek/rtw88/rtw8821c.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8821c.c
+@@ -709,7 +709,7 @@ static void rtw8821c_set_tx_power_index(
+ 	int rs, path;
+ 
+ 	for (path = 0; path < hal->rf_path_num; path++) {
+-		for (rs = 0; rs < RTW_RATE_SECTION_NUM; rs++) {
++		for (rs = 0; rs <= __RTW_RATE_SECTION_2SS_MAX; rs++) {
+ 			if (rs == RTW_RATE_SECTION_HT_2S ||
+ 			    rs == RTW_RATE_SECTION_VHT_2S)
+ 				continue;
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822b.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822b.c
+@@ -964,7 +964,7 @@ static void rtw8822b_set_tx_power_index(
+ 	int rs, path;
+ 
+ 	for (path = 0; path < hal->rf_path_num; path++) {
+-		for (rs = 0; rs < RTW_RATE_SECTION_NUM; rs++)
++		for (rs = 0; rs <= __RTW_RATE_SECTION_2SS_MAX; rs++)
+ 			rtw8822b_set_tx_power_index_by_rate(rtwdev, path, rs,
+ 							    &phy_pwr_idx);
+ 	}
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822c.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822c.c
+@@ -2746,7 +2746,7 @@ static void rtw8822c_set_tx_power_index(
+ 	s8 diff_idx[4];
+ 
+ 	rtw8822c_set_write_tx_power_ref(rtwdev, pwr_ref_cck, pwr_ref_ofdm);
+-	for (rs = 0; rs < RTW_RATE_SECTION_NUM; rs++) {
++	for (rs = 0; rs <= __RTW_RATE_SECTION_2SS_MAX; rs++) {
+ 		for (j = 0; j < rtw_rate_size[rs]; j++) {
+ 			rate = rtw_rate_section[rs][j];
+ 			pwr_a = hal->tx_pwr_tbl[RF_PATH_A][rate];
+--- a/drivers/net/wireless/realtek/rtw88/rtw88xxa.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw88xxa.c
+@@ -1637,7 +1637,7 @@ void rtw88xxa_set_tx_power_index(struct
+ 	int rs, path;
+ 
+ 	for (path = 0; path < hal->rf_path_num; path++) {
+-		for (rs = 0; rs < RTW_RATE_SECTION_NUM; rs++) {
++		for (rs = 0; rs <= __RTW_RATE_SECTION_2SS_MAX; rs++) {
+ 			if (hal->rf_path_num == 1 &&
+ 			    (rs == RTW_RATE_SECTION_HT_2S ||
+ 			     rs == RTW_RATE_SECTION_VHT_2S))
diff --git a/package/kernel/mac80211/patches/rtl/081-v6.15-wifi-rtw88-Fix-rtw_rx_phy_stat-for-RTL8814AU.patch b/package/kernel/mac80211/patches/rtl/081-v6.15-wifi-rtw88-Fix-rtw_rx_phy_stat-for-RTL8814AU.patch
new file mode 100644
index 0000000000..a1ca98f8b6
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/081-v6.15-wifi-rtw88-Fix-rtw_rx_phy_stat-for-RTL8814AU.patch
@@ -0,0 +1,54 @@
+From 053a7aace0207593776c729f229d87f1be464b98 Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Tue, 18 Feb 2025 01:31:13 +0200
+Subject: [PATCH] wifi: rtw88: Fix rtw_rx_phy_stat() for RTL8814AU
+
+Record statistics for the 3SS rates too.
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/39e3c7cf-37ed-4c0e-af00-dcd9eab351f0@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/main.h | 7 +++++++
+ drivers/net/wireless/realtek/rtw88/rx.c   | 6 ++++++
+ 2 files changed, 13 insertions(+)
+
+--- a/drivers/net/wireless/realtek/rtw88/main.h
++++ b/drivers/net/wireless/realtek/rtw88/main.h
+@@ -386,6 +386,9 @@ enum rtw_evm {
+ 	RTW_EVM_1SS,
+ 	RTW_EVM_2SS_A,
+ 	RTW_EVM_2SS_B,
++	RTW_EVM_3SS_A,
++	RTW_EVM_3SS_B,
++	RTW_EVM_3SS_C,
+ 	/* keep it last */
+ 	RTW_EVM_NUM
+ };
+@@ -403,6 +406,10 @@ enum rtw_snr {
+ 	RTW_SNR_2SS_B,
+ 	RTW_SNR_2SS_C,
+ 	RTW_SNR_2SS_D,
++	RTW_SNR_3SS_A,
++	RTW_SNR_3SS_B,
++	RTW_SNR_3SS_C,
++	RTW_SNR_3SS_D,
+ 	/* keep it last */
+ 	RTW_SNR_NUM
+ };
+--- a/drivers/net/wireless/realtek/rtw88/rx.c
++++ b/drivers/net/wireless/realtek/rtw88/rx.c
+@@ -73,6 +73,12 @@ static void rtw_rx_phy_stat(struct rtw_d
+ 		rate_ss_evm = 2;
+ 		evm_id = RTW_EVM_2SS_A;
+ 		break;
++	case DESC_RATEMCS16...DESC_RATEMCS23:
++	case DESC_RATEVHT3SS_MCS0...DESC_RATEVHT3SS_MCS9:
++		rate_ss = 3;
++		rate_ss_evm = 3;
++		evm_id = RTW_EVM_3SS_A;
++		break;
+ 	default:
+ 		rtw_warn(rtwdev, "unknown pkt rate = %d\n", pkt_stat->rate);
+ 		return;
diff --git a/package/kernel/mac80211/patches/rtl/082-v6.15-wifi-rtw88-Extend-rtw_phy_config_swing_table-for-RTL.patch b/package/kernel/mac80211/patches/rtl/082-v6.15-wifi-rtw88-Extend-rtw_phy_config_swing_table-for-RTL.patch
new file mode 100644
index 0000000000..2ac27f39e7
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/082-v6.15-wifi-rtw88-Extend-rtw_phy_config_swing_table-for-RTL.patch
@@ -0,0 +1,75 @@
+From 8b42c46cf6656ef3c2f6d1ec0f113753c6875712 Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Tue, 18 Feb 2025 01:31:51 +0200
+Subject: [PATCH] wifi: rtw88: Extend rtw_phy_config_swing_table() for
+ RTL8814AU
+
+Select the TX power tracking tables for RF paths C and D as well.
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/e1e532c9-8733-4ec8-84fe-ced4af6c08da@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/phy.c | 24 ++++++++++++++++++++++++
+ 1 file changed, 24 insertions(+)
+
+--- a/drivers/net/wireless/realtek/rtw88/phy.c
++++ b/drivers/net/wireless/realtek/rtw88/phy.c
+@@ -2458,32 +2458,56 @@ void rtw_phy_config_swing_table(struct r
+ 			swing_table->n[RF_PATH_A] = tbl->pwrtrk_2g_ccka_n;
+ 			swing_table->p[RF_PATH_B] = tbl->pwrtrk_2g_cckb_p;
+ 			swing_table->n[RF_PATH_B] = tbl->pwrtrk_2g_cckb_n;
++			swing_table->p[RF_PATH_C] = tbl->pwrtrk_2g_cckc_p;
++			swing_table->n[RF_PATH_C] = tbl->pwrtrk_2g_cckc_n;
++			swing_table->p[RF_PATH_D] = tbl->pwrtrk_2g_cckd_p;
++			swing_table->n[RF_PATH_D] = tbl->pwrtrk_2g_cckd_n;
+ 		} else {
+ 			swing_table->p[RF_PATH_A] = tbl->pwrtrk_2ga_p;
+ 			swing_table->n[RF_PATH_A] = tbl->pwrtrk_2ga_n;
+ 			swing_table->p[RF_PATH_B] = tbl->pwrtrk_2gb_p;
+ 			swing_table->n[RF_PATH_B] = tbl->pwrtrk_2gb_n;
++			swing_table->p[RF_PATH_C] = tbl->pwrtrk_2gc_p;
++			swing_table->n[RF_PATH_C] = tbl->pwrtrk_2gc_n;
++			swing_table->p[RF_PATH_D] = tbl->pwrtrk_2gd_p;
++			swing_table->n[RF_PATH_D] = tbl->pwrtrk_2gd_n;
+ 		}
+ 	} else if (IS_CH_5G_BAND_1(channel) || IS_CH_5G_BAND_2(channel)) {
+ 		swing_table->p[RF_PATH_A] = tbl->pwrtrk_5ga_p[RTW_PWR_TRK_5G_1];
+ 		swing_table->n[RF_PATH_A] = tbl->pwrtrk_5ga_n[RTW_PWR_TRK_5G_1];
+ 		swing_table->p[RF_PATH_B] = tbl->pwrtrk_5gb_p[RTW_PWR_TRK_5G_1];
+ 		swing_table->n[RF_PATH_B] = tbl->pwrtrk_5gb_n[RTW_PWR_TRK_5G_1];
++		swing_table->p[RF_PATH_C] = tbl->pwrtrk_5gc_p[RTW_PWR_TRK_5G_1];
++		swing_table->n[RF_PATH_C] = tbl->pwrtrk_5gc_n[RTW_PWR_TRK_5G_1];
++		swing_table->p[RF_PATH_D] = tbl->pwrtrk_5gd_p[RTW_PWR_TRK_5G_1];
++		swing_table->n[RF_PATH_D] = tbl->pwrtrk_5gd_n[RTW_PWR_TRK_5G_1];
+ 	} else if (IS_CH_5G_BAND_3(channel)) {
+ 		swing_table->p[RF_PATH_A] = tbl->pwrtrk_5ga_p[RTW_PWR_TRK_5G_2];
+ 		swing_table->n[RF_PATH_A] = tbl->pwrtrk_5ga_n[RTW_PWR_TRK_5G_2];
+ 		swing_table->p[RF_PATH_B] = tbl->pwrtrk_5gb_p[RTW_PWR_TRK_5G_2];
+ 		swing_table->n[RF_PATH_B] = tbl->pwrtrk_5gb_n[RTW_PWR_TRK_5G_2];
++		swing_table->p[RF_PATH_C] = tbl->pwrtrk_5gc_p[RTW_PWR_TRK_5G_2];
++		swing_table->n[RF_PATH_C] = tbl->pwrtrk_5gc_n[RTW_PWR_TRK_5G_2];
++		swing_table->p[RF_PATH_D] = tbl->pwrtrk_5gd_p[RTW_PWR_TRK_5G_2];
++		swing_table->n[RF_PATH_D] = tbl->pwrtrk_5gd_n[RTW_PWR_TRK_5G_2];
+ 	} else if (IS_CH_5G_BAND_4(channel)) {
+ 		swing_table->p[RF_PATH_A] = tbl->pwrtrk_5ga_p[RTW_PWR_TRK_5G_3];
+ 		swing_table->n[RF_PATH_A] = tbl->pwrtrk_5ga_n[RTW_PWR_TRK_5G_3];
+ 		swing_table->p[RF_PATH_B] = tbl->pwrtrk_5gb_p[RTW_PWR_TRK_5G_3];
+ 		swing_table->n[RF_PATH_B] = tbl->pwrtrk_5gb_n[RTW_PWR_TRK_5G_3];
++		swing_table->p[RF_PATH_C] = tbl->pwrtrk_5gc_p[RTW_PWR_TRK_5G_3];
++		swing_table->n[RF_PATH_C] = tbl->pwrtrk_5gc_n[RTW_PWR_TRK_5G_3];
++		swing_table->p[RF_PATH_D] = tbl->pwrtrk_5gd_p[RTW_PWR_TRK_5G_3];
++		swing_table->n[RF_PATH_D] = tbl->pwrtrk_5gd_n[RTW_PWR_TRK_5G_3];
+ 	} else {
+ 		swing_table->p[RF_PATH_A] = tbl->pwrtrk_2ga_p;
+ 		swing_table->n[RF_PATH_A] = tbl->pwrtrk_2ga_n;
+ 		swing_table->p[RF_PATH_B] = tbl->pwrtrk_2gb_p;
+ 		swing_table->n[RF_PATH_B] = tbl->pwrtrk_2gb_n;
++		swing_table->p[RF_PATH_C] = tbl->pwrtrk_2gc_p;
++		swing_table->n[RF_PATH_C] = tbl->pwrtrk_2gc_n;
++		swing_table->p[RF_PATH_D] = tbl->pwrtrk_2gd_p;
++		swing_table->n[RF_PATH_D] = tbl->pwrtrk_2gd_n;
+ 	}
+ }
+ EXPORT_SYMBOL(rtw_phy_config_swing_table);
diff --git a/package/kernel/mac80211/patches/rtl/083-v6.15-wifi-rtw88-Extend-rtw_debugfs_get_phy_info-for-RTL88.patch b/package/kernel/mac80211/patches/rtl/083-v6.15-wifi-rtw88-Extend-rtw_debugfs_get_phy_info-for-RTL88.patch
new file mode 100644
index 0000000000..d34d72a0fb
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/083-v6.15-wifi-rtw88-Extend-rtw_debugfs_get_phy_info-for-RTL88.patch
@@ -0,0 +1,86 @@
+From cfebabdd351e9cbafdc99cb198db482208ec5ad9 Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Tue, 18 Feb 2025 01:32:15 +0200
+Subject: [PATCH] wifi: rtw88: Extend rtw_debugfs_get_phy_info() for RTL8814AU
+
+Print information about the 3rd and 4th RF paths and about the 3rd
+spatial stream.
+
+Also, fix a small bug: don't show the average SNR and EVM for the OFDM
+and HT/VHT rates when the rate is actually CCK 11M.
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/7c8e94e2-e034-40f3-bdaf-b000018b5573@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/debug.c | 37 +++++++++++++++-------
+ 1 file changed, 26 insertions(+), 11 deletions(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/debug.c
++++ b/drivers/net/wireless/realtek/rtw88/debug.c
+@@ -654,10 +654,10 @@ static void rtw_print_rate(struct seq_fi
+ 	case DESC_RATE6M...DESC_RATE54M:
+ 		rtw_print_ofdm_rate_txt(m, rate);
+ 		break;
+-	case DESC_RATEMCS0...DESC_RATEMCS15:
++	case DESC_RATEMCS0...DESC_RATEMCS31:
+ 		rtw_print_ht_rate_txt(m, rate);
+ 		break;
+-	case DESC_RATEVHT1SS_MCS0...DESC_RATEVHT2SS_MCS9:
++	case DESC_RATEVHT1SS_MCS0...DESC_RATEVHT4SS_MCS9:
+ 		rtw_print_vht_rate_txt(m, rate);
+ 		break;
+ 	default:
+@@ -849,20 +849,28 @@ static int rtw_debugfs_get_phy_info(stru
+ 			   last_cnt->num_qry_pkt[rate_id + 9]);
+ 	}
+ 
+-	seq_printf(m, "[RSSI(dBm)] = {%d, %d}\n",
++	seq_printf(m, "[RSSI(dBm)] = {%d, %d, %d, %d}\n",
+ 		   dm_info->rssi[RF_PATH_A] - 100,
+-		   dm_info->rssi[RF_PATH_B] - 100);
+-	seq_printf(m, "[Rx EVM(dB)] = {-%d, -%d}\n",
++		   dm_info->rssi[RF_PATH_B] - 100,
++		   dm_info->rssi[RF_PATH_C] - 100,
++		   dm_info->rssi[RF_PATH_D] - 100);
++	seq_printf(m, "[Rx EVM(dB)] = {-%d, -%d, -%d, -%d}\n",
+ 		   dm_info->rx_evm_dbm[RF_PATH_A],
+-		   dm_info->rx_evm_dbm[RF_PATH_B]);
+-	seq_printf(m, "[Rx SNR] = {%d, %d}\n",
++		   dm_info->rx_evm_dbm[RF_PATH_B],
++		   dm_info->rx_evm_dbm[RF_PATH_C],
++		   dm_info->rx_evm_dbm[RF_PATH_D]);
++	seq_printf(m, "[Rx SNR] = {%d, %d, %d, %d}\n",
+ 		   dm_info->rx_snr[RF_PATH_A],
+-		   dm_info->rx_snr[RF_PATH_B]);
+-	seq_printf(m, "[CFO_tail(KHz)] = {%d, %d}\n",
++		   dm_info->rx_snr[RF_PATH_B],
++		   dm_info->rx_snr[RF_PATH_C],
++		   dm_info->rx_snr[RF_PATH_D]);
++	seq_printf(m, "[CFO_tail(KHz)] = {%d, %d, %d, %d}\n",
+ 		   dm_info->cfo_tail[RF_PATH_A],
+-		   dm_info->cfo_tail[RF_PATH_B]);
++		   dm_info->cfo_tail[RF_PATH_B],
++		   dm_info->cfo_tail[RF_PATH_C],
++		   dm_info->cfo_tail[RF_PATH_D]);
+ 
+-	if (dm_info->curr_rx_rate >= DESC_RATE11M) {
++	if (dm_info->curr_rx_rate >= DESC_RATE6M) {
+ 		seq_puts(m, "[Rx Average Status]:\n");
+ 		seq_printf(m, " * OFDM, EVM: {-%d}, SNR: {%d}\n",
+ 			   (u8)ewma_evm_read(&ewma_evm[RTW_EVM_OFDM]),
+@@ -875,6 +883,13 @@ static int rtw_debugfs_get_phy_info(stru
+ 			   (u8)ewma_evm_read(&ewma_evm[RTW_EVM_2SS_B]),
+ 			   (u8)ewma_snr_read(&ewma_snr[RTW_SNR_2SS_A]),
+ 			   (u8)ewma_snr_read(&ewma_snr[RTW_SNR_2SS_B]));
++		seq_printf(m, " * 3SS, EVM: {-%d, -%d, -%d}, SNR: {%d, %d, %d}\n",
++			   (u8)ewma_evm_read(&ewma_evm[RTW_EVM_3SS_A]),
++			   (u8)ewma_evm_read(&ewma_evm[RTW_EVM_3SS_B]),
++			   (u8)ewma_evm_read(&ewma_evm[RTW_EVM_3SS_C]),
++			   (u8)ewma_snr_read(&ewma_snr[RTW_SNR_3SS_A]),
++			   (u8)ewma_snr_read(&ewma_snr[RTW_SNR_3SS_B]),
++			   (u8)ewma_snr_read(&ewma_snr[RTW_SNR_3SS_C]));
+ 	}
+ 
+ 	seq_puts(m, "[Rx Counter]:\n");
diff --git a/package/kernel/mac80211/patches/rtl/084-v6.15-wifi-rtw88-Extend-rtw_debugfs_get_tx_pwr_tbl-for-RTL.patch b/package/kernel/mac80211/patches/rtl/084-v6.15-wifi-rtw88-Extend-rtw_debugfs_get_tx_pwr_tbl-for-RTL.patch
new file mode 100644
index 0000000000..75fff03ed4
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/084-v6.15-wifi-rtw88-Extend-rtw_debugfs_get_tx_pwr_tbl-for-RTL.patch
@@ -0,0 +1,65 @@
+From c374281f828545b3698cf936b584249c2f9e40c5 Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Tue, 18 Feb 2025 01:32:49 +0200
+Subject: [PATCH] wifi: rtw88: Extend rtw_debugfs_get_tx_pwr_tbl() for
+ RTL8814AU
+
+Make it print the TX power details for all RF paths, not just A and B,
+and for all the rates supported by the chip, not just 1SS and 2SS
+rates.
+
+Also skip the RF paths and rates not supported by the chip.
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/ea65a978-a735-4c97-af82-d7fe26f95da1@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/debug.c | 20 +++++++++++++-------
+ 1 file changed, 13 insertions(+), 7 deletions(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/debug.c
++++ b/drivers/net/wireless/realtek/rtw88/debug.c
+@@ -692,9 +692,11 @@ static int rtw_debugfs_get_tx_pwr_tbl(st
+ {
+ 	struct rtw_debugfs_priv *debugfs_priv = m->private;
+ 	struct rtw_dev *rtwdev = debugfs_priv->rtwdev;
++	struct rtw_power_params pwr_param = {0};
+ 	struct rtw_hal *hal = &rtwdev->hal;
++	u8 nss = rtwdev->efuse.hw_cap.nss;
+ 	u8 path, rate, bw, ch, regd;
+-	struct rtw_power_params pwr_param = {0};
++	u8 max_ht_rate, max_rate;
+ 
+ 	mutex_lock(&rtwdev->mutex);
+ 	bw = hal->current_band_width;
+@@ -707,19 +709,23 @@ static int rtw_debugfs_get_tx_pwr_tbl(st
+ 	seq_printf(m, "%-4s %-10s %-9s %-9s (%-4s %-4s %-4s) %-4s\n",
+ 		   "path", "rate", "pwr", "base", "byr", "lmt", "sar", "rem");
+ 
++	max_ht_rate = DESC_RATEMCS0 + nss * 8 - 1;
++
++	if (rtwdev->chip->vht_supported)
++		max_rate = DESC_RATEVHT1SS_MCS0 + nss * 10 - 1;
++	else
++		max_rate = max_ht_rate;
++
+ 	mutex_lock(&hal->tx_power_mutex);
+-	for (path = RF_PATH_A; path <= RF_PATH_B; path++) {
++	for (path = RF_PATH_A; path < hal->rf_path_num; path++) {
+ 		/* there is no CCK rates used in 5G */
+ 		if (hal->current_band_type == RTW_BAND_5G)
+ 			rate = DESC_RATE6M;
+ 		else
+ 			rate = DESC_RATE1M;
+ 
+-		/* now, not support vht 3ss and vht 4ss*/
+-		for (; rate <= DESC_RATEVHT2SS_MCS9; rate++) {
+-			/* now, not support ht 3ss and ht 4ss*/
+-			if (rate > DESC_RATEMCS15 &&
+-			    rate < DESC_RATEVHT1SS_MCS0)
++		for (; rate <= max_rate; rate++) {
++			if (rate > max_ht_rate && rate <= DESC_RATEMCS31)
+ 				continue;
+ 
+ 			rtw_get_tx_power_params(rtwdev, path, rate, bw,
diff --git a/package/kernel/mac80211/patches/rtl/085-v6.15-wifi-rtw88-Add-some-definitions-for-RTL8814AU.patch b/package/kernel/mac80211/patches/rtl/085-v6.15-wifi-rtw88-Add-some-definitions-for-RTL8814AU.patch
new file mode 100644
index 0000000000..d14f1eae4e
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/085-v6.15-wifi-rtw88-Add-some-definitions-for-RTL8814AU.patch
@@ -0,0 +1,200 @@
+From 679ec431477cdb68d1cab068c008da0de7f842ef Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Fri, 7 Mar 2025 02:22:17 +0200
+Subject: [PATCH] wifi: rtw88: Add some definitions for RTL8814AU
+
+Add various register definitions which will be used by the new driver.
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/1dcb5abb-26f8-4db5-be36-057de56465e5@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/reg.h | 66 ++++++++++++++++++++++--
+ 1 file changed, 62 insertions(+), 4 deletions(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/reg.h
++++ b/drivers/net/wireless/realtek/rtw88/reg.h
+@@ -8,6 +8,7 @@
+ #define REG_SYS_FUNC_EN		0x0002
+ #define BIT_FEN_EN_25_1		BIT(13)
+ #define BIT_FEN_ELDR		BIT(12)
++#define BIT_FEN_PCIEA		BIT(6)
+ #define BIT_FEN_CPUEN		BIT(2)
+ #define BIT_FEN_USBA		BIT(2)
+ #define BIT_FEN_BB_GLB_RST	BIT(1)
+@@ -39,6 +40,9 @@
+ #define BIT_RF_RSTB		BIT(1)
+ #define BIT_RF_EN		BIT(0)
+ 
++#define REG_RF_CTRL1		0x0020
++#define REG_RF_CTRL2		0x0021
++
+ #define REG_AFE_CTRL1		0x0024
+ #define BIT_MAC_CLK_SEL		(BIT(20) | BIT(21))
+ #define REG_EFUSE_CTRL		0x0030
+@@ -73,6 +77,8 @@
+ #define BIT_BT_PTA_EN		BIT(5)
+ #define BIT_WLRFE_4_5_EN	BIT(2)
+ 
++#define REG_GPIO_PIN_CTRL	0x0044
++
+ #define REG_LED_CFG		0x004C
+ #define BIT_LNAON_SEL_EN	BIT(26)
+ #define BIT_PAPE_SEL_EN		BIT(25)
+@@ -110,6 +116,7 @@
+ #define BIT_SDIO_PAD_E5		BIT(18)
+ 
+ #define REG_RF_B_CTRL		0x76
++#define REG_RF_CTRL3		0x0076
+ 
+ #define REG_AFE_CTRL_4		0x0078
+ #define BIT_CK320M_AFE_EN	BIT(4)
+@@ -603,15 +610,25 @@
+ #define REG_CCA2ND		0x0838
+ #define REG_L1PKTH		0x0848
+ #define REG_CLKTRK		0x0860
++#define REG_CSI_MASK_SETTING1	0x0874
++#define REG_NBI_SETTING		0x087c
++#define BIT_NBI_ENABLE		BIT(13)
++#define REG_CSI_FIX_MASK0	0x0880
++#define REG_CSI_FIX_MASK1	0x0884
++#define REG_CSI_FIX_MASK6	0x0898
++#define REG_CSI_FIX_MASK7	0x089c
+ #define REG_ADCCLK		0x08AC
+ #define REG_HSSI_READ		0x08B0
+ #define REG_FPGA0_XCD_RF_PARA	0x08B4
+ #define REG_RX_MCS_LIMIT	0x08BC
+ #define REG_ADC160		0x08C4
++#define REG_DBGSEL		0x08fc
+ #define REG_ANTSEL_SW		0x0900
+ #define REG_DAC_RSTB		0x090c
++#define REG_PSD			0x0910
++#define BIT_PSD_INI		GENMASK(23, 22)
+ #define REG_SINGLE_TONE_CONT_TX	0x0914
+-
++#define REG_AGC_TABLE		0x0958
+ #define REG_RFE_CTRL_E		0x0974
+ #define REG_2ND_CCA_CTRL	0x0976
+ #define REG_IQK_COM00		0x0978
+@@ -621,10 +638,18 @@
+ 
+ #define REG_FAS			0x09a4
+ #define REG_RXSB		0x0a00
++#define BIT_RXSB_ANA_DIV	BIT(15)
+ #define REG_CCK_RX		0x0a04
+ #define REG_CCK_PD_TH		0x0a0a
+-
+-#define REG_CCK0_FAREPORT	0xa2c
++#define REG_PRECTRL		0x0a14
++#define BIT_DIS_CO_PATHSEL	BIT(7)
++#define BIT_IQ_WGT		GENMASK(9, 8)
++#define REG_CCA_MF		0x0a20
++#define BIT_MBC_WIN		GENMASK(5, 4)
++#define REG_CCK0_TX_FILTER1	0x0a20
++#define REG_CCK0_TX_FILTER2	0x0a24
++#define REG_CCK0_DEBUG_PORT	0x0a28
++#define REG_CCK0_FAREPORT	0x0a2c
+ #define BIT_CCK0_2RX		BIT(18)
+ #define BIT_CCK0_MRC		BIT(22)
+ #define REG_FA_CCK		0x0a5c
+@@ -643,10 +668,18 @@
+ #define DIS_DPD_RATEVHT2SS_MCS1	BIT(9)
+ #define DIS_DPD_RATEALL		GENMASK(9, 0)
+ 
++#define REG_CCA			0x0a70
++#define BIT_CCA_CO		BIT(7)
++#define REG_ANTSEL		0x0a74
++#define BIT_ANT_BYCO		BIT(8)
++#define REG_CCKTX		0x0a84
++#define BIT_CMB_CCA_2R		BIT(28)
++
+ #define REG_CNTRST		0x0b58
+ 
+ #define REG_3WIRE_SWA		0x0c00
+ #define REG_RX_IQC_AB_A		0x0c10
++#define REG_RX_IQC_CD_A		0x0c14
+ #define REG_TXSCALE_A		0x0c1c
+ #define BB_SWING_MASK		GENMASK(31, 21)
+ #define REG_TX_AGC_A_CCK_11_CCK_1		0xc20
+@@ -674,7 +707,7 @@
+ #define REG_LSSI_WRITE_A	0x0c90
+ #define REG_PREDISTA		0x0c90
+ #define REG_TXAGCIDX		0x0c94
+-
++#define REG_TX_AGC_A		0x0c94
+ #define REG_RFE_PINMUX_A	0x0cb0
+ #define REG_RFE_INV_A		0x0cb4
+ #define REG_RFE_CTRL8		0x0cb4
+@@ -683,6 +716,7 @@
+ #define DPDT_CTRL_PIN		0x77
+ #define RFE_INV_MASK		0x3ff00000
+ #define REG_RFECTL_A		0x0cb8
++#define REG_RFE_INV0		0x0cbc
+ #define REG_RFE_INV8		0x0cbd
+ #define BIT_MASK_RFE_INV89	GENMASK(1, 0)
+ #define REG_RFE_INV16		0x0cbe
+@@ -703,6 +737,7 @@
+ 
+ #define REG_3WIRE_SWB		0x0e00
+ #define REG_RX_IQC_AB_B		0x0e10
++#define REG_RX_IQC_CD_B		0x0e14
+ #define REG_TXSCALE_B		0x0e1c
+ #define REG_TX_AGC_B_CCK_11_CCK_1		0xe20
+ #define REG_TX_AGC_B_OFDM18_OFDM6		0xe24
+@@ -729,6 +764,7 @@
+ #define REG_LSSI_WRITE_B	0x0e90
+ #define REG_PREDISTB		0x0e90
+ #define REG_INIDLYB		0x0e94
++#define REG_TX_AGC_B		0x0e94
+ #define REG_RFE_PINMUX_B	0x0eb0
+ #define REG_RFE_INV_B		0x0eb4
+ #define REG_RFECTL_B		0x0eb8
+@@ -744,8 +780,11 @@
+ #define REG_CRC_HT		0x0f10
+ #define REG_CRC_OFDM		0x0f14
+ #define REG_FA_OFDM		0x0f48
++#define REG_DBGRPT		0x0fa0
+ #define REG_CCA_CCK		0x0fcc
+ 
++#define REG_SYS_CFG3_8814A	0x1000
++
+ #define REG_ANAPARSW_MAC_0	0x1010
+ #define BIT_CF_L_V2		GENMASK(29, 28)
+ 
+@@ -863,9 +902,27 @@
+ #define LTECOEX_WRITE_DATA REG_WL2LTECOEX_INDIRECT_ACCESS_WRITE_DATA_V1
+ #define LTECOEX_READ_DATA REG_WL2LTECOEX_INDIRECT_ACCESS_READ_DATA_V1
+ 
++#define REG_RX_IQC_AB_C		0x1810
++#define REG_RX_IQC_CD_C		0x1814
++#define REG_TXSCALE_C		0x181c
++#define REG_CK_MONHC		0x185c
++#define REG_AFE_PWR1_C		0x1860
+ #define REG_IGN_GNT_BT1	0x1860
++#define REG_TX_AGC_C		0x1894
++#define REG_RFE_PINMUX_C	0x18b4
+ 
+ #define REG_RFESEL_CTRL	0x1990
++#define REG_AGC_TBL		0x1998
++
++#define REG_RX_IQC_AB_D		0x1a10
++#define REG_RX_IQC_CD_D		0x1a14
++#define REG_TXSCALE_D		0x1a1c
++#define REG_CK_MONHD		0x1a5c
++#define REG_AFE_PWR1_D		0x1a60
++#define REG_TX_AGC_D		0x1a94
++#define REG_RFE_PINMUX_D	0x1ab4
++#define REG_RFE_INVSEL_D	0x1abc
++#define BIT_RFE_SELSW0_D	GENMASK(27, 20)
+ 
+ #define REG_NOMASK_TXBT	0x1ca7
+ #define REG_ANAPAR	0x1c30
+@@ -906,6 +963,7 @@
+ #define RF18_BAND_MASK	(BIT(16) | BIT(9) | BIT(8))
+ #define RF18_CHANNEL_MASK	(MASKBYTE0)
+ #define RF18_RFSI_MASK	(BIT(18) | BIT(17))
++#define RF_RCK1_V1	0x1c
+ #define RF_RCK		0x1d
+ #define RF_MODE_TABLE_ADDR	0x30
+ #define RF_MODE_TABLE_DATA0	0x31
diff --git a/package/kernel/mac80211/patches/rtl/086-v6.15-wifi-rtw88-Add-rtw8814a_table.c-part-1-2.patch b/package/kernel/mac80211/patches/rtl/086-v6.15-wifi-rtw88-Add-rtw8814a_table.c-part-1-2.patch
new file mode 100644
index 0000000000..6f42855c21
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/086-v6.15-wifi-rtw88-Add-rtw8814a_table.c-part-1-2.patch
@@ -0,0 +1,12573 @@
+From f4debfcb1b3c14a28ec157a41e0b98be72e554a0 Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Fri, 7 Mar 2025 02:23:22 +0200
+Subject: [PATCH] wifi: rtw88: Add rtw8814a_table.c (part 1/2)
+
+This contains various tables for initialising the RTL8814A, plus TX
+power limits.
+
+Split into two patches because they are big.
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/df0b8ceb-2c2f-4bda-906f-a05c7b4d424c@gmail.com
+---
+ .../wireless/realtek/rtw88/rtw8814a_table.c   | 12551 ++++++++++++++++
+ 1 file changed, 12551 insertions(+)
+ create mode 100644 drivers/net/wireless/realtek/rtw88/rtw8814a_table.c
+
+--- /dev/null
++++ b/drivers/net/wireless/realtek/rtw88/rtw8814a_table.c
+@@ -0,0 +1,12551 @@
++// SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause
++/* Copyright(c) 2025  Realtek Corporation
++ */
++
++#include "main.h"
++#include "phy.h"
++#include "rtw8814a_table.h"
++
++static const u32 rtw8814a_mac[] = {
++	0x010, 0x0000007C,
++	0x014, 0x000000DB,
++	0x016, 0x00000002,
++	0x073, 0x00000010,
++	0x420, 0x00000080,
++	0x421, 0x0000000F,
++	0x428, 0x0000000A,
++	0x429, 0x00000010,
++	0x430, 0x00000000,
++	0x431, 0x00000000,
++	0x432, 0x00000000,
++	0x433, 0x00000001,
++	0x434, 0x00000004,
++	0x435, 0x00000005,
++	0x436, 0x00000007,
++	0x437, 0x00000008,
++	0x43C, 0x00000004,
++	0x43D, 0x00000005,
++	0x43E, 0x00000007,
++	0x43F, 0x00000008,
++	0x440, 0x0000005D,
++	0x441, 0x00000001,
++	0x442, 0x00000000,
++	0x444, 0x00000010,
++	0x445, 0x000000F0,
++	0x446, 0x00000001,
++	0x447, 0x000000FE,
++	0x448, 0x00000000,
++	0x449, 0x00000000,
++	0x44A, 0x00000000,
++	0x44B, 0x00000040,
++	0x44C, 0x00000010,
++	0x44D, 0x000000F0,
++	0x44E, 0x0000003F,
++	0x44F, 0x00000000,
++	0x450, 0x00000000,
++	0x451, 0x00000000,
++	0x452, 0x00000000,
++	0x453, 0x00000040,
++	0x45E, 0x00000004,
++	0x49C, 0x00000010,
++	0x49D, 0x000000F0,
++	0x49E, 0x00000000,
++	0x49F, 0x00000006,
++	0x4A0, 0x000000E0,
++	0x4A1, 0x00000003,
++	0x4A2, 0x00000000,
++	0x4A3, 0x00000040,
++	0x4A4, 0x00000015,
++	0x4A5, 0x000000F0,
++	0x4A6, 0x00000000,
++	0x4A7, 0x00000006,
++	0x4A8, 0x000000E0,
++	0x4A9, 0x00000000,
++	0x4AA, 0x00000000,
++	0x4AB, 0x00000000,
++	0x7DA, 0x00000008,
++	0x1448, 0x00000006,
++	0x144A, 0x00000006,
++	0x144C, 0x00000006,
++	0x144E, 0x00000006,
++	0x4C8, 0x000000FF,
++	0x4C9, 0x00000008,
++	0x4CA, 0x0000003C,
++	0x4CB, 0x0000003C,
++	0x4CC, 0x000000FF,
++	0x4CD, 0x000000FF,
++	0x4CE, 0x00000001,
++	0x4CF, 0x00000008,
++	0x500, 0x00000026,
++	0x501, 0x000000A2,
++	0x502, 0x0000002F,
++	0x503, 0x00000000,
++	0x504, 0x00000028,
++	0x505, 0x000000A3,
++	0x506, 0x0000005E,
++	0x507, 0x00000000,
++	0x508, 0x0000002B,
++	0x509, 0x000000A4,
++	0x50A, 0x0000005E,
++	0x50B, 0x00000000,
++	0x50C, 0x0000004F,
++	0x50D, 0x000000A4,
++	0x50E, 0x00000000,
++	0x50F, 0x00000000,
++	0x512, 0x0000001C,
++	0x514, 0x0000000A,
++	0x516, 0x0000000A,
++	0x521, 0x0000002F,
++	0x525, 0x00000047,
++	0x550, 0x00000010,
++	0x551, 0x00000010,
++	0x559, 0x00000002,
++	0x55C, 0x00000064,
++	0x55D, 0x000000FF,
++	0x577, 0x00000003,
++	0x5BE, 0x00000064,
++	0x604, 0x00000001,
++	0x605, 0x00000030,
++	0x607, 0x00000001,
++	0x608, 0x0000000E,
++	0x609, 0x0000002A,
++	0x60A, 0x00000000,
++	0x60C, 0x00000018,
++	0x60D, 0x00000050,
++	0x6A0, 0x000000FF,
++	0x6A1, 0x000000FF,
++	0x6A2, 0x000000FF,
++	0x6A3, 0x000000FF,
++	0x6A4, 0x000000FF,
++	0x6A5, 0x000000FF,
++	0x6DE, 0x00000084,
++	0x620, 0x000000FF,
++	0x621, 0x000000FF,
++	0x622, 0x000000FF,
++	0x623, 0x000000FF,
++	0x624, 0x000000FF,
++	0x625, 0x000000FF,
++	0x626, 0x000000FF,
++	0x627, 0x000000FF,
++	0x638, 0x00000064,
++	0x63C, 0x0000000A,
++	0x63D, 0x0000000A,
++	0x63E, 0x0000000E,
++	0x63F, 0x0000000E,
++	0x640, 0x00000040,
++	0x642, 0x00000040,
++	0x643, 0x00000000,
++	0x652, 0x000000C8,
++	0x66E, 0x00000005,
++	0x700, 0x00000021,
++	0x701, 0x00000043,
++	0x702, 0x00000065,
++	0x703, 0x00000087,
++	0x708, 0x00000021,
++	0x709, 0x00000043,
++	0x70A, 0x00000065,
++	0x70B, 0x00000087,
++	0x718, 0x00000040,
++	0x7D5, 0x000000BC,
++	0x7D8, 0x00000028,
++	0x7D9, 0x00000000,
++	0x7DA, 0x0000000B,
++};
++
++RTW_DECL_TABLE_PHY_COND(rtw8814a_mac, rtw_phy_cfg_mac);
++
++static const u32 rtw8814a_agc[] = {
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFE000003,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFE000003,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFE000003,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFE000003,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFF000003,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFE000003,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFF000003,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFE000003,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFE000003,
++	0xA0000000,	0x00000000,
++	0x81C, 0xFF000003,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFE000003,
++	0x81C, 0xFD020003,
++	0x81C, 0xFC040003,
++	0x81C, 0xFB060003,
++	0x81C, 0xFA080003,
++	0x81C, 0xF90A0003,
++	0x81C, 0xF80C0003,
++	0x81C, 0xF70E0003,
++	0x81C, 0xF6100003,
++	0x81C, 0xF5120003,
++	0x81C, 0xF4140003,
++	0x81C, 0xF3160003,
++	0x81C, 0xF2180003,
++	0x81C, 0xF11A0003,
++	0x81C, 0xF01C0003,
++	0x81C, 0xEF1E0003,
++	0x81C, 0xEE200003,
++	0x81C, 0xED220003,
++	0x81C, 0xCF240003,
++	0x81C, 0xCE260003,
++	0x81C, 0xCD280003,
++	0x81C, 0xCC2A0003,
++	0x81C, 0xCB2C0003,
++	0x81C, 0xCA2E0003,
++	0x81C, 0xC9300003,
++	0x81C, 0xC8320003,
++	0x81C, 0xC7340003,
++	0x81C, 0xC6360003,
++	0x81C, 0xC5380003,
++	0x81C, 0xC43A0003,
++	0x81C, 0xA63C0003,
++	0x81C, 0xA53E0003,
++	0x81C, 0xA4400003,
++	0x81C, 0xA3420003,
++	0x81C, 0xA2440003,
++	0x81C, 0xA1460003,
++	0x81C, 0x86480003,
++	0x81C, 0x854A0003,
++	0x81C, 0x844C0003,
++	0x81C, 0x834E0003,
++	0x81C, 0x66500003,
++	0x81C, 0x65520003,
++	0x81C, 0x64540003,
++	0x81C, 0x63560003,
++	0x81C, 0x62580003,
++	0x81C, 0x615A0003,
++	0x81C, 0x435C0003,
++	0x81C, 0x425E0003,
++	0x81C, 0x41600003,
++	0x81C, 0x27620003,
++	0x81C, 0x26640003,
++	0x81C, 0x25660003,
++	0x81C, 0x24680003,
++	0x81C, 0x236A0003,
++	0x81C, 0x226C0003,
++	0x81C, 0x216E0003,
++	0x81C, 0x21700003,
++	0x81C, 0x21720003,
++	0x81C, 0x21740003,
++	0x81C, 0x21760003,
++	0x81C, 0x21780003,
++	0x81C, 0x217A0003,
++	0x81C, 0x217C0003,
++	0x81C, 0x217E0003,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFF000003,
++	0x81C, 0xFE020003,
++	0x81C, 0xFD040003,
++	0x81C, 0xFC060003,
++	0x81C, 0xFB080003,
++	0x81C, 0xFA0A0003,
++	0x81C, 0xF90C0003,
++	0x81C, 0xF80E0003,
++	0x81C, 0xF7100003,
++	0x81C, 0xF6120003,
++	0x81C, 0xF5140003,
++	0x81C, 0xF4160003,
++	0x81C, 0xF3180003,
++	0x81C, 0xF21A0003,
++	0x81C, 0xF11C0003,
++	0x81C, 0xF01E0003,
++	0x81C, 0xEF200003,
++	0x81C, 0xEE220003,
++	0x81C, 0xED240003,
++	0x81C, 0xEC260003,
++	0x81C, 0xEB280003,
++	0x81C, 0xEA2A0003,
++	0x81C, 0xE92C0003,
++	0x81C, 0xE82E0003,
++	0x81C, 0xE7300003,
++	0x81C, 0xE6320003,
++	0x81C, 0xE5340003,
++	0x81C, 0xE4360003,
++	0x81C, 0xE3380003,
++	0x81C, 0xC53A0003,
++	0x81C, 0xC43C0003,
++	0x81C, 0xC33E0003,
++	0x81C, 0xC2400003,
++	0x81C, 0xC1420003,
++	0x81C, 0xA8440003,
++	0x81C, 0xA7460003,
++	0x81C, 0xA6480003,
++	0x81C, 0xA54A0003,
++	0x81C, 0xA44C0003,
++	0x81C, 0xA34E0003,
++	0x81C, 0xA2500003,
++	0x81C, 0x65520003,
++	0x81C, 0x64540003,
++	0x81C, 0x63560003,
++	0x81C, 0x62580003,
++	0x81C, 0x615A0003,
++	0x81C, 0x475C0003,
++	0x81C, 0x465E0003,
++	0x81C, 0x45600003,
++	0x81C, 0x44620003,
++	0x81C, 0x43640003,
++	0x81C, 0x42660003,
++	0x81C, 0x41680003,
++	0x81C, 0x416A0003,
++	0x81C, 0x416C0003,
++	0x81C, 0x416E0003,
++	0x81C, 0x41700003,
++	0x81C, 0x41720003,
++	0x81C, 0x41740003,
++	0x81C, 0x41760003,
++	0x81C, 0x41780003,
++	0x81C, 0x417A0003,
++	0x81C, 0x417C0003,
++	0x81C, 0x417E0003,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFE000003,
++	0x81C, 0xFD020003,
++	0x81C, 0xFC040003,
++	0x81C, 0xFB060003,
++	0x81C, 0xFA080003,
++	0x81C, 0xF90A0003,
++	0x81C, 0xF80C0003,
++	0x81C, 0xF70E0003,
++	0x81C, 0xF6100003,
++	0x81C, 0xF5120003,
++	0x81C, 0xF4140003,
++	0x81C, 0xF3160003,
++	0x81C, 0xF2180003,
++	0x81C, 0xF11A0003,
++	0x81C, 0xF01C0003,
++	0x81C, 0xEF1E0003,
++	0x81C, 0xEE200003,
++	0x81C, 0xED220003,
++	0x81C, 0xEC240003,
++	0x81C, 0xEB260003,
++	0x81C, 0xEA280003,
++	0x81C, 0xE92A0003,
++	0x81C, 0xE82C0003,
++	0x81C, 0xE72E0003,
++	0x81C, 0xE6300003,
++	0x81C, 0xE5320003,
++	0x81C, 0xE4340003,
++	0x81C, 0xE3360003,
++	0x81C, 0xC6380003,
++	0x81C, 0xC53A0003,
++	0x81C, 0xC43C0003,
++	0x81C, 0xC33E0003,
++	0x81C, 0xC2400003,
++	0x81C, 0xA9420003,
++	0x81C, 0xA8440003,
++	0x81C, 0xA7460003,
++	0x81C, 0xA6480003,
++	0x81C, 0xA54A0003,
++	0x81C, 0xA44C0003,
++	0x81C, 0xA34E0003,
++	0x81C, 0x66500003,
++	0x81C, 0x65520003,
++	0x81C, 0x64540003,
++	0x81C, 0x63560003,
++	0x81C, 0x49580003,
++	0x81C, 0x485A0003,
++	0x81C, 0x475C0003,
++	0x81C, 0x465E0003,
++	0x81C, 0x45600003,
++	0x81C, 0x44620003,
++	0x81C, 0x43640003,
++	0x81C, 0x42660003,
++	0x81C, 0x41680003,
++	0x81C, 0x416A0003,
++	0x81C, 0x416C0003,
++	0x81C, 0x416E0003,
++	0x81C, 0x41700003,
++	0x81C, 0x41720003,
++	0x81C, 0x41740003,
++	0x81C, 0x41760003,
++	0x81C, 0x41780003,
++	0x81C, 0x417A0003,
++	0x81C, 0x417C0003,
++	0x81C, 0x417E0003,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFF000003,
++	0x81C, 0xFE020003,
++	0x81C, 0xFD040003,
++	0x81C, 0xFC060003,
++	0x81C, 0xFB080003,
++	0x81C, 0xFA0A0003,
++	0x81C, 0xF90C0003,
++	0x81C, 0xF80E0003,
++	0x81C, 0xF7100003,
++	0x81C, 0xF6120003,
++	0x81C, 0xF5140003,
++	0x81C, 0xF4160003,
++	0x81C, 0xF3180003,
++	0x81C, 0xF21A0003,
++	0x81C, 0xF11C0003,
++	0x81C, 0xF01E0003,
++	0x81C, 0xEF200003,
++	0x81C, 0xEE220003,
++	0x81C, 0xED240003,
++	0x81C, 0xEC260003,
++	0x81C, 0xEB280003,
++	0x81C, 0xEA2A0003,
++	0x81C, 0xE92C0003,
++	0x81C, 0xE82E0003,
++	0x81C, 0xE7300003,
++	0x81C, 0xE6320003,
++	0x81C, 0xE5340003,
++	0x81C, 0xE4360003,
++	0x81C, 0xE3380003,
++	0x81C, 0xC53A0003,
++	0x81C, 0xC43C0003,
++	0x81C, 0xC33E0003,
++	0x81C, 0xC2400003,
++	0x81C, 0xC1420003,
++	0x81C, 0xA8440003,
++	0x81C, 0xA7460003,
++	0x81C, 0xA6480003,
++	0x81C, 0xA54A0003,
++	0x81C, 0xA44C0003,
++	0x81C, 0xA34E0003,
++	0x81C, 0xA2500003,
++	0x81C, 0x65520003,
++	0x81C, 0x64540003,
++	0x81C, 0x63560003,
++	0x81C, 0x62580003,
++	0x81C, 0x615A0003,
++	0x81C, 0x475C0003,
++	0x81C, 0x465E0003,
++	0x81C, 0x45600003,
++	0x81C, 0x44620003,
++	0x81C, 0x43640003,
++	0x81C, 0x42660003,
++	0x81C, 0x41680003,
++	0x81C, 0x416A0003,
++	0x81C, 0x416C0003,
++	0x81C, 0x416E0003,
++	0x81C, 0x41700003,
++	0x81C, 0x41720003,
++	0x81C, 0x41740003,
++	0x81C, 0x41760003,
++	0x81C, 0x41780003,
++	0x81C, 0x417A0003,
++	0x81C, 0x417C0003,
++	0x81C, 0x417E0003,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFE000003,
++	0x81C, 0xFD020003,
++	0x81C, 0xFC040003,
++	0x81C, 0xFB060003,
++	0x81C, 0xFA080003,
++	0x81C, 0xF90A0003,
++	0x81C, 0xF80C0003,
++	0x81C, 0xF70E0003,
++	0x81C, 0xF6100003,
++	0x81C, 0xF5120003,
++	0x81C, 0xF4140003,
++	0x81C, 0xF3160003,
++	0x81C, 0xF2180003,
++	0x81C, 0xF11A0003,
++	0x81C, 0xF01C0003,
++	0x81C, 0xEF1E0003,
++	0x81C, 0xEE200003,
++	0x81C, 0xED220003,
++	0x81C, 0xEC240003,
++	0x81C, 0xEB260003,
++	0x81C, 0xEA280003,
++	0x81C, 0xE92A0003,
++	0x81C, 0xE82C0003,
++	0x81C, 0xE72E0003,
++	0x81C, 0xE6300003,
++	0x81C, 0xE5320003,
++	0x81C, 0xE4340003,
++	0x81C, 0xE3360003,
++	0x81C, 0xC6380003,
++	0x81C, 0xC53A0003,
++	0x81C, 0xC43C0003,
++	0x81C, 0xC33E0003,
++	0x81C, 0xC2400003,
++	0x81C, 0xA9420003,
++	0x81C, 0xA8440003,
++	0x81C, 0xA7460003,
++	0x81C, 0xA6480003,
++	0x81C, 0xA54A0003,
++	0x81C, 0xA44C0003,
++	0x81C, 0xA34E0003,
++	0x81C, 0x66500003,
++	0x81C, 0x65520003,
++	0x81C, 0x64540003,
++	0x81C, 0x63560003,
++	0x81C, 0x49580003,
++	0x81C, 0x485A0003,
++	0x81C, 0x475C0003,
++	0x81C, 0x465E0003,
++	0x81C, 0x45600003,
++	0x81C, 0x44620003,
++	0x81C, 0x43640003,
++	0x81C, 0x42660003,
++	0x81C, 0x41680003,
++	0x81C, 0x416A0003,
++	0x81C, 0x416C0003,
++	0x81C, 0x416E0003,
++	0x81C, 0x41700003,
++	0x81C, 0x41720003,
++	0x81C, 0x41740003,
++	0x81C, 0x41760003,
++	0x81C, 0x41780003,
++	0x81C, 0x417A0003,
++	0x81C, 0x417C0003,
++	0x81C, 0x417E0003,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xDF000003,
++	0x81C, 0xDF020003,
++	0x81C, 0xDF040003,
++	0x81C, 0xDE060003,
++	0x81C, 0xDD080003,
++	0x81C, 0xDC0A0003,
++	0x81C, 0xDB0C0003,
++	0x81C, 0xDA0E0003,
++	0x81C, 0xD9100003,
++	0x81C, 0xD8120003,
++	0x81C, 0xD7140003,
++	0x81C, 0xD6160003,
++	0x81C, 0xD5180003,
++	0x81C, 0xD41A0003,
++	0x81C, 0xD31C0003,
++	0x81C, 0xD21E0003,
++	0x81C, 0xD1200003,
++	0x81C, 0xD0220003,
++	0x81C, 0xCF240003,
++	0x81C, 0xCE260003,
++	0x81C, 0xCD280003,
++	0x81C, 0xCC2A0003,
++	0x81C, 0xCB2C0003,
++	0x81C, 0xCA2E0003,
++	0x81C, 0xC9300003,
++	0x81C, 0xC8320003,
++	0x81C, 0xC7340003,
++	0x81C, 0xC6360003,
++	0x81C, 0xC5380003,
++	0x81C, 0xA73A0003,
++	0x81C, 0xA63C0003,
++	0x81C, 0xA53E0003,
++	0x81C, 0xA4400003,
++	0x81C, 0xA3420003,
++	0x81C, 0xA2440003,
++	0x81C, 0x87460003,
++	0x81C, 0x86480003,
++	0x81C, 0x854A0003,
++	0x81C, 0x844C0003,
++	0x81C, 0x834E0003,
++	0x81C, 0x82500003,
++	0x81C, 0x81520003,
++	0x81C, 0x64540003,
++	0x81C, 0x63560003,
++	0x81C, 0x62580003,
++	0x81C, 0x615A0003,
++	0x81C, 0x445C0003,
++	0x81C, 0x435E0003,
++	0x81C, 0x42600003,
++	0x81C, 0x41620003,
++	0x81C, 0x27640003,
++	0x81C, 0x26660003,
++	0x81C, 0x25680003,
++	0x81C, 0x246A0003,
++	0x81C, 0x236C0003,
++	0x81C, 0x226E0003,
++	0x81C, 0x21700003,
++	0x81C, 0x21720003,
++	0x81C, 0x21740003,
++	0x81C, 0x21760003,
++	0x81C, 0x21780003,
++	0x81C, 0x217A0003,
++	0x81C, 0x217C0003,
++	0x81C, 0x217E0003,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFF000003,
++	0x81C, 0xFE020003,
++	0x81C, 0xFD040003,
++	0x81C, 0xFC060003,
++	0x81C, 0xFB080003,
++	0x81C, 0xFA0A0003,
++	0x81C, 0xF90C0003,
++	0x81C, 0xF80E0003,
++	0x81C, 0xF7100003,
++	0x81C, 0xF6120003,
++	0x81C, 0xF5140003,
++	0x81C, 0xF4160003,
++	0x81C, 0xF3180003,
++	0x81C, 0xF21A0003,
++	0x81C, 0xF11C0003,
++	0x81C, 0xF01E0003,
++	0x81C, 0xEF200003,
++	0x81C, 0xEE220003,
++	0x81C, 0xED240003,
++	0x81C, 0xEC260003,
++	0x81C, 0xEB280003,
++	0x81C, 0xEA2A0003,
++	0x81C, 0xE92C0003,
++	0x81C, 0xE82E0003,
++	0x81C, 0xE7300003,
++	0x81C, 0xE6320003,
++	0x81C, 0xE5340003,
++	0x81C, 0xE4360003,
++	0x81C, 0xE3380003,
++	0x81C, 0xC53A0003,
++	0x81C, 0xC43C0003,
++	0x81C, 0xC33E0003,
++	0x81C, 0xC2400003,
++	0x81C, 0xC1420003,
++	0x81C, 0xA8440003,
++	0x81C, 0xA7460003,
++	0x81C, 0xA6480003,
++	0x81C, 0xA54A0003,
++	0x81C, 0xA44C0003,
++	0x81C, 0xA34E0003,
++	0x81C, 0xA2500003,
++	0x81C, 0x65520003,
++	0x81C, 0x64540003,
++	0x81C, 0x63560003,
++	0x81C, 0x62580003,
++	0x81C, 0x615A0003,
++	0x81C, 0x475C0003,
++	0x81C, 0x465E0003,
++	0x81C, 0x45600003,
++	0x81C, 0x44620003,
++	0x81C, 0x43640003,
++	0x81C, 0x42660003,
++	0x81C, 0x41680003,
++	0x81C, 0x416A0003,
++	0x81C, 0x416C0003,
++	0x81C, 0x416E0003,
++	0x81C, 0x41700003,
++	0x81C, 0x41720003,
++	0x81C, 0x41740003,
++	0x81C, 0x41760003,
++	0x81C, 0x41780003,
++	0x81C, 0x417A0003,
++	0x81C, 0x417C0003,
++	0x81C, 0x417E0003,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xDF000003,
++	0x81C, 0xDF020003,
++	0x81C, 0xDF040003,
++	0x81C, 0xDE060003,
++	0x81C, 0xDD080003,
++	0x81C, 0xDC0A0003,
++	0x81C, 0xDB0C0003,
++	0x81C, 0xDA0E0003,
++	0x81C, 0xD9100003,
++	0x81C, 0xD8120003,
++	0x81C, 0xD7140003,
++	0x81C, 0xD6160003,
++	0x81C, 0xD5180003,
++	0x81C, 0xD41A0003,
++	0x81C, 0xD31C0003,
++	0x81C, 0xD21E0003,
++	0x81C, 0xD1200003,
++	0x81C, 0xD0220003,
++	0x81C, 0xCF240003,
++	0x81C, 0xCE260003,
++	0x81C, 0xCD280003,
++	0x81C, 0xCC2A0003,
++	0x81C, 0xCB2C0003,
++	0x81C, 0xCA2E0003,
++	0x81C, 0xC9300003,
++	0x81C, 0xC8320003,
++	0x81C, 0xC7340003,
++	0x81C, 0xC6360003,
++	0x81C, 0xC5380003,
++	0x81C, 0xA73A0003,
++	0x81C, 0xA63C0003,
++	0x81C, 0xA53E0003,
++	0x81C, 0xA4400003,
++	0x81C, 0xA3420003,
++	0x81C, 0xA2440003,
++	0x81C, 0x87460003,
++	0x81C, 0x86480003,
++	0x81C, 0x854A0003,
++	0x81C, 0x844C0003,
++	0x81C, 0x834E0003,
++	0x81C, 0x82500003,
++	0x81C, 0x81520003,
++	0x81C, 0x64540003,
++	0x81C, 0x63560003,
++	0x81C, 0x62580003,
++	0x81C, 0x615A0003,
++	0x81C, 0x445C0003,
++	0x81C, 0x435E0003,
++	0x81C, 0x42600003,
++	0x81C, 0x41620003,
++	0x81C, 0x27640003,
++	0x81C, 0x26660003,
++	0x81C, 0x25680003,
++	0x81C, 0x246A0003,
++	0x81C, 0x236C0003,
++	0x81C, 0x226E0003,
++	0x81C, 0x21700003,
++	0x81C, 0x21720003,
++	0x81C, 0x21740003,
++	0x81C, 0x21760003,
++	0x81C, 0x21780003,
++	0x81C, 0x217A0003,
++	0x81C, 0x217C0003,
++	0x81C, 0x217E0003,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFE000003,
++	0x81C, 0xFE020003,
++	0x81C, 0xFD040003,
++	0x81C, 0xFC060003,
++	0x81C, 0xFB080003,
++	0x81C, 0xFA0A0003,
++	0x81C, 0xF90C0003,
++	0x81C, 0xF80E0003,
++	0x81C, 0xF7100003,
++	0x81C, 0xF6120003,
++	0x81C, 0xF5140003,
++	0x81C, 0xF4160003,
++	0x81C, 0xF3180003,
++	0x81C, 0xF21A0003,
++	0x81C, 0xF11C0003,
++	0x81C, 0xF01E0003,
++	0x81C, 0xEF200003,
++	0x81C, 0xEE220003,
++	0x81C, 0xED240003,
++	0x81C, 0x0F260003,
++	0x81C, 0x0E280003,
++	0x81C, 0x0D2A0003,
++	0x81C, 0x0C2C0003,
++	0x81C, 0x0B2E0003,
++	0x81C, 0x0A300003,
++	0x81C, 0x09320003,
++	0x81C, 0x08340003,
++	0x81C, 0x07360003,
++	0x81C, 0x06380003,
++	0x81C, 0x053A0003,
++	0x81C, 0x043C0003,
++	0x81C, 0x033E0003,
++	0x81C, 0x23400003,
++	0x81C, 0x22420003,
++	0x81C, 0xA8440003,
++	0x81C, 0xA7460003,
++	0x81C, 0xA6480003,
++	0x81C, 0xA54A0003,
++	0x81C, 0xA44C0003,
++	0x81C, 0x684E0003,
++	0x81C, 0x67500003,
++	0x81C, 0x66520003,
++	0x81C, 0x65540003,
++	0x81C, 0x64560003,
++	0x81C, 0x63580003,
++	0x81C, 0x625A0003,
++	0x81C, 0x615C0003,
++	0x81C, 0x475E0003,
++	0x81C, 0x46600003,
++	0x81C, 0x45620003,
++	0x81C, 0x44640003,
++	0x81C, 0x43660003,
++	0x81C, 0x42680003,
++	0x81C, 0x416A0003,
++	0x81C, 0x416C0003,
++	0x81C, 0x416E0003,
++	0x81C, 0x41700003,
++	0x81C, 0x41720003,
++	0x81C, 0x41740003,
++	0x81C, 0x41760003,
++	0x81C, 0x41780003,
++	0x81C, 0x417A0003,
++	0x81C, 0x417C0003,
++	0x81C, 0x417E0003,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFE000003,
++	0x81C, 0xFE020003,
++	0x81C, 0xFD040003,
++	0x81C, 0xFC060003,
++	0x81C, 0xFB080003,
++	0x81C, 0xFA0A0003,
++	0x81C, 0xF90C0003,
++	0x81C, 0xF80E0003,
++	0x81C, 0xF7100003,
++	0x81C, 0xF6120003,
++	0x81C, 0xF5140003,
++	0x81C, 0xF4160003,
++	0x81C, 0xF3180003,
++	0x81C, 0xF21A0003,
++	0x81C, 0xF11C0003,
++	0x81C, 0xF01E0003,
++	0x81C, 0xEF200003,
++	0x81C, 0xEE220003,
++	0x81C, 0xED240003,
++	0x81C, 0xEC260003,
++	0x81C, 0xEB280003,
++	0x81C, 0xEA2A0003,
++	0x81C, 0xE92C0003,
++	0x81C, 0xE72E0003,
++	0x81C, 0xE6300003,
++	0x81C, 0xE5320003,
++	0x81C, 0x08340003,
++	0x81C, 0x07360003,
++	0x81C, 0x06380003,
++	0x81C, 0x053A0003,
++	0x81C, 0x043C0003,
++	0x81C, 0x033E0003,
++	0x81C, 0x02400003,
++	0x81C, 0xA9420003,
++	0x81C, 0xA8440003,
++	0x81C, 0xA7460003,
++	0x81C, 0xA6480003,
++	0x81C, 0xA54A0003,
++	0x81C, 0x684C0003,
++	0x81C, 0x674E0003,
++	0x81C, 0x66500003,
++	0x81C, 0x65520003,
++	0x81C, 0x64540003,
++	0x81C, 0x63560003,
++	0x81C, 0x62580003,
++	0x81C, 0x615A0003,
++	0x81C, 0x475C0003,
++	0x81C, 0x465E0003,
++	0x81C, 0x45600003,
++	0x81C, 0x44620003,
++	0x81C, 0x43640003,
++	0x81C, 0x42660003,
++	0x81C, 0x41680003,
++	0x81C, 0x416A0003,
++	0x81C, 0x416C0003,
++	0x81C, 0x416E0003,
++	0x81C, 0x41700003,
++	0x81C, 0x41720003,
++	0x81C, 0x41740003,
++	0x81C, 0x41760003,
++	0x81C, 0x41780003,
++	0x81C, 0x417A0003,
++	0x81C, 0x417C0003,
++	0x81C, 0x417E0003,
++	0xA0000000,	0x00000000,
++	0x81C, 0xFE000003,
++	0x81C, 0xFD020003,
++	0x81C, 0xFC040003,
++	0x81C, 0xFB060003,
++	0x81C, 0xFA080003,
++	0x81C, 0xF90A0003,
++	0x81C, 0xF80C0003,
++	0x81C, 0xF70E0003,
++	0x81C, 0xF6100003,
++	0x81C, 0xF5120003,
++	0x81C, 0xF4140003,
++	0x81C, 0xF3160003,
++	0x81C, 0xF2180003,
++	0x81C, 0xF11A0003,
++	0x81C, 0xF01C0003,
++	0x81C, 0xEF1E0003,
++	0x81C, 0xEE200003,
++	0x81C, 0xED220003,
++	0x81C, 0xCF240003,
++	0x81C, 0xCE260003,
++	0x81C, 0xCD280003,
++	0x81C, 0xCC2A0003,
++	0x81C, 0xCB2C0003,
++	0x81C, 0xCA2E0003,
++	0x81C, 0xC9300003,
++	0x81C, 0xC8320003,
++	0x81C, 0xC7340003,
++	0x81C, 0xC6360003,
++	0x81C, 0xC5380003,
++	0x81C, 0xC43A0003,
++	0x81C, 0xA63C0003,
++	0x81C, 0xA53E0003,
++	0x81C, 0xA4400003,
++	0x81C, 0xA3420003,
++	0x81C, 0xA2440003,
++	0x81C, 0xA1460003,
++	0x81C, 0x86480003,
++	0x81C, 0x854A0003,
++	0x81C, 0x844C0003,
++	0x81C, 0x834E0003,
++	0x81C, 0x66500003,
++	0x81C, 0x65520003,
++	0x81C, 0x64540003,
++	0x81C, 0x63560003,
++	0x81C, 0x62580003,
++	0x81C, 0x615A0003,
++	0x81C, 0x435C0003,
++	0x81C, 0x425E0003,
++	0x81C, 0x41600003,
++	0x81C, 0x27620003,
++	0x81C, 0x26640003,
++	0x81C, 0x25660003,
++	0x81C, 0x24680003,
++	0x81C, 0x236A0003,
++	0x81C, 0x226C0003,
++	0x81C, 0x216E0003,
++	0x81C, 0x21700003,
++	0x81C, 0x21720003,
++	0x81C, 0x21740003,
++	0x81C, 0x21760003,
++	0x81C, 0x21780003,
++	0x81C, 0x217A0003,
++	0x81C, 0x217C0003,
++	0x81C, 0x217E0003,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xF9000103,
++	0x81C, 0xF8020103,
++	0x81C, 0xF7040103,
++	0x81C, 0xF6060103,
++	0x81C, 0xF5080103,
++	0x81C, 0xF40A0103,
++	0x81C, 0xF30C0103,
++	0x81C, 0xF20E0103,
++	0x81C, 0xF1100103,
++	0x81C, 0xF0120103,
++	0x81C, 0xEF140103,
++	0x81C, 0xEE160103,
++	0x81C, 0xED180103,
++	0x81C, 0xEC1A0103,
++	0x81C, 0xEB1C0103,
++	0x81C, 0xEA1E0103,
++	0x81C, 0xE9200103,
++	0x81C, 0xE8220103,
++	0x81C, 0xE7240103,
++	0x81C, 0xE6260103,
++	0x81C, 0xE5280103,
++	0x81C, 0xE42A0103,
++	0x81C, 0xE32C0103,
++	0x81C, 0xC32E0103,
++	0x81C, 0xC2300103,
++	0x81C, 0xC1320103,
++	0x81C, 0xA5340103,
++	0x81C, 0xA4360103,
++	0x81C, 0xA3380103,
++	0x81C, 0xA23A0103,
++	0x81C, 0xA13C0103,
++	0x81C, 0x843E0103,
++	0x81C, 0x83400103,
++	0x81C, 0x82420103,
++	0x81C, 0x81440103,
++	0x81C, 0x64460103,
++	0x81C, 0x63480103,
++	0x81C, 0x624A0103,
++	0x81C, 0x614C0103,
++	0x81C, 0x444E0103,
++	0x81C, 0x43500103,
++	0x81C, 0x42520103,
++	0x81C, 0x41540103,
++	0x81C, 0x25560103,
++	0x81C, 0x24580103,
++	0x81C, 0x235A0103,
++	0x81C, 0x065C0103,
++	0x81C, 0x055E0103,
++	0x81C, 0x04600103,
++	0x81C, 0x03620103,
++	0x81C, 0x02640103,
++	0x81C, 0x01660103,
++	0x81C, 0x01680103,
++	0x81C, 0x016A0103,
++	0x81C, 0x016C0103,
++	0x81C, 0x016E0103,
++	0x81C, 0x01700103,
++	0x81C, 0x01720103,
++	0x81C, 0x01740103,
++	0x81C, 0x01760103,
++	0x81C, 0x01780103,
++	0x81C, 0x017A0103,
++	0x81C, 0x017C0103,
++	0x81C, 0x017E0103,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xF8000103,
++	0x81C, 0xF7020103,
++	0x81C, 0xF6040103,
++	0x81C, 0xF5060103,
++	0x81C, 0xF4080103,
++	0x81C, 0xF30A0103,
++	0x81C, 0xF20C0103,
++	0x81C, 0xF10E0103,
++	0x81C, 0xF0100103,
++	0x81C, 0xEF120103,
++	0x81C, 0xEE140103,
++	0x81C, 0xED160103,
++	0x81C, 0xEC180103,
++	0x81C, 0xEB1A0103,
++	0x81C, 0xEA1C0103,
++	0x81C, 0xE91E0103,
++	0x81C, 0xE8200103,
++	0x81C, 0xE7220103,
++	0x81C, 0xE6240103,
++	0x81C, 0xE5260103,
++	0x81C, 0xE4280103,
++	0x81C, 0xE32A0103,
++	0x81C, 0xE22C0103,
++	0x81C, 0xE12E0103,
++	0x81C, 0xA5300103,
++	0x81C, 0xA4320103,
++	0x81C, 0xA3340103,
++	0x81C, 0xA2360103,
++	0x81C, 0xA1380103,
++	0x81C, 0x843A0103,
++	0x81C, 0x833C0103,
++	0x81C, 0x823E0103,
++	0x81C, 0x81400103,
++	0x81C, 0x64420103,
++	0x81C, 0x63440103,
++	0x81C, 0x62460103,
++	0x81C, 0x61480103,
++	0x81C, 0x454A0103,
++	0x81C, 0x444C0103,
++	0x81C, 0x434E0103,
++	0x81C, 0x42500103,
++	0x81C, 0x25520103,
++	0x81C, 0x24540103,
++	0x81C, 0x23560103,
++	0x81C, 0x06580103,
++	0x81C, 0x055A0103,
++	0x81C, 0x045C0103,
++	0x81C, 0x035E0103,
++	0x81C, 0x02600103,
++	0x81C, 0x01620103,
++	0x81C, 0x01640103,
++	0x81C, 0x01660103,
++	0x81C, 0x01680103,
++	0x81C, 0x016A0103,
++	0x81C, 0x016C0103,
++	0x81C, 0x016E0103,
++	0x81C, 0x01700103,
++	0x81C, 0x01720103,
++	0x81C, 0x01740103,
++	0x81C, 0x01760103,
++	0x81C, 0x01780103,
++	0x81C, 0x017A0103,
++	0x81C, 0x017C0103,
++	0x81C, 0x017E0103,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFC000103,
++	0x81C, 0xFB020103,
++	0x81C, 0xFA040103,
++	0x81C, 0xF9060103,
++	0x81C, 0xF8080103,
++	0x81C, 0xF70A0103,
++	0x81C, 0xF60C0103,
++	0x81C, 0xF50E0103,
++	0x81C, 0xF4100103,
++	0x81C, 0xF3120103,
++	0x81C, 0xF2140103,
++	0x81C, 0xF1160103,
++	0x81C, 0xF0180103,
++	0x81C, 0xEF1A0103,
++	0x81C, 0xEE1C0103,
++	0x81C, 0xED1E0103,
++	0x81C, 0xEC200103,
++	0x81C, 0xEB220103,
++	0x81C, 0xEA240103,
++	0x81C, 0xE9260103,
++	0x81C, 0xE8280103,
++	0x81C, 0xE72A0103,
++	0x81C, 0xE62C0103,
++	0x81C, 0xE52E0103,
++	0x81C, 0xE4300103,
++	0x81C, 0xE3320103,
++	0x81C, 0xE2340103,
++	0x81C, 0xE1360103,
++	0x81C, 0x87380103,
++	0x81C, 0x863A0103,
++	0x81C, 0x853C0103,
++	0x81C, 0x843E0103,
++	0x81C, 0x83400103,
++	0x81C, 0x82420103,
++	0x81C, 0x81440103,
++	0x81C, 0x64460103,
++	0x81C, 0x63480103,
++	0x81C, 0x624A0103,
++	0x81C, 0x464C0103,
++	0x81C, 0x454E0103,
++	0x81C, 0x44500103,
++	0x81C, 0x43520103,
++	0x81C, 0x26540103,
++	0x81C, 0x25560103,
++	0x81C, 0x24580103,
++	0x81C, 0x075A0103,
++	0x81C, 0x065C0103,
++	0x81C, 0x055E0103,
++	0x81C, 0x04600103,
++	0x81C, 0x03620103,
++	0x81C, 0x02640103,
++	0x81C, 0x01660103,
++	0x81C, 0x01680103,
++	0x81C, 0x016A0103,
++	0x81C, 0x016C0103,
++	0x81C, 0x016E0103,
++	0x81C, 0x01700103,
++	0x81C, 0x01720103,
++	0x81C, 0x01740103,
++	0x81C, 0x01760103,
++	0x81C, 0x01780103,
++	0x81C, 0x017A0103,
++	0x81C, 0x017C0103,
++	0x81C, 0x017E0103,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xF9000103,
++	0x81C, 0xF8020103,
++	0x81C, 0xF7040103,
++	0x81C, 0xF6060103,
++	0x81C, 0xF5080103,
++	0x81C, 0xF40A0103,
++	0x81C, 0xF30C0103,
++	0x81C, 0xF20E0103,
++	0x81C, 0xF1100103,
++	0x81C, 0xF0120103,
++	0x81C, 0xEF140103,
++	0x81C, 0xEE160103,
++	0x81C, 0xED180103,
++	0x81C, 0xEC1A0103,
++	0x81C, 0xEB1C0103,
++	0x81C, 0xEA1E0103,
++	0x81C, 0xE9200103,
++	0x81C, 0xE8220103,
++	0x81C, 0xE7240103,
++	0x81C, 0xE6260103,
++	0x81C, 0xE5280103,
++	0x81C, 0xE42A0103,
++	0x81C, 0xE32C0103,
++	0x81C, 0xE22E0103,
++	0x81C, 0xA6300103,
++	0x81C, 0xA5320103,
++	0x81C, 0xA4340103,
++	0x81C, 0xA3360103,
++	0x81C, 0xA2380103,
++	0x81C, 0xA13A0103,
++	0x81C, 0x843C0103,
++	0x81C, 0x833E0103,
++	0x81C, 0x82400103,
++	0x81C, 0x81420103,
++	0x81C, 0x64440103,
++	0x81C, 0x63460103,
++	0x81C, 0x62480103,
++	0x81C, 0x614A0103,
++	0x81C, 0x444C0103,
++	0x81C, 0x434E0103,
++	0x81C, 0x42500103,
++	0x81C, 0x41520103,
++	0x81C, 0x25540103,
++	0x81C, 0x24560103,
++	0x81C, 0x23580103,
++	0x81C, 0x225A0103,
++	0x81C, 0x055C0103,
++	0x81C, 0x045E0103,
++	0x81C, 0x03600103,
++	0x81C, 0x02620103,
++	0x81C, 0x01640103,
++	0x81C, 0x01660103,
++	0x81C, 0x01680103,
++	0x81C, 0x016A0103,
++	0x81C, 0x016C0103,
++	0x81C, 0x016E0103,
++	0x81C, 0x01700103,
++	0x81C, 0x01720103,
++	0x81C, 0x01740103,
++	0x81C, 0x01760103,
++	0x81C, 0x01780103,
++	0x81C, 0x017A0103,
++	0x81C, 0x017C0103,
++	0x81C, 0x017E0103,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFD000103,
++	0x81C, 0xFC020103,
++	0x81C, 0xFB040103,
++	0x81C, 0xFA060103,
++	0x81C, 0xF9080103,
++	0x81C, 0xF80A0103,
++	0x81C, 0xF70C0103,
++	0x81C, 0xF60E0103,
++	0x81C, 0xF5100103,
++	0x81C, 0xF4120103,
++	0x81C, 0xF3140103,
++	0x81C, 0xF2160103,
++	0x81C, 0xF1180103,
++	0x81C, 0xF01A0103,
++	0x81C, 0xEF1C0103,
++	0x81C, 0xEE1E0103,
++	0x81C, 0xED200103,
++	0x81C, 0xEC220103,
++	0x81C, 0xEB240103,
++	0x81C, 0xEA260103,
++	0x81C, 0xE9280103,
++	0x81C, 0xE82A0103,
++	0x81C, 0xE72C0103,
++	0x81C, 0xE62E0103,
++	0x81C, 0xE5300103,
++	0x81C, 0xE4320103,
++	0x81C, 0xE3340103,
++	0x81C, 0xE2360103,
++	0x81C, 0xE1380103,
++	0x81C, 0xA33A0103,
++	0x81C, 0xA23C0103,
++	0x81C, 0xA13E0103,
++	0x81C, 0x84400103,
++	0x81C, 0x83420103,
++	0x81C, 0x82440103,
++	0x81C, 0x81460103,
++	0x81C, 0x64480103,
++	0x81C, 0x634A0103,
++	0x81C, 0x624C0103,
++	0x81C, 0x614E0103,
++	0x81C, 0x45500103,
++	0x81C, 0x44520103,
++	0x81C, 0x43540103,
++	0x81C, 0x42560103,
++	0x81C, 0x25580103,
++	0x81C, 0x245A0103,
++	0x81C, 0x235C0103,
++	0x81C, 0x065E0103,
++	0x81C, 0x05600103,
++	0x81C, 0x04620103,
++	0x81C, 0x03640103,
++	0x81C, 0x02660103,
++	0x81C, 0x01680103,
++	0x81C, 0x016A0103,
++	0x81C, 0x016C0103,
++	0x81C, 0x016E0103,
++	0x81C, 0x01700103,
++	0x81C, 0x01720103,
++	0x81C, 0x01740103,
++	0x81C, 0x01760103,
++	0x81C, 0x01780103,
++	0x81C, 0x017A0103,
++	0x81C, 0x017C0103,
++	0x81C, 0x017E0103,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFA000103,
++	0x81C, 0xF9020103,
++	0x81C, 0xF8040103,
++	0x81C, 0xF7060103,
++	0x81C, 0xF6080103,
++	0x81C, 0xF50A0103,
++	0x81C, 0xF40C0103,
++	0x81C, 0xF30E0103,
++	0x81C, 0xF2100103,
++	0x81C, 0xF1120103,
++	0x81C, 0xF0140103,
++	0x81C, 0xEF160103,
++	0x81C, 0xEE180103,
++	0x81C, 0xED1A0103,
++	0x81C, 0xEC1C0103,
++	0x81C, 0xEB1E0103,
++	0x81C, 0xEA200103,
++	0x81C, 0xE9220103,
++	0x81C, 0xE8240103,
++	0x81C, 0xE7260103,
++	0x81C, 0xE6280103,
++	0x81C, 0xE52A0103,
++	0x81C, 0xE42C0103,
++	0x81C, 0xE32E0103,
++	0x81C, 0xE2300103,
++	0x81C, 0xE1320103,
++	0x81C, 0xA5340103,
++	0x81C, 0xA4360103,
++	0x81C, 0xA3380103,
++	0x81C, 0xA23A0103,
++	0x81C, 0xA13C0103,
++	0x81C, 0x843E0103,
++	0x81C, 0x83400103,
++	0x81C, 0x82420103,
++	0x81C, 0x81440103,
++	0x81C, 0x64460103,
++	0x81C, 0x63480103,
++	0x81C, 0x624A0103,
++	0x81C, 0x614C0103,
++	0x81C, 0x454E0103,
++	0x81C, 0x44500103,
++	0x81C, 0x43520103,
++	0x81C, 0x42540103,
++	0x81C, 0x41560103,
++	0x81C, 0x24580103,
++	0x81C, 0x235A0103,
++	0x81C, 0x225C0103,
++	0x81C, 0x055E0103,
++	0x81C, 0x04600103,
++	0x81C, 0x03620103,
++	0x81C, 0x02640103,
++	0x81C, 0x01660103,
++	0x81C, 0x01680103,
++	0x81C, 0x016A0103,
++	0x81C, 0x016C0103,
++	0x81C, 0x016E0103,
++	0x81C, 0x01700103,
++	0x81C, 0x01720103,
++	0x81C, 0x01740103,
++	0x81C, 0x01760103,
++	0x81C, 0x01780103,
++	0x81C, 0x017A0103,
++	0x81C, 0x017C0103,
++	0x81C, 0x017E0103,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFF000103,
++	0x81C, 0xFF020103,
++	0x81C, 0xFE040103,
++	0x81C, 0xFD060103,
++	0x81C, 0xFC080103,
++	0x81C, 0xFB0A0103,
++	0x81C, 0xFA0C0103,
++	0x81C, 0xF90E0103,
++	0x81C, 0xF8100103,
++	0x81C, 0xF7120103,
++	0x81C, 0xF6140103,
++	0x81C, 0xF5160103,
++	0x81C, 0xF4180103,
++	0x81C, 0xF31A0103,
++	0x81C, 0xF21C0103,
++	0x81C, 0xF11E0103,
++	0x81C, 0xF0200103,
++	0x81C, 0xEF220103,
++	0x81C, 0xEE240103,
++	0x81C, 0xED260103,
++	0x81C, 0xEC280103,
++	0x81C, 0xEB2A0103,
++	0x81C, 0xEA2C0103,
++	0x81C, 0xE92E0103,
++	0x81C, 0xE8300103,
++	0x81C, 0xE7320103,
++	0x81C, 0xE6340103,
++	0x81C, 0xE5360103,
++	0x81C, 0xE4380103,
++	0x81C, 0xE33A0103,
++	0x81C, 0xA53C0103,
++	0x81C, 0xA43E0103,
++	0x81C, 0xA3400103,
++	0x81C, 0xA2420103,
++	0x81C, 0xA1440103,
++	0x81C, 0x85460103,
++	0x81C, 0x84480103,
++	0x81C, 0x834A0103,
++	0x81C, 0x824C0103,
++	0x81C, 0x814E0103,
++	0x81C, 0x64500103,
++	0x81C, 0x63520103,
++	0x81C, 0x62540103,
++	0x81C, 0x44560103,
++	0x81C, 0x43580103,
++	0x81C, 0x425A0103,
++	0x81C, 0x265C0103,
++	0x81C, 0x255E0103,
++	0x81C, 0x24600103,
++	0x81C, 0x07620103,
++	0x81C, 0x06640103,
++	0x81C, 0x05660103,
++	0x81C, 0x04680103,
++	0x81C, 0x036A0103,
++	0x81C, 0x026C0103,
++	0x81C, 0x016E0103,
++	0x81C, 0x01700103,
++	0x81C, 0x01720103,
++	0x81C, 0x01740103,
++	0x81C, 0x01760103,
++	0x81C, 0x01780103,
++	0x81C, 0x017A0103,
++	0x81C, 0x017C0103,
++	0x81C, 0x017E0103,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xF8000103,
++	0x81C, 0xF7020103,
++	0x81C, 0xF6040103,
++	0x81C, 0xF5060103,
++	0x81C, 0xF4080103,
++	0x81C, 0xF30A0103,
++	0x81C, 0xF20C0103,
++	0x81C, 0xF10E0103,
++	0x81C, 0xF0100103,
++	0x81C, 0xEF120103,
++	0x81C, 0xEE140103,
++	0x81C, 0xED160103,
++	0x81C, 0xEC180103,
++	0x81C, 0xEB1A0103,
++	0x81C, 0xEA1C0103,
++	0x81C, 0xE91E0103,
++	0x81C, 0xE8200103,
++	0x81C, 0xE7220103,
++	0x81C, 0xE6240103,
++	0x81C, 0xE5260103,
++	0x81C, 0xE4280103,
++	0x81C, 0xE32A0103,
++	0x81C, 0xE22C0103,
++	0x81C, 0xE12E0103,
++	0x81C, 0xA4300103,
++	0x81C, 0xA3320103,
++	0x81C, 0xA2340103,
++	0x81C, 0xA1360103,
++	0x81C, 0x85380103,
++	0x81C, 0x843A0103,
++	0x81C, 0x833C0103,
++	0x81C, 0x823E0103,
++	0x81C, 0x65400103,
++	0x81C, 0x64420103,
++	0x81C, 0x63440103,
++	0x81C, 0x62460103,
++	0x81C, 0x45480103,
++	0x81C, 0x444A0103,
++	0x81C, 0x434C0103,
++	0x81C, 0x264E0103,
++	0x81C, 0x25500103,
++	0x81C, 0x24520103,
++	0x81C, 0x08540103,
++	0x81C, 0x07560103,
++	0x81C, 0x06580103,
++	0x81C, 0x055A0103,
++	0x81C, 0x045C0103,
++	0x81C, 0x035E0103,
++	0x81C, 0x02600103,
++	0x81C, 0x01620103,
++	0x81C, 0x01640103,
++	0x81C, 0x01660103,
++	0x81C, 0x01680103,
++	0x81C, 0x016A0103,
++	0x81C, 0x016C0103,
++	0x81C, 0x016E0103,
++	0x81C, 0x01700103,
++	0x81C, 0x01720103,
++	0x81C, 0x01740103,
++	0x81C, 0x01760103,
++	0x81C, 0x01780103,
++	0x81C, 0x017A0103,
++	0x81C, 0x017C0103,
++	0x81C, 0x017E0103,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFF000103,
++	0x81C, 0xFF020103,
++	0x81C, 0xFE040103,
++	0x81C, 0xFD060103,
++	0x81C, 0xFC080103,
++	0x81C, 0xFB0A0103,
++	0x81C, 0xFA0C0103,
++	0x81C, 0xF90E0103,
++	0x81C, 0xF8100103,
++	0x81C, 0xF7120103,
++	0x81C, 0xF6140103,
++	0x81C, 0xF5160103,
++	0x81C, 0xF4180103,
++	0x81C, 0xF31A0103,
++	0x81C, 0xF21C0103,
++	0x81C, 0xF11E0103,
++	0x81C, 0xF0200103,
++	0x81C, 0xEF220103,
++	0x81C, 0xEE240103,
++	0x81C, 0xED260103,
++	0x81C, 0xEC280103,
++	0x81C, 0xEB2A0103,
++	0x81C, 0xEA2C0103,
++	0x81C, 0xE92E0103,
++	0x81C, 0xE8300103,
++	0x81C, 0xE7320103,
++	0x81C, 0xE6340103,
++	0x81C, 0xE5360103,
++	0x81C, 0xE4380103,
++	0x81C, 0xE33A0103,
++	0x81C, 0xA53C0103,
++	0x81C, 0xA43E0103,
++	0x81C, 0xA3400103,
++	0x81C, 0xA2420103,
++	0x81C, 0xA1440103,
++	0x81C, 0x85460103,
++	0x81C, 0x84480103,
++	0x81C, 0x834A0103,
++	0x81C, 0x824C0103,
++	0x81C, 0x814E0103,
++	0x81C, 0x64500103,
++	0x81C, 0x63520103,
++	0x81C, 0x62540103,
++	0x81C, 0x44560103,
++	0x81C, 0x43580103,
++	0x81C, 0x425A0103,
++	0x81C, 0x265C0103,
++	0x81C, 0x255E0103,
++	0x81C, 0x24600103,
++	0x81C, 0x07620103,
++	0x81C, 0x06640103,
++	0x81C, 0x05660103,
++	0x81C, 0x04680103,
++	0x81C, 0x036A0103,
++	0x81C, 0x026C0103,
++	0x81C, 0x016E0103,
++	0x81C, 0x01700103,
++	0x81C, 0x01720103,
++	0x81C, 0x01740103,
++	0x81C, 0x01760103,
++	0x81C, 0x01780103,
++	0x81C, 0x017A0103,
++	0x81C, 0x017C0103,
++	0x81C, 0x017E0103,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xF9000103,
++	0x81C, 0xF8020103,
++	0x81C, 0xF7040103,
++	0x81C, 0xF6060103,
++	0x81C, 0xF5080103,
++	0x81C, 0xF40A0103,
++	0x81C, 0xF30C0103,
++	0x81C, 0xF20E0103,
++	0x81C, 0xF1100103,
++	0x81C, 0xF0120103,
++	0x81C, 0xEF140103,
++	0x81C, 0xEE160103,
++	0x81C, 0xED180103,
++	0x81C, 0xEC1A0103,
++	0x81C, 0xEB1C0103,
++	0x81C, 0xEA1E0103,
++	0x81C, 0xE9200103,
++	0x81C, 0xE8220103,
++	0x81C, 0xE7240103,
++	0x81C, 0xE6260103,
++	0x81C, 0xE5280103,
++	0x81C, 0xE42A0103,
++	0x81C, 0xE32C0103,
++	0x81C, 0xE22E0103,
++	0x81C, 0xA6300103,
++	0x81C, 0xA5320103,
++	0x81C, 0xA4340103,
++	0x81C, 0xA3360103,
++	0x81C, 0xA2380103,
++	0x81C, 0xA13A0103,
++	0x81C, 0x843C0103,
++	0x81C, 0x833E0103,
++	0x81C, 0x82400103,
++	0x81C, 0x81420103,
++	0x81C, 0x64440103,
++	0x81C, 0x63460103,
++	0x81C, 0x62480103,
++	0x81C, 0x614A0103,
++	0x81C, 0x444C0103,
++	0x81C, 0x434E0103,
++	0x81C, 0x42500103,
++	0x81C, 0x41520103,
++	0x81C, 0x25540103,
++	0x81C, 0x24560103,
++	0x81C, 0x23580103,
++	0x81C, 0x225A0103,
++	0x81C, 0x055C0103,
++	0x81C, 0x045E0103,
++	0x81C, 0x03600103,
++	0x81C, 0x02620103,
++	0x81C, 0x01640103,
++	0x81C, 0x01660103,
++	0x81C, 0x01680103,
++	0x81C, 0x016A0103,
++	0x81C, 0x016C0103,
++	0x81C, 0x016E0103,
++	0x81C, 0x01700103,
++	0x81C, 0x01720103,
++	0x81C, 0x01740103,
++	0x81C, 0x01760103,
++	0x81C, 0x01780103,
++	0x81C, 0x017A0103,
++	0x81C, 0x017C0103,
++	0x81C, 0x017E0103,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFA000103,
++	0x81C, 0xF9020103,
++	0x81C, 0xF8040103,
++	0x81C, 0xF7060103,
++	0x81C, 0xF6080103,
++	0x81C, 0xF50A0103,
++	0x81C, 0xF40C0103,
++	0x81C, 0xF30E0103,
++	0x81C, 0xF2100103,
++	0x81C, 0xF1120103,
++	0x81C, 0xF0140103,
++	0x81C, 0xEF160103,
++	0x81C, 0xEE180103,
++	0x81C, 0xED1A0103,
++	0x81C, 0xCC1C0103,
++	0x81C, 0xCB1E0103,
++	0x81C, 0xCA200103,
++	0x81C, 0xE9220103,
++	0x81C, 0xE8240103,
++	0x81C, 0xE7260103,
++	0x81C, 0xE6280103,
++	0x81C, 0xE42A0103,
++	0x81C, 0xE32C0103,
++	0x81C, 0xE22E0103,
++	0x81C, 0xA7300103,
++	0x81C, 0xA6320103,
++	0x81C, 0xA5340103,
++	0x81C, 0xA4360103,
++	0x81C, 0xA3380103,
++	0x81C, 0xA23A0103,
++	0x81C, 0xA13C0103,
++	0x81C, 0x843E0103,
++	0x81C, 0x83400103,
++	0x81C, 0x82420103,
++	0x81C, 0x65440103,
++	0x81C, 0x64460103,
++	0x81C, 0x63480103,
++	0x81C, 0x624A0103,
++	0x81C, 0x614C0103,
++	0x81C, 0x444E0103,
++	0x81C, 0x43500103,
++	0x81C, 0x42520103,
++	0x81C, 0x41540103,
++	0x81C, 0x24560103,
++	0x81C, 0x23580103,
++	0x81C, 0x055A0103,
++	0x81C, 0x045C0103,
++	0x81C, 0x035E0103,
++	0x81C, 0x02600103,
++	0x81C, 0x01620103,
++	0x81C, 0x01640103,
++	0x81C, 0x01660103,
++	0x81C, 0x01680103,
++	0x81C, 0x016A0103,
++	0x81C, 0x016C0103,
++	0x81C, 0x016E0103,
++	0x81C, 0x01700103,
++	0x81C, 0x01720103,
++	0x81C, 0x01740103,
++	0x81C, 0x01760103,
++	0x81C, 0x01780103,
++	0x81C, 0x017A0103,
++	0x81C, 0x017C0103,
++	0x81C, 0x017E0103,
++	0xA0000000,	0x00000000,
++	0x81C, 0xFF000103,
++	0x81C, 0xFE020103,
++	0x81C, 0xFD040103,
++	0x81C, 0xFC060103,
++	0x81C, 0xFB080103,
++	0x81C, 0xFA0A0103,
++	0x81C, 0xF90C0103,
++	0x81C, 0xF80E0103,
++	0x81C, 0xF7100103,
++	0x81C, 0xF6120103,
++	0x81C, 0xF5140103,
++	0x81C, 0xF4160103,
++	0x81C, 0xF3180103,
++	0x81C, 0xF21A0103,
++	0x81C, 0xF11C0103,
++	0x81C, 0xF01E0103,
++	0x81C, 0xEF200103,
++	0x81C, 0xEE220103,
++	0x81C, 0xED240103,
++	0x81C, 0xEC260103,
++	0x81C, 0xEB280103,
++	0x81C, 0xEA2A0103,
++	0x81C, 0xE92C0103,
++	0x81C, 0xE82E0103,
++	0x81C, 0xE7300103,
++	0x81C, 0xE6320103,
++	0x81C, 0xE5340103,
++	0x81C, 0xE4360103,
++	0x81C, 0xE3380103,
++	0x81C, 0xE23A0103,
++	0x81C, 0xE13C0103,
++	0x81C, 0xA43E0103,
++	0x81C, 0xA3400103,
++	0x81C, 0xA2420103,
++	0x81C, 0xA1440103,
++	0x81C, 0x86460103,
++	0x81C, 0x85480103,
++	0x81C, 0x844A0103,
++	0x81C, 0x834C0103,
++	0x81C, 0x824E0103,
++	0x81C, 0x81500103,
++	0x81C, 0x64520103,
++	0x81C, 0x63540103,
++	0x81C, 0x62560103,
++	0x81C, 0x61580103,
++	0x81C, 0x435A0103,
++	0x81C, 0x425C0103,
++	0x81C, 0x415E0103,
++	0x81C, 0x25600103,
++	0x81C, 0x24620103,
++	0x81C, 0x06640103,
++	0x81C, 0x05660103,
++	0x81C, 0x04680103,
++	0x81C, 0x036A0103,
++	0x81C, 0x026C0103,
++	0x81C, 0x016E0103,
++	0x81C, 0x01700103,
++	0x81C, 0x01720103,
++	0x81C, 0x01740103,
++	0x81C, 0x01760103,
++	0x81C, 0x01780103,
++	0x81C, 0x017A0103,
++	0x81C, 0x017C0103,
++	0x81C, 0x017E0103,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFA000203,
++	0x81C, 0xF9020203,
++	0x81C, 0xF8040203,
++	0x81C, 0xF7060203,
++	0x81C, 0xF6080203,
++	0x81C, 0xF50A0203,
++	0x81C, 0xF40C0203,
++	0x81C, 0xF30E0203,
++	0x81C, 0xF2100203,
++	0x81C, 0xF1120203,
++	0x81C, 0xF0140203,
++	0x81C, 0xEF160203,
++	0x81C, 0xEE180203,
++	0x81C, 0xED1A0203,
++	0x81C, 0xEC1C0203,
++	0x81C, 0xEB1E0203,
++	0x81C, 0xEA200203,
++	0x81C, 0xE9220203,
++	0x81C, 0xE8240203,
++	0x81C, 0xE7260203,
++	0x81C, 0xE6280203,
++	0x81C, 0xE52A0203,
++	0x81C, 0xE42C0203,
++	0x81C, 0xE32E0203,
++	0x81C, 0xE2300203,
++	0x81C, 0xE1320203,
++	0x81C, 0xA5340203,
++	0x81C, 0xA4360203,
++	0x81C, 0xA3380203,
++	0x81C, 0xA23A0203,
++	0x81C, 0xA13C0203,
++	0x81C, 0x843E0203,
++	0x81C, 0x83400203,
++	0x81C, 0x82420203,
++	0x81C, 0x81440203,
++	0x81C, 0x63460203,
++	0x81C, 0x62480203,
++	0x81C, 0x614A0203,
++	0x81C, 0x464C0203,
++	0x81C, 0x454E0203,
++	0x81C, 0x44500203,
++	0x81C, 0x43520203,
++	0x81C, 0x42540203,
++	0x81C, 0x41560203,
++	0x81C, 0x24580203,
++	0x81C, 0x235A0203,
++	0x81C, 0x065C0203,
++	0x81C, 0x055E0203,
++	0x81C, 0x04600203,
++	0x81C, 0x03620203,
++	0x81C, 0x02640203,
++	0x81C, 0x01660203,
++	0x81C, 0x01680203,
++	0x81C, 0x016A0203,
++	0x81C, 0x016C0203,
++	0x81C, 0x016E0203,
++	0x81C, 0x01700203,
++	0x81C, 0x01720203,
++	0x81C, 0x01740203,
++	0x81C, 0x01760203,
++	0x81C, 0x01780203,
++	0x81C, 0x017A0203,
++	0x81C, 0x017C0203,
++	0x81C, 0x017E0203,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xF8000203,
++	0x81C, 0xF7020203,
++	0x81C, 0xF6040203,
++	0x81C, 0xF5060203,
++	0x81C, 0xF4080203,
++	0x81C, 0xF30A0203,
++	0x81C, 0xF20C0203,
++	0x81C, 0xF10E0203,
++	0x81C, 0xF0100203,
++	0x81C, 0xEF120203,
++	0x81C, 0xEE140203,
++	0x81C, 0xED160203,
++	0x81C, 0xEC180203,
++	0x81C, 0xEB1A0203,
++	0x81C, 0xEA1C0203,
++	0x81C, 0xE91E0203,
++	0x81C, 0xE8200203,
++	0x81C, 0xE7220203,
++	0x81C, 0xE6240203,
++	0x81C, 0xE5260203,
++	0x81C, 0xE4280203,
++	0x81C, 0xE32A0203,
++	0x81C, 0xE22C0203,
++	0x81C, 0xE12E0203,
++	0x81C, 0xA6300203,
++	0x81C, 0xA5320203,
++	0x81C, 0xA4340203,
++	0x81C, 0xA3360203,
++	0x81C, 0xA2380203,
++	0x81C, 0x853A0203,
++	0x81C, 0x843C0203,
++	0x81C, 0x833E0203,
++	0x81C, 0x82400203,
++	0x81C, 0x81420203,
++	0x81C, 0x64440203,
++	0x81C, 0x63460203,
++	0x81C, 0x62480203,
++	0x81C, 0x614A0203,
++	0x81C, 0x444C0203,
++	0x81C, 0x434E0203,
++	0x81C, 0x42500203,
++	0x81C, 0x25520203,
++	0x81C, 0x24540203,
++	0x81C, 0x23560203,
++	0x81C, 0x06580203,
++	0x81C, 0x055A0203,
++	0x81C, 0x045C0203,
++	0x81C, 0x035E0203,
++	0x81C, 0x02600203,
++	0x81C, 0x01620203,
++	0x81C, 0x01640203,
++	0x81C, 0x01660203,
++	0x81C, 0x01680203,
++	0x81C, 0x016A0203,
++	0x81C, 0x016C0203,
++	0x81C, 0x016E0203,
++	0x81C, 0x01700203,
++	0x81C, 0x01720203,
++	0x81C, 0x01740203,
++	0x81C, 0x01760203,
++	0x81C, 0x01780203,
++	0x81C, 0x017A0203,
++	0x81C, 0x017C0203,
++	0x81C, 0x017E0203,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFC000203,
++	0x81C, 0xFB020203,
++	0x81C, 0xFA040203,
++	0x81C, 0xF9060203,
++	0x81C, 0xF8080203,
++	0x81C, 0xF70A0203,
++	0x81C, 0xF60C0203,
++	0x81C, 0xF50E0203,
++	0x81C, 0xF4100203,
++	0x81C, 0xF3120203,
++	0x81C, 0xF2140203,
++	0x81C, 0xF1160203,
++	0x81C, 0xF0180203,
++	0x81C, 0xEF1A0203,
++	0x81C, 0xEE1C0203,
++	0x81C, 0xED1E0203,
++	0x81C, 0xEC200203,
++	0x81C, 0xEB220203,
++	0x81C, 0xEA240203,
++	0x81C, 0xE9260203,
++	0x81C, 0xE8280203,
++	0x81C, 0xE72A0203,
++	0x81C, 0xE62C0203,
++	0x81C, 0xE52E0203,
++	0x81C, 0xE4300203,
++	0x81C, 0xE3320203,
++	0x81C, 0xE2340203,
++	0x81C, 0xE1360203,
++	0x81C, 0x87380203,
++	0x81C, 0x863A0203,
++	0x81C, 0x853C0203,
++	0x81C, 0x843E0203,
++	0x81C, 0x83400203,
++	0x81C, 0x82420203,
++	0x81C, 0x81440203,
++	0x81C, 0x64460203,
++	0x81C, 0x63480203,
++	0x81C, 0x624A0203,
++	0x81C, 0x474C0203,
++	0x81C, 0x464E0203,
++	0x81C, 0x45500203,
++	0x81C, 0x44520203,
++	0x81C, 0x43540203,
++	0x81C, 0x42560203,
++	0x81C, 0x24580203,
++	0x81C, 0x235A0203,
++	0x81C, 0x075C0203,
++	0x81C, 0x065E0203,
++	0x81C, 0x05600203,
++	0x81C, 0x04620203,
++	0x81C, 0x03640203,
++	0x81C, 0x02660203,
++	0x81C, 0x01680203,
++	0x81C, 0x016A0203,
++	0x81C, 0x016C0203,
++	0x81C, 0x016E0203,
++	0x81C, 0x01700203,
++	0x81C, 0x01720203,
++	0x81C, 0x01740203,
++	0x81C, 0x01760203,
++	0x81C, 0x01780203,
++	0x81C, 0x017A0203,
++	0x81C, 0x017C0203,
++	0x81C, 0x017E0203,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xF8000203,
++	0x81C, 0xF7020203,
++	0x81C, 0xF6040203,
++	0x81C, 0xF5060203,
++	0x81C, 0xF4080203,
++	0x81C, 0xF30A0203,
++	0x81C, 0xF20C0203,
++	0x81C, 0xF10E0203,
++	0x81C, 0xF0100203,
++	0x81C, 0xEF120203,
++	0x81C, 0xEE140203,
++	0x81C, 0xED160203,
++	0x81C, 0xEC180203,
++	0x81C, 0xEB1A0203,
++	0x81C, 0xEA1C0203,
++	0x81C, 0xE91E0203,
++	0x81C, 0xE8200203,
++	0x81C, 0xE7220203,
++	0x81C, 0xE6240203,
++	0x81C, 0xE5260203,
++	0x81C, 0xE4280203,
++	0x81C, 0xE32A0203,
++	0x81C, 0xE22C0203,
++	0x81C, 0xE12E0203,
++	0x81C, 0xA6300203,
++	0x81C, 0xA5320203,
++	0x81C, 0xA4340203,
++	0x81C, 0xA3360203,
++	0x81C, 0xA2380203,
++	0x81C, 0xA13A0203,
++	0x81C, 0x843C0203,
++	0x81C, 0x833E0203,
++	0x81C, 0x82400203,
++	0x81C, 0x81420203,
++	0x81C, 0x64440203,
++	0x81C, 0x63460203,
++	0x81C, 0x62480203,
++	0x81C, 0x614A0203,
++	0x81C, 0x444C0203,
++	0x81C, 0x434E0203,
++	0x81C, 0x42500203,
++	0x81C, 0x41520203,
++	0x81C, 0x25540203,
++	0x81C, 0x24560203,
++	0x81C, 0x23580203,
++	0x81C, 0x065A0203,
++	0x81C, 0x055C0203,
++	0x81C, 0x045E0203,
++	0x81C, 0x03600203,
++	0x81C, 0x02620203,
++	0x81C, 0x01640203,
++	0x81C, 0x01660203,
++	0x81C, 0x01680203,
++	0x81C, 0x016A0203,
++	0x81C, 0x016C0203,
++	0x81C, 0x016E0203,
++	0x81C, 0x01700203,
++	0x81C, 0x01720203,
++	0x81C, 0x01740203,
++	0x81C, 0x01760203,
++	0x81C, 0x01780203,
++	0x81C, 0x017A0203,
++	0x81C, 0x017C0203,
++	0x81C, 0x017E0203,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFB000203,
++	0x81C, 0xFA020203,
++	0x81C, 0xF9040203,
++	0x81C, 0xF8060203,
++	0x81C, 0xF7080203,
++	0x81C, 0xF60A0203,
++	0x81C, 0xF50C0203,
++	0x81C, 0xF40E0203,
++	0x81C, 0xF3100203,
++	0x81C, 0xF2120203,
++	0x81C, 0xF1140203,
++	0x81C, 0xF0160203,
++	0x81C, 0xEF180203,
++	0x81C, 0xEE1A0203,
++	0x81C, 0xED1C0203,
++	0x81C, 0xEC1E0203,
++	0x81C, 0xEB200203,
++	0x81C, 0xEA220203,
++	0x81C, 0xE9240203,
++	0x81C, 0xE8260203,
++	0x81C, 0xE7280203,
++	0x81C, 0xE62A0203,
++	0x81C, 0xE52C0203,
++	0x81C, 0xE42E0203,
++	0x81C, 0xE3300203,
++	0x81C, 0xE2320203,
++	0x81C, 0xE1340203,
++	0x81C, 0xA5360203,
++	0x81C, 0xA4380203,
++	0x81C, 0xA33A0203,
++	0x81C, 0xA23C0203,
++	0x81C, 0x843E0203,
++	0x81C, 0x83400203,
++	0x81C, 0x82420203,
++	0x81C, 0x81440203,
++	0x81C, 0x64460203,
++	0x81C, 0x63480203,
++	0x81C, 0x624A0203,
++	0x81C, 0x614C0203,
++	0x81C, 0x474E0203,
++	0x81C, 0x46500203,
++	0x81C, 0x45520203,
++	0x81C, 0x44540203,
++	0x81C, 0x43560203,
++	0x81C, 0x25580203,
++	0x81C, 0x245A0203,
++	0x81C, 0x235C0203,
++	0x81C, 0x075E0203,
++	0x81C, 0x06600203,
++	0x81C, 0x05620203,
++	0x81C, 0x04640203,
++	0x81C, 0x03660203,
++	0x81C, 0x02680203,
++	0x81C, 0x016A0203,
++	0x81C, 0x016C0203,
++	0x81C, 0x016E0203,
++	0x81C, 0x01700203,
++	0x81C, 0x01720203,
++	0x81C, 0x01740203,
++	0x81C, 0x01760203,
++	0x81C, 0x01780203,
++	0x81C, 0x017A0203,
++	0x81C, 0x017C0203,
++	0x81C, 0x017E0203,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFC000203,
++	0x81C, 0xFB020203,
++	0x81C, 0xFA040203,
++	0x81C, 0xF9060203,
++	0x81C, 0xF8080203,
++	0x81C, 0xF70A0203,
++	0x81C, 0xF60C0203,
++	0x81C, 0xF50E0203,
++	0x81C, 0xF4100203,
++	0x81C, 0xF3120203,
++	0x81C, 0xF2140203,
++	0x81C, 0xF1160203,
++	0x81C, 0xF0180203,
++	0x81C, 0xEF1A0203,
++	0x81C, 0xEE1C0203,
++	0x81C, 0xED1E0203,
++	0x81C, 0xEC200203,
++	0x81C, 0xEB220203,
++	0x81C, 0xEA240203,
++	0x81C, 0xE9260203,
++	0x81C, 0xE8280203,
++	0x81C, 0xE72A0203,
++	0x81C, 0xE62C0203,
++	0x81C, 0xE52E0203,
++	0x81C, 0xE4300203,
++	0x81C, 0xE3320203,
++	0x81C, 0xE2340203,
++	0x81C, 0xE1360203,
++	0x81C, 0xA5380203,
++	0x81C, 0xA43A0203,
++	0x81C, 0xA33C0203,
++	0x81C, 0x853E0203,
++	0x81C, 0x84400203,
++	0x81C, 0x83420203,
++	0x81C, 0x82440203,
++	0x81C, 0x81460203,
++	0x81C, 0x64480203,
++	0x81C, 0x634A0203,
++	0x81C, 0x624C0203,
++	0x81C, 0x614E0203,
++	0x81C, 0x46500203,
++	0x81C, 0x45520203,
++	0x81C, 0x44540203,
++	0x81C, 0x43560203,
++	0x81C, 0x25580203,
++	0x81C, 0x245A0203,
++	0x81C, 0x235C0203,
++	0x81C, 0x075E0203,
++	0x81C, 0x06600203,
++	0x81C, 0x05620203,
++	0x81C, 0x04640203,
++	0x81C, 0x03660203,
++	0x81C, 0x02680203,
++	0x81C, 0x016A0203,
++	0x81C, 0x016C0203,
++	0x81C, 0x016E0203,
++	0x81C, 0x01700203,
++	0x81C, 0x01720203,
++	0x81C, 0x01740203,
++	0x81C, 0x01760203,
++	0x81C, 0x01780203,
++	0x81C, 0x017A0203,
++	0x81C, 0x017C0203,
++	0x81C, 0x017E0203,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFF000203,
++	0x81C, 0xFF020203,
++	0x81C, 0xFE040203,
++	0x81C, 0xFD060203,
++	0x81C, 0xFC080203,
++	0x81C, 0xFB0A0203,
++	0x81C, 0xFA0C0203,
++	0x81C, 0xF90E0203,
++	0x81C, 0xF8100203,
++	0x81C, 0xF7120203,
++	0x81C, 0xF6140203,
++	0x81C, 0xF5160203,
++	0x81C, 0xF4180203,
++	0x81C, 0xF31A0203,
++	0x81C, 0xF21C0203,
++	0x81C, 0xF11E0203,
++	0x81C, 0xF0200203,
++	0x81C, 0xEF220203,
++	0x81C, 0xEE240203,
++	0x81C, 0xED260203,
++	0x81C, 0xEC280203,
++	0x81C, 0xEB2A0203,
++	0x81C, 0xEA2C0203,
++	0x81C, 0xE92E0203,
++	0x81C, 0xE8300203,
++	0x81C, 0xE7320203,
++	0x81C, 0xE6340203,
++	0x81C, 0xE5360203,
++	0x81C, 0xE4380203,
++	0x81C, 0xE33A0203,
++	0x81C, 0xE23C0203,
++	0x81C, 0xE13E0203,
++	0x81C, 0xA4400203,
++	0x81C, 0xA3420203,
++	0x81C, 0xA2440203,
++	0x81C, 0xA1460203,
++	0x81C, 0x84480203,
++	0x81C, 0x834A0203,
++	0x81C, 0x824C0203,
++	0x81C, 0x814E0203,
++	0x81C, 0x64500203,
++	0x81C, 0x63520203,
++	0x81C, 0x62540203,
++	0x81C, 0x61560203,
++	0x81C, 0x45580203,
++	0x81C, 0x445A0203,
++	0x81C, 0x435C0203,
++	0x81C, 0x425E0203,
++	0x81C, 0x24600203,
++	0x81C, 0x23620203,
++	0x81C, 0x07640203,
++	0x81C, 0x06660203,
++	0x81C, 0x05680203,
++	0x81C, 0x046A0203,
++	0x81C, 0x036C0203,
++	0x81C, 0x026E0203,
++	0x81C, 0x01700203,
++	0x81C, 0x01720203,
++	0x81C, 0x01740203,
++	0x81C, 0x01760203,
++	0x81C, 0x01780203,
++	0x81C, 0x017A0203,
++	0x81C, 0x017C0203,
++	0x81C, 0x017E0203,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xF7000203,
++	0x81C, 0xF6020203,
++	0x81C, 0xF5040203,
++	0x81C, 0xF4060203,
++	0x81C, 0xF3080203,
++	0x81C, 0xF20A0203,
++	0x81C, 0xF10C0203,
++	0x81C, 0xF00E0203,
++	0x81C, 0xEF100203,
++	0x81C, 0xEE120203,
++	0x81C, 0xED140203,
++	0x81C, 0xEC160203,
++	0x81C, 0xEB180203,
++	0x81C, 0xEA1A0203,
++	0x81C, 0xE91C0203,
++	0x81C, 0xE81E0203,
++	0x81C, 0xE7200203,
++	0x81C, 0xE6220203,
++	0x81C, 0xE5240203,
++	0x81C, 0xE4260203,
++	0x81C, 0xE3280203,
++	0x81C, 0xE22A0203,
++	0x81C, 0xA62C0203,
++	0x81C, 0xA52E0203,
++	0x81C, 0xA4300203,
++	0x81C, 0xA3320203,
++	0x81C, 0xA2340203,
++	0x81C, 0xA1360203,
++	0x81C, 0x86380203,
++	0x81C, 0x853A0203,
++	0x81C, 0x843C0203,
++	0x81C, 0x833E0203,
++	0x81C, 0x65400203,
++	0x81C, 0x64420203,
++	0x81C, 0x63440203,
++	0x81C, 0x46460203,
++	0x81C, 0x45480203,
++	0x81C, 0x444A0203,
++	0x81C, 0x434C0203,
++	0x81C, 0x264E0203,
++	0x81C, 0x25500203,
++	0x81C, 0x24520203,
++	0x81C, 0x08540203,
++	0x81C, 0x07560203,
++	0x81C, 0x06580203,
++	0x81C, 0x055A0203,
++	0x81C, 0x045C0203,
++	0x81C, 0x035E0203,
++	0x81C, 0x02600203,
++	0x81C, 0x01620203,
++	0x81C, 0x01640203,
++	0x81C, 0x01660203,
++	0x81C, 0x01680203,
++	0x81C, 0x016A0203,
++	0x81C, 0x016C0203,
++	0x81C, 0x016E0203,
++	0x81C, 0x01700203,
++	0x81C, 0x01720203,
++	0x81C, 0x01740203,
++	0x81C, 0x01760203,
++	0x81C, 0x01780203,
++	0x81C, 0x017A0203,
++	0x81C, 0x017C0203,
++	0x81C, 0x017E0203,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFF000203,
++	0x81C, 0xFF020203,
++	0x81C, 0xFE040203,
++	0x81C, 0xFD060203,
++	0x81C, 0xFC080203,
++	0x81C, 0xFB0A0203,
++	0x81C, 0xFA0C0203,
++	0x81C, 0xF90E0203,
++	0x81C, 0xF8100203,
++	0x81C, 0xF7120203,
++	0x81C, 0xF6140203,
++	0x81C, 0xF5160203,
++	0x81C, 0xF4180203,
++	0x81C, 0xF31A0203,
++	0x81C, 0xF21C0203,
++	0x81C, 0xF11E0203,
++	0x81C, 0xF0200203,
++	0x81C, 0xEF220203,
++	0x81C, 0xEE240203,
++	0x81C, 0xED260203,
++	0x81C, 0xEC280203,
++	0x81C, 0xEB2A0203,
++	0x81C, 0xEA2C0203,
++	0x81C, 0xE92E0203,
++	0x81C, 0xE8300203,
++	0x81C, 0xE7320203,
++	0x81C, 0xE6340203,
++	0x81C, 0xE5360203,
++	0x81C, 0xE4380203,
++	0x81C, 0xE33A0203,
++	0x81C, 0xE23C0203,
++	0x81C, 0xE13E0203,
++	0x81C, 0xA4400203,
++	0x81C, 0xA3420203,
++	0x81C, 0xA2440203,
++	0x81C, 0xA1460203,
++	0x81C, 0x84480203,
++	0x81C, 0x834A0203,
++	0x81C, 0x824C0203,
++	0x81C, 0x814E0203,
++	0x81C, 0x64500203,
++	0x81C, 0x63520203,
++	0x81C, 0x62540203,
++	0x81C, 0x61560203,
++	0x81C, 0x45580203,
++	0x81C, 0x445A0203,
++	0x81C, 0x435C0203,
++	0x81C, 0x425E0203,
++	0x81C, 0x24600203,
++	0x81C, 0x23620203,
++	0x81C, 0x07640203,
++	0x81C, 0x06660203,
++	0x81C, 0x05680203,
++	0x81C, 0x046A0203,
++	0x81C, 0x036C0203,
++	0x81C, 0x026E0203,
++	0x81C, 0x01700203,
++	0x81C, 0x01720203,
++	0x81C, 0x01740203,
++	0x81C, 0x01760203,
++	0x81C, 0x01780203,
++	0x81C, 0x017A0203,
++	0x81C, 0x017C0203,
++	0x81C, 0x017E0203,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xF8000203,
++	0x81C, 0xF7020203,
++	0x81C, 0xF6040203,
++	0x81C, 0xF5060203,
++	0x81C, 0xF4080203,
++	0x81C, 0xF30A0203,
++	0x81C, 0xF20C0203,
++	0x81C, 0xF10E0203,
++	0x81C, 0xF0100203,
++	0x81C, 0xEF120203,
++	0x81C, 0xEE140203,
++	0x81C, 0xED160203,
++	0x81C, 0xEC180203,
++	0x81C, 0xEB1A0203,
++	0x81C, 0xEA1C0203,
++	0x81C, 0xE91E0203,
++	0x81C, 0xE8200203,
++	0x81C, 0xE7220203,
++	0x81C, 0xE6240203,
++	0x81C, 0xE5260203,
++	0x81C, 0xE4280203,
++	0x81C, 0xE32A0203,
++	0x81C, 0xE22C0203,
++	0x81C, 0xE12E0203,
++	0x81C, 0xA6300203,
++	0x81C, 0xA5320203,
++	0x81C, 0xA4340203,
++	0x81C, 0xA3360203,
++	0x81C, 0xA2380203,
++	0x81C, 0xA13A0203,
++	0x81C, 0x843C0203,
++	0x81C, 0x833E0203,
++	0x81C, 0x82400203,
++	0x81C, 0x81420203,
++	0x81C, 0x64440203,
++	0x81C, 0x63460203,
++	0x81C, 0x62480203,
++	0x81C, 0x614A0203,
++	0x81C, 0x444C0203,
++	0x81C, 0x434E0203,
++	0x81C, 0x42500203,
++	0x81C, 0x41520203,
++	0x81C, 0x25540203,
++	0x81C, 0x24560203,
++	0x81C, 0x23580203,
++	0x81C, 0x065A0203,
++	0x81C, 0x055C0203,
++	0x81C, 0x045E0203,
++	0x81C, 0x03600203,
++	0x81C, 0x02620203,
++	0x81C, 0x01640203,
++	0x81C, 0x01660203,
++	0x81C, 0x01680203,
++	0x81C, 0x016A0203,
++	0x81C, 0x016C0203,
++	0x81C, 0x016E0203,
++	0x81C, 0x01700203,
++	0x81C, 0x01720203,
++	0x81C, 0x01740203,
++	0x81C, 0x01760203,
++	0x81C, 0x01780203,
++	0x81C, 0x017A0203,
++	0x81C, 0x017C0203,
++	0x81C, 0x017E0203,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xF9000203,
++	0x81C, 0xF8020203,
++	0x81C, 0xF7040203,
++	0x81C, 0xF6060203,
++	0x81C, 0xF5080203,
++	0x81C, 0xF40A0203,
++	0x81C, 0xF30C0203,
++	0x81C, 0xF20E0203,
++	0x81C, 0xF1100203,
++	0x81C, 0xF0120203,
++	0x81C, 0xEF140203,
++	0x81C, 0xCE160203,
++	0x81C, 0xCD180203,
++	0x81C, 0xCC1A0203,
++	0x81C, 0xCB1C0203,
++	0x81C, 0xCA1E0203,
++	0x81C, 0xC9200203,
++	0x81C, 0xC8220203,
++	0x81C, 0xC7240203,
++	0x81C, 0xC6260203,
++	0x81C, 0xC5280203,
++	0x81C, 0xC42A0203,
++	0x81C, 0xC32C0203,
++	0x81C, 0xC22E0203,
++	0x81C, 0xC1300203,
++	0x81C, 0xA5320203,
++	0x81C, 0xA4340203,
++	0x81C, 0xA3360203,
++	0x81C, 0xA2380203,
++	0x81C, 0xA13A0203,
++	0x81C, 0x853C0203,
++	0x81C, 0x843E0203,
++	0x81C, 0x83400203,
++	0x81C, 0x82420203,
++	0x81C, 0x81440203,
++	0x81C, 0x64460203,
++	0x81C, 0x63480203,
++	0x81C, 0x624A0203,
++	0x81C, 0x614C0203,
++	0x81C, 0x444E0203,
++	0x81C, 0x43500203,
++	0x81C, 0x42520203,
++	0x81C, 0x41540203,
++	0x81C, 0x24560203,
++	0x81C, 0x23580203,
++	0x81C, 0x075A0203,
++	0x81C, 0x065C0203,
++	0x81C, 0x055E0203,
++	0x81C, 0x04600203,
++	0x81C, 0x03620203,
++	0x81C, 0x02640203,
++	0x81C, 0x01660203,
++	0x81C, 0x01680203,
++	0x81C, 0x016A0203,
++	0x81C, 0x016C0203,
++	0x81C, 0x016E0203,
++	0x81C, 0x01700203,
++	0x81C, 0x01720203,
++	0x81C, 0x01740203,
++	0x81C, 0x01760203,
++	0x81C, 0x01780203,
++	0x81C, 0x017A0203,
++	0x81C, 0x017C0203,
++	0x81C, 0x017E0203,
++	0xA0000000,	0x00000000,
++	0x81C, 0xFF000203,
++	0x81C, 0xFF020203,
++	0x81C, 0xFE040203,
++	0x81C, 0xFD060203,
++	0x81C, 0xFC080203,
++	0x81C, 0xFB0A0203,
++	0x81C, 0xFA0C0203,
++	0x81C, 0xF90E0203,
++	0x81C, 0xF8100203,
++	0x81C, 0xF7120203,
++	0x81C, 0xF6140203,
++	0x81C, 0xF5160203,
++	0x81C, 0xF4180203,
++	0x81C, 0xF31A0203,
++	0x81C, 0xF21C0203,
++	0x81C, 0xF11E0203,
++	0x81C, 0xF0200203,
++	0x81C, 0xEF220203,
++	0x81C, 0xEE240203,
++	0x81C, 0xED260203,
++	0x81C, 0xEC280203,
++	0x81C, 0xEB2A0203,
++	0x81C, 0xEA2C0203,
++	0x81C, 0xE92E0203,
++	0x81C, 0xE8300203,
++	0x81C, 0xE7320203,
++	0x81C, 0xE6340203,
++	0x81C, 0xE5360203,
++	0x81C, 0xE4380203,
++	0x81C, 0xE33A0203,
++	0x81C, 0xE23C0203,
++	0x81C, 0xE13E0203,
++	0x81C, 0xA4400203,
++	0x81C, 0xA3420203,
++	0x81C, 0xA2440203,
++	0x81C, 0xA1460203,
++	0x81C, 0x85480203,
++	0x81C, 0x844A0203,
++	0x81C, 0x834C0203,
++	0x81C, 0x824E0203,
++	0x81C, 0x81500203,
++	0x81C, 0x64520203,
++	0x81C, 0x63540203,
++	0x81C, 0x62560203,
++	0x81C, 0x61580203,
++	0x81C, 0x445A0203,
++	0x81C, 0x435C0203,
++	0x81C, 0x425E0203,
++	0x81C, 0x25600203,
++	0x81C, 0x24620203,
++	0x81C, 0x06640203,
++	0x81C, 0x05660203,
++	0x81C, 0x04680203,
++	0x81C, 0x036A0203,
++	0x81C, 0x026C0203,
++	0x81C, 0x016E0203,
++	0x81C, 0x01700203,
++	0x81C, 0x01720203,
++	0x81C, 0x01740203,
++	0x81C, 0x01760203,
++	0x81C, 0x01780203,
++	0x81C, 0x017A0203,
++	0x81C, 0x017C0203,
++	0x81C, 0x017E0203,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xF8000303,
++	0x81C, 0xF7020303,
++	0x81C, 0xF6040303,
++	0x81C, 0xF5060303,
++	0x81C, 0xF4080303,
++	0x81C, 0xF30A0303,
++	0x81C, 0xF20C0303,
++	0x81C, 0xF10E0303,
++	0x81C, 0xF0100303,
++	0x81C, 0xEF120303,
++	0x81C, 0xEE140303,
++	0x81C, 0xED160303,
++	0x81C, 0xEC180303,
++	0x81C, 0xEB1A0303,
++	0x81C, 0xEA1C0303,
++	0x81C, 0xE91E0303,
++	0x81C, 0xE8200303,
++	0x81C, 0xE7220303,
++	0x81C, 0xE6240303,
++	0x81C, 0xE5260303,
++	0x81C, 0xE4280303,
++	0x81C, 0xE32A0303,
++	0x81C, 0xE22C0303,
++	0x81C, 0xE12E0303,
++	0x81C, 0xA6300303,
++	0x81C, 0xA5320303,
++	0x81C, 0xA4340303,
++	0x81C, 0xA3360303,
++	0x81C, 0xA2380303,
++	0x81C, 0xA13A0303,
++	0x81C, 0x843C0303,
++	0x81C, 0x833E0303,
++	0x81C, 0x82400303,
++	0x81C, 0x81420303,
++	0x81C, 0x64440303,
++	0x81C, 0x63460303,
++	0x81C, 0x62480303,
++	0x81C, 0x614A0303,
++	0x81C, 0x454C0303,
++	0x81C, 0x444E0303,
++	0x81C, 0x43500303,
++	0x81C, 0x42520303,
++	0x81C, 0x41540303,
++	0x81C, 0x24560303,
++	0x81C, 0x23580303,
++	0x81C, 0x065A0303,
++	0x81C, 0x055C0303,
++	0x81C, 0x045E0303,
++	0x81C, 0x03600303,
++	0x81C, 0x02620303,
++	0x81C, 0x01640303,
++	0x81C, 0x01660303,
++	0x81C, 0x01680303,
++	0x81C, 0x016A0303,
++	0x81C, 0x016C0303,
++	0x81C, 0x016E0303,
++	0x81C, 0x01700303,
++	0x81C, 0x01720303,
++	0x81C, 0x01740303,
++	0x81C, 0x01760303,
++	0x81C, 0x01780303,
++	0x81C, 0x017A0303,
++	0x81C, 0x017C0303,
++	0x81C, 0x017E0303,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xF7000303,
++	0x81C, 0xF6020303,
++	0x81C, 0xF5040303,
++	0x81C, 0xF4060303,
++	0x81C, 0xF3080303,
++	0x81C, 0xF20A0303,
++	0x81C, 0xF10C0303,
++	0x81C, 0xF00E0303,
++	0x81C, 0xEF100303,
++	0x81C, 0xEE120303,
++	0x81C, 0xED140303,
++	0x81C, 0xEC160303,
++	0x81C, 0xEB180303,
++	0x81C, 0xEA1A0303,
++	0x81C, 0xE91C0303,
++	0x81C, 0xE81E0303,
++	0x81C, 0xE7200303,
++	0x81C, 0xE6220303,
++	0x81C, 0xE5240303,
++	0x81C, 0xE4260303,
++	0x81C, 0xE3280303,
++	0x81C, 0xC32A0303,
++	0x81C, 0xC22C0303,
++	0x81C, 0xC12E0303,
++	0x81C, 0xA5300303,
++	0x81C, 0xA4320303,
++	0x81C, 0xA3340303,
++	0x81C, 0xA2360303,
++	0x81C, 0xA1380303,
++	0x81C, 0x853A0303,
++	0x81C, 0x843C0303,
++	0x81C, 0x833E0303,
++	0x81C, 0x82400303,
++	0x81C, 0x81420303,
++	0x81C, 0x64440303,
++	0x81C, 0x63460303,
++	0x81C, 0x62480303,
++	0x81C, 0x614A0303,
++	0x81C, 0x454C0303,
++	0x81C, 0x444E0303,
++	0x81C, 0x43500303,
++	0x81C, 0x25520303,
++	0x81C, 0x24540303,
++	0x81C, 0x23560303,
++	0x81C, 0x06580303,
++	0x81C, 0x055A0303,
++	0x81C, 0x045C0303,
++	0x81C, 0x035E0303,
++	0x81C, 0x02600303,
++	0x81C, 0x01620303,
++	0x81C, 0x01640303,
++	0x81C, 0x01660303,
++	0x81C, 0x01680303,
++	0x81C, 0x016A0303,
++	0x81C, 0x016C0303,
++	0x81C, 0x016E0303,
++	0x81C, 0x01700303,
++	0x81C, 0x01720303,
++	0x81C, 0x01740303,
++	0x81C, 0x01760303,
++	0x81C, 0x01780303,
++	0x81C, 0x017A0303,
++	0x81C, 0x017C0303,
++	0x81C, 0x017E0303,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xF9000303,
++	0x81C, 0xF8020303,
++	0x81C, 0xF7040303,
++	0x81C, 0xF6060303,
++	0x81C, 0xF5080303,
++	0x81C, 0xF40A0303,
++	0x81C, 0xF30C0303,
++	0x81C, 0xF20E0303,
++	0x81C, 0xF1100303,
++	0x81C, 0xF0120303,
++	0x81C, 0xEF140303,
++	0x81C, 0xEE160303,
++	0x81C, 0xED180303,
++	0x81C, 0xEC1A0303,
++	0x81C, 0xEB1C0303,
++	0x81C, 0xEA1E0303,
++	0x81C, 0xE9200303,
++	0x81C, 0xE8220303,
++	0x81C, 0xE7240303,
++	0x81C, 0xE6260303,
++	0x81C, 0xE5280303,
++	0x81C, 0xE42A0303,
++	0x81C, 0xE32C0303,
++	0x81C, 0xE22E0303,
++	0x81C, 0xE1300303,
++	0x81C, 0xA4320303,
++	0x81C, 0xA3340303,
++	0x81C, 0xA2360303,
++	0x81C, 0xA1380303,
++	0x81C, 0x853A0303,
++	0x81C, 0x843C0303,
++	0x81C, 0x833E0303,
++	0x81C, 0x82400303,
++	0x81C, 0x81420303,
++	0x81C, 0x64440303,
++	0x81C, 0x63460303,
++	0x81C, 0x62480303,
++	0x81C, 0x614A0303,
++	0x81C, 0x444C0303,
++	0x81C, 0x434E0303,
++	0x81C, 0x42500303,
++	0x81C, 0x25520303,
++	0x81C, 0x24540303,
++	0x81C, 0x23560303,
++	0x81C, 0x07580303,
++	0x81C, 0x065A0303,
++	0x81C, 0x055C0303,
++	0x81C, 0x045E0303,
++	0x81C, 0x03600303,
++	0x81C, 0x02620303,
++	0x81C, 0x01640303,
++	0x81C, 0x01660303,
++	0x81C, 0x01680303,
++	0x81C, 0x016A0303,
++	0x81C, 0x016C0303,
++	0x81C, 0x016E0303,
++	0x81C, 0x01700303,
++	0x81C, 0x01720303,
++	0x81C, 0x01740303,
++	0x81C, 0x01760303,
++	0x81C, 0x01780303,
++	0x81C, 0x017A0303,
++	0x81C, 0x017C0303,
++	0x81C, 0x017E0303,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xF7000303,
++	0x81C, 0xF6020303,
++	0x81C, 0xF5040303,
++	0x81C, 0xF4060303,
++	0x81C, 0xF3080303,
++	0x81C, 0xF20A0303,
++	0x81C, 0xF10C0303,
++	0x81C, 0xF00E0303,
++	0x81C, 0xEF100303,
++	0x81C, 0xEE120303,
++	0x81C, 0xED140303,
++	0x81C, 0xEC160303,
++	0x81C, 0xEB180303,
++	0x81C, 0xEA1A0303,
++	0x81C, 0xE91C0303,
++	0x81C, 0xE81E0303,
++	0x81C, 0xE7200303,
++	0x81C, 0xE6220303,
++	0x81C, 0xE5240303,
++	0x81C, 0xE4260303,
++	0x81C, 0xE3280303,
++	0x81C, 0xE22A0303,
++	0x81C, 0xE12C0303,
++	0x81C, 0xA72E0303,
++	0x81C, 0xA6300303,
++	0x81C, 0xA5320303,
++	0x81C, 0xA4340303,
++	0x81C, 0xA3360303,
++	0x81C, 0xA2380303,
++	0x81C, 0xA13A0303,
++	0x81C, 0x843C0303,
++	0x81C, 0x833E0303,
++	0x81C, 0x82400303,
++	0x81C, 0x81420303,
++	0x81C, 0x64440303,
++	0x81C, 0x63460303,
++	0x81C, 0x62480303,
++	0x81C, 0x614A0303,
++	0x81C, 0x454C0303,
++	0x81C, 0x444E0303,
++	0x81C, 0x43500303,
++	0x81C, 0x42520303,
++	0x81C, 0x41540303,
++	0x81C, 0x24560303,
++	0x81C, 0x23580303,
++	0x81C, 0x065A0303,
++	0x81C, 0x055C0303,
++	0x81C, 0x045E0303,
++	0x81C, 0x03600303,
++	0x81C, 0x02620303,
++	0x81C, 0x01640303,
++	0x81C, 0x01660303,
++	0x81C, 0x01680303,
++	0x81C, 0x016A0303,
++	0x81C, 0x016C0303,
++	0x81C, 0x016E0303,
++	0x81C, 0x01700303,
++	0x81C, 0x01720303,
++	0x81C, 0x01740303,
++	0x81C, 0x01760303,
++	0x81C, 0x01780303,
++	0x81C, 0x017A0303,
++	0x81C, 0x017C0303,
++	0x81C, 0x017E0303,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFB000303,
++	0x81C, 0xFA020303,
++	0x81C, 0xF9040303,
++	0x81C, 0xF8060303,
++	0x81C, 0xF7080303,
++	0x81C, 0xF60A0303,
++	0x81C, 0xF50C0303,
++	0x81C, 0xF40E0303,
++	0x81C, 0xF3100303,
++	0x81C, 0xF2120303,
++	0x81C, 0xF1140303,
++	0x81C, 0xF0160303,
++	0x81C, 0xEF180303,
++	0x81C, 0xEE1A0303,
++	0x81C, 0xED1C0303,
++	0x81C, 0xEC1E0303,
++	0x81C, 0xEB200303,
++	0x81C, 0xEA220303,
++	0x81C, 0xE9240303,
++	0x81C, 0xE8260303,
++	0x81C, 0xE7280303,
++	0x81C, 0xE62A0303,
++	0x81C, 0xE52C0303,
++	0x81C, 0xE42E0303,
++	0x81C, 0xE3300303,
++	0x81C, 0xE2320303,
++	0x81C, 0xE1340303,
++	0x81C, 0xC2360303,
++	0x81C, 0xC1380303,
++	0x81C, 0xA33A0303,
++	0x81C, 0xA23C0303,
++	0x81C, 0x853E0303,
++	0x81C, 0x84400303,
++	0x81C, 0x83420303,
++	0x81C, 0x66440303,
++	0x81C, 0x65460303,
++	0x81C, 0x64480303,
++	0x81C, 0x634A0303,
++	0x81C, 0x624C0303,
++	0x81C, 0x614E0303,
++	0x81C, 0x45500303,
++	0x81C, 0x44520303,
++	0x81C, 0x43540303,
++	0x81C, 0x42560303,
++	0x81C, 0x25580303,
++	0x81C, 0x245A0303,
++	0x81C, 0x235C0303,
++	0x81C, 0x065E0303,
++	0x81C, 0x05600303,
++	0x81C, 0x04620303,
++	0x81C, 0x03640303,
++	0x81C, 0x02660303,
++	0x81C, 0x01680303,
++	0x81C, 0x016A0303,
++	0x81C, 0x016C0303,
++	0x81C, 0x016E0303,
++	0x81C, 0x01700303,
++	0x81C, 0x01720303,
++	0x81C, 0x01740303,
++	0x81C, 0x01760303,
++	0x81C, 0x01780303,
++	0x81C, 0x017A0303,
++	0x81C, 0x017C0303,
++	0x81C, 0x017E0303,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xF9000303,
++	0x81C, 0xF8020303,
++	0x81C, 0xF7040303,
++	0x81C, 0xF6060303,
++	0x81C, 0xF5080303,
++	0x81C, 0xF40A0303,
++	0x81C, 0xF30C0303,
++	0x81C, 0xF20E0303,
++	0x81C, 0xF1100303,
++	0x81C, 0xF0120303,
++	0x81C, 0xEF140303,
++	0x81C, 0xEE160303,
++	0x81C, 0xED180303,
++	0x81C, 0xEC1A0303,
++	0x81C, 0xEB1C0303,
++	0x81C, 0xEA1E0303,
++	0x81C, 0xE9200303,
++	0x81C, 0xE8220303,
++	0x81C, 0xE7240303,
++	0x81C, 0xE6260303,
++	0x81C, 0xE5280303,
++	0x81C, 0xE42A0303,
++	0x81C, 0xE32C0303,
++	0x81C, 0xE22E0303,
++	0x81C, 0xE1300303,
++	0x81C, 0xA6320303,
++	0x81C, 0xA5340303,
++	0x81C, 0xA4360303,
++	0x81C, 0xA3380303,
++	0x81C, 0xA23A0303,
++	0x81C, 0xA13C0303,
++	0x81C, 0x853E0303,
++	0x81C, 0x84400303,
++	0x81C, 0x83420303,
++	0x81C, 0x82440303,
++	0x81C, 0x81460303,
++	0x81C, 0x64480303,
++	0x81C, 0x634A0303,
++	0x81C, 0x624C0303,
++	0x81C, 0x614E0303,
++	0x81C, 0x44500303,
++	0x81C, 0x43520303,
++	0x81C, 0x42540303,
++	0x81C, 0x41560303,
++	0x81C, 0x25580303,
++	0x81C, 0x245A0303,
++	0x81C, 0x235C0303,
++	0x81C, 0x055E0303,
++	0x81C, 0x04600303,
++	0x81C, 0x03620303,
++	0x81C, 0x02640303,
++	0x81C, 0x01660303,
++	0x81C, 0x01680303,
++	0x81C, 0x016A0303,
++	0x81C, 0x016C0303,
++	0x81C, 0x016E0303,
++	0x81C, 0x01700303,
++	0x81C, 0x01720303,
++	0x81C, 0x01740303,
++	0x81C, 0x01760303,
++	0x81C, 0x01780303,
++	0x81C, 0x017A0303,
++	0x81C, 0x017C0303,
++	0x81C, 0x017E0303,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFE000303,
++	0x81C, 0xFD020303,
++	0x81C, 0xFC040303,
++	0x81C, 0xFB060303,
++	0x81C, 0xFA080303,
++	0x81C, 0xF90A0303,
++	0x81C, 0xF80C0303,
++	0x81C, 0xF70E0303,
++	0x81C, 0xF6100303,
++	0x81C, 0xF5120303,
++	0x81C, 0xF4140303,
++	0x81C, 0xF3160303,
++	0x81C, 0xF2180303,
++	0x81C, 0xF11A0303,
++	0x81C, 0xF01C0303,
++	0x81C, 0xEF1E0303,
++	0x81C, 0xEE200303,
++	0x81C, 0xED220303,
++	0x81C, 0xEC240303,
++	0x81C, 0xEB260303,
++	0x81C, 0xEA280303,
++	0x81C, 0xE92A0303,
++	0x81C, 0xE82C0303,
++	0x81C, 0xE72E0303,
++	0x81C, 0xE6300303,
++	0x81C, 0xE5320303,
++	0x81C, 0xE4340303,
++	0x81C, 0xE3360303,
++	0x81C, 0xC3380303,
++	0x81C, 0xC23A0303,
++	0x81C, 0xC13C0303,
++	0x81C, 0xA43E0303,
++	0x81C, 0xA3400303,
++	0x81C, 0xA2420303,
++	0x81C, 0xA1440303,
++	0x81C, 0x85460303,
++	0x81C, 0x84480303,
++	0x81C, 0x834A0303,
++	0x81C, 0x824C0303,
++	0x81C, 0x814E0303,
++	0x81C, 0x64500303,
++	0x81C, 0x63520303,
++	0x81C, 0x62540303,
++	0x81C, 0x61560303,
++	0x81C, 0x44580303,
++	0x81C, 0x435A0303,
++	0x81C, 0x425C0303,
++	0x81C, 0x265E0303,
++	0x81C, 0x25600303,
++	0x81C, 0x24620303,
++	0x81C, 0x06640303,
++	0x81C, 0x05660303,
++	0x81C, 0x04680303,
++	0x81C, 0x036A0303,
++	0x81C, 0x026C0303,
++	0x81C, 0x016E0303,
++	0x81C, 0x01700303,
++	0x81C, 0x01720303,
++	0x81C, 0x01740303,
++	0x81C, 0x01760303,
++	0x81C, 0x01780303,
++	0x81C, 0x017A0303,
++	0x81C, 0x017C0303,
++	0x81C, 0x017E0303,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xF7000303,
++	0x81C, 0xF6020303,
++	0x81C, 0xF5040303,
++	0x81C, 0xF4060303,
++	0x81C, 0xF3080303,
++	0x81C, 0xF20A0303,
++	0x81C, 0xF10C0303,
++	0x81C, 0xF00E0303,
++	0x81C, 0xEF100303,
++	0x81C, 0xEE120303,
++	0x81C, 0xED140303,
++	0x81C, 0xEC160303,
++	0x81C, 0xEB180303,
++	0x81C, 0xEA1A0303,
++	0x81C, 0xE91C0303,
++	0x81C, 0xE81E0303,
++	0x81C, 0xE7200303,
++	0x81C, 0xE6220303,
++	0x81C, 0xE5240303,
++	0x81C, 0xE4260303,
++	0x81C, 0xE3280303,
++	0x81C, 0xE22A0303,
++	0x81C, 0xA62C0303,
++	0x81C, 0xA52E0303,
++	0x81C, 0xA4300303,
++	0x81C, 0xA3320303,
++	0x81C, 0xA2340303,
++	0x81C, 0x87360303,
++	0x81C, 0x86380303,
++	0x81C, 0x853A0303,
++	0x81C, 0x843C0303,
++	0x81C, 0x833E0303,
++	0x81C, 0x66400303,
++	0x81C, 0x65420303,
++	0x81C, 0x64440303,
++	0x81C, 0x45460303,
++	0x81C, 0x44480303,
++	0x81C, 0x434A0303,
++	0x81C, 0x274C0303,
++	0x81C, 0x264E0303,
++	0x81C, 0x25500303,
++	0x81C, 0x24520303,
++	0x81C, 0x23540303,
++	0x81C, 0x08560303,
++	0x81C, 0x07580303,
++	0x81C, 0x065A0303,
++	0x81C, 0x055C0303,
++	0x81C, 0x045E0303,
++	0x81C, 0x03600303,
++	0x81C, 0x02620303,
++	0x81C, 0x01640303,
++	0x81C, 0x01660303,
++	0x81C, 0x01680303,
++	0x81C, 0x016A0303,
++	0x81C, 0x016C0303,
++	0x81C, 0x016E0303,
++	0x81C, 0x01700303,
++	0x81C, 0x01720303,
++	0x81C, 0x01740303,
++	0x81C, 0x01760303,
++	0x81C, 0x01780303,
++	0x81C, 0x017A0303,
++	0x81C, 0x017C0303,
++	0x81C, 0x017E0303,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xFE000303,
++	0x81C, 0xFD020303,
++	0x81C, 0xFC040303,
++	0x81C, 0xFB060303,
++	0x81C, 0xFA080303,
++	0x81C, 0xF90A0303,
++	0x81C, 0xF80C0303,
++	0x81C, 0xF70E0303,
++	0x81C, 0xF6100303,
++	0x81C, 0xF5120303,
++	0x81C, 0xF4140303,
++	0x81C, 0xF3160303,
++	0x81C, 0xF2180303,
++	0x81C, 0xF11A0303,
++	0x81C, 0xF01C0303,
++	0x81C, 0xEF1E0303,
++	0x81C, 0xEE200303,
++	0x81C, 0xED220303,
++	0x81C, 0xEC240303,
++	0x81C, 0xEB260303,
++	0x81C, 0xEA280303,
++	0x81C, 0xE92A0303,
++	0x81C, 0xE82C0303,
++	0x81C, 0xE72E0303,
++	0x81C, 0xE6300303,
++	0x81C, 0xE5320303,
++	0x81C, 0xE4340303,
++	0x81C, 0xE3360303,
++	0x81C, 0xC3380303,
++	0x81C, 0xC23A0303,
++	0x81C, 0xC13C0303,
++	0x81C, 0xA43E0303,
++	0x81C, 0xA3400303,
++	0x81C, 0xA2420303,
++	0x81C, 0xA1440303,
++	0x81C, 0x85460303,
++	0x81C, 0x84480303,
++	0x81C, 0x834A0303,
++	0x81C, 0x824C0303,
++	0x81C, 0x814E0303,
++	0x81C, 0x64500303,
++	0x81C, 0x63520303,
++	0x81C, 0x62540303,
++	0x81C, 0x61560303,
++	0x81C, 0x44580303,
++	0x81C, 0x435A0303,
++	0x81C, 0x425C0303,
++	0x81C, 0x265E0303,
++	0x81C, 0x25600303,
++	0x81C, 0x24620303,
++	0x81C, 0x06640303,
++	0x81C, 0x05660303,
++	0x81C, 0x04680303,
++	0x81C, 0x036A0303,
++	0x81C, 0x026C0303,
++	0x81C, 0x016E0303,
++	0x81C, 0x01700303,
++	0x81C, 0x01720303,
++	0x81C, 0x01740303,
++	0x81C, 0x01760303,
++	0x81C, 0x01780303,
++	0x81C, 0x017A0303,
++	0x81C, 0x017C0303,
++	0x81C, 0x017E0303,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xF7000303,
++	0x81C, 0xF6020303,
++	0x81C, 0xF5040303,
++	0x81C, 0xF4060303,
++	0x81C, 0xF3080303,
++	0x81C, 0xF20A0303,
++	0x81C, 0xF10C0303,
++	0x81C, 0xF00E0303,
++	0x81C, 0xEF100303,
++	0x81C, 0xEE120303,
++	0x81C, 0xED140303,
++	0x81C, 0xEC160303,
++	0x81C, 0xEB180303,
++	0x81C, 0xEA1A0303,
++	0x81C, 0xE91C0303,
++	0x81C, 0xE81E0303,
++	0x81C, 0xE7200303,
++	0x81C, 0xE6220303,
++	0x81C, 0xE5240303,
++	0x81C, 0xE4260303,
++	0x81C, 0xE3280303,
++	0x81C, 0xE22A0303,
++	0x81C, 0xE12C0303,
++	0x81C, 0xA72E0303,
++	0x81C, 0xA6300303,
++	0x81C, 0xA5320303,
++	0x81C, 0xA4340303,
++	0x81C, 0xA3360303,
++	0x81C, 0xA2380303,
++	0x81C, 0xA13A0303,
++	0x81C, 0x843C0303,
++	0x81C, 0x833E0303,
++	0x81C, 0x82400303,
++	0x81C, 0x81420303,
++	0x81C, 0x64440303,
++	0x81C, 0x63460303,
++	0x81C, 0x62480303,
++	0x81C, 0x614A0303,
++	0x81C, 0x454C0303,
++	0x81C, 0x444E0303,
++	0x81C, 0x43500303,
++	0x81C, 0x42520303,
++	0x81C, 0x41540303,
++	0x81C, 0x24560303,
++	0x81C, 0x23580303,
++	0x81C, 0x065A0303,
++	0x81C, 0x055C0303,
++	0x81C, 0x045E0303,
++	0x81C, 0x03600303,
++	0x81C, 0x02620303,
++	0x81C, 0x01640303,
++	0x81C, 0x01660303,
++	0x81C, 0x01680303,
++	0x81C, 0x016A0303,
++	0x81C, 0x016C0303,
++	0x81C, 0x016E0303,
++	0x81C, 0x01700303,
++	0x81C, 0x01720303,
++	0x81C, 0x01740303,
++	0x81C, 0x01760303,
++	0x81C, 0x01780303,
++	0x81C, 0x017A0303,
++	0x81C, 0x017C0303,
++	0x81C, 0x017E0303,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0x81C, 0xF7000303,
++	0x81C, 0xF6020303,
++	0x81C, 0xF5040303,
++	0x81C, 0xF4060303,
++	0x81C, 0xF3080303,
++	0x81C, 0xF20A0303,
++	0x81C, 0xF10C0303,
++	0x81C, 0xF00E0303,
++	0x81C, 0xEF100303,
++	0x81C, 0xEE120303,
++	0x81C, 0xED140303,
++	0x81C, 0xEC160303,
++	0x81C, 0xEB180303,
++	0x81C, 0xEA1A0303,
++	0x81C, 0xAF1C0303,
++	0x81C, 0xAE1E0303,
++	0x81C, 0xAD200303,
++	0x81C, 0xAC220303,
++	0x81C, 0xAB240303,
++	0x81C, 0xAA260303,
++	0x81C, 0xC5280303,
++	0x81C, 0xC42A0303,
++	0x81C, 0xC32C0303,
++	0x81C, 0xC22E0303,
++	0x81C, 0xA5300303,
++	0x81C, 0xA4320303,
++	0x81C, 0xA3340303,
++	0x81C, 0xA2360303,
++	0x81C, 0xA1380303,
++	0x81C, 0x853A0303,
++	0x81C, 0x843C0303,
++	0x81C, 0x833E0303,
++	0x81C, 0x82400303,
++	0x81C, 0x81420303,
++	0x81C, 0x64440303,
++	0x81C, 0x63460303,
++	0x81C, 0x62480303,
++	0x81C, 0x614A0303,
++	0x81C, 0x444C0303,
++	0x81C, 0x434E0303,
++	0x81C, 0x42500303,
++	0x81C, 0x41520303,
++	0x81C, 0x25540303,
++	0x81C, 0x24560303,
++	0x81C, 0x06580303,
++	0x81C, 0x055A0303,
++	0x81C, 0x045C0303,
++	0x81C, 0x035E0303,
++	0x81C, 0x02600303,
++	0x81C, 0x01620303,
++	0x81C, 0x01640303,
++	0x81C, 0x01660303,
++	0x81C, 0x01680303,
++	0x81C, 0x016A0303,
++	0x81C, 0x016C0303,
++	0x81C, 0x016E0303,
++	0x81C, 0x01700303,
++	0x81C, 0x01720303,
++	0x81C, 0x01740303,
++	0x81C, 0x01760303,
++	0x81C, 0x01780303,
++	0x81C, 0x017A0303,
++	0x81C, 0x017C0303,
++	0x81C, 0x017E0303,
++	0xA0000000,	0x00000000,
++	0x81C, 0xFD000303,
++	0x81C, 0xFC020303,
++	0x81C, 0xFB040303,
++	0x81C, 0xFA060303,
++	0x81C, 0xF9080303,
++	0x81C, 0xF80A0303,
++	0x81C, 0xF70C0303,
++	0x81C, 0xF60E0303,
++	0x81C, 0xF5100303,
++	0x81C, 0xF4120303,
++	0x81C, 0xF3140303,
++	0x81C, 0xF2160303,
++	0x81C, 0xF1180303,
++	0x81C, 0xF01A0303,
++	0x81C, 0xEF1C0303,
++	0x81C, 0xEE1E0303,
++	0x81C, 0xED200303,
++	0x81C, 0xEC220303,
++	0x81C, 0xEB240303,
++	0x81C, 0xEA260303,
++	0x81C, 0xE9280303,
++	0x81C, 0xE82A0303,
++	0x81C, 0xE72C0303,
++	0x81C, 0xE62E0303,
++	0x81C, 0xE5300303,
++	0x81C, 0xE4320303,
++	0x81C, 0xE3340303,
++	0x81C, 0xE2360303,
++	0x81C, 0xE1380303,
++	0x81C, 0xA53A0303,
++	0x81C, 0xA43C0303,
++	0x81C, 0xA33E0303,
++	0x81C, 0xA2400303,
++	0x81C, 0xA1420303,
++	0x81C, 0x87440303,
++	0x81C, 0x86460303,
++	0x81C, 0x85480303,
++	0x81C, 0x844A0303,
++	0x81C, 0x834C0303,
++	0x81C, 0x824E0303,
++	0x81C, 0x81500303,
++	0x81C, 0x64520303,
++	0x81C, 0x63540303,
++	0x81C, 0x62560303,
++	0x81C, 0x61580303,
++	0x81C, 0x435A0303,
++	0x81C, 0x425C0303,
++	0x81C, 0x415E0303,
++	0x81C, 0x07600303,
++	0x81C, 0x06620303,
++	0x81C, 0x05640303,
++	0x81C, 0x04660303,
++	0x81C, 0x03680303,
++	0x81C, 0x026A0303,
++	0x81C, 0x016C0303,
++	0x81C, 0x016E0303,
++	0x81C, 0x01700303,
++	0x81C, 0x01720303,
++	0x81C, 0x01740303,
++	0x81C, 0x01760303,
++	0x81C, 0x01780303,
++	0x81C, 0x017A0303,
++	0x81C, 0x017C0303,
++	0x81C, 0x017E0303,
++	0xB0000000,	0x00000000,
++	0xC50, 0x00000022,
++	0xC50, 0x00000020,
++	0xE50, 0x00000022,
++	0xE50, 0x00000020,
++	0x1850, 0x00000022,
++	0x1850, 0x00000020,
++	0x1A50, 0x00000022,
++	0x1A50, 0x00000020,
++};
++
++RTW_DECL_TABLE_PHY_COND(rtw8814a_agc, rtw_phy_cfg_agc);
++
++static const u32 rtw8814a_bb[] = {
++	0x800, 0x9020D010,
++	0x804, 0x08011280,
++	0x808, 0x0E0282FF,
++	0x80C, 0x1000002F,
++	0x80000003,	0x00000000,	0x40000000,	0x00000000,
++	0x810, 0x33303265,
++	0xA0000000,	0x00000000,
++	0x810, 0x33303265,
++	0xB0000000,	0x00000000,
++	0x814, 0x020C3D10,
++	0x818, 0x04A10385,
++	0x820, 0x00000000,
++	0x824, 0x00033E40,
++	0x828, 0x00000000,
++	0x82C, 0x73985170,
++	0x830, 0x79A0EA08,
++	0x834, 0x042E708A,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++	0x838, 0x86667640,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x838, 0x86667641,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x838, 0x86667641,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0x838, 0x86667641,
++	0xA0000000,	0x00000000,
++	0x838, 0x86667640,
++	0xB0000000,	0x00000000,
++	0x83C, 0x9798B9B9,
++	0x840, 0x17578F60,
++	0x844, 0x4BBDFCDE,
++	0x848, 0x5CD07F8B,
++	0x84C, 0x6CFBF7B5,
++	0x850, 0x28834706,
++	0x854, 0x0001520C,
++	0x858, 0x4060C000,
++	0x85C, 0x74210368,
++	0x860, 0x6929C321,
++	0x864, 0x79727432,
++	0x868, 0x8CA7A314,
++	0x86C, 0x438C2878,
++	0x870, 0x44444444,
++	0x874, 0x21612C2E,
++	0x878, 0x00003152,
++	0x87C, 0x000FC000,
++	0x8A0, 0x00000013,
++	0x8A4, 0x7F7F7F7F,
++	0x8A8, 0xA202033E,
++	0x8AC, 0xF40F550A,
++	0x8B0, 0x00000600,
++	0x8B4, 0x000FC080,
++	0x8B8, 0xEC0057FF,
++	0x8BC, 0x8CA520C3,
++	0x8C0, 0x3FF00020,
++	0x8C4, 0x44C00000,
++	0x80000009,	0x00000000,	0x40000000,	0x00000000,
++	0x8C8, 0x80025969,
++	0xA0000000,	0x00000000,
++	0x8C8, 0x80025167,
++	0xB0000000,	0x00000000,
++	0x8CC, 0x08250492,
++	0x8D0, 0x0000B800,
++	0x8D4, 0x940008A0,
++	0x8D8, 0x290B5612,
++	0x8DC, 0x00000000,
++	0x8E0, 0x32316407,
++	0x8E4, 0x4A092925,
++	0x8E8, 0xFFFFC42C,
++	0x8EC, 0x99999999,
++	0x8F0, 0x00009999,
++	0x8F4, 0x00F80FA1,
++	0x8F8, 0x400082C0,
++	0x8FC, 0x00000000,
++	0x900, 0x00400700,
++	0x90C, 0x09004000,
++	0x910, 0x0000FC00,
++	0x914, 0xD6400404,
++	0x918, 0x1C1028C0,
++	0x91C, 0x64B11A1C,
++	0x920, 0xE0767233,
++	0x924, 0x055AA500,
++	0x928, 0x4AB0E4E4,
++	0x92C, 0xFFFE0000,
++	0x930, 0xFFFFFFFE,
++	0x934, 0x001FFFFF,
++	0x938, 0x00008400,
++	0x93C, 0x932C0642,
++	0x940, 0x093E9360,
++	0x944, 0x08000000,
++	0x948, 0x04000000,
++	0x950, 0x02010080,
++	0x954, 0x86510080,
++	0x960, 0x00000000,
++	0x964, 0x00000000,
++	0x968, 0x00000000,
++	0x96C, 0x00000000,
++	0x970, 0x801FFFFF,
++	0x978, 0x00000000,
++	0x97C, 0x00000000,
++	0x980, 0x00000000,
++	0x984, 0x00000000,
++	0x988, 0x00000000,
++	0x98C, 0x03440000,
++	0x990, 0x27100000,
++	0x994, 0xFFFF0100,
++	0x998, 0xFFFFFF5C,
++	0x99C, 0xFFFFFFFF,
++	0x9A0, 0x000000FF,
++	0x9A4, 0x00080080,
++	0x9A8, 0x0C2F0000,
++	0x9AC, 0x00560000,
++	0x9B0, 0x81081008,
++	0x9B4, 0x00000000,
++	0x9B8, 0x01081008,
++	0x9BC, 0x01081008,
++	0x9D0, 0x00000000,
++	0x9D4, 0x00000000,
++	0x9D8, 0x00000000,
++	0x9DC, 0x00000000,
++	0x9E4, 0x00000002,
++	0x9E8, 0x000022D5,
++	0x9FC, 0xEFFFF7FF,
++	0xB00, 0xE3100000,
++	0xB04, 0x0000B000,
++	0xB0C, 0x31EAA006,
++	0xB5C, 0x41CFFFFF,
++	0xC00, 0x00000007,
++	0xC04, 0x00042020,
++	0xC08, 0x80410231,
++	0xC0C, 0x00000000,
++	0xC10, 0x00000100,
++	0xC14, 0x01000000,
++	0xC1C, 0x40000053,
++	0xC50, 0x00000020,
++	0xC54, 0x00000000,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++	0xC58, 0x3C0A0C14,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0xC58, 0x3C0A0C14,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0xC58, 0x3C0A0C14,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0xC58, 0x3C0A0C14,
++	0xA0000000,	0x00000000,
++	0xC58, 0x3C020C14,
++	0xB0000000,	0x00000000,
++	0xC5C, 0x0D000058,
++	0xC60, 0x1B800000,
++	0xC60, 0x0B800001,
++	0xC60, 0x05800002,
++	0xC60, 0x07800003,
++	0xC60, 0x1A800004,
++	0xC60, 0x0B800005,
++	0xC60, 0x05800006,
++	0xC60, 0x0E800007,
++	0xC60, 0x1A800008,
++	0xC60, 0x0B800009,
++	0xC60, 0x1580000A,
++	0xC60, 0x0880000B,
++	0xC60, 0x1A80000C,
++	0xC60, 0x0B80000D,
++	0xC60, 0x0580000E,
++	0xC60, 0x0E80000F,
++	0xC60, 0x1A800010,
++	0xC60, 0x0B800011,
++	0xC60, 0x15800012,
++	0xC60, 0x08800013,
++	0xC60, 0x1A800014,
++	0xC60, 0x0B800015,
++	0xC60, 0x05800016,
++	0xC60, 0x07800017,
++	0xC60, 0x1A800018,
++	0xC60, 0x0B800019,
++	0xC60, 0x1580001A,
++	0xC60, 0x0880001B,
++	0xC60, 0x1B80001C,
++	0xC60, 0x0B80001D,
++	0xC60, 0x0580001E,
++	0xC60, 0x0780001F,
++	0xC60, 0x1B800020,
++	0xC60, 0x0B800021,
++	0xC60, 0x05800022,
++	0xC60, 0x07800023,
++	0xC60, 0x1B800024,
++	0xC60, 0x0B800025,
++	0xC60, 0x05800026,
++	0xC60, 0x07800027,
++	0xC60, 0x1B800028,
++	0xC60, 0x0B800029,
++	0xC60, 0x0580002A,
++	0xC60, 0x0780002B,
++	0xC60, 0x1B800030,
++	0xC60, 0x0B800031,
++	0xC60, 0x05800032,
++	0xC60, 0x00800033,
++	0xC60, 0x1B800034,
++	0xC60, 0x0B800035,
++	0xC60, 0x05800036,
++	0xC60, 0x00800037,
++	0xC60, 0x1B800038,
++	0xC60, 0x0B800039,
++	0xC60, 0x0580003A,
++	0xC60, 0x0E80803B,
++	0xC94, 0x01000401,
++	0xC98, 0x00188000,
++	0xCA0, 0x00002929,
++	0xCA4, 0x08040201,
++	0xCA8, 0x80402010,
++	0xCAC, 0x77777000,
++	0xCB0, 0x54775477,
++	0xCB4, 0x54775477,
++	0xCB8, 0x00500000,
++	0xCBC, 0x77700000,
++	0xCC0, 0x00000010,
++	0xCC8, 0x00000010,
++	0xE00, 0x00000007,
++	0xE04, 0x00042020,
++	0xE08, 0x80410231,
++	0xE0C, 0x00000000,
++	0xE10, 0x00000100,
++	0xE14, 0x01000000,
++	0xE1C, 0x40000053,
++	0xE50, 0x00000020,
++	0xE54, 0x00000000,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++	0xE58, 0x3C0A0C14,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0xE58, 0x3C0A0C14,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0xE58, 0x3C0A0C14,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0xE58, 0x3C0A0C14,
++	0xA0000000,	0x00000000,
++	0xE58, 0x3C020C14,
++	0xB0000000,	0x00000000,
++	0xE5C, 0x0D000058,
++	0xE60, 0x1B800000,
++	0xE60, 0x0B800001,
++	0xE60, 0x05800002,
++	0xE60, 0x07800003,
++	0xE60, 0x1A800004,
++	0xE60, 0x0B800005,
++	0xE60, 0x05800006,
++	0xE60, 0x0E800007,
++	0xE60, 0x1A800008,
++	0xE60, 0x0B800009,
++	0xE60, 0x1580000A,
++	0xE60, 0x0880000B,
++	0xE60, 0x1A80000C,
++	0xE60, 0x0B80000D,
++	0xE60, 0x0580000E,
++	0xE60, 0x0E80000F,
++	0xE60, 0x1A800010,
++	0xE60, 0x0B800011,
++	0xE60, 0x15800012,
++	0xE60, 0x08800013,
++	0xE60, 0x1A800014,
++	0xE60, 0x0B800015,
++	0xE60, 0x05800016,
++	0xE60, 0x07800017,
++	0xE60, 0x1A800018,
++	0xE60, 0x0B800019,
++	0xE60, 0x1580001A,
++	0xE60, 0x0880001B,
++	0xE60, 0x1B80001C,
++	0xE60, 0x0B80001D,
++	0xE60, 0x0580001E,
++	0xE60, 0x0780001F,
++	0xE60, 0x1B800020,
++	0xE60, 0x0B800021,
++	0xE60, 0x05800022,
++	0xE60, 0x07800023,
++	0xE60, 0x1B800024,
++	0xE60, 0x0B800025,
++	0xE60, 0x05800026,
++	0xE60, 0x07800027,
++	0xE60, 0x1B800028,
++	0xE60, 0x0B800029,
++	0xE60, 0x0580002A,
++	0xE60, 0x0780002B,
++	0xE60, 0x1B800030,
++	0xE60, 0x0B800031,
++	0xE60, 0x05800032,
++	0xE60, 0x00800033,
++	0xE60, 0x1B800034,
++	0xE60, 0x0B800035,
++	0xE60, 0x05800036,
++	0xE60, 0x00800037,
++	0xE60, 0x1B800038,
++	0xE60, 0x0B800039,
++	0xE60, 0x0580003A,
++	0xE60, 0x0E80803B,
++	0xE94, 0x01000401,
++	0xE98, 0x00188000,
++	0xEA0, 0x00002929,
++	0xEA4, 0x08040201,
++	0xEA8, 0x80402010,
++	0xEAC, 0x77777000,
++	0xEB0, 0x54775477,
++	0xEB4, 0x54775477,
++	0xEB8, 0x00500000,
++	0xEBC, 0x77700000,
++	0x1800, 0x00000007,
++	0x1804, 0x00042020,
++	0x1808, 0x80410231,
++	0x180C, 0x00000000,
++	0x1810, 0x00000100,
++	0x1814, 0x01000000,
++	0x181C, 0x40000053,
++	0x1850, 0x00000020,
++	0x1854, 0x00000000,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++	0x1858, 0x3C0A0C14,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x1858, 0x3C0A0C14,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x1858, 0x3C0A0C14,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0x1858, 0x3C0A0C14,
++	0xA0000000,	0x00000000,
++	0x1858, 0x3C020C14,
++	0xB0000000,	0x00000000,
++	0x185C, 0x0D000058,
++	0x1860, 0x1B800000,
++	0x1860, 0x0B800001,
++	0x1860, 0x05800002,
++	0x1860, 0x07800003,
++	0x1860, 0x1A800004,
++	0x1860, 0x0B800005,
++	0x1860, 0x05800006,
++	0x1860, 0x0E800007,
++	0x1860, 0x1A800008,
++	0x1860, 0x0B800009,
++	0x1860, 0x1580000A,
++	0x1860, 0x0880000B,
++	0x1860, 0x1A80000C,
++	0x1860, 0x0B80000D,
++	0x1860, 0x0580000E,
++	0x1860, 0x0E80000F,
++	0x1860, 0x1A800010,
++	0x1860, 0x0B800011,
++	0x1860, 0x15800012,
++	0x1860, 0x08800013,
++	0x1860, 0x1A800014,
++	0x1860, 0x0B800015,
++	0x1860, 0x05800016,
++	0x1860, 0x07800017,
++	0x1860, 0x1A800018,
++	0x1860, 0x0B800019,
++	0x1860, 0x1580001A,
++	0x1860, 0x0880001B,
++	0x1860, 0x1B80001C,
++	0x1860, 0x0B80001D,
++	0x1860, 0x0580001E,
++	0x1860, 0x0780001F,
++	0x1860, 0x1B800020,
++	0x1860, 0x0B800021,
++	0x1860, 0x05800022,
++	0x1860, 0x07800023,
++	0x1860, 0x1B800024,
++	0x1860, 0x0B800025,
++	0x1860, 0x05800026,
++	0x1860, 0x07800027,
++	0x1860, 0x1B800028,
++	0x1860, 0x0B800029,
++	0x1860, 0x0580002A,
++	0x1860, 0x0780002B,
++	0x1860, 0x1B800030,
++	0x1860, 0x0B800031,
++	0x1860, 0x05800032,
++	0x1860, 0x00800033,
++	0x1860, 0x1B800034,
++	0x1860, 0x0B800035,
++	0x1860, 0x05800036,
++	0x1860, 0x00800037,
++	0x1860, 0x1B800038,
++	0x1860, 0x0B800039,
++	0x1860, 0x0580003A,
++	0x1860, 0x0E80803B,
++	0x1894, 0x01000401,
++	0x1898, 0x00188000,
++	0x18A0, 0x00002929,
++	0x18A4, 0x08040201,
++	0x18A8, 0x80402010,
++	0x18AC, 0x77777000,
++	0x18B0, 0x54775477,
++	0x18B4, 0x54775477,
++	0x18B8, 0x00500000,
++	0x18BC, 0x77700000,
++	0x1A00, 0x00000007,
++	0x1A04, 0x00042020,
++	0x1A08, 0x80410231,
++	0x1A0C, 0x00000000,
++	0x1A10, 0x00000100,
++	0x1A14, 0x01000000,
++	0x1A1C, 0x40000053,
++	0x1A50, 0x00000020,
++	0x1A54, 0x00000000,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++	0x1A58, 0x3C0A0C14,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x1A58, 0x3C0A0C14,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x1A58, 0x3C0A0C14,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0x1A58, 0x3C0A0C14,
++	0xA0000000,	0x00000000,
++	0x1A58, 0x3C020C14,
++	0xB0000000,	0x00000000,
++	0x1A5C, 0x0D000058,
++	0x1A60, 0x1B800000,
++	0x1A60, 0x0B800001,
++	0x1A60, 0x05800002,
++	0x1A60, 0x07800003,
++	0x1A60, 0x1A800004,
++	0x1A60, 0x0B800005,
++	0x1A60, 0x05800006,
++	0x1A60, 0x0E800007,
++	0x1A60, 0x1A800008,
++	0x1A60, 0x0B800009,
++	0x1A60, 0x1580000A,
++	0x1A60, 0x0880000B,
++	0x1A60, 0x1A80000C,
++	0x1A60, 0x0B80000D,
++	0x1A60, 0x0580000E,
++	0x1A60, 0x0E80000F,
++	0x1A60, 0x1A800010,
++	0x1A60, 0x0B800011,
++	0x1A60, 0x15800012,
++	0x1A60, 0x08800013,
++	0x1A60, 0x1A800014,
++	0x1A60, 0x0B800015,
++	0x1A60, 0x05800016,
++	0x1A60, 0x07800017,
++	0x1A60, 0x1A800018,
++	0x1A60, 0x0B800019,
++	0x1A60, 0x1580001A,
++	0x1A60, 0x0880001B,
++	0x1A60, 0x1B80001C,
++	0x1A60, 0x0B80001D,
++	0x1A60, 0x0580001E,
++	0x1A60, 0x0780001F,
++	0x1A60, 0x1B800020,
++	0x1A60, 0x0B800021,
++	0x1A60, 0x05800022,
++	0x1A60, 0x07800023,
++	0x1A60, 0x1B800024,
++	0x1A60, 0x0B800025,
++	0x1A60, 0x05800026,
++	0x1A60, 0x07800027,
++	0x1A60, 0x1B800028,
++	0x1A60, 0x0B800029,
++	0x1A60, 0x0580002A,
++	0x1A60, 0x0780002B,
++	0x1A60, 0x1B800030,
++	0x1A60, 0x0B800031,
++	0x1A60, 0x05800032,
++	0x1A60, 0x00800033,
++	0x1A60, 0x1B800034,
++	0x1A60, 0x0B800035,
++	0x1A60, 0x05800036,
++	0x1A60, 0x00800037,
++	0x1A60, 0x1B800038,
++	0x1A60, 0x0B800039,
++	0x1A60, 0x0580003A,
++	0x1A60, 0x0E80803B,
++	0x1A94, 0x01000401,
++	0x1A98, 0x00188000,
++	0x1AA0, 0x00002929,
++	0x1AA4, 0x08040201,
++	0x1AA8, 0x80402010,
++	0x1AAC, 0x77777000,
++	0x1AB0, 0x54775477,
++	0x1AB4, 0x54775477,
++	0x1AB8, 0x00500000,
++	0x1ABC, 0x77700000,
++	0x1904, 0x00030000,
++	0x1914, 0x00030000,
++	0x1984, 0x03000000,
++	0x1988, 0x00000087,
++	0x198C, 0x00000007,
++	0x1990, 0xFFAA5500,
++	0x1994, 0x00000077,
++	0x1998, 0x12801000,
++	0x1998, 0x12801000,
++	0x1998, 0x12801001,
++	0x1998, 0x12801002,
++	0x1998, 0x12801003,
++	0x1998, 0x12801004,
++	0x1998, 0x12801005,
++	0x1998, 0x12801006,
++	0x1998, 0x12801007,
++	0x1998, 0x12801008,
++	0x1998, 0x12801009,
++	0x1998, 0x1280100A,
++	0x1998, 0x1280100B,
++	0x1998, 0x1280100C,
++	0x1998, 0x1280100D,
++	0x1998, 0x1280100E,
++	0x1998, 0x1280100F,
++	0x1998, 0x12801010,
++	0x1998, 0x12801011,
++	0x1998, 0x12801012,
++	0x1998, 0x12801013,
++	0x1998, 0x12801014,
++	0x1998, 0x12801015,
++	0x1998, 0x12801016,
++	0x1998, 0x12801017,
++	0x1998, 0x12801018,
++	0x1998, 0x12801019,
++	0x1998, 0x1280101A,
++	0x1998, 0x1280101B,
++	0x1998, 0x1280101C,
++	0x1998, 0x1280101D,
++	0x1998, 0x1280101E,
++	0x1998, 0x1280101F,
++	0x1998, 0x12801020,
++	0x1998, 0x12801021,
++	0x1998, 0x12801022,
++	0x1998, 0x12801023,
++	0x1998, 0x1280102C,
++	0x1998, 0x1280102D,
++	0x1998, 0x1280102E,
++	0x1998, 0x1280102F,
++	0x1998, 0x12801030,
++	0x1998, 0x12801031,
++	0x1998, 0x12801032,
++	0x1998, 0x12801033,
++	0x1998, 0x12801034,
++	0x1998, 0x12801035,
++	0x1998, 0x12801036,
++	0x1998, 0x12801037,
++	0x1998, 0x12801038,
++	0x1998, 0x12801039,
++	0x1998, 0x1280103A,
++	0x1998, 0x1280103B,
++	0x1998, 0x1280103C,
++	0x1998, 0x1280103D,
++	0x1998, 0x1280103E,
++	0x1998, 0x1280103F,
++	0x1998, 0x12801040,
++	0x1998, 0x12801041,
++	0x1998, 0x12801042,
++	0x1998, 0x12801043,
++	0x1998, 0x12801044,
++	0x1998, 0x12801045,
++	0x1998, 0x12801046,
++	0x1998, 0x12801047,
++	0x1998, 0x12801048,
++	0x1998, 0x12801049,
++	0x1998, 0x12801100,
++	0x1998, 0x12801101,
++	0x1998, 0x12801102,
++	0x1998, 0x12801103,
++	0x1998, 0x12801104,
++	0x1998, 0x12801105,
++	0x1998, 0x12801106,
++	0x1998, 0x12801107,
++	0x1998, 0x12801108,
++	0x1998, 0x12801109,
++	0x1998, 0x1280110A,
++	0x1998, 0x1280110B,
++	0x1998, 0x1280110C,
++	0x1998, 0x1280110D,
++	0x1998, 0x1280110E,
++	0x1998, 0x1280110F,
++	0x1998, 0x12801110,
++	0x1998, 0x12801111,
++	0x1998, 0x12801112,
++	0x1998, 0x12801113,
++	0x1998, 0x12801114,
++	0x1998, 0x12801115,
++	0x1998, 0x12801116,
++	0x1998, 0x12801117,
++	0x1998, 0x12801118,
++	0x1998, 0x12801119,
++	0x1998, 0x1280111A,
++	0x1998, 0x1280111B,
++	0x1998, 0x1280111C,
++	0x1998, 0x1280111D,
++	0x1998, 0x1280111E,
++	0x1998, 0x1280111F,
++	0x1998, 0x12801120,
++	0x1998, 0x12801121,
++	0x1998, 0x12801122,
++	0x1998, 0x12801123,
++	0x1998, 0x1280112C,
++	0x1998, 0x1280112D,
++	0x1998, 0x1280112E,
++	0x1998, 0x1280112F,
++	0x1998, 0x12801130,
++	0x1998, 0x12801131,
++	0x1998, 0x12801132,
++	0x1998, 0x12801133,
++	0x1998, 0x12801134,
++	0x1998, 0x12801135,
++	0x1998, 0x12801136,
++	0x1998, 0x12801137,
++	0x1998, 0x12801138,
++	0x1998, 0x12801139,
++	0x1998, 0x1280113A,
++	0x1998, 0x1280113B,
++	0x1998, 0x1280113C,
++	0x1998, 0x1280113D,
++	0x1998, 0x1280113E,
++	0x1998, 0x1280113F,
++	0x1998, 0x12801140,
++	0x1998, 0x12801141,
++	0x1998, 0x12801142,
++	0x1998, 0x12801143,
++	0x1998, 0x12801144,
++	0x1998, 0x12801145,
++	0x1998, 0x12801146,
++	0x1998, 0x12801147,
++	0x1998, 0x12801148,
++	0x1998, 0x12801149,
++	0x1998, 0x12801200,
++	0x1998, 0x12801201,
++	0x1998, 0x12801202,
++	0x1998, 0x12801203,
++	0x1998, 0x12801204,
++	0x1998, 0x12801205,
++	0x1998, 0x12801206,
++	0x1998, 0x12801207,
++	0x1998, 0x12801208,
++	0x1998, 0x12801209,
++	0x1998, 0x1280120A,
++	0x1998, 0x1280120B,
++	0x1998, 0x1280120C,
++	0x1998, 0x1280120D,
++	0x1998, 0x1280120E,
++	0x1998, 0x1280120F,
++	0x1998, 0x12801210,
++	0x1998, 0x12801211,
++	0x1998, 0x12801212,
++	0x1998, 0x12801213,
++	0x1998, 0x12801214,
++	0x1998, 0x12801215,
++	0x1998, 0x12801216,
++	0x1998, 0x12801217,
++	0x1998, 0x12801218,
++	0x1998, 0x12801219,
++	0x1998, 0x1280121A,
++	0x1998, 0x1280121B,
++	0x1998, 0x1280121C,
++	0x1998, 0x1280121D,
++	0x1998, 0x1280121E,
++	0x1998, 0x1280121F,
++	0x1998, 0x12801220,
++	0x1998, 0x12801221,
++	0x1998, 0x12801222,
++	0x1998, 0x12801223,
++	0x1998, 0x1280122C,
++	0x1998, 0x1280122D,
++	0x1998, 0x1280122E,
++	0x1998, 0x1280122F,
++	0x1998, 0x12801230,
++	0x1998, 0x12801231,
++	0x1998, 0x12801232,
++	0x1998, 0x12801233,
++	0x1998, 0x12801234,
++	0x1998, 0x12801235,
++	0x1998, 0x12801236,
++	0x1998, 0x12801237,
++	0x1998, 0x12801238,
++	0x1998, 0x12801239,
++	0x1998, 0x1280123A,
++	0x1998, 0x1280123B,
++	0x1998, 0x1280123C,
++	0x1998, 0x1280123D,
++	0x1998, 0x1280123E,
++	0x1998, 0x1280123F,
++	0x1998, 0x12801240,
++	0x1998, 0x12801241,
++	0x1998, 0x12801242,
++	0x1998, 0x12801243,
++	0x1998, 0x12801244,
++	0x1998, 0x12801245,
++	0x1998, 0x12801246,
++	0x1998, 0x12801247,
++	0x1998, 0x12801248,
++	0x1998, 0x12801249,
++	0x1998, 0x12801300,
++	0x1998, 0x12801301,
++	0x1998, 0x12801302,
++	0x1998, 0x12801303,
++	0x1998, 0x12801304,
++	0x1998, 0x12801305,
++	0x1998, 0x12801306,
++	0x1998, 0x12801307,
++	0x1998, 0x12801308,
++	0x1998, 0x12801309,
++	0x1998, 0x1280130A,
++	0x1998, 0x1280130B,
++	0x1998, 0x1280130C,
++	0x1998, 0x1280130D,
++	0x1998, 0x1280130E,
++	0x1998, 0x1280130F,
++	0x1998, 0x12801310,
++	0x1998, 0x12801311,
++	0x1998, 0x12801312,
++	0x1998, 0x12801313,
++	0x1998, 0x12801314,
++	0x1998, 0x12801315,
++	0x1998, 0x12801316,
++	0x1998, 0x12801317,
++	0x1998, 0x12801318,
++	0x1998, 0x12801319,
++	0x1998, 0x1280131A,
++	0x1998, 0x1280131B,
++	0x1998, 0x1280131C,
++	0x1998, 0x1280131D,
++	0x1998, 0x1280131E,
++	0x1998, 0x1280131F,
++	0x1998, 0x12801320,
++	0x1998, 0x12801321,
++	0x1998, 0x12801322,
++	0x1998, 0x12801323,
++	0x1998, 0x1280132C,
++	0x1998, 0x1280132D,
++	0x1998, 0x1280132E,
++	0x1998, 0x1280132F,
++	0x1998, 0x12801330,
++	0x1998, 0x12801331,
++	0x1998, 0x12801332,
++	0x1998, 0x12801333,
++	0x1998, 0x12801334,
++	0x1998, 0x12801335,
++	0x1998, 0x12801336,
++	0x1998, 0x12801337,
++	0x1998, 0x12801338,
++	0x1998, 0x12801339,
++	0x1998, 0x1280133A,
++	0x1998, 0x1280133B,
++	0x1998, 0x1280133C,
++	0x1998, 0x1280133D,
++	0x1998, 0x1280133E,
++	0x1998, 0x1280133F,
++	0x1998, 0x12801340,
++	0x1998, 0x12801341,
++	0x1998, 0x12801342,
++	0x1998, 0x12801343,
++	0x1998, 0x12801344,
++	0x1998, 0x12801345,
++	0x1998, 0x12801346,
++	0x1998, 0x12801347,
++	0x1998, 0x12801348,
++	0x1998, 0x12801349,
++	0x19D4, 0x88888888,
++	0x19D8, 0x00000888,
++	0xB00, 0xE3100100,
++	0xB00, 0xE7100100,
++	0xC60, 0x15808002,
++	0xC60, 0x01808003,
++	0xE60, 0x15808002,
++	0xE60, 0x01808003,
++	0x1860, 0x15808002,
++	0x1860, 0x01808003,
++	0x1A60, 0x15808002,
++	0x1A60, 0x01808003,
++	0xB00, 0xE3100100,
++	0xC5C, 0x0D080058,
++	0xE5C, 0x0D080058,
++	0x185C, 0x0D080058,
++	0x1A5C, 0x0D080058,
++	0xC5C, 0x0D000058,
++	0xE5C, 0x0D000058,
++	0x185C, 0x0D000058,
++	0x1A5C, 0x0D000058,
++	0xC60, 0x05808002,
++	0xC60, 0x0E808003,
++	0xE60, 0x05808002,
++	0xE60, 0x0E808003,
++	0x1860, 0x05808002,
++	0x1860, 0x0E808003,
++	0x1A60, 0x05808002,
++	0x1A60, 0x0E808003,
++	0xB00, 0xE7100100,
++	0xB00, 0xE3100100,
++	0xB00, 0xE3100000,
++	0x1C38, 0x00000002,
++	0xA00, 0x00D047C8,
++	0xA04, 0x46FF800C,
++	0xA08, 0x8C838300,
++	0xA0C, 0x2E7E000F,
++	0xA10, 0x9500BB78,
++	0xA14, 0x11144028,
++	0xA18, 0x00881117,
++	0xA1C, 0x89140F00,
++	0xA20, 0x1A1B0030,
++	0xA24, 0x090E1317,
++	0xA28, 0x00000204,
++	0xA2C, 0x00900000,
++	0xA70, 0x101FFF00,
++	0xA74, 0x00000128,
++	0xA78, 0x00000900,
++	0xA7C, 0x225B0606,
++	0xA80, 0x218075B2,
++	0xA84, 0x9C1F8C00,
++	0x1B04, 0xE24628D2,
++	0x1B10, 0x88010D46,
++	0x1B14, 0x00000000,
++	0x1B18, 0x00292903,
++	0x1B00, 0xF8000000,
++	0x1B00, 0xF800D000,
++	0x1B00, 0xF801F000,
++	0x1B1C, 0xA2123DB2,
++	0x1B20, 0x07040001,
++	0x1B24, 0x07060807,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0xA0000000,	0x00000000,
++	0x1B28, 0xC0060348,
++	0xB0000000,	0x00000000,
++	0x1B2C, 0x20000003,
++	0x1B30, 0x20000000,
++	0x1B38, 0x20000000,
++	0x1B3C, 0x20000000,
++	0x1BD4, 0x00000001,
++	0x1B94, 0x80000000,
++	0x1B34, 0x00000000,
++	0x1B34, 0x00000002,
++	0x1B34, 0x00000000,
++	0x1B00, 0xF8000002,
++	0x1B00, 0xF800D002,
++	0x1B00, 0xF801F002,
++	0x1B1C, 0xA2123DB2,
++	0x1B20, 0x07040001,
++	0x1B24, 0x07060807,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0xA0000000,	0x00000000,
++	0x1B28, 0xC0060348,
++	0xB0000000,	0x00000000,
++	0x1B2C, 0x20000003,
++	0x1B30, 0x20000000,
++	0x1B38, 0x20000000,
++	0x1B3C, 0x20000000,
++	0x1BD4, 0x00000001,
++	0x1B94, 0x80000000,
++	0x1B34, 0x00000000,
++	0x1B34, 0x00000002,
++	0x1B34, 0x00000000,
++	0x1B00, 0xF8000004,
++	0x1B00, 0xF800D004,
++	0x1B00, 0xF801F004,
++	0x1B1C, 0xA2123DB2,
++	0x1B20, 0x07040001,
++	0x1B24, 0x07060807,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0xA0000000,	0x00000000,
++	0x1B28, 0xC0060348,
++	0xB0000000,	0x00000000,
++	0x1B2C, 0x20000003,
++	0x1B30, 0x20000000,
++	0x1B38, 0x20000000,
++	0x1B3C, 0x20000000,
++	0x1BD4, 0x00000001,
++	0x1B94, 0x80000000,
++	0x1B34, 0x00000000,
++	0x1B34, 0x00000002,
++	0x1B34, 0x00000000,
++	0x1B00, 0xF8000006,
++	0x1B00, 0xF800D006,
++	0x1B00, 0xF801F006,
++	0x1B1C, 0xA2123DB2,
++	0x1B20, 0x07040001,
++	0x1B24, 0x07060807,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0x1B28, 0xC0060324,
++	0xA0000000,	0x00000000,
++	0x1B28, 0xC0060348,
++	0xB0000000,	0x00000000,
++	0x1B2C, 0x20000003,
++	0x1B30, 0x20000000,
++	0x1B38, 0x20000000,
++	0x1B3C, 0x20000000,
++	0x1BD4, 0x00000001,
++	0x1B94, 0x80000000,
++	0x1B34, 0x00000000,
++	0x1B34, 0x00000002,
++	0x1B34, 0x00000000,
++	0x1B00, 0xF8000000,
++	0x1B80, 0x00000007,
++	0x1B80, 0x09060005,
++	0x1B80, 0x09060007,
++	0x1B80, 0x0FFE0015,
++	0x1B80, 0x0FFE0017,
++	0x1B80, 0x00240025,
++	0x1B80, 0x00240027,
++	0x1B80, 0x00040035,
++	0x1B80, 0x00040037,
++	0x1B80, 0x05C00045,
++	0x1B80, 0x05C00047,
++	0x1B80, 0x00070055,
++	0x1B80, 0x00070057,
++	0x1B80, 0x64000065,
++	0x1B80, 0x64000067,
++	0x1B80, 0x00020075,
++	0x1B80, 0x00020077,
++	0x1B80, 0x00080085,
++	0x1B80, 0x00080087,
++	0x1B80, 0x80000095,
++	0x1B80, 0x80000097,
++	0x1B80, 0x090100A5,
++	0x1B80, 0x090100A7,
++	0x1B80, 0x0F0200B5,
++	0x1B80, 0x0F0200B7,
++	0x1B80, 0x002400C5,
++	0x1B80, 0x002400C7,
++	0x1B80, 0x000400D5,
++	0x1B80, 0x000400D7,
++	0x1B80, 0x05C000E5,
++	0x1B80, 0x05C000E7,
++	0x1B80, 0x000700F5,
++	0x1B80, 0x000700F7,
++	0x1B80, 0x64020105,
++	0x1B80, 0x64020107,
++	0x1B80, 0x00020115,
++	0x1B80, 0x00020117,
++	0x1B80, 0x00040125,
++	0x1B80, 0x00040127,
++	0x1B80, 0x4A000135,
++	0x1B80, 0x4A000137,
++	0x1B80, 0x4B040145,
++	0x1B80, 0x4B040147,
++	0x1B80, 0x85030155,
++	0x1B80, 0x85030157,
++	0x1B80, 0x40010165,
++	0x1B80, 0x40010167,
++	0x1B80, 0xE0290175,
++	0x1B80, 0xE0290177,
++	0x1B80, 0x00040185,
++	0x1B80, 0x00040187,
++	0x1B80, 0x4B050195,
++	0x1B80, 0x4B050197,
++	0x1B80, 0x860301A5,
++	0x1B80, 0x860301A7,
++	0x1B80, 0x400301B5,
++	0x1B80, 0x400301B7,
++	0x1B80, 0xE02901C5,
++	0x1B80, 0xE02901C7,
++	0x1B80, 0x000401D5,
++	0x1B80, 0x000401D7,
++	0x1B80, 0x4B0601E5,
++	0x1B80, 0x4B0601E7,
++	0x1B80, 0x870301F5,
++	0x1B80, 0x870301F7,
++	0x1B80, 0x40050205,
++	0x1B80, 0x40050207,
++	0x1B80, 0xE0290215,
++	0x1B80, 0xE0290217,
++	0x1B80, 0x00040225,
++	0x1B80, 0x00040227,
++	0x1B80, 0x4B070235,
++	0x1B80, 0x4B070237,
++	0x1B80, 0x88030245,
++	0x1B80, 0x88030247,
++	0x1B80, 0x40070255,
++	0x1B80, 0x40070257,
++	0x1B80, 0xE0290265,
++	0x1B80, 0xE0290267,
++	0x1B80, 0x4B000275,
++	0x1B80, 0x4B000277,
++	0x1B80, 0x30000285,
++	0x1B80, 0x30000287,
++	0x1B80, 0xFE100295,
++	0x1B80, 0xFE100297,
++	0x1B80, 0xFF1002A5,
++	0x1B80, 0xFF1002A7,
++	0x1B80, 0xE18602B5,
++	0x1B80, 0xE18602B7,
++	0x1B80, 0xF00A02C5,
++	0x1B80, 0xF00A02C7,
++	0x1B80, 0xF10A02D5,
++	0x1B80, 0xF10A02D7,
++	0x1B80, 0xF20A02E5,
++	0x1B80, 0xF20A02E7,
++	0x1B80, 0xF30802F5,
++	0x1B80, 0xF30802F7,
++	0x1B80, 0xF4070305,
++	0x1B80, 0xF4070307,
++	0x1B80, 0xF5060315,
++	0x1B80, 0xF5060317,
++	0x1B80, 0xF7060325,
++	0x1B80, 0xF7060327,
++	0x1B80, 0xF8050335,
++	0x1B80, 0xF8050337,
++	0x1B80, 0xF9040345,
++	0x1B80, 0xF9040347,
++	0x1B80, 0x00010355,
++	0x1B80, 0x00010357,
++	0x1B80, 0x303B0365,
++	0x1B80, 0x303B0367,
++	0x1B80, 0x30500375,
++	0x1B80, 0x30500377,
++	0x1B80, 0x305C0385,
++	0x1B80, 0x305C0387,
++	0x1B80, 0x31D50395,
++	0x1B80, 0x31D50397,
++	0x1B80, 0x31C503A5,
++	0x1B80, 0x31C503A7,
++	0x1B80, 0x4D0403B5,
++	0x1B80, 0x4D0403B7,
++	0x1B80, 0x2EF003C5,
++	0x1B80, 0x2EF003C7,
++	0x1B80, 0x000203D5,
++	0x1B80, 0x000203D7,
++	0x1B80, 0x208003E5,
++	0x1B80, 0x208003E7,
++	0x1B80, 0x000003F5,
++	0x1B80, 0x000003F7,
++	0x1B80, 0x4D000405,
++	0x1B80, 0x4D000407,
++	0x1B80, 0x55070415,
++	0x1B80, 0x55070417,
++	0x1B80, 0xE1230425,
++	0x1B80, 0xE1230427,
++	0x1B80, 0xE1230435,
++	0x1B80, 0xE1230437,
++	0x1B80, 0x4D040445,
++	0x1B80, 0x4D040447,
++	0x1B80, 0x20800455,
++	0x1B80, 0x20800457,
++	0x1B80, 0x84000465,
++	0x1B80, 0x84000467,
++	0x1B80, 0x4D000475,
++	0x1B80, 0x4D000477,
++	0x1B80, 0x550F0485,
++	0x1B80, 0x550F0487,
++	0x1B80, 0xE1230495,
++	0x1B80, 0xE1230497,
++	0x1B80, 0x4F0204A5,
++	0x1B80, 0x4F0204A7,
++	0x1B80, 0x4E0004B5,
++	0x1B80, 0x4E0004B7,
++	0x1B80, 0x530204C5,
++	0x1B80, 0x530204C7,
++	0x1B80, 0x520104D5,
++	0x1B80, 0x520104D7,
++	0x1B80, 0xE12704E5,
++	0x1B80, 0xE12704E7,
++	0x1B80, 0x000104F5,
++	0x1B80, 0x000104F7,
++	0x1B80, 0x5C720505,
++	0x1B80, 0x5C720507,
++	0x1B80, 0xE1320515,
++	0x1B80, 0xE1320517,
++	0x1B80, 0x54E50525,
++	0x1B80, 0x54E50527,
++	0x1B80, 0x54BF0535,
++	0x1B80, 0x54BF0537,
++	0x1B80, 0x54C50545,
++	0x1B80, 0x54C50547,
++	0x1B80, 0x54BE0555,
++	0x1B80, 0x54BE0557,
++	0x1B80, 0x54DF0565,
++	0x1B80, 0x54DF0567,
++	0x1B80, 0x0BA60575,
++	0x1B80, 0x0BA60577,
++	0x1B80, 0xF3130585,
++	0x1B80, 0xF3130587,
++	0x1B80, 0xF41E0595,
++	0x1B80, 0xF41E0597,
++	0x1B80, 0xF53C05A5,
++	0x1B80, 0xF53C05A7,
++	0x1B80, 0x000105B5,
++	0x1B80, 0x000105B7,
++	0x1B80, 0x620605C5,
++	0x1B80, 0x620605C7,
++	0x1B80, 0x600605D5,
++	0x1B80, 0x600605D7,
++	0x1B80, 0xE1A905E5,
++	0x1B80, 0xE1A905E7,
++	0x1B80, 0x0C0005F5,
++	0x1B80, 0x0C0005F7,
++	0x1B80, 0x5C720605,
++	0x1B80, 0x5C720607,
++	0x1B80, 0xE1320615,
++	0x1B80, 0xE1320617,
++	0x1B80, 0x5CF10625,
++	0x1B80, 0x5CF10627,
++	0x1B80, 0x0C010635,
++	0x1B80, 0x0C010637,
++	0x1B80, 0xF2020645,
++	0x1B80, 0xF2020647,
++	0x1B80, 0x30D60655,
++	0x1B80, 0x30D60657,
++	0x1B80, 0x0AC60665,
++	0x1B80, 0x0AC60667,
++	0x1B80, 0xE1B60675,
++	0x1B80, 0xE1B60677,
++	0x1B80, 0xE1580685,
++	0x1B80, 0xE1580687,
++	0x1B80, 0x54E50695,
++	0x1B80, 0x54E50697,
++	0x1B80, 0x000106A5,
++	0x1B80, 0x000106A7,
++	0x1B80, 0x560106B5,
++	0x1B80, 0x560106B7,
++	0x1B80, 0x5CE206C5,
++	0x1B80, 0x5CE206C7,
++	0x1B80, 0x0AE106D5,
++	0x1B80, 0x0AE106D7,
++	0x1B80, 0x630C06E5,
++	0x1B80, 0x630C06E7,
++	0x1B80, 0xE13F06F5,
++	0x1B80, 0xE13F06F7,
++	0x1B80, 0x00270705,
++	0x1B80, 0x00270707,
++	0x1B80, 0xE16C0715,
++	0x1B80, 0xE16C0717,
++	0x1B80, 0x00020725,
++	0x1B80, 0x00020727,
++	0x1B80, 0x002A0735,
++	0x1B80, 0x002A0737,
++	0x1B80, 0x07140745,
++	0x1B80, 0x07140747,
++	0x1B80, 0x00020755,
++	0x1B80, 0x00020757,
++	0x1B80, 0x30C30765,
++	0x1B80, 0x30C30767,
++	0x1B80, 0x56010775,
++	0x1B80, 0x56010777,
++	0x1B80, 0x5CE20785,
++	0x1B80, 0x5CE20787,
++	0x1B80, 0x0AE10795,
++	0x1B80, 0x0AE10797,
++	0x1B80, 0x631707A5,
++	0x1B80, 0x631707A7,
++	0x1B80, 0xE13F07B5,
++	0x1B80, 0xE13F07B7,
++	0x1B80, 0x002507C5,
++	0x1B80, 0x002507C7,
++	0x1B80, 0xE16C07D5,
++	0x1B80, 0xE16C07D7,
++	0x1B80, 0x000207E5,
++	0x1B80, 0x000207E7,
++	0x1B80, 0x630F07F5,
++	0x1B80, 0x630F07F7,
++	0x1B80, 0xE13F0805,
++	0x1B80, 0xE13F0807,
++	0x1B80, 0x63070815,
++	0x1B80, 0x63070817,
++	0x1B80, 0xE13F0825,
++	0x1B80, 0xE13F0827,
++	0x1B80, 0x07140835,
++	0x1B80, 0x07140837,
++	0x1B80, 0x56000845,
++	0x1B80, 0x56000847,
++	0x1B80, 0x5CF20855,
++	0x1B80, 0x5CF20857,
++	0x1B80, 0x0AF10865,
++	0x1B80, 0x0AF10867,
++	0x1B80, 0x07140875,
++	0x1B80, 0x07140877,
++	0x1B80, 0x07140885,
++	0x1B80, 0x07140887,
++	0x1B80, 0x630F0895,
++	0x1B80, 0x630F0897,
++	0x1B80, 0xE13F08A5,
++	0x1B80, 0xE13F08A7,
++	0x1B80, 0x631708B5,
++	0x1B80, 0x631708B7,
++	0x1B80, 0xE13F08C5,
++	0x1B80, 0xE13F08C7,
++	0x1B80, 0x002508D5,
++	0x1B80, 0x002508D7,
++	0x1B80, 0xE16C08E5,
++	0x1B80, 0xE16C08E7,
++	0x1B80, 0x000208F5,
++	0x1B80, 0x000208F7,
++	0x1B80, 0x30C30905,
++	0x1B80, 0x30C30907,
++	0x1B80, 0xE1A90915,
++	0x1B80, 0xE1A90917,
++	0x1B80, 0x62060925,
++	0x1B80, 0x62060927,
++	0x1B80, 0x60060935,
++	0x1B80, 0x60060937,
++	0x1B80, 0xE1160945,
++	0x1B80, 0xE1160947,
++	0x1B80, 0x54BE0955,
++	0x1B80, 0x54BE0957,
++	0x1B80, 0x56010965,
++	0x1B80, 0x56010967,
++	0x1B80, 0x5CE20975,
++	0x1B80, 0x5CE20977,
++	0x1B80, 0x0AE10985,
++	0x1B80, 0x0AE10987,
++	0x1B80, 0x633A0995,
++	0x1B80, 0x633A0997,
++	0x1B80, 0xE13F09A5,
++	0x1B80, 0xE13F09A7,
++	0x1B80, 0x633709B5,
++	0x1B80, 0x633709B7,
++	0x1B80, 0xE13F09C5,
++	0x1B80, 0xE13F09C7,
++	0x1B80, 0x632F09D5,
++	0x1B80, 0x632F09D7,
++	0x1B80, 0xE13F09E5,
++	0x1B80, 0xE13F09E7,
++	0x1B80, 0x632709F5,
++	0x1B80, 0x632709F7,
++	0x1B80, 0xE13F0A05,
++	0x1B80, 0xE13F0A07,
++	0x1B80, 0x631F0A15,
++	0x1B80, 0x631F0A17,
++	0x1B80, 0xE13F0A25,
++	0x1B80, 0xE13F0A27,
++	0x1B80, 0x63170A35,
++	0x1B80, 0x63170A37,
++	0x1B80, 0xE13F0A45,
++	0x1B80, 0xE13F0A47,
++	0x1B80, 0x630F0A55,
++	0x1B80, 0x630F0A57,
++	0x1B80, 0xE13F0A65,
++	0x1B80, 0xE13F0A67,
++	0x1B80, 0x63070A75,
++	0x1B80, 0x63070A77,
++	0x1B80, 0xE13F0A85,
++	0x1B80, 0xE13F0A87,
++	0x1B80, 0xE16C0A95,
++	0x1B80, 0xE16C0A97,
++	0x1B80, 0x56000AA5,
++	0x1B80, 0x56000AA7,
++	0x1B80, 0x5CF20AB5,
++	0x1B80, 0x5CF20AB7,
++	0x1B80, 0x0AF10AC5,
++	0x1B80, 0x0AF10AC7,
++	0x1B80, 0xF5040AD5,
++	0x1B80, 0xF5040AD7,
++	0x1B80, 0xE13F0AE5,
++	0x1B80, 0xE13F0AE7,
++	0x1B80, 0xE16C0AF5,
++	0x1B80, 0xE16C0AF7,
++	0x1B80, 0x30B30B05,
++	0x1B80, 0x30B30B07,
++	0x1B80, 0x07140B15,
++	0x1B80, 0x07140B17,
++	0x1B80, 0x07140B25,
++	0x1B80, 0x07140B27,
++	0x1B80, 0x630F0B35,
++	0x1B80, 0x630F0B37,
++	0x1B80, 0xE13F0B45,
++	0x1B80, 0xE13F0B47,
++	0x1B80, 0x63170B55,
++	0x1B80, 0x63170B57,
++	0x1B80, 0xE13F0B65,
++	0x1B80, 0xE13F0B67,
++	0x1B80, 0x631F0B75,
++	0x1B80, 0x631F0B77,
++	0x1B80, 0xE13F0B85,
++	0x1B80, 0xE13F0B87,
++	0x1B80, 0x63270B95,
++	0x1B80, 0x63270B97,
++	0x1B80, 0xE13F0BA5,
++	0x1B80, 0xE13F0BA7,
++	0x1B80, 0x632F0BB5,
++	0x1B80, 0x632F0BB7,
++	0x1B80, 0xE13F0BC5,
++	0x1B80, 0xE13F0BC7,
++	0x1B80, 0x63370BD5,
++	0x1B80, 0x63370BD7,
++	0x1B80, 0xE13F0BE5,
++	0x1B80, 0xE13F0BE7,
++	0x1B80, 0x633A0BF5,
++	0x1B80, 0x633A0BF7,
++	0x1B80, 0xE13F0C05,
++	0x1B80, 0xE13F0C07,
++	0x1B80, 0xF60B0C15,
++	0x1B80, 0xF60B0C17,
++	0x1B80, 0xF7170C25,
++	0x1B80, 0xF7170C27,
++	0x1B80, 0x4D300C35,
++	0x1B80, 0x4D300C37,
++	0x1B80, 0x57040C45,
++	0x1B80, 0x57040C47,
++	0x1B80, 0x57000C55,
++	0x1B80, 0x57000C57,
++	0x1B80, 0x96000C65,
++	0x1B80, 0x96000C67,
++	0x1B80, 0x57080C75,
++	0x1B80, 0x57080C77,
++	0x1B80, 0x57000C85,
++	0x1B80, 0x57000C87,
++	0x1B80, 0x95000C95,
++	0x1B80, 0x95000C97,
++	0x1B80, 0x4D000CA5,
++	0x1B80, 0x4D000CA7,
++	0x1B80, 0x6C070CB5,
++	0x1B80, 0x6C070CB7,
++	0x1B80, 0x00010CC5,
++	0x1B80, 0x00010CC7,
++	0x1B80, 0x00220CD5,
++	0x1B80, 0x00220CD7,
++	0x1B80, 0x06140CE5,
++	0x1B80, 0x06140CE7,
++	0x1B80, 0xE16C0CF5,
++	0x1B80, 0xE16C0CF7,
++	0x1B80, 0x00020D05,
++	0x1B80, 0x00020D07,
++	0x1B80, 0x00250D15,
++	0x1B80, 0x00250D17,
++	0x1B80, 0x06140D25,
++	0x1B80, 0x06140D27,
++	0x1B80, 0xE16C0D35,
++	0x1B80, 0xE16C0D37,
++	0x1B80, 0x00020D45,
++	0x1B80, 0x00020D47,
++	0x1B80, 0x00010D55,
++	0x1B80, 0x00010D57,
++	0x1B80, 0x00320D65,
++	0x1B80, 0x00320D67,
++	0x1B80, 0xE16C0D75,
++	0x1B80, 0xE16C0D77,
++	0x1B80, 0x00020D85,
++	0x1B80, 0x00020D87,
++	0x1B80, 0xE1860D95,
++	0x1B80, 0xE1860D97,
++	0x1B80, 0xE1B60DA5,
++	0x1B80, 0xE1B60DA7,
++	0x1B80, 0x5CD10DB5,
++	0x1B80, 0x5CD10DB7,
++	0x1B80, 0x673A0DC5,
++	0x1B80, 0x673A0DC7,
++	0x1B80, 0xE1230DD5,
++	0x1B80, 0xE1230DD7,
++	0x1B80, 0xF80B0DE5,
++	0x1B80, 0xF80B0DE7,
++	0x1B80, 0xF9110DF5,
++	0x1B80, 0xF9110DF7,
++	0x1B80, 0xE1580E05,
++	0x1B80, 0xE1580E07,
++	0x1B80, 0x67370E15,
++	0x1B80, 0x67370E17,
++	0x1B80, 0xE1580E25,
++	0x1B80, 0xE1580E27,
++	0x1B80, 0x672F0E35,
++	0x1B80, 0x672F0E37,
++	0x1B80, 0xE1580E45,
++	0x1B80, 0xE1580E47,
++	0x1B80, 0x67270E55,
++	0x1B80, 0x67270E57,
++	0x1B80, 0xE1580E65,
++	0x1B80, 0xE1580E67,
++	0x1B80, 0x671F0E75,
++	0x1B80, 0x671F0E77,
++	0x1B80, 0xE1580E85,
++	0x1B80, 0xE1580E87,
++	0x1B80, 0x67170E95,
++	0x1B80, 0x67170E97,
++	0x1B80, 0xE1580EA5,
++	0x1B80, 0xE1580EA7,
++	0x1B80, 0xF8020EB5,
++	0x1B80, 0xF8020EB7,
++	0x1B80, 0x30EE0EC5,
++	0x1B80, 0x30EE0EC7,
++	0x1B80, 0xE0D10ED5,
++	0x1B80, 0xE0D10ED7,
++	0x1B80, 0x670F0EE5,
++	0x1B80, 0x670F0EE7,
++	0x1B80, 0xE1580EF5,
++	0x1B80, 0xE1580EF7,
++	0x1B80, 0x67070F05,
++	0x1B80, 0x67070F07,
++	0x1B80, 0xE1580F15,
++	0x1B80, 0xE1580F17,
++	0x1B80, 0xF9020F25,
++	0x1B80, 0xF9020F27,
++	0x1B80, 0x30F50F35,
++	0x1B80, 0x30F50F37,
++	0x1B80, 0xE0CD0F45,
++	0x1B80, 0xE0CD0F47,
++	0x1B80, 0x06140F55,
++	0x1B80, 0x06140F57,
++	0x1B80, 0xE16C0F65,
++	0x1B80, 0xE16C0F67,
++	0x1B80, 0x5CF10F75,
++	0x1B80, 0x5CF10F77,
++	0x1B80, 0xE1580F85,
++	0x1B80, 0xE1580F87,
++	0x1B80, 0x06140F95,
++	0x1B80, 0x06140F97,
++	0x1B80, 0xE16C0FA5,
++	0x1B80, 0xE16C0FA7,
++	0x1B80, 0xF9020FB5,
++	0x1B80, 0xF9020FB7,
++	0x1B80, 0x30FF0FC5,
++	0x1B80, 0x30FF0FC7,
++	0x1B80, 0xE0CD0FD5,
++	0x1B80, 0xE0CD0FD7,
++	0x1B80, 0x31130FE5,
++	0x1B80, 0x31130FE7,
++	0x1B80, 0x670F0FF5,
++	0x1B80, 0x670F0FF7,
++	0x1B80, 0xE1581005,
++	0x1B80, 0xE1581007,
++	0x1B80, 0x67171015,
++	0x1B80, 0x67171017,
++	0x1B80, 0xE1581025,
++	0x1B80, 0xE1581027,
++	0x1B80, 0xF8021035,
++	0x1B80, 0xF8021037,
++	0x1B80, 0x31071045,
++	0x1B80, 0x31071047,
++	0x1B80, 0xE0D11055,
++	0x1B80, 0xE0D11057,
++	0x1B80, 0x31131065,
++	0x1B80, 0x31131067,
++	0x1B80, 0x670F1075,
++	0x1B80, 0x670F1077,
++	0x1B80, 0xE1581085,
++	0x1B80, 0xE1581087,
++	0x1B80, 0x671F1095,
++	0x1B80, 0x671F1097,
++	0x1B80, 0xE15810A5,
++	0x1B80, 0xE15810A7,
++	0x1B80, 0x672710B5,
++	0x1B80, 0x672710B7,
++	0x1B80, 0xE15810C5,
++	0x1B80, 0xE15810C7,
++	0x1B80, 0x672F10D5,
++	0x1B80, 0x672F10D7,
++	0x1B80, 0xE15810E5,
++	0x1B80, 0xE15810E7,
++	0x1B80, 0x673710F5,
++	0x1B80, 0x673710F7,
++	0x1B80, 0xE1581105,
++	0x1B80, 0xE1581107,
++	0x1B80, 0x673A1115,
++	0x1B80, 0x673A1117,
++	0x1B80, 0xE1581125,
++	0x1B80, 0xE1581127,
++	0x1B80, 0x4D101135,
++	0x1B80, 0x4D101137,
++	0x1B80, 0x30C41145,
++	0x1B80, 0x30C41147,
++	0x1B80, 0x00011155,
++	0x1B80, 0x00011157,
++	0x1B80, 0x6F241165,
++	0x1B80, 0x6F241167,
++	0x1B80, 0x6E401175,
++	0x1B80, 0x6E401177,
++	0x1B80, 0x6D001185,
++	0x1B80, 0x6D001187,
++	0x1B80, 0x55031195,
++	0x1B80, 0x55031197,
++	0x1B80, 0x312311A5,
++	0x1B80, 0x312311A7,
++	0x1B80, 0x6F1C11B5,
++	0x1B80, 0x6F1C11B7,
++	0x1B80, 0x6E4011C5,
++	0x1B80, 0x6E4011C7,
++	0x1B80, 0x550B11D5,
++	0x1B80, 0x550B11D7,
++	0x1B80, 0x312311E5,
++	0x1B80, 0x312311E7,
++	0x1B80, 0x061C11F5,
++	0x1B80, 0x061C11F7,
++	0x1B80, 0x54DE1205,
++	0x1B80, 0x54DE1207,
++	0x1B80, 0x06DC1215,
++	0x1B80, 0x06DC1217,
++	0x1B80, 0x55131225,
++	0x1B80, 0x55131227,
++	0x1B80, 0x74011235,
++	0x1B80, 0x74011237,
++	0x1B80, 0x74001245,
++	0x1B80, 0x74001247,
++	0x1B80, 0x8E001255,
++	0x1B80, 0x8E001257,
++	0x1B80, 0x00011265,
++	0x1B80, 0x00011267,
++	0x1B80, 0x57021275,
++	0x1B80, 0x57021277,
++	0x1B80, 0x57001285,
++	0x1B80, 0x57001287,
++	0x1B80, 0x97001295,
++	0x1B80, 0x97001297,
++	0x1B80, 0x000112A5,
++	0x1B80, 0x000112A7,
++	0x1B80, 0x54BF12B5,
++	0x1B80, 0x54BF12B7,
++	0x1B80, 0x54C112C5,
++	0x1B80, 0x54C112C7,
++	0x1B80, 0x54A212D5,
++	0x1B80, 0x54A212D7,
++	0x1B80, 0x54C012E5,
++	0x1B80, 0x54C012E7,
++	0x1B80, 0x54A112F5,
++	0x1B80, 0x54A112F7,
++	0x1B80, 0x54DF1305,
++	0x1B80, 0x54DF1307,
++	0x1B80, 0x00011315,
++	0x1B80, 0x00011317,
++	0x1B80, 0x55001325,
++	0x1B80, 0x55001327,
++	0x1B80, 0xE1231335,
++	0x1B80, 0xE1231337,
++	0x1B80, 0x54811345,
++	0x1B80, 0x54811347,
++	0x1B80, 0xE1231355,
++	0x1B80, 0xE1231357,
++	0x1B80, 0x54801365,
++	0x1B80, 0x54801367,
++	0x1B80, 0x002A1375,
++	0x1B80, 0x002A1377,
++	0x1B80, 0xE12B1385,
++	0x1B80, 0xE12B1387,
++	0x1B80, 0xE1231395,
++	0x1B80, 0xE1231397,
++	0x1B80, 0x548013A5,
++	0x1B80, 0x548013A7,
++	0x1B80, 0xE17213B5,
++	0x1B80, 0xE17213B7,
++	0x1B80, 0xBF3013C5,
++	0x1B80, 0xBF3013C7,
++	0x1B80, 0x000213D5,
++	0x1B80, 0x000213D7,
++	0x1B80, 0x302813E5,
++	0x1B80, 0x302813E7,
++	0x1B80, 0x4F7813F5,
++	0x1B80, 0x4F7813F7,
++	0x1B80, 0x4E001405,
++	0x1B80, 0x4E001407,
++	0x1B80, 0x53871415,
++	0x1B80, 0x53871417,
++	0x1B80, 0x52F11425,
++	0x1B80, 0x52F11427,
++	0x1B80, 0xE1161435,
++	0x1B80, 0xE1161437,
++	0x1B80, 0xE11B1445,
++	0x1B80, 0xE11B1447,
++	0x1B80, 0xE11F1455,
++	0x1B80, 0xE11F1457,
++	0x1B80, 0xE1271465,
++	0x1B80, 0xE1271467,
++	0x1B80, 0x54811475,
++	0x1B80, 0x54811477,
++	0x1B80, 0xE1161485,
++	0x1B80, 0xE1161487,
++	0x1B80, 0xE11B1495,
++	0x1B80, 0xE11B1497,
++	0x1B80, 0xE11F14A5,
++	0x1B80, 0xE11F14A7,
++	0x1B80, 0xE12714B5,
++	0x1B80, 0xE12714B7,
++	0x1B80, 0x548014C5,
++	0x1B80, 0x548014C7,
++	0x1B80, 0x002A14D5,
++	0x1B80, 0x002A14D7,
++	0x1B80, 0xE12B14E5,
++	0x1B80, 0xE12B14E7,
++	0x1B80, 0xE11614F5,
++	0x1B80, 0xE11614F7,
++	0x1B80, 0xE11B1505,
++	0x1B80, 0xE11B1507,
++	0x1B80, 0xE11F1515,
++	0x1B80, 0xE11F1517,
++	0x1B80, 0xE1271525,
++	0x1B80, 0xE1271527,
++	0x1B80, 0x54801535,
++	0x1B80, 0x54801537,
++	0x1B80, 0xE1721545,
++	0x1B80, 0xE1721547,
++	0x1B80, 0xBF171555,
++	0x1B80, 0xBF171557,
++	0x1B80, 0x00021565,
++	0x1B80, 0x00021567,
++	0x1B80, 0x30281575,
++	0x1B80, 0x30281577,
++	0x1B80, 0x06141585,
++	0x1B80, 0x06141587,
++	0x1B80, 0x73201595,
++	0x1B80, 0x73201597,
++	0x1B80, 0x720015A5,
++	0x1B80, 0x720015A7,
++	0x1B80, 0x710015B5,
++	0x1B80, 0x710015B7,
++	0x1B80, 0x550115C5,
++	0x1B80, 0x550115C7,
++	0x1B80, 0xE12315D5,
++	0x1B80, 0xE12315D7,
++	0x1B80, 0xE12715E5,
++	0x1B80, 0xE12715E7,
++	0x1B80, 0x548115F5,
++	0x1B80, 0x548115F7,
++	0x1B80, 0xE1231605,
++	0x1B80, 0xE1231607,
++	0x1B80, 0xE1271615,
++	0x1B80, 0xE1271617,
++	0x1B80, 0x54801625,
++	0x1B80, 0x54801627,
++	0x1B80, 0x002A1635,
++	0x1B80, 0x002A1637,
++	0x1B80, 0xE12B1645,
++	0x1B80, 0xE12B1647,
++	0x1B80, 0xE1231655,
++	0x1B80, 0xE1231657,
++	0x1B80, 0xE1271665,
++	0x1B80, 0xE1271667,
++	0x1B80, 0x54801675,
++	0x1B80, 0x54801677,
++	0x1B80, 0xE1721685,
++	0x1B80, 0xE1721687,
++	0x1B80, 0xBF031695,
++	0x1B80, 0xBF031697,
++	0x1B80, 0x000216A5,
++	0x1B80, 0x000216A7,
++	0x1B80, 0x302816B5,
++	0x1B80, 0x302816B7,
++	0x1B80, 0x54BF16C5,
++	0x1B80, 0x54BF16C7,
++	0x1B80, 0x54C516D5,
++	0x1B80, 0x54C516D7,
++	0x1B80, 0x050A16E5,
++	0x1B80, 0x050A16E7,
++	0x1B80, 0x071416F5,
++	0x1B80, 0x071416F7,
++	0x1B80, 0x54DF1705,
++	0x1B80, 0x54DF1707,
++	0x1B80, 0x00011715,
++	0x1B80, 0x00011717,
++	0x1B80, 0x54BF1725,
++	0x1B80, 0x54BF1727,
++	0x1B80, 0x54C01735,
++	0x1B80, 0x54C01737,
++	0x1B80, 0x54A31745,
++	0x1B80, 0x54A31747,
++	0x1B80, 0x54C11755,
++	0x1B80, 0x54C11757,
++	0x1B80, 0x54A41765,
++	0x1B80, 0x54A41767,
++	0x1B80, 0x4C831775,
++	0x1B80, 0x4C831777,
++	0x1B80, 0x4C031785,
++	0x1B80, 0x4C031787,
++	0x1B80, 0xBF0B1795,
++	0x1B80, 0xBF0B1797,
++	0x1B80, 0x54C217A5,
++	0x1B80, 0x54C217A7,
++	0x1B80, 0x54A417B5,
++	0x1B80, 0x54A417B7,
++	0x1B80, 0x4C8517C5,
++	0x1B80, 0x4C8517C7,
++	0x1B80, 0x4C0517D5,
++	0x1B80, 0x4C0517D7,
++	0x1B80, 0xBF0617E5,
++	0x1B80, 0xBF0617E7,
++	0x1B80, 0x54C117F5,
++	0x1B80, 0x54C117F7,
++	0x1B80, 0x54A31805,
++	0x1B80, 0x54A31807,
++	0x1B80, 0x4C861815,
++	0x1B80, 0x4C861817,
++	0x1B80, 0x4C061825,
++	0x1B80, 0x4C061827,
++	0x1B80, 0xBF011835,
++	0x1B80, 0xBF011837,
++	0x1B80, 0x54DF1845,
++	0x1B80, 0x54DF1847,
++	0x1B80, 0x00011855,
++	0x1B80, 0x00011857,
++	0x1B80, 0x00071865,
++	0x1B80, 0x00071867,
++	0x1B80, 0x54011875,
++	0x1B80, 0x54011877,
++	0x1B80, 0x00041885,
++	0x1B80, 0x00041887,
++	0x1B80, 0x56001895,
++	0x1B80, 0x56001897,
++	0x1B80, 0x5CF218A5,
++	0x1B80, 0x5CF218A7,
++	0x1B80, 0x630718B5,
++	0x1B80, 0x630718B7,
++	0x1B80, 0x620418C5,
++	0x1B80, 0x620418C7,
++	0x1B80, 0x610018D5,
++	0x1B80, 0x610018D7,
++	0x1B80, 0x670718E5,
++	0x1B80, 0x670718E7,
++	0x1B80, 0x660618F5,
++	0x1B80, 0x660618F7,
++	0x1B80, 0x6F201905,
++	0x1B80, 0x6F201907,
++	0x1B80, 0x6E001915,
++	0x1B80, 0x6E001917,
++	0x1B80, 0x6D001925,
++	0x1B80, 0x6D001927,
++	0x1B80, 0x6C031935,
++	0x1B80, 0x6C031937,
++	0x1B80, 0x73201945,
++	0x1B80, 0x73201947,
++	0x1B80, 0x72001955,
++	0x1B80, 0x72001957,
++	0x1B80, 0x71001965,
++	0x1B80, 0x71001967,
++	0x1B80, 0x7B201975,
++	0x1B80, 0x7B201977,
++	0x1B80, 0x7A001985,
++	0x1B80, 0x7A001987,
++	0x1B80, 0x79001995,
++	0x1B80, 0x79001997,
++	0x1B80, 0x7F2019A5,
++	0x1B80, 0x7F2019A7,
++	0x1B80, 0x7E0019B5,
++	0x1B80, 0x7E0019B7,
++	0x1B80, 0x7D0019C5,
++	0x1B80, 0x7D0019C7,
++	0x1B80, 0x090119D5,
++	0x1B80, 0x090119D7,
++	0x1B80, 0x0AC619E5,
++	0x1B80, 0x0AC619E7,
++	0x1B80, 0x0BA619F5,
++	0x1B80, 0x0BA619F7,
++	0x1B80, 0x0C011A05,
++	0x1B80, 0x0C011A07,
++	0x1B80, 0x0D021A15,
++	0x1B80, 0x0D021A17,
++	0x1B80, 0x0E041A25,
++	0x1B80, 0x0E041A27,
++	0x1B80, 0x0FFF1A35,
++	0x1B80, 0x0FFF1A37,
++	0x1B80, 0x4D041A45,
++	0x1B80, 0x4D041A47,
++	0x1B80, 0x28F81A55,
++	0x1B80, 0x28F81A57,
++	0x1B80, 0xE0001A65,
++	0x1B80, 0xE0001A67,
++	0x1B80, 0x4D001A75,
++	0x1B80, 0x4D001A77,
++	0x1B80, 0x00011A85,
++	0x1B80, 0x00011A87,
++	0x1B80, 0x4D041A95,
++	0x1B80, 0x4D041A97,
++	0x1B80, 0x2EF81AA5,
++	0x1B80, 0x2EF81AA7,
++	0x1B80, 0x00021AB5,
++	0x1B80, 0x00021AB7,
++	0x1B80, 0x23031AC5,
++	0x1B80, 0x23031AC7,
++	0x1B80, 0x00001AD5,
++	0x1B80, 0x00001AD7,
++	0x1B80, 0x23131AE5,
++	0x1B80, 0x23131AE7,
++	0x1B80, 0xE77F1AF5,
++	0x1B80, 0xE77F1AF7,
++	0x1B80, 0x232F1B05,
++	0x1B80, 0x232F1B07,
++	0x1B80, 0xEFBF1B15,
++	0x1B80, 0xEFBF1B17,
++	0x1B80, 0x2EF01B25,
++	0x1B80, 0x2EF01B27,
++	0x1B80, 0x00021B35,
++	0x1B80, 0x00021B37,
++	0x1B80, 0x4D001B45,
++	0x1B80, 0x4D001B47,
++	0x1B80, 0x00011B55,
++	0x1B80, 0x00011B57,
++	0x1B80, 0x4D041B65,
++	0x1B80, 0x4D041B67,
++	0x1B80, 0x2EF81B75,
++	0x1B80, 0x2EF81B77,
++	0x1B80, 0x00021B85,
++	0x1B80, 0x00021B87,
++	0x1B80, 0x23031B95,
++	0x1B80, 0x23031B97,
++	0x1B80, 0x00001BA5,
++	0x1B80, 0x00001BA7,
++	0x1B80, 0x23131BB5,
++	0x1B80, 0x23131BB7,
++	0x1B80, 0xE77F1BC5,
++	0x1B80, 0xE77F1BC7,
++	0x1B80, 0x232F1BD5,
++	0x1B80, 0x232F1BD7,
++	0x1B80, 0xE79F1BE5,
++	0x1B80, 0xE79F1BE7,
++	0x1B80, 0x2EF01BF5,
++	0x1B80, 0x2EF01BF7,
++	0x1B80, 0x00021C05,
++	0x1B80, 0x00021C07,
++	0x1B80, 0x28F81C15,
++	0x1B80, 0x28F81C17,
++	0x1B80, 0x80001C25,
++	0x1B80, 0x80001C27,
++	0x1B80, 0x4D001C35,
++	0x1B80, 0x4D001C37,
++	0x1B80, 0x00011C45,
++	0x1B80, 0x00011C47,
++	0x1B80, 0x00041C55,
++	0x1B80, 0x00041C57,
++	0x1B80, 0x6BC01C65,
++	0x1B80, 0x6BC01C67,
++	0x1B80, 0x4D041C75,
++	0x1B80, 0x4D041C77,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x68241C85,
++	0x1B80, 0x68241C87,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x68241C85,
++	0x1B80, 0x68241C87,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x68241C85,
++	0x1B80, 0x68241C87,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x68241C85,
++	0x1B80, 0x68241C87,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x68241C85,
++	0x1B80, 0x68241C87,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x68241C85,
++	0x1B80, 0x68241C87,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x68241C85,
++	0x1B80, 0x68241C87,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x68241C85,
++	0x1B80, 0x68241C87,
++	0xA0000000,	0x00000000,
++	0x1B80, 0x68481C85,
++	0x1B80, 0x68481C87,
++	0xB0000000,	0x00000000,
++	0x1B80, 0x66061C95,
++	0x1B80, 0x66061C97,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x650C1CA5,
++	0x1B80, 0x650C1CA7,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x650C1CA5,
++	0x1B80, 0x650C1CA7,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x650C1CA5,
++	0x1B80, 0x650C1CA7,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x650C1CA5,
++	0x1B80, 0x650C1CA7,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x650C1CA5,
++	0x1B80, 0x650C1CA7,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x650C1CA5,
++	0x1B80, 0x650C1CA7,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x650C1CA5,
++	0x1B80, 0x650C1CA7,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x650C1CA5,
++	0x1B80, 0x650C1CA7,
++	0xA0000000,	0x00000000,
++	0x1B80, 0x65041CA5,
++	0x1B80, 0x65041CA7,
++	0xB0000000,	0x00000000,
++	0x1B80, 0x64471CB5,
++	0x1B80, 0x64471CB7,
++	0x1B80, 0x23411CC5,
++	0x1B80, 0x23411CC7,
++	0x1B80, 0x100E1CD5,
++	0x1B80, 0x100E1CD7,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x60101CE5,
++	0x1B80, 0x60101CE7,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x60101CE5,
++	0x1B80, 0x60101CE7,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x60101CE5,
++	0x1B80, 0x60101CE7,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x60101CE5,
++	0x1B80, 0x60101CE7,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x60101CE5,
++	0x1B80, 0x60101CE7,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x60101CE5,
++	0x1B80, 0x60101CE7,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x60101CE5,
++	0x1B80, 0x60101CE7,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x60101CE5,
++	0x1B80, 0x60101CE7,
++	0xA0000000,	0x00000000,
++	0x1B80, 0x60011CE5,
++	0x1B80, 0x60011CE7,
++	0xB0000000,	0x00000000,
++	0x1B80, 0x23411CF5,
++	0x1B80, 0x23411CF7,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x60811D05,
++	0x1B80, 0x60811D07,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x60811D05,
++	0x1B80, 0x60811D07,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x60811D05,
++	0x1B80, 0x60811D07,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x60811D05,
++	0x1B80, 0x60811D07,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x60811D05,
++	0x1B80, 0x60811D07,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x60811D05,
++	0x1B80, 0x60811D07,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x60811D05,
++	0x1B80, 0x60811D07,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x60811D05,
++	0x1B80, 0x60811D07,
++	0xA0000000,	0x00000000,
++	0x1B80, 0x60611D05,
++	0x1B80, 0x60611D07,
++	0xB0000000,	0x00000000,
++	0x1B80, 0x23411D15,
++	0x1B80, 0x23411D17,
++	0x1B80, 0x70E11D25,
++	0x1B80, 0x70E11D27,
++	0x1B80, 0x4D001D35,
++	0x1B80, 0x4D001D37,
++	0x1B80, 0x00011D45,
++	0x1B80, 0x00011D47,
++	0x1B80, 0x00041D55,
++	0x1B80, 0x00041D57,
++	0x1B80, 0x6B401D65,
++	0x1B80, 0x6B401D67,
++	0x1B80, 0x4D041D75,
++	0x1B80, 0x4D041D77,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x68241D85,
++	0x1B80, 0x68241D87,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x68241D85,
++	0x1B80, 0x68241D87,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x68241D85,
++	0x1B80, 0x68241D87,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x68241D85,
++	0x1B80, 0x68241D87,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x68241D85,
++	0x1B80, 0x68241D87,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x68241D85,
++	0x1B80, 0x68241D87,
++	0xA0000000,	0x00000000,
++	0x1B80, 0x68481D85,
++	0x1B80, 0x68481D87,
++	0xB0000000,	0x00000000,
++	0x1B80, 0x66061D95,
++	0x1B80, 0x66061D97,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x65081DA5,
++	0x1B80, 0x65081DA7,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x65181DA5,
++	0x1B80, 0x65181DA7,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x65181DA5,
++	0x1B80, 0x65181DA7,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x65181DA5,
++	0x1B80, 0x65181DA7,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x65181DA5,
++	0x1B80, 0x65181DA7,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x65081DA5,
++	0x1B80, 0x65081DA7,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x65181DA5,
++	0x1B80, 0x65181DA7,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x65181DA5,
++	0x1B80, 0x65181DA7,
++	0xA0000000,	0x00000000,
++	0x1B80, 0x65081DA5,
++	0x1B80, 0x65081DA7,
++	0xB0000000,	0x00000000,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x64481DB5,
++	0x1B80, 0x64481DB7,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x64481DB5,
++	0x1B80, 0x64481DB7,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x64481DB5,
++	0x1B80, 0x64481DB7,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x64481DB5,
++	0x1B80, 0x64481DB7,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x64481DB5,
++	0x1B80, 0x64481DB7,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x64481DB5,
++	0x1B80, 0x64481DB7,
++	0xA0000000,	0x00000000,
++	0x1B80, 0x64471DB5,
++	0x1B80, 0x64471DB7,
++	0xB0000000,	0x00000000,
++	0x1B80, 0x23411DC5,
++	0x1B80, 0x23411DC7,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x11E41DD5,
++	0x1B80, 0x11E41DD7,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x11E81DD5,
++	0x1B80, 0x11E81DD7,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x11E81DD5,
++	0x1B80, 0x11E81DD7,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x11E81DD5,
++	0x1B80, 0x11E81DD7,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x11E81DD5,
++	0x1B80, 0x11E81DD7,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x11E41DD5,
++	0x1B80, 0x11E41DD7,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x11E81DD5,
++	0x1B80, 0x11E81DD7,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x11E81DD5,
++	0x1B80, 0x11E81DD7,
++	0xA0000000,	0x00000000,
++	0x1B80, 0x11E41DD5,
++	0x1B80, 0x11E41DD7,
++	0xB0000000,	0x00000000,
++	0x1B80, 0x60011DE5,
++	0x1B80, 0x60011DE7,
++	0x1B80, 0x23411DF5,
++	0x1B80, 0x23411DF7,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x60E11E05,
++	0x1B80, 0x60E11E07,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x61E11E05,
++	0x1B80, 0x61E11E07,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x61E11E05,
++	0x1B80, 0x61E11E07,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x61E11E05,
++	0x1B80, 0x61E11E07,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x61E11E05,
++	0x1B80, 0x61E11E07,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x60E11E05,
++	0x1B80, 0x60E11E07,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x61E11E05,
++	0x1B80, 0x61E11E07,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0x1B80, 0x61E11E05,
++	0x1B80, 0x61E11E07,
++	0xA0000000,	0x00000000,
++	0x1B80, 0x60E11E05,
++	0x1B80, 0x60E11E07,
++	0xB0000000,	0x00000000,
++	0x1B80, 0x23411E15,
++	0x1B80, 0x23411E17,
++	0x1B80, 0x70611E25,
++	0x1B80, 0x70611E27,
++	0x1B80, 0x4D001E35,
++	0x1B80, 0x4D001E37,
++	0x1B80, 0x00011E45,
++	0x1B80, 0x00011E47,
++	0x1B80, 0x00001E55,
++	0x1B80, 0x00001E57,
++	0x1B80, 0x00001E65,
++	0x1B80, 0x00001E67,
++	0x1B80, 0x00001E75,
++	0x1B80, 0x00001E77,
++	0x1B80, 0x00001E85,
++	0x1B80, 0x00001E87,
++	0x1B80, 0x00001E95,
++	0x1B80, 0x00001E97,
++	0x1B80, 0x00001EA5,
++	0x1B80, 0x00001EA7,
++	0x1B80, 0x00001EB5,
++	0x1B80, 0x00001EB7,
++	0x1B80, 0x00001EC5,
++	0x1B80, 0x00001EC7,
++	0x1B80, 0x00001ED5,
++	0x1B80, 0x00001ED7,
++	0x1B80, 0x00001EE5,
++	0x1B80, 0x00001EE7,
++	0x1B80, 0x00001EF5,
++	0x1B80, 0x00001EF7,
++	0x1B80, 0x00001F05,
++	0x1B80, 0x00001F07,
++	0x1B80, 0x00001F15,
++	0x1B80, 0x00001F17,
++	0x1B80, 0x00001F25,
++	0x1B80, 0x00001F27,
++	0x1B80, 0x00001F35,
++	0x1B80, 0x00001F37,
++	0x1B80, 0x00001F45,
++	0x1B80, 0x00001F47,
++	0x1B80, 0x00001F55,
++	0x1B80, 0x00001F57,
++	0x1B80, 0x00001F65,
++	0x1B80, 0x00001F67,
++	0x1B80, 0x00001F75,
++	0x1B80, 0x00001F77,
++	0x1B80, 0x00001F85,
++	0x1B80, 0x00001F87,
++	0x1B80, 0x00001F95,
++	0x1B80, 0x00001F97,
++	0x1B80, 0x00001FA5,
++	0x1B80, 0x00001FA7,
++	0x1B80, 0x00001FB5,
++	0x1B80, 0x00001FB7,
++	0x1B80, 0x00001FC5,
++	0x1B80, 0x00001FC7,
++	0x1B80, 0x00001FD5,
++	0x1B80, 0x00001FD7,
++	0x1B80, 0x00001FE5,
++	0x1B80, 0x00001FE7,
++	0x1B80, 0x00001FF5,
++	0x1B80, 0x00001FF7,
++	0x1B80, 0x00000006,
++	0x1B80, 0x00000002,
++};
++
++RTW_DECL_TABLE_PHY_COND(rtw8814a_bb, rtw_phy_cfg_bb);
++
++static const struct rtw_phy_pg_cfg_pair rtw8814a_bb_pg[] = {
++	{ 0, 0, 0, 0x00000c20, 0xffffffff, 0x34343434, },
++	{ 0, 0, 0, 0x00000c24, 0xffffffff, 0x34343434, },
++	{ 0, 0, 0, 0x00000c28, 0xffffffff, 0x30323434, },
++	{ 0, 0, 0, 0x00000c2c, 0xffffffff, 0x34343434, },
++	{ 0, 0, 0, 0x00000c30, 0xffffffff, 0x28303234, },
++	{ 0, 0, 1, 0x00000c34, 0xffffffff, 0x32323232, },
++	{ 0, 0, 1, 0x00000c38, 0xffffffff, 0x26283032, },
++	{ 0, 0, 2, 0x00000cd8, 0xffffffff, 0x30303030, },
++	{ 0, 0, 2, 0x00000cdc, 0xffffffff, 0x24262830, },
++	{ 0, 0, 0, 0x00000c3c, 0xffffffff, 0x34343434, },
++	{ 0, 0, 0, 0x00000c40, 0xffffffff, 0x28303234, },
++	{ 0, 0, 0, 0x00000c44, 0xffffffff, 0x32322426, },
++	{ 0, 0, 1, 0x00000c48, 0xffffffff, 0x30323232, },
++	{ 0, 0, 1, 0x00000c4c, 0xffffffff, 0x22242628, },
++	{ 0, 0, 2, 0x00000ce0, 0xffffffff, 0x30303030, },
++	{ 0, 0, 2, 0x00000ce4, 0xffffffff, 0x24262830, },
++	{ 0, 0, 2, 0x00000ce8, 0x0000ffff, 0x20222222, },
++	{ 0, 1, 0, 0x00000e20, 0xffffffff, 0x34343434, },
++	{ 0, 1, 0, 0x00000e24, 0xffffffff, 0x34343434, },
++	{ 0, 1, 0, 0x00000e28, 0xffffffff, 0x30323434, },
++	{ 0, 1, 0, 0x00000e2c, 0xffffffff, 0x34343434, },
++	{ 0, 1, 0, 0x00000e30, 0xffffffff, 0x28303234, },
++	{ 0, 1, 1, 0x00000e34, 0xffffffff, 0x32323232, },
++	{ 0, 1, 1, 0x00000e38, 0xffffffff, 0x26283032, },
++	{ 0, 1, 2, 0x00000ed8, 0xffffffff, 0x30303030, },
++	{ 0, 1, 2, 0x00000edc, 0xffffffff, 0x24262830, },
++	{ 0, 1, 0, 0x00000e3c, 0xffffffff, 0x34343434, },
++	{ 0, 1, 0, 0x00000e40, 0xffffffff, 0x28303234, },
++	{ 0, 1, 0, 0x00000e44, 0xffffffff, 0x32322426, },
++	{ 0, 1, 1, 0x00000e48, 0xffffffff, 0x30323232, },
++	{ 0, 1, 1, 0x00000e4c, 0xffffffff, 0x22242628, },
++	{ 0, 1, 2, 0x00000ee0, 0xffffffff, 0x30303030, },
++	{ 0, 1, 2, 0x00000ee4, 0xffffffff, 0x24262830, },
++	{ 0, 1, 2, 0x00000ee8, 0x0000ffff, 0x20222222, },
++	{ 0, 2, 0, 0x00001820, 0xffffffff, 0x34343434, },
++	{ 0, 2, 0, 0x00001824, 0xffffffff, 0x34343434, },
++	{ 0, 2, 0, 0x00001828, 0xffffffff, 0x30323434, },
++	{ 0, 2, 0, 0x0000182c, 0xffffffff, 0x34343434, },
++	{ 0, 2, 0, 0x00001830, 0xffffffff, 0x28303234, },
++	{ 0, 2, 1, 0x00001834, 0xffffffff, 0x32323232, },
++	{ 0, 2, 1, 0x00001838, 0xffffffff, 0x26283032, },
++	{ 0, 2, 2, 0x000018d8, 0xffffffff, 0x30303030, },
++	{ 0, 2, 2, 0x000018dc, 0xffffffff, 0x24262830, },
++	{ 0, 2, 0, 0x0000183c, 0xffffffff, 0x34343434, },
++	{ 0, 2, 0, 0x00001840, 0xffffffff, 0x28303234, },
++	{ 0, 2, 0, 0x00001844, 0xffffffff, 0x32322426, },
++	{ 0, 2, 1, 0x00001848, 0xffffffff, 0x30323232, },
++	{ 0, 2, 1, 0x0000184c, 0xffffffff, 0x22242628, },
++	{ 0, 2, 2, 0x000018e0, 0xffffffff, 0x30303030, },
++	{ 0, 2, 2, 0x000018e4, 0xffffffff, 0x24262830, },
++	{ 0, 2, 2, 0x000018e8, 0x0000ffff, 0x20222222, },
++	{ 0, 3, 0, 0x00001a20, 0xffffffff, 0x34343434, },
++	{ 0, 3, 0, 0x00001a24, 0xffffffff, 0x34343434, },
++	{ 0, 3, 0, 0x00001a28, 0xffffffff, 0x30323434, },
++	{ 0, 3, 0, 0x00001a2c, 0xffffffff, 0x34343434, },
++	{ 0, 3, 0, 0x00001a30, 0xffffffff, 0x28303234, },
++	{ 0, 3, 1, 0x00001a34, 0xffffffff, 0x32323232, },
++	{ 0, 3, 1, 0x00001a38, 0xffffffff, 0x26283032, },
++	{ 0, 3, 2, 0x00001ad8, 0xffffffff, 0x30303030, },
++	{ 0, 3, 2, 0x00001adc, 0xffffffff, 0x24262830, },
++	{ 0, 3, 0, 0x00001a3c, 0xffffffff, 0x34343434, },
++	{ 0, 3, 0, 0x00001a40, 0xffffffff, 0x28303234, },
++	{ 0, 3, 0, 0x00001a44, 0xffffffff, 0x32322426, },
++	{ 0, 3, 1, 0x00001a48, 0xffffffff, 0x30323232, },
++	{ 0, 3, 1, 0x00001a4c, 0xffffffff, 0x22242628, },
++	{ 0, 3, 2, 0x00001ae0, 0xffffffff, 0x30303030, },
++	{ 0, 3, 2, 0x00001ae4, 0xffffffff, 0x24262830, },
++	{ 0, 3, 2, 0x00001ae8, 0x0000ffff, 0x20222222, },
++	{ 1, 0, 0, 0x00000c24, 0xffffffff, 0x34343434, },
++	{ 1, 0, 0, 0x00000c28, 0xffffffff, 0x30323434, },
++	{ 1, 0, 0, 0x00000c2c, 0xffffffff, 0x34343434, },
++	{ 1, 0, 0, 0x00000c30, 0xffffffff, 0x28303234, },
++	{ 1, 0, 1, 0x00000c34, 0xffffffff, 0x32323232, },
++	{ 1, 0, 1, 0x00000c38, 0xffffffff, 0x26283032, },
++	{ 1, 0, 2, 0x00000cd8, 0xffffffff, 0x30303030, },
++	{ 1, 0, 2, 0x00000cdc, 0xffffffff, 0x24262830, },
++	{ 1, 0, 0, 0x00000c3c, 0xffffffff, 0x34343434, },
++	{ 1, 0, 0, 0x00000c40, 0xffffffff, 0x28303234, },
++	{ 1, 0, 0, 0x00000c44, 0xffffffff, 0x32322426, },
++	{ 1, 0, 1, 0x00000c48, 0xffffffff, 0x30323232, },
++	{ 1, 0, 1, 0x00000c4c, 0xffffffff, 0x22242628, },
++	{ 1, 0, 2, 0x00000ce0, 0xffffffff, 0x30303030, },
++	{ 1, 0, 2, 0x00000ce4, 0xffffffff, 0x24262830, },
++	{ 1, 0, 2, 0x00000ce8, 0x0000ffff, 0x20222222, },
++	{ 1, 1, 0, 0x00000e24, 0xffffffff, 0x34343434, },
++	{ 1, 1, 0, 0x00000e28, 0xffffffff, 0x30323434, },
++	{ 1, 1, 0, 0x00000e2c, 0xffffffff, 0x34343434, },
++	{ 1, 1, 0, 0x00000e30, 0xffffffff, 0x28303234, },
++	{ 1, 1, 1, 0x00000e34, 0xffffffff, 0x32323232, },
++	{ 1, 1, 1, 0x00000e38, 0xffffffff, 0x26283032, },
++	{ 1, 1, 2, 0x00000ed8, 0xffffffff, 0x30303030, },
++	{ 1, 1, 2, 0x00000edc, 0xffffffff, 0x24262830, },
++	{ 1, 1, 0, 0x00000e3c, 0xffffffff, 0x34343434, },
++	{ 1, 1, 0, 0x00000e40, 0xffffffff, 0x28303234, },
++	{ 1, 1, 0, 0x00000e44, 0xffffffff, 0x32322426, },
++	{ 1, 1, 1, 0x00000e48, 0xffffffff, 0x30323232, },
++	{ 1, 1, 1, 0x00000e4c, 0xffffffff, 0x22242628, },
++	{ 1, 1, 2, 0x00000ee0, 0xffffffff, 0x30303030, },
++	{ 1, 1, 2, 0x00000ee4, 0xffffffff, 0x24262830, },
++	{ 1, 1, 2, 0x00000ee8, 0x0000ffff, 0x20222222, },
++	{ 1, 2, 0, 0x00001824, 0xffffffff, 0x34343434, },
++	{ 1, 2, 0, 0x00001828, 0xffffffff, 0x30323434, },
++	{ 1, 2, 0, 0x0000182c, 0xffffffff, 0x34343434, },
++	{ 1, 2, 0, 0x00001830, 0xffffffff, 0x28303234, },
++	{ 1, 2, 1, 0x00001834, 0xffffffff, 0x32323232, },
++	{ 1, 2, 1, 0x00001838, 0xffffffff, 0x26283032, },
++	{ 1, 2, 2, 0x000018d8, 0xffffffff, 0x30303030, },
++	{ 1, 2, 2, 0x000018dc, 0xffffffff, 0x24262830, },
++	{ 1, 2, 0, 0x0000183c, 0xffffffff, 0x34343434, },
++	{ 1, 2, 0, 0x00001840, 0xffffffff, 0x28303234, },
++	{ 1, 2, 0, 0x00001844, 0xffffffff, 0x32322426, },
++	{ 1, 2, 1, 0x00001848, 0xffffffff, 0x30323232, },
++	{ 1, 2, 1, 0x0000184c, 0xffffffff, 0x22242628, },
++	{ 1, 2, 2, 0x000018e0, 0xffffffff, 0x30303030, },
++	{ 1, 2, 2, 0x000018e4, 0xffffffff, 0x24262830, },
++	{ 1, 2, 2, 0x000018e8, 0x0000ffff, 0x20222222, },
++	{ 1, 3, 0, 0x00001a24, 0xffffffff, 0x34343434, },
++	{ 1, 3, 0, 0x00001a28, 0xffffffff, 0x30323434, },
++	{ 1, 3, 0, 0x00001a2c, 0xffffffff, 0x34343434, },
++	{ 1, 3, 0, 0x00001a30, 0xffffffff, 0x28303234, },
++	{ 1, 3, 1, 0x00001a34, 0xffffffff, 0x32323232, },
++	{ 1, 3, 1, 0x00001a38, 0xffffffff, 0x26283032, },
++	{ 1, 3, 2, 0x00001ad8, 0xffffffff, 0x30303030, },
++	{ 1, 3, 2, 0x00001adc, 0xffffffff, 0x24262830, },
++	{ 1, 3, 0, 0x00001a3c, 0xffffffff, 0x34343434, },
++	{ 1, 3, 0, 0x00001a40, 0xffffffff, 0x28303234, },
++	{ 1, 3, 0, 0x00001a44, 0xffffffff, 0x32322426, },
++	{ 1, 3, 1, 0x00001a48, 0xffffffff, 0x30323232, },
++	{ 1, 3, 1, 0x00001a4c, 0xffffffff, 0x22242628, },
++	{ 1, 3, 2, 0x00001ae0, 0xffffffff, 0x30303030, },
++	{ 1, 3, 2, 0x00001ae4, 0xffffffff, 0x24262830, },
++	{ 1, 3, 2, 0x00001ae8, 0x0000ffff, 0x20222222, },
++};
++
++RTW_DECL_TABLE_BB_PG(rtw8814a_bb_pg);
++
++static const struct rtw_phy_pg_cfg_pair rtw8814a_bb_pg_type0[] = {
++	{ 0, 0, 0, 0x00000c20, 0xffffffff, 0x32323232, },
++	{ 0, 0, 0, 0x00000c24, 0xffffffff, 0x32323232, },
++	{ 0, 0, 0, 0x00000c28, 0xffffffff, 0x28303232, },
++	{ 0, 0, 0, 0x00000c2c, 0xffffffff, 0x32323232, },
++	{ 0, 0, 0, 0x00000c30, 0xffffffff, 0x26283032, },
++	{ 0, 0, 1, 0x00000c34, 0xffffffff, 0x30303030, },
++	{ 0, 0, 1, 0x00000c38, 0xffffffff, 0x24262830, },
++	{ 0, 0, 2, 0x00000cd8, 0xffffffff, 0x28282828, },
++	{ 0, 0, 2, 0x00000cdc, 0xffffffff, 0x22242628, },
++	{ 0, 0, 0, 0x00000c3c, 0xffffffff, 0x32323232, },
++	{ 0, 0, 0, 0x00000c40, 0xffffffff, 0x26283032, },
++	{ 0, 0, 0, 0x00000c44, 0xffffffff, 0x30302224, },
++	{ 0, 0, 1, 0x00000c48, 0xffffffff, 0x28303030, },
++	{ 0, 0, 1, 0x00000c4c, 0xffffffff, 0x20222426, },
++	{ 0, 0, 2, 0x00000ce0, 0xffffffff, 0x28282828, },
++	{ 0, 0, 2, 0x00000ce4, 0xffffffff, 0x22242628, },
++	{ 0, 0, 2, 0x00000ce8, 0x0000ffff, 0x18202020, },
++	{ 0, 1, 0, 0x00000e20, 0xffffffff, 0x32323232, },
++	{ 0, 1, 0, 0x00000e24, 0xffffffff, 0x32323232, },
++	{ 0, 1, 0, 0x00000e28, 0xffffffff, 0x28303232, },
++	{ 0, 1, 0, 0x00000e2c, 0xffffffff, 0x32323232, },
++	{ 0, 1, 0, 0x00000e30, 0xffffffff, 0x26283032, },
++	{ 0, 1, 1, 0x00000e34, 0xffffffff, 0x30303030, },
++	{ 0, 1, 1, 0x00000e38, 0xffffffff, 0x24262830, },
++	{ 0, 1, 2, 0x00000ed8, 0xffffffff, 0x28282828, },
++	{ 0, 1, 2, 0x00000edc, 0xffffffff, 0x22242628, },
++	{ 0, 1, 0, 0x00000e3c, 0xffffffff, 0x32323232, },
++	{ 0, 1, 0, 0x00000e40, 0xffffffff, 0x26283032, },
++	{ 0, 1, 0, 0x00000e44, 0xffffffff, 0x30302224, },
++	{ 0, 1, 1, 0x00000e48, 0xffffffff, 0x28303030, },
++	{ 0, 1, 1, 0x00000e4c, 0xffffffff, 0x20222426, },
++	{ 0, 1, 2, 0x00000ee0, 0xffffffff, 0x28282828, },
++	{ 0, 1, 2, 0x00000ee4, 0xffffffff, 0x22242628, },
++	{ 0, 1, 2, 0x00000ee8, 0x0000ffff, 0x18202020, },
++	{ 0, 2, 0, 0x00001820, 0xffffffff, 0x32323232, },
++	{ 0, 2, 0, 0x00001824, 0xffffffff, 0x32323232, },
++	{ 0, 2, 0, 0x00001828, 0xffffffff, 0x28303232, },
++	{ 0, 2, 0, 0x0000182c, 0xffffffff, 0x32323232, },
++	{ 0, 2, 0, 0x00001830, 0xffffffff, 0x26283032, },
++	{ 0, 2, 1, 0x00001834, 0xffffffff, 0x30303030, },
++	{ 0, 2, 1, 0x00001838, 0xffffffff, 0x24262830, },
++	{ 0, 2, 2, 0x000018d8, 0xffffffff, 0x28282828, },
++	{ 0, 2, 2, 0x000018dc, 0xffffffff, 0x22242628, },
++	{ 0, 2, 0, 0x0000183c, 0xffffffff, 0x32323232, },
++	{ 0, 2, 0, 0x00001840, 0xffffffff, 0x26283032, },
++	{ 0, 2, 0, 0x00001844, 0xffffffff, 0x30302224, },
++	{ 0, 2, 1, 0x00001848, 0xffffffff, 0x28303030, },
++	{ 0, 2, 1, 0x0000184c, 0xffffffff, 0x20222426, },
++	{ 0, 2, 2, 0x000018e0, 0xffffffff, 0x28282828, },
++	{ 0, 2, 2, 0x000018e4, 0xffffffff, 0x22242628, },
++	{ 0, 2, 2, 0x000018e8, 0x0000ffff, 0x18202020, },
++	{ 0, 3, 0, 0x00001a20, 0xffffffff, 0x32323232, },
++	{ 0, 3, 0, 0x00001a24, 0xffffffff, 0x32323232, },
++	{ 0, 3, 0, 0x00001a28, 0xffffffff, 0x28303232, },
++	{ 0, 3, 0, 0x00001a2c, 0xffffffff, 0x32323232, },
++	{ 0, 3, 0, 0x00001a30, 0xffffffff, 0x26283032, },
++	{ 0, 3, 1, 0x00001a34, 0xffffffff, 0x30303030, },
++	{ 0, 3, 1, 0x00001a38, 0xffffffff, 0x24262830, },
++	{ 0, 3, 2, 0x00001ad8, 0xffffffff, 0x28282828, },
++	{ 0, 3, 2, 0x00001adc, 0xffffffff, 0x22242628, },
++	{ 0, 3, 0, 0x00001a3c, 0xffffffff, 0x32323232, },
++	{ 0, 3, 0, 0x00001a40, 0xffffffff, 0x26283032, },
++	{ 0, 3, 0, 0x00001a44, 0xffffffff, 0x30302224, },
++	{ 0, 3, 1, 0x00001a48, 0xffffffff, 0x28303030, },
++	{ 0, 3, 1, 0x00001a4c, 0xffffffff, 0x20222426, },
++	{ 0, 3, 2, 0x00001ae0, 0xffffffff, 0x28282828, },
++	{ 0, 3, 2, 0x00001ae4, 0xffffffff, 0x22242628, },
++	{ 0, 3, 2, 0x00001ae8, 0x0000ffff, 0x18202020, },
++	{ 1, 0, 0, 0x00000c24, 0xffffffff, 0x32323232, },
++	{ 1, 0, 0, 0x00000c28, 0xffffffff, 0x28303232, },
++	{ 1, 0, 0, 0x00000c2c, 0xffffffff, 0x32323232, },
++	{ 1, 0, 0, 0x00000c30, 0xffffffff, 0x26283032, },
++	{ 1, 0, 1, 0x00000c34, 0xffffffff, 0x30303030, },
++	{ 1, 0, 1, 0x00000c38, 0xffffffff, 0x24262830, },
++	{ 1, 0, 2, 0x00000cd8, 0xffffffff, 0x28282828, },
++	{ 1, 0, 2, 0x00000cdc, 0xffffffff, 0x22242628, },
++	{ 1, 0, 0, 0x00000c3c, 0xffffffff, 0x32323232, },
++	{ 1, 0, 0, 0x00000c40, 0xffffffff, 0x26283032, },
++	{ 1, 0, 0, 0x00000c44, 0xffffffff, 0x30302224, },
++	{ 1, 0, 1, 0x00000c48, 0xffffffff, 0x28303030, },
++	{ 1, 0, 1, 0x00000c4c, 0xffffffff, 0x20222426, },
++	{ 1, 0, 2, 0x00000ce0, 0xffffffff, 0x28282828, },
++	{ 1, 0, 2, 0x00000ce4, 0xffffffff, 0x22242628, },
++	{ 1, 0, 2, 0x00000ce8, 0x0000ffff, 0x18202020, },
++	{ 1, 1, 0, 0x00000e24, 0xffffffff, 0x32323232, },
++	{ 1, 1, 0, 0x00000e28, 0xffffffff, 0x28303232, },
++	{ 1, 1, 0, 0x00000e2c, 0xffffffff, 0x32323232, },
++	{ 1, 1, 0, 0x00000e30, 0xffffffff, 0x26283032, },
++	{ 1, 1, 1, 0x00000e34, 0xffffffff, 0x30303030, },
++	{ 1, 1, 1, 0x00000e38, 0xffffffff, 0x24262830, },
++	{ 1, 1, 2, 0x00000ed8, 0xffffffff, 0x28282828, },
++	{ 1, 1, 2, 0x00000edc, 0xffffffff, 0x22242628, },
++	{ 1, 1, 0, 0x00000e3c, 0xffffffff, 0x32323232, },
++	{ 1, 1, 0, 0x00000e40, 0xffffffff, 0x26283032, },
++	{ 1, 1, 0, 0x00000e44, 0xffffffff, 0x30302224, },
++	{ 1, 1, 1, 0x00000e48, 0xffffffff, 0x28303030, },
++	{ 1, 1, 1, 0x00000e4c, 0xffffffff, 0x20222426, },
++	{ 1, 1, 2, 0x00000ee0, 0xffffffff, 0x28282828, },
++	{ 1, 1, 2, 0x00000ee4, 0xffffffff, 0x22242628, },
++	{ 1, 1, 2, 0x00000ee8, 0x0000ffff, 0x18202020, },
++	{ 1, 2, 0, 0x00001824, 0xffffffff, 0x32323232, },
++	{ 1, 2, 0, 0x00001828, 0xffffffff, 0x28303232, },
++	{ 1, 2, 0, 0x0000182c, 0xffffffff, 0x32323232, },
++	{ 1, 2, 0, 0x00001830, 0xffffffff, 0x26283032, },
++	{ 1, 2, 1, 0x00001834, 0xffffffff, 0x30303030, },
++	{ 1, 2, 1, 0x00001838, 0xffffffff, 0x24262830, },
++	{ 1, 2, 2, 0x000018d8, 0xffffffff, 0x28282828, },
++	{ 1, 2, 2, 0x000018dc, 0xffffffff, 0x22242628, },
++	{ 1, 2, 0, 0x0000183c, 0xffffffff, 0x32323232, },
++	{ 1, 2, 0, 0x00001840, 0xffffffff, 0x26283032, },
++	{ 1, 2, 0, 0x00001844, 0xffffffff, 0x30302224, },
++	{ 1, 2, 1, 0x00001848, 0xffffffff, 0x28303030, },
++	{ 1, 2, 1, 0x0000184c, 0xffffffff, 0x20222426, },
++	{ 1, 2, 2, 0x000018e0, 0xffffffff, 0x28282828, },
++	{ 1, 2, 2, 0x000018e4, 0xffffffff, 0x22242628, },
++	{ 1, 2, 2, 0x000018e8, 0x0000ffff, 0x18202020, },
++	{ 1, 3, 0, 0x00001a24, 0xffffffff, 0x32323232, },
++	{ 1, 3, 0, 0x00001a28, 0xffffffff, 0x28303232, },
++	{ 1, 3, 0, 0x00001a2c, 0xffffffff, 0x32323232, },
++	{ 1, 3, 0, 0x00001a30, 0xffffffff, 0x26283032, },
++	{ 1, 3, 1, 0x00001a34, 0xffffffff, 0x30303030, },
++	{ 1, 3, 1, 0x00001a38, 0xffffffff, 0x24262830, },
++	{ 1, 3, 2, 0x00001ad8, 0xffffffff, 0x28282828, },
++	{ 1, 3, 2, 0x00001adc, 0xffffffff, 0x22242628, },
++	{ 1, 3, 0, 0x00001a3c, 0xffffffff, 0x32323232, },
++	{ 1, 3, 0, 0x00001a40, 0xffffffff, 0x26283032, },
++	{ 1, 3, 0, 0x00001a44, 0xffffffff, 0x30302224, },
++	{ 1, 3, 1, 0x00001a48, 0xffffffff, 0x28303030, },
++	{ 1, 3, 1, 0x00001a4c, 0xffffffff, 0x20222426, },
++	{ 1, 3, 2, 0x00001ae0, 0xffffffff, 0x28282828, },
++	{ 1, 3, 2, 0x00001ae4, 0xffffffff, 0x22242628, },
++	{ 1, 3, 2, 0x00001ae8, 0x0000ffff, 0x18202020, },
++};
++
++RTW_DECL_TABLE_BB_PG(rtw8814a_bb_pg_type0);
++
++static const struct rtw_phy_pg_cfg_pair rtw8814a_bb_pg_type2[] = {
++	{ 0, 0, 0, 0x00000c20, 0xffffffff, 0x34343434, },
++	{ 0, 0, 0, 0x00000c24, 0xffffffff, 0x34343434, },
++	{ 0, 0, 0, 0x00000c28, 0xffffffff, 0x30323434, },
++	{ 0, 0, 0, 0x00000c2c, 0xffffffff, 0x34343434, },
++	{ 0, 0, 0, 0x00000c30, 0xffffffff, 0x28303234, },
++	{ 0, 0, 1, 0x00000c34, 0xffffffff, 0x32323232, },
++	{ 0, 0, 1, 0x00000c38, 0xffffffff, 0x26283032, },
++	{ 0, 0, 2, 0x00000cd8, 0xffffffff, 0x30303030, },
++	{ 0, 0, 2, 0x00000cdc, 0xffffffff, 0x24262830, },
++	{ 0, 0, 0, 0x00000c3c, 0xffffffff, 0x34343434, },
++	{ 0, 0, 0, 0x00000c40, 0xffffffff, 0x28303234, },
++	{ 0, 0, 0, 0x00000c44, 0xffffffff, 0x32322426, },
++	{ 0, 0, 1, 0x00000c48, 0xffffffff, 0x30323232, },
++	{ 0, 0, 1, 0x00000c4c, 0xffffffff, 0x22242628, },
++	{ 0, 0, 2, 0x00000ce0, 0xffffffff, 0x30303030, },
++	{ 0, 0, 2, 0x00000ce4, 0xffffffff, 0x24262830, },
++	{ 0, 0, 2, 0x00000ce8, 0x0000ffff, 0x20222222, },
++	{ 0, 1, 0, 0x00000e20, 0xffffffff, 0x34343434, },
++	{ 0, 1, 0, 0x00000e24, 0xffffffff, 0x34343434, },
++	{ 0, 1, 0, 0x00000e28, 0xffffffff, 0x30323434, },
++	{ 0, 1, 0, 0x00000e2c, 0xffffffff, 0x34343434, },
++	{ 0, 1, 0, 0x00000e30, 0xffffffff, 0x28303234, },
++	{ 0, 1, 1, 0x00000e34, 0xffffffff, 0x32323232, },
++	{ 0, 1, 1, 0x00000e38, 0xffffffff, 0x26283032, },
++	{ 0, 1, 2, 0x00000ed8, 0xffffffff, 0x30303030, },
++	{ 0, 1, 2, 0x00000edc, 0xffffffff, 0x24262830, },
++	{ 0, 1, 0, 0x00000e3c, 0xffffffff, 0x34343434, },
++	{ 0, 1, 0, 0x00000e40, 0xffffffff, 0x28303234, },
++	{ 0, 1, 0, 0x00000e44, 0xffffffff, 0x32322426, },
++	{ 0, 1, 1, 0x00000e48, 0xffffffff, 0x30323232, },
++	{ 0, 1, 1, 0x00000e4c, 0xffffffff, 0x22242628, },
++	{ 0, 1, 2, 0x00000ee0, 0xffffffff, 0x30303030, },
++	{ 0, 1, 2, 0x00000ee4, 0xffffffff, 0x24262830, },
++	{ 0, 1, 2, 0x00000ee8, 0x0000ffff, 0x20222222, },
++	{ 0, 2, 0, 0x00001820, 0xffffffff, 0x34343434, },
++	{ 0, 2, 0, 0x00001824, 0xffffffff, 0x34343434, },
++	{ 0, 2, 0, 0x00001828, 0xffffffff, 0x30323434, },
++	{ 0, 2, 0, 0x0000182c, 0xffffffff, 0x34343434, },
++	{ 0, 2, 0, 0x00001830, 0xffffffff, 0x28303234, },
++	{ 0, 2, 1, 0x00001834, 0xffffffff, 0x32323232, },
++	{ 0, 2, 1, 0x00001838, 0xffffffff, 0x26283032, },
++	{ 0, 2, 2, 0x000018d8, 0xffffffff, 0x30303030, },
++	{ 0, 2, 2, 0x000018dc, 0xffffffff, 0x24262830, },
++	{ 0, 2, 0, 0x0000183c, 0xffffffff, 0x34343434, },
++	{ 0, 2, 0, 0x00001840, 0xffffffff, 0x28303234, },
++	{ 0, 2, 0, 0x00001844, 0xffffffff, 0x32322426, },
++	{ 0, 2, 1, 0x00001848, 0xffffffff, 0x30323232, },
++	{ 0, 2, 1, 0x0000184c, 0xffffffff, 0x22242628, },
++	{ 0, 2, 2, 0x000018e0, 0xffffffff, 0x30303030, },
++	{ 0, 2, 2, 0x000018e4, 0xffffffff, 0x24262830, },
++	{ 0, 2, 2, 0x000018e8, 0x0000ffff, 0x20222222, },
++	{ 0, 3, 0, 0x00001a20, 0xffffffff, 0x34343434, },
++	{ 0, 3, 0, 0x00001a24, 0xffffffff, 0x34343434, },
++	{ 0, 3, 0, 0x00001a28, 0xffffffff, 0x30323434, },
++	{ 0, 3, 0, 0x00001a2c, 0xffffffff, 0x34343434, },
++	{ 0, 3, 0, 0x00001a30, 0xffffffff, 0x28303234, },
++	{ 0, 3, 1, 0x00001a34, 0xffffffff, 0x32323232, },
++	{ 0, 3, 1, 0x00001a38, 0xffffffff, 0x26283032, },
++	{ 0, 3, 2, 0x00001ad8, 0xffffffff, 0x30303030, },
++	{ 0, 3, 2, 0x00001adc, 0xffffffff, 0x24262830, },
++	{ 0, 3, 0, 0x00001a3c, 0xffffffff, 0x34343434, },
++	{ 0, 3, 0, 0x00001a40, 0xffffffff, 0x28303234, },
++	{ 0, 3, 0, 0x00001a44, 0xffffffff, 0x32322426, },
++	{ 0, 3, 1, 0x00001a48, 0xffffffff, 0x30323232, },
++	{ 0, 3, 1, 0x00001a4c, 0xffffffff, 0x22242628, },
++	{ 0, 3, 2, 0x00001ae0, 0xffffffff, 0x30303030, },
++	{ 0, 3, 2, 0x00001ae4, 0xffffffff, 0x24262830, },
++	{ 0, 3, 2, 0x00001ae8, 0x0000ffff, 0x20222222, },
++	{ 1, 0, 0, 0x00000c24, 0xffffffff, 0x34343434, },
++	{ 1, 0, 0, 0x00000c28, 0xffffffff, 0x30323434, },
++	{ 1, 0, 0, 0x00000c2c, 0xffffffff, 0x34343434, },
++	{ 1, 0, 0, 0x00000c30, 0xffffffff, 0x28303234, },
++	{ 1, 0, 1, 0x00000c34, 0xffffffff, 0x32323232, },
++	{ 1, 0, 1, 0x00000c38, 0xffffffff, 0x26283032, },
++	{ 1, 0, 2, 0x00000cd8, 0xffffffff, 0x30303030, },
++	{ 1, 0, 2, 0x00000cdc, 0xffffffff, 0x24262830, },
++	{ 1, 0, 0, 0x00000c3c, 0xffffffff, 0x34343434, },
++	{ 1, 0, 0, 0x00000c40, 0xffffffff, 0x28303234, },
++	{ 1, 0, 0, 0x00000c44, 0xffffffff, 0x32322426, },
++	{ 1, 0, 1, 0x00000c48, 0xffffffff, 0x30323232, },
++	{ 1, 0, 1, 0x00000c4c, 0xffffffff, 0x22242628, },
++	{ 1, 0, 2, 0x00000ce0, 0xffffffff, 0x30303030, },
++	{ 1, 0, 2, 0x00000ce4, 0xffffffff, 0x24262830, },
++	{ 1, 0, 2, 0x00000ce8, 0x0000ffff, 0x20222222, },
++	{ 1, 1, 0, 0x00000e24, 0xffffffff, 0x34343434, },
++	{ 1, 1, 0, 0x00000e28, 0xffffffff, 0x30323434, },
++	{ 1, 1, 0, 0x00000e2c, 0xffffffff, 0x34343434, },
++	{ 1, 1, 0, 0x00000e30, 0xffffffff, 0x28303234, },
++	{ 1, 1, 1, 0x00000e34, 0xffffffff, 0x32323232, },
++	{ 1, 1, 1, 0x00000e38, 0xffffffff, 0x26283032, },
++	{ 1, 1, 2, 0x00000ed8, 0xffffffff, 0x30303030, },
++	{ 1, 1, 2, 0x00000edc, 0xffffffff, 0x24262830, },
++	{ 1, 1, 0, 0x00000e3c, 0xffffffff, 0x34343434, },
++	{ 1, 1, 0, 0x00000e40, 0xffffffff, 0x28303234, },
++	{ 1, 1, 0, 0x00000e44, 0xffffffff, 0x32322426, },
++	{ 1, 1, 1, 0x00000e48, 0xffffffff, 0x30323232, },
++	{ 1, 1, 1, 0x00000e4c, 0xffffffff, 0x22242628, },
++	{ 1, 1, 2, 0x00000ee0, 0xffffffff, 0x30303030, },
++	{ 1, 1, 2, 0x00000ee4, 0xffffffff, 0x24262830, },
++	{ 1, 1, 2, 0x00000ee8, 0x0000ffff, 0x20222222, },
++	{ 1, 2, 0, 0x00001824, 0xffffffff, 0x34343434, },
++	{ 1, 2, 0, 0x00001828, 0xffffffff, 0x30323434, },
++	{ 1, 2, 0, 0x0000182c, 0xffffffff, 0x34343434, },
++	{ 1, 2, 0, 0x00001830, 0xffffffff, 0x28303234, },
++	{ 1, 2, 1, 0x00001834, 0xffffffff, 0x32323232, },
++	{ 1, 2, 1, 0x00001838, 0xffffffff, 0x26283032, },
++	{ 1, 2, 2, 0x000018d8, 0xffffffff, 0x30303030, },
++	{ 1, 2, 2, 0x000018dc, 0xffffffff, 0x24262830, },
++	{ 1, 2, 0, 0x0000183c, 0xffffffff, 0x34343434, },
++	{ 1, 2, 0, 0x00001840, 0xffffffff, 0x28303234, },
++	{ 1, 2, 0, 0x00001844, 0xffffffff, 0x32322426, },
++	{ 1, 2, 1, 0x00001848, 0xffffffff, 0x30323232, },
++	{ 1, 2, 1, 0x0000184c, 0xffffffff, 0x22242628, },
++	{ 1, 2, 2, 0x000018e0, 0xffffffff, 0x30303030, },
++	{ 1, 2, 2, 0x000018e4, 0xffffffff, 0x24262830, },
++	{ 1, 2, 2, 0x000018e8, 0x0000ffff, 0x20222222, },
++	{ 1, 3, 0, 0x00001a24, 0xffffffff, 0x34343434, },
++	{ 1, 3, 0, 0x00001a28, 0xffffffff, 0x30323434, },
++	{ 1, 3, 0, 0x00001a2c, 0xffffffff, 0x34343434, },
++	{ 1, 3, 0, 0x00001a30, 0xffffffff, 0x28303234, },
++	{ 1, 3, 1, 0x00001a34, 0xffffffff, 0x32323232, },
++	{ 1, 3, 1, 0x00001a38, 0xffffffff, 0x26283032, },
++	{ 1, 3, 2, 0x00001ad8, 0xffffffff, 0x30303030, },
++	{ 1, 3, 2, 0x00001adc, 0xffffffff, 0x24262830, },
++	{ 1, 3, 0, 0x00001a3c, 0xffffffff, 0x34343434, },
++	{ 1, 3, 0, 0x00001a40, 0xffffffff, 0x28303234, },
++	{ 1, 3, 0, 0x00001a44, 0xffffffff, 0x32322426, },
++	{ 1, 3, 1, 0x00001a48, 0xffffffff, 0x30323232, },
++	{ 1, 3, 1, 0x00001a4c, 0xffffffff, 0x22242628, },
++	{ 1, 3, 2, 0x00001ae0, 0xffffffff, 0x30303030, },
++	{ 1, 3, 2, 0x00001ae4, 0xffffffff, 0x24262830, },
++	{ 1, 3, 2, 0x00001ae8, 0x0000ffff, 0x20222222, },
++};
++
++RTW_DECL_TABLE_BB_PG(rtw8814a_bb_pg_type2);
++
++static const struct rtw_phy_pg_cfg_pair rtw8814a_bb_pg_type3[] = {
++	{ 0, 0, 0, 0x00000c20, 0xffffffff, 0x48484848, },
++	{ 0, 0, 0, 0x00000c24, 0xffffffff, 0x46464646, },
++	{ 0, 0, 0, 0x00000c28, 0xffffffff, 0x44464646, },
++	{ 0, 0, 0, 0x00000c2c, 0xffffffff, 0x46464646, },
++	{ 0, 0, 0, 0x00000c30, 0xffffffff, 0x42444646, },
++	{ 0, 0, 1, 0x00000c34, 0xffffffff, 0x46464646, },
++	{ 0, 0, 1, 0x00000c38, 0xffffffff, 0x42444646, },
++	{ 0, 0, 2, 0x00000cd8, 0xffffffff, 0x46464646, },
++	{ 0, 0, 2, 0x00000cdc, 0xffffffff, 0x42444646, },
++	{ 0, 0, 0, 0x00000c3c, 0xffffffff, 0x46464646, },
++	{ 0, 0, 0, 0x00000c40, 0xffffffff, 0x42444646, },
++	{ 0, 0, 0, 0x00000c44, 0xffffffff, 0x46463840, },
++	{ 0, 0, 1, 0x00000c48, 0xffffffff, 0x46464646, },
++	{ 0, 0, 1, 0x00000c4c, 0xffffffff, 0x38404244, },
++	{ 0, 0, 2, 0x00000ce0, 0xffffffff, 0x46464646, },
++	{ 0, 0, 2, 0x00000ce4, 0xffffffff, 0x42444646, },
++	{ 0, 0, 2, 0x00000ce8, 0x0000ffff, 0x38383840, },
++	{ 0, 1, 0, 0x00000e20, 0xffffffff, 0x48484848, },
++	{ 0, 1, 0, 0x00000e24, 0xffffffff, 0x46464646, },
++	{ 0, 1, 0, 0x00000e28, 0xffffffff, 0x44464646, },
++	{ 0, 1, 0, 0x00000e2c, 0xffffffff, 0x46464646, },
++	{ 0, 1, 0, 0x00000e30, 0xffffffff, 0x42444646, },
++	{ 0, 1, 1, 0x00000e34, 0xffffffff, 0x46464646, },
++	{ 0, 1, 1, 0x00000e38, 0xffffffff, 0x42444646, },
++	{ 0, 1, 2, 0x00000ed8, 0xffffffff, 0x46464646, },
++	{ 0, 1, 2, 0x00000edc, 0xffffffff, 0x42444646, },
++	{ 0, 1, 0, 0x00000e3c, 0xffffffff, 0x46464646, },
++	{ 0, 1, 0, 0x00000e40, 0xffffffff, 0x42444646, },
++	{ 0, 1, 0, 0x00000e44, 0xffffffff, 0x46463840, },
++	{ 0, 1, 1, 0x00000e48, 0xffffffff, 0x46464646, },
++	{ 0, 1, 1, 0x00000e4c, 0xffffffff, 0x38404244, },
++	{ 0, 1, 2, 0x00000ee0, 0xffffffff, 0x46464646, },
++	{ 0, 1, 2, 0x00000ee4, 0xffffffff, 0x42444646, },
++	{ 0, 1, 2, 0x00000ee8, 0x0000ffff, 0x38383840, },
++	{ 0, 2, 0, 0x00001820, 0xffffffff, 0x48484848, },
++	{ 0, 2, 0, 0x00001824, 0xffffffff, 0x46464646, },
++	{ 0, 2, 0, 0x00001828, 0xffffffff, 0x44464646, },
++	{ 0, 2, 0, 0x0000182c, 0xffffffff, 0x46464646, },
++	{ 0, 2, 0, 0x00001830, 0xffffffff, 0x42444646, },
++	{ 0, 2, 1, 0x00001834, 0xffffffff, 0x46464646, },
++	{ 0, 2, 1, 0x00001838, 0xffffffff, 0x42444646, },
++	{ 0, 2, 2, 0x000018d8, 0xffffffff, 0x46464646, },
++	{ 0, 2, 2, 0x000018dc, 0xffffffff, 0x42444646, },
++	{ 0, 2, 0, 0x0000183c, 0xffffffff, 0x46464646, },
++	{ 0, 2, 0, 0x00001840, 0xffffffff, 0x42444646, },
++	{ 0, 2, 0, 0x00001844, 0xffffffff, 0x46463840, },
++	{ 0, 2, 1, 0x00001848, 0xffffffff, 0x46464646, },
++	{ 0, 2, 1, 0x0000184c, 0xffffffff, 0x38404244, },
++	{ 0, 2, 2, 0x000018e0, 0xffffffff, 0x46464646, },
++	{ 0, 2, 2, 0x000018e4, 0xffffffff, 0x42444646, },
++	{ 0, 2, 2, 0x000018e8, 0x0000ffff, 0x38383840, },
++	{ 0, 3, 0, 0x00001a20, 0xffffffff, 0x48484848, },
++	{ 0, 3, 0, 0x00001a24, 0xffffffff, 0x46464646, },
++	{ 0, 3, 0, 0x00001a28, 0xffffffff, 0x44464646, },
++	{ 0, 3, 0, 0x00001a2c, 0xffffffff, 0x46464646, },
++	{ 0, 3, 0, 0x00001a30, 0xffffffff, 0x42444646, },
++	{ 0, 3, 1, 0x00001a34, 0xffffffff, 0x46464646, },
++	{ 0, 3, 1, 0x00001a38, 0xffffffff, 0x42444646, },
++	{ 0, 3, 2, 0x00001ad8, 0xffffffff, 0x46464646, },
++	{ 0, 3, 2, 0x00001adc, 0xffffffff, 0x42444646, },
++	{ 0, 3, 0, 0x00001a3c, 0xffffffff, 0x46464646, },
++	{ 0, 3, 0, 0x00001a40, 0xffffffff, 0x42444646, },
++	{ 0, 3, 0, 0x00001a44, 0xffffffff, 0x46463840, },
++	{ 0, 3, 1, 0x00001a48, 0xffffffff, 0x46464646, },
++	{ 0, 3, 1, 0x00001a4c, 0xffffffff, 0x38404244, },
++	{ 0, 3, 2, 0x00001ae0, 0xffffffff, 0x46464646, },
++	{ 0, 3, 2, 0x00001ae4, 0xffffffff, 0x42444646, },
++	{ 0, 3, 2, 0x00001ae8, 0x0000ffff, 0x38383840, },
++	{ 1, 0, 0, 0x00000c24, 0xffffffff, 0x46464646, },
++	{ 1, 0, 0, 0x00000c28, 0xffffffff, 0x44464646, },
++	{ 1, 0, 0, 0x00000c2c, 0xffffffff, 0x46464646, },
++	{ 1, 0, 0, 0x00000c30, 0xffffffff, 0x42444646, },
++	{ 1, 0, 1, 0x00000c34, 0xffffffff, 0x46464646, },
++	{ 1, 0, 1, 0x00000c38, 0xffffffff, 0x42444646, },
++	{ 1, 0, 2, 0x00000cd8, 0xffffffff, 0x46464646, },
++	{ 1, 0, 2, 0x00000cdc, 0xffffffff, 0x42444646, },
++	{ 1, 0, 0, 0x00000c3c, 0xffffffff, 0x46464646, },
++	{ 1, 0, 0, 0x00000c40, 0xffffffff, 0x42444646, },
++	{ 1, 0, 0, 0x00000c44, 0xffffffff, 0x46463840, },
++	{ 1, 0, 1, 0x00000c48, 0xffffffff, 0x46464646, },
++	{ 1, 0, 1, 0x00000c4c, 0xffffffff, 0x38404244, },
++	{ 1, 0, 2, 0x00000ce0, 0xffffffff, 0x46464646, },
++	{ 1, 0, 2, 0x00000ce4, 0xffffffff, 0x42444646, },
++	{ 1, 0, 2, 0x00000ce8, 0x0000ffff, 0x38383840, },
++	{ 1, 1, 0, 0x00000e24, 0xffffffff, 0x46464646, },
++	{ 1, 1, 0, 0x00000e28, 0xffffffff, 0x44464646, },
++	{ 1, 1, 0, 0x00000e2c, 0xffffffff, 0x46464646, },
++	{ 1, 1, 0, 0x00000e30, 0xffffffff, 0x42444646, },
++	{ 1, 1, 1, 0x00000e34, 0xffffffff, 0x46464646, },
++	{ 1, 1, 1, 0x00000e38, 0xffffffff, 0x42444646, },
++	{ 1, 1, 2, 0x00000ed8, 0xffffffff, 0x46464646, },
++	{ 1, 1, 2, 0x00000edc, 0xffffffff, 0x42444646, },
++	{ 1, 1, 0, 0x00000e3c, 0xffffffff, 0x46464646, },
++	{ 1, 1, 0, 0x00000e40, 0xffffffff, 0x42444646, },
++	{ 1, 1, 0, 0x00000e44, 0xffffffff, 0x46463840, },
++	{ 1, 1, 1, 0x00000e48, 0xffffffff, 0x46464646, },
++	{ 1, 1, 1, 0x00000e4c, 0xffffffff, 0x38404244, },
++	{ 1, 1, 2, 0x00000ee0, 0xffffffff, 0x46464646, },
++	{ 1, 1, 2, 0x00000ee4, 0xffffffff, 0x42444646, },
++	{ 1, 1, 2, 0x00000ee8, 0x0000ffff, 0x38383840, },
++	{ 1, 2, 0, 0x00001824, 0xffffffff, 0x46464646, },
++	{ 1, 2, 0, 0x00001828, 0xffffffff, 0x44464646, },
++	{ 1, 2, 0, 0x0000182c, 0xffffffff, 0x46464646, },
++	{ 1, 2, 0, 0x00001830, 0xffffffff, 0x42444646, },
++	{ 1, 2, 1, 0x00001834, 0xffffffff, 0x46464646, },
++	{ 1, 2, 1, 0x00001838, 0xffffffff, 0x42444646, },
++	{ 1, 2, 2, 0x000018d8, 0xffffffff, 0x46464646, },
++	{ 1, 2, 2, 0x000018dc, 0xffffffff, 0x42444646, },
++	{ 1, 2, 0, 0x0000183c, 0xffffffff, 0x46464646, },
++	{ 1, 2, 0, 0x00001840, 0xffffffff, 0x42444646, },
++	{ 1, 2, 0, 0x00001844, 0xffffffff, 0x46463840, },
++	{ 1, 2, 1, 0x00001848, 0xffffffff, 0x46464646, },
++	{ 1, 2, 1, 0x0000184c, 0xffffffff, 0x38404244, },
++	{ 1, 2, 2, 0x000018e0, 0xffffffff, 0x46464646, },
++	{ 1, 2, 2, 0x000018e4, 0xffffffff, 0x42444646, },
++	{ 1, 2, 2, 0x000018e8, 0x0000ffff, 0x38383840, },
++	{ 1, 3, 0, 0x00001a24, 0xffffffff, 0x46464646, },
++	{ 1, 3, 0, 0x00001a28, 0xffffffff, 0x44464646, },
++	{ 1, 3, 0, 0x00001a2c, 0xffffffff, 0x46464646, },
++	{ 1, 3, 0, 0x00001a30, 0xffffffff, 0x42444646, },
++	{ 1, 3, 1, 0x00001a34, 0xffffffff, 0x46464646, },
++	{ 1, 3, 1, 0x00001a38, 0xffffffff, 0x42444646, },
++	{ 1, 3, 2, 0x00001ad8, 0xffffffff, 0x46464646, },
++	{ 1, 3, 2, 0x00001adc, 0xffffffff, 0x42444646, },
++	{ 1, 3, 0, 0x00001a3c, 0xffffffff, 0x46464646, },
++	{ 1, 3, 0, 0x00001a40, 0xffffffff, 0x42444646, },
++	{ 1, 3, 0, 0x00001a44, 0xffffffff, 0x46463840, },
++	{ 1, 3, 1, 0x00001a48, 0xffffffff, 0x46464646, },
++	{ 1, 3, 1, 0x00001a4c, 0xffffffff, 0x38404244, },
++	{ 1, 3, 2, 0x00001ae0, 0xffffffff, 0x46464646, },
++	{ 1, 3, 2, 0x00001ae4, 0xffffffff, 0x42444646, },
++	{ 1, 3, 2, 0x00001ae8, 0x0000ffff, 0x38383840, },
++};
++
++RTW_DECL_TABLE_BB_PG(rtw8814a_bb_pg_type3);
++
++static const struct rtw_phy_pg_cfg_pair rtw8814a_bb_pg_type4[] = {
++	{ 0, 0, 0, 0x00000c20, 0xffffffff, 0x42424242, },
++	{ 0, 0, 0, 0x00000c24, 0xffffffff, 0x42424242, },
++	{ 0, 0, 0, 0x00000c28, 0xffffffff, 0x36384042, },
++	{ 0, 0, 0, 0x00000c2c, 0xffffffff, 0x42424242, },
++	{ 0, 0, 0, 0x00000c30, 0xffffffff, 0x34363840, },
++	{ 0, 0, 1, 0x00000c34, 0xffffffff, 0x42424242, },
++	{ 0, 0, 1, 0x00000c38, 0xffffffff, 0x34363840, },
++	{ 0, 0, 2, 0x00000cd8, 0xffffffff, 0x42424242, },
++	{ 0, 0, 2, 0x00000cdc, 0xffffffff, 0x34363840, },
++	{ 0, 0, 0, 0x00000c3c, 0xffffffff, 0x42424242, },
++	{ 0, 0, 0, 0x00000c40, 0xffffffff, 0x34363840, },
++	{ 0, 0, 0, 0x00000c44, 0xffffffff, 0x42423032, },
++	{ 0, 0, 1, 0x00000c48, 0xffffffff, 0x38404242, },
++	{ 0, 0, 1, 0x00000c4c, 0xffffffff, 0x30323436, },
++	{ 0, 0, 2, 0x00000ce0, 0xffffffff, 0x42424242, },
++	{ 0, 0, 2, 0x00000ce4, 0xffffffff, 0x34363840, },
++	{ 0, 0, 2, 0x00000ce8, 0x0000ffff, 0x30303032, },
++	{ 0, 1, 0, 0x00000e20, 0xffffffff, 0x42424242, },
++	{ 0, 1, 0, 0x00000e24, 0xffffffff, 0x42424242, },
++	{ 0, 1, 0, 0x00000e28, 0xffffffff, 0x36384042, },
++	{ 0, 1, 0, 0x00000e2c, 0xffffffff, 0x42424242, },
++	{ 0, 1, 0, 0x00000e30, 0xffffffff, 0x34363840, },
++	{ 0, 1, 1, 0x00000e34, 0xffffffff, 0x42424242, },
++	{ 0, 1, 1, 0x00000e38, 0xffffffff, 0x34363840, },
++	{ 0, 1, 2, 0x00000ed8, 0xffffffff, 0x42424242, },
++	{ 0, 1, 2, 0x00000edc, 0xffffffff, 0x34363840, },
++	{ 0, 1, 0, 0x00000e3c, 0xffffffff, 0x42424242, },
++	{ 0, 1, 0, 0x00000e40, 0xffffffff, 0x34363840, },
++	{ 0, 1, 0, 0x00000e44, 0xffffffff, 0x42423032, },
++	{ 0, 1, 1, 0x00000e48, 0xffffffff, 0x38404242, },
++	{ 0, 1, 1, 0x00000e4c, 0xffffffff, 0x30323436, },
++	{ 0, 1, 2, 0x00000ee0, 0xffffffff, 0x42424242, },
++	{ 0, 1, 2, 0x00000ee4, 0xffffffff, 0x34363840, },
++	{ 0, 1, 2, 0x00000ee8, 0x0000ffff, 0x30303032, },
++	{ 0, 2, 0, 0x00001820, 0xffffffff, 0x42424242, },
++	{ 0, 2, 0, 0x00001824, 0xffffffff, 0x42424242, },
++	{ 0, 2, 0, 0x00001828, 0xffffffff, 0x36384042, },
++	{ 0, 2, 0, 0x0000182c, 0xffffffff, 0x42424242, },
++	{ 0, 2, 0, 0x00001830, 0xffffffff, 0x34363840, },
++	{ 0, 2, 1, 0x00001834, 0xffffffff, 0x42424242, },
++	{ 0, 2, 1, 0x00001838, 0xffffffff, 0x34363840, },
++	{ 0, 2, 2, 0x000018d8, 0xffffffff, 0x42424242, },
++	{ 0, 2, 2, 0x000018dc, 0xffffffff, 0x34363840, },
++	{ 0, 2, 0, 0x0000183c, 0xffffffff, 0x42424242, },
++	{ 0, 2, 0, 0x00001840, 0xffffffff, 0x34363840, },
++	{ 0, 2, 0, 0x00001844, 0xffffffff, 0x42423032, },
++	{ 0, 2, 1, 0x00001848, 0xffffffff, 0x38404242, },
++	{ 0, 2, 1, 0x0000184c, 0xffffffff, 0x30323436, },
++	{ 0, 2, 2, 0x000018e0, 0xffffffff, 0x42424242, },
++	{ 0, 2, 2, 0x000018e4, 0xffffffff, 0x34363840, },
++	{ 0, 2, 2, 0x000018e8, 0x0000ffff, 0x30303032, },
++	{ 0, 3, 0, 0x00001a20, 0xffffffff, 0x42424242, },
++	{ 0, 3, 0, 0x00001a24, 0xffffffff, 0x42424242, },
++	{ 0, 3, 0, 0x00001a28, 0xffffffff, 0x36384042, },
++	{ 0, 3, 0, 0x00001a2c, 0xffffffff, 0x42424242, },
++	{ 0, 3, 0, 0x00001a30, 0xffffffff, 0x34363840, },
++	{ 0, 3, 1, 0x00001a34, 0xffffffff, 0x42424242, },
++	{ 0, 3, 1, 0x00001a38, 0xffffffff, 0x34363840, },
++	{ 0, 3, 2, 0x00001ad8, 0xffffffff, 0x42424242, },
++	{ 0, 3, 2, 0x00001adc, 0xffffffff, 0x34363840, },
++	{ 0, 3, 0, 0x00001a3c, 0xffffffff, 0x42424242, },
++	{ 0, 3, 0, 0x00001a40, 0xffffffff, 0x34363840, },
++	{ 0, 3, 0, 0x00001a44, 0xffffffff, 0x42423032, },
++	{ 0, 3, 1, 0x00001a48, 0xffffffff, 0x38404242, },
++	{ 0, 3, 1, 0x00001a4c, 0xffffffff, 0x30323436, },
++	{ 0, 3, 2, 0x00001ae0, 0xffffffff, 0x42424242, },
++	{ 0, 3, 2, 0x00001ae4, 0xffffffff, 0x34363840, },
++	{ 0, 3, 2, 0x00001ae8, 0x0000ffff, 0x30303032, },
++	{ 1, 0, 0, 0x00000c24, 0xffffffff, 0x42424242, },
++	{ 1, 0, 0, 0x00000c28, 0xffffffff, 0x36384042, },
++	{ 1, 0, 0, 0x00000c2c, 0xffffffff, 0x42424242, },
++	{ 1, 0, 0, 0x00000c30, 0xffffffff, 0x34363840, },
++	{ 1, 0, 1, 0x00000c34, 0xffffffff, 0x42424242, },
++	{ 1, 0, 1, 0x00000c38, 0xffffffff, 0x34363840, },
++	{ 1, 0, 2, 0x00000cd8, 0xffffffff, 0x42424242, },
++	{ 1, 0, 2, 0x00000cdc, 0xffffffff, 0x34363840, },
++	{ 1, 0, 0, 0x00000c3c, 0xffffffff, 0x42424242, },
++	{ 1, 0, 0, 0x00000c40, 0xffffffff, 0x34363840, },
++	{ 1, 0, 0, 0x00000c44, 0xffffffff, 0x42423032, },
++	{ 1, 0, 1, 0x00000c48, 0xffffffff, 0x38404242, },
++	{ 1, 0, 1, 0x00000c4c, 0xffffffff, 0x30323436, },
++	{ 1, 0, 2, 0x00000ce0, 0xffffffff, 0x42424242, },
++	{ 1, 0, 2, 0x00000ce4, 0xffffffff, 0x34363840, },
++	{ 1, 0, 2, 0x00000ce8, 0x0000ffff, 0x30303032, },
++	{ 1, 1, 0, 0x00000e24, 0xffffffff, 0x42424242, },
++	{ 1, 1, 0, 0x00000e28, 0xffffffff, 0x36384042, },
++	{ 1, 1, 0, 0x00000e2c, 0xffffffff, 0x42424242, },
++	{ 1, 1, 0, 0x00000e30, 0xffffffff, 0x34363840, },
++	{ 1, 1, 1, 0x00000e34, 0xffffffff, 0x42424242, },
++	{ 1, 1, 1, 0x00000e38, 0xffffffff, 0x34363840, },
++	{ 1, 1, 2, 0x00000ed8, 0xffffffff, 0x42424242, },
++	{ 1, 1, 2, 0x00000edc, 0xffffffff, 0x34363840, },
++	{ 1, 1, 0, 0x00000e3c, 0xffffffff, 0x42424242, },
++	{ 1, 1, 0, 0x00000e40, 0xffffffff, 0x34363840, },
++	{ 1, 1, 0, 0x00000e44, 0xffffffff, 0x42423032, },
++	{ 1, 1, 1, 0x00000e48, 0xffffffff, 0x38404242, },
++	{ 1, 1, 1, 0x00000e4c, 0xffffffff, 0x30323436, },
++	{ 1, 1, 2, 0x00000ee0, 0xffffffff, 0x42424242, },
++	{ 1, 1, 2, 0x00000ee4, 0xffffffff, 0x34363840, },
++	{ 1, 1, 2, 0x00000ee8, 0x0000ffff, 0x30303032, },
++	{ 1, 2, 0, 0x00001824, 0xffffffff, 0x42424242, },
++	{ 1, 2, 0, 0x00001828, 0xffffffff, 0x36384042, },
++	{ 1, 2, 0, 0x0000182c, 0xffffffff, 0x42424242, },
++	{ 1, 2, 0, 0x00001830, 0xffffffff, 0x34363840, },
++	{ 1, 2, 1, 0x00001834, 0xffffffff, 0x42424242, },
++	{ 1, 2, 1, 0x00001838, 0xffffffff, 0x34363840, },
++	{ 1, 2, 2, 0x000018d8, 0xffffffff, 0x42424242, },
++	{ 1, 2, 2, 0x000018dc, 0xffffffff, 0x34363840, },
++	{ 1, 2, 0, 0x0000183c, 0xffffffff, 0x42424242, },
++	{ 1, 2, 0, 0x00001840, 0xffffffff, 0x34363840, },
++	{ 1, 2, 0, 0x00001844, 0xffffffff, 0x42423032, },
++	{ 1, 2, 1, 0x00001848, 0xffffffff, 0x38404242, },
++	{ 1, 2, 1, 0x0000184c, 0xffffffff, 0x30323436, },
++	{ 1, 2, 2, 0x000018e0, 0xffffffff, 0x42424242, },
++	{ 1, 2, 2, 0x000018e4, 0xffffffff, 0x34363840, },
++	{ 1, 2, 2, 0x000018e8, 0x0000ffff, 0x30303032, },
++	{ 1, 3, 0, 0x00001a24, 0xffffffff, 0x42424242, },
++	{ 1, 3, 0, 0x00001a28, 0xffffffff, 0x36384042, },
++	{ 1, 3, 0, 0x00001a2c, 0xffffffff, 0x42424242, },
++	{ 1, 3, 0, 0x00001a30, 0xffffffff, 0x34363840, },
++	{ 1, 3, 1, 0x00001a34, 0xffffffff, 0x42424242, },
++	{ 1, 3, 1, 0x00001a38, 0xffffffff, 0x34363840, },
++	{ 1, 3, 2, 0x00001ad8, 0xffffffff, 0x42424242, },
++	{ 1, 3, 2, 0x00001adc, 0xffffffff, 0x34363840, },
++	{ 1, 3, 0, 0x00001a3c, 0xffffffff, 0x42424242, },
++	{ 1, 3, 0, 0x00001a40, 0xffffffff, 0x34363840, },
++	{ 1, 3, 0, 0x00001a44, 0xffffffff, 0x42423032, },
++	{ 1, 3, 1, 0x00001a48, 0xffffffff, 0x38404242, },
++	{ 1, 3, 1, 0x00001a4c, 0xffffffff, 0x30323436, },
++	{ 1, 3, 2, 0x00001ae0, 0xffffffff, 0x42424242, },
++	{ 1, 3, 2, 0x00001ae4, 0xffffffff, 0x34363840, },
++	{ 1, 3, 2, 0x00001ae8, 0x0000ffff, 0x30303032, },
++};
++
++RTW_DECL_TABLE_BB_PG(rtw8814a_bb_pg_type4);
++
++static const struct rtw_phy_pg_cfg_pair rtw8814a_bb_pg_type5[] = {
++	{ 0, 0, 0, 0x00000c20, 0xffffffff, 0x48484848, },
++	{ 0, 0, 0, 0x00000c24, 0xffffffff, 0x46464646, },
++	{ 0, 0, 0, 0x00000c28, 0xffffffff, 0x44464646, },
++	{ 0, 0, 0, 0x00000c2c, 0xffffffff, 0x46464646, },
++	{ 0, 0, 0, 0x00000c30, 0xffffffff, 0x42444646, },
++	{ 0, 0, 1, 0x00000c34, 0xffffffff, 0x44444444, },
++	{ 0, 0, 1, 0x00000c38, 0xffffffff, 0x40424444, },
++	{ 0, 0, 2, 0x00000cd8, 0xffffffff, 0x42424242, },
++	{ 0, 0, 2, 0x00000cdc, 0xffffffff, 0x38404242, },
++	{ 0, 0, 0, 0x00000c3c, 0xffffffff, 0x46464646, },
++	{ 0, 0, 0, 0x00000c40, 0xffffffff, 0x42444646, },
++	{ 0, 0, 0, 0x00000c44, 0xffffffff, 0x44444040, },
++	{ 0, 0, 1, 0x00000c48, 0xffffffff, 0x44444444, },
++	{ 0, 0, 1, 0x00000c4c, 0xffffffff, 0x38384042, },
++	{ 0, 0, 2, 0x00000ce0, 0xffffffff, 0x42424242, },
++	{ 0, 0, 2, 0x00000ce4, 0xffffffff, 0x38404242, },
++	{ 0, 0, 2, 0x00000ce8, 0x0000ffff, 0x20203636, },
++	{ 0, 1, 0, 0x00000e20, 0xffffffff, 0x48484848, },
++	{ 0, 1, 0, 0x00000e24, 0xffffffff, 0x46464646, },
++	{ 0, 1, 0, 0x00000e28, 0xffffffff, 0x44464646, },
++	{ 0, 1, 0, 0x00000e2c, 0xffffffff, 0x46464646, },
++	{ 0, 1, 0, 0x00000e30, 0xffffffff, 0x42444646, },
++	{ 0, 1, 1, 0x00000e34, 0xffffffff, 0x44444444, },
++	{ 0, 1, 1, 0x00000e38, 0xffffffff, 0x40424444, },
++	{ 0, 1, 2, 0x00000ed8, 0xffffffff, 0x42424242, },
++	{ 0, 1, 2, 0x00000edc, 0xffffffff, 0x38404242, },
++	{ 0, 1, 0, 0x00000e3c, 0xffffffff, 0x46464646, },
++	{ 0, 1, 0, 0x00000e40, 0xffffffff, 0x42444646, },
++	{ 0, 1, 0, 0x00000e44, 0xffffffff, 0x44444040, },
++	{ 0, 1, 1, 0x00000e48, 0xffffffff, 0x44444444, },
++	{ 0, 1, 1, 0x00000e4c, 0xffffffff, 0x38384042, },
++	{ 0, 1, 2, 0x00000ee0, 0xffffffff, 0x42424242, },
++	{ 0, 1, 2, 0x00000ee4, 0xffffffff, 0x38404242, },
++	{ 0, 1, 2, 0x00000ee8, 0x0000ffff, 0x20203636, },
++	{ 0, 2, 0, 0x00001820, 0xffffffff, 0x48484848, },
++	{ 0, 2, 0, 0x00001824, 0xffffffff, 0x46464646, },
++	{ 0, 2, 0, 0x00001828, 0xffffffff, 0x44464646, },
++	{ 0, 2, 0, 0x0000182c, 0xffffffff, 0x46464646, },
++	{ 0, 2, 0, 0x00001830, 0xffffffff, 0x42444646, },
++	{ 0, 2, 1, 0x00001834, 0xffffffff, 0x44444444, },
++	{ 0, 2, 1, 0x00001838, 0xffffffff, 0x40424444, },
++	{ 0, 2, 2, 0x000018d8, 0xffffffff, 0x42424242, },
++	{ 0, 2, 2, 0x000018dc, 0xffffffff, 0x38404242, },
++	{ 0, 2, 0, 0x0000183c, 0xffffffff, 0x46464646, },
++	{ 0, 2, 0, 0x00001840, 0xffffffff, 0x42444646, },
++	{ 0, 2, 0, 0x00001844, 0xffffffff, 0x44444040, },
++	{ 0, 2, 1, 0x00001848, 0xffffffff, 0x44444444, },
++	{ 0, 2, 1, 0x0000184c, 0xffffffff, 0x38384042, },
++	{ 0, 2, 2, 0x000018e0, 0xffffffff, 0x42424242, },
++	{ 0, 2, 2, 0x000018e4, 0xffffffff, 0x38404242, },
++	{ 0, 2, 2, 0x000018e8, 0x0000ffff, 0x20203636, },
++	{ 0, 3, 0, 0x00001a20, 0xffffffff, 0x48484848, },
++	{ 0, 3, 0, 0x00001a24, 0xffffffff, 0x46464646, },
++	{ 0, 3, 0, 0x00001a28, 0xffffffff, 0x44464646, },
++	{ 0, 3, 0, 0x00001a2c, 0xffffffff, 0x46464646, },
++	{ 0, 3, 0, 0x00001a30, 0xffffffff, 0x42444646, },
++	{ 0, 3, 1, 0x00001a34, 0xffffffff, 0x44444444, },
++	{ 0, 3, 1, 0x00001a38, 0xffffffff, 0x40424444, },
++	{ 0, 3, 2, 0x00001ad8, 0xffffffff, 0x42424242, },
++	{ 0, 3, 2, 0x00001adc, 0xffffffff, 0x38404242, },
++	{ 0, 3, 0, 0x00001a3c, 0xffffffff, 0x46464646, },
++	{ 0, 3, 0, 0x00001a40, 0xffffffff, 0x42444646, },
++	{ 0, 3, 0, 0x00001a44, 0xffffffff, 0x44444040, },
++	{ 0, 3, 1, 0x00001a48, 0xffffffff, 0x44444444, },
++	{ 0, 3, 1, 0x00001a4c, 0xffffffff, 0x38384042, },
++	{ 0, 3, 2, 0x00001ae0, 0xffffffff, 0x42424242, },
++	{ 0, 3, 2, 0x00001ae4, 0xffffffff, 0x38404242, },
++	{ 0, 3, 2, 0x00001ae8, 0x0000ffff, 0x20203636, },
++	{ 1, 0, 0, 0x00000c24, 0xffffffff, 0x46464646, },
++	{ 1, 0, 0, 0x00000c28, 0xffffffff, 0x44464646, },
++	{ 1, 0, 0, 0x00000c2c, 0xffffffff, 0x46464646, },
++	{ 1, 0, 0, 0x00000c30, 0xffffffff, 0x42444646, },
++	{ 1, 0, 1, 0x00000c34, 0xffffffff, 0x44444444, },
++	{ 1, 0, 1, 0x00000c38, 0xffffffff, 0x40424444, },
++	{ 1, 0, 2, 0x00000cd8, 0xffffffff, 0x42424242, },
++	{ 1, 0, 2, 0x00000cdc, 0xffffffff, 0x38404242, },
++	{ 1, 0, 0, 0x00000c3c, 0xffffffff, 0x46464646, },
++	{ 1, 0, 0, 0x00000c40, 0xffffffff, 0x42444646, },
++	{ 1, 0, 0, 0x00000c44, 0xffffffff, 0x44443840, },
++	{ 1, 0, 1, 0x00000c48, 0xffffffff, 0x44444444, },
++	{ 1, 0, 1, 0x00000c4c, 0xffffffff, 0x36384042, },
++	{ 1, 0, 2, 0x00000ce0, 0xffffffff, 0x42424242, },
++	{ 1, 0, 2, 0x00000ce4, 0xffffffff, 0x38404242, },
++	{ 1, 0, 2, 0x00000ce8, 0x0000ffff, 0x20203436, },
++	{ 1, 1, 0, 0x00000e24, 0xffffffff, 0x46464646, },
++	{ 1, 1, 0, 0x00000e28, 0xffffffff, 0x44464646, },
++	{ 1, 1, 0, 0x00000e2c, 0xffffffff, 0x46464646, },
++	{ 1, 1, 0, 0x00000e30, 0xffffffff, 0x42444646, },
++	{ 1, 1, 1, 0x00000e34, 0xffffffff, 0x44444444, },
++	{ 1, 1, 1, 0x00000e38, 0xffffffff, 0x40424444, },
++	{ 1, 1, 2, 0x00000ed8, 0xffffffff, 0x42424242, },
++	{ 1, 1, 2, 0x00000edc, 0xffffffff, 0x38404242, },
++	{ 1, 1, 0, 0x00000e3c, 0xffffffff, 0x46464646, },
++	{ 1, 1, 0, 0x00000e40, 0xffffffff, 0x42444646, },
++	{ 1, 1, 0, 0x00000e44, 0xffffffff, 0x44443840, },
++	{ 1, 1, 1, 0x00000e48, 0xffffffff, 0x44444444, },
++	{ 1, 1, 1, 0x00000e4c, 0xffffffff, 0x36384042, },
++	{ 1, 1, 2, 0x00000ee0, 0xffffffff, 0x42424242, },
++	{ 1, 1, 2, 0x00000ee4, 0xffffffff, 0x38404242, },
++	{ 1, 1, 2, 0x00000ee8, 0x0000ffff, 0x20203436, },
++	{ 1, 2, 0, 0x00001824, 0xffffffff, 0x46464646, },
++	{ 1, 2, 0, 0x00001828, 0xffffffff, 0x44464646, },
++	{ 1, 2, 0, 0x0000182c, 0xffffffff, 0x46464646, },
++	{ 1, 2, 0, 0x00001830, 0xffffffff, 0x42444646, },
++	{ 1, 2, 1, 0x00001834, 0xffffffff, 0x44444444, },
++	{ 1, 2, 1, 0x00001838, 0xffffffff, 0x40424444, },
++	{ 1, 2, 2, 0x000018d8, 0xffffffff, 0x42424242, },
++	{ 1, 2, 2, 0x000018dc, 0xffffffff, 0x38404242, },
++	{ 1, 2, 0, 0x0000183c, 0xffffffff, 0x46464646, },
++	{ 1, 2, 0, 0x00001840, 0xffffffff, 0x42444646, },
++	{ 1, 2, 0, 0x00001844, 0xffffffff, 0x44443840, },
++	{ 1, 2, 1, 0x00001848, 0xffffffff, 0x44444444, },
++	{ 1, 2, 1, 0x0000184c, 0xffffffff, 0x36384042, },
++	{ 1, 2, 2, 0x000018e0, 0xffffffff, 0x42424242, },
++	{ 1, 2, 2, 0x000018e4, 0xffffffff, 0x38404242, },
++	{ 1, 2, 2, 0x000018e8, 0x0000ffff, 0x20203436, },
++	{ 1, 3, 0, 0x00001a24, 0xffffffff, 0x46464646, },
++	{ 1, 3, 0, 0x00001a28, 0xffffffff, 0x44464646, },
++	{ 1, 3, 0, 0x00001a2c, 0xffffffff, 0x46464646, },
++	{ 1, 3, 0, 0x00001a30, 0xffffffff, 0x42444646, },
++	{ 1, 3, 1, 0x00001a34, 0xffffffff, 0x44444444, },
++	{ 1, 3, 1, 0x00001a38, 0xffffffff, 0x40424444, },
++	{ 1, 3, 2, 0x00001ad8, 0xffffffff, 0x42424242, },
++	{ 1, 3, 2, 0x00001adc, 0xffffffff, 0x38404242, },
++	{ 1, 3, 0, 0x00001a3c, 0xffffffff, 0x46464646, },
++	{ 1, 3, 0, 0x00001a40, 0xffffffff, 0x42444646, },
++	{ 1, 3, 0, 0x00001a44, 0xffffffff, 0x44443840, },
++	{ 1, 3, 1, 0x00001a48, 0xffffffff, 0x44444444, },
++	{ 1, 3, 1, 0x00001a4c, 0xffffffff, 0x36384042, },
++	{ 1, 3, 2, 0x00001ae0, 0xffffffff, 0x42424242, },
++	{ 1, 3, 2, 0x00001ae4, 0xffffffff, 0x38404242, },
++	{ 1, 3, 2, 0x00001ae8, 0x0000ffff, 0x20203436, },
++};
++
++RTW_DECL_TABLE_BB_PG(rtw8814a_bb_pg_type5);
++
++static const struct rtw_phy_pg_cfg_pair rtw8814a_bb_pg_type7[] = {
++	{ 0, 0, 0, 0x00000c20, 0xffffffff, 0x34343434, },
++	{ 0, 0, 0, 0x00000c24, 0xffffffff, 0x34343434, },
++	{ 0, 0, 0, 0x00000c28, 0xffffffff, 0x30323434, },
++	{ 0, 0, 0, 0x00000c2c, 0xffffffff, 0x34343434, },
++	{ 0, 0, 0, 0x00000c30, 0xffffffff, 0x28303234, },
++	{ 0, 0, 1, 0x00000c34, 0xffffffff, 0x34343434, },
++	{ 0, 0, 1, 0x00000c38, 0xffffffff, 0x28303234, },
++	{ 0, 0, 2, 0x00000cd8, 0xffffffff, 0x34343434, },
++	{ 0, 0, 2, 0x00000cdc, 0xffffffff, 0x28303234, },
++	{ 0, 0, 0, 0x00000c3c, 0xffffffff, 0x34343434, },
++	{ 0, 0, 0, 0x00000c40, 0xffffffff, 0x28303234, },
++	{ 0, 0, 0, 0x00000c44, 0xffffffff, 0x34342426, },
++	{ 0, 0, 1, 0x00000c48, 0xffffffff, 0x32343434, },
++	{ 0, 0, 1, 0x00000c4c, 0xffffffff, 0x24262830, },
++	{ 0, 0, 2, 0x00000ce0, 0xffffffff, 0x34343434, },
++	{ 0, 0, 2, 0x00000ce4, 0xffffffff, 0x28303234, },
++	{ 0, 0, 2, 0x00000ce8, 0x0000ffff, 0x24263434, },
++	{ 0, 1, 0, 0x00000e20, 0xffffffff, 0x34343434, },
++	{ 0, 1, 0, 0x00000e24, 0xffffffff, 0x34343434, },
++	{ 0, 1, 0, 0x00000e28, 0xffffffff, 0x30323434, },
++	{ 0, 1, 0, 0x00000e2c, 0xffffffff, 0x34343434, },
++	{ 0, 1, 0, 0x00000e30, 0xffffffff, 0x28303234, },
++	{ 0, 1, 1, 0x00000e34, 0xffffffff, 0x34343434, },
++	{ 0, 1, 1, 0x00000e38, 0xffffffff, 0x28303234, },
++	{ 0, 1, 2, 0x00000ed8, 0xffffffff, 0x34343434, },
++	{ 0, 1, 2, 0x00000edc, 0xffffffff, 0x28303234, },
++	{ 0, 1, 0, 0x00000e3c, 0xffffffff, 0x34343434, },
++	{ 0, 1, 0, 0x00000e40, 0xffffffff, 0x28303234, },
++	{ 0, 1, 0, 0x00000e44, 0xffffffff, 0x34342426, },
++	{ 0, 1, 1, 0x00000e48, 0xffffffff, 0x32343434, },
++	{ 0, 1, 1, 0x00000e4c, 0xffffffff, 0x24262830, },
++	{ 0, 1, 2, 0x00000ee0, 0xffffffff, 0x34343434, },
++	{ 0, 1, 2, 0x00000ee4, 0xffffffff, 0x28303234, },
++	{ 0, 1, 2, 0x00000ee8, 0x0000ffff, 0x24263434, },
++	{ 0, 2, 0, 0x00001820, 0xffffffff, 0x34343434, },
++	{ 0, 2, 0, 0x00001824, 0xffffffff, 0x34343434, },
++	{ 0, 2, 0, 0x00001828, 0xffffffff, 0x30323434, },
++	{ 0, 2, 0, 0x0000182c, 0xffffffff, 0x34343434, },
++	{ 0, 2, 0, 0x00001830, 0xffffffff, 0x28303234, },
++	{ 0, 2, 1, 0x00001834, 0xffffffff, 0x34343434, },
++	{ 0, 2, 1, 0x00001838, 0xffffffff, 0x28303234, },
++	{ 0, 2, 2, 0x000018d8, 0xffffffff, 0x34343434, },
++	{ 0, 2, 2, 0x000018dc, 0xffffffff, 0x28303234, },
++	{ 0, 2, 0, 0x0000183c, 0xffffffff, 0x34343434, },
++	{ 0, 2, 0, 0x00001840, 0xffffffff, 0x28303234, },
++	{ 0, 2, 0, 0x00001844, 0xffffffff, 0x34342426, },
++	{ 0, 2, 1, 0x00001848, 0xffffffff, 0x32343434, },
++	{ 0, 2, 1, 0x0000184c, 0xffffffff, 0x24262830, },
++	{ 0, 2, 2, 0x000018e0, 0xffffffff, 0x34343434, },
++	{ 0, 2, 2, 0x000018e4, 0xffffffff, 0x28303234, },
++	{ 0, 2, 2, 0x000018e8, 0x0000ffff, 0x24263434, },
++	{ 0, 3, 0, 0x00001a20, 0xffffffff, 0x34343434, },
++	{ 0, 3, 0, 0x00001a24, 0xffffffff, 0x34343434, },
++	{ 0, 3, 0, 0x00001a28, 0xffffffff, 0x30323434, },
++	{ 0, 3, 0, 0x00001a2c, 0xffffffff, 0x34343434, },
++	{ 0, 3, 0, 0x00001a30, 0xffffffff, 0x28303234, },
++	{ 0, 3, 1, 0x00001a34, 0xffffffff, 0x34343434, },
++	{ 0, 3, 1, 0x00001a38, 0xffffffff, 0x28303234, },
++	{ 0, 3, 2, 0x00001ad8, 0xffffffff, 0x34343434, },
++	{ 0, 3, 2, 0x00001adc, 0xffffffff, 0x28303234, },
++	{ 0, 3, 0, 0x00001a3c, 0xffffffff, 0x34343434, },
++	{ 0, 3, 0, 0x00001a40, 0xffffffff, 0x28303234, },
++	{ 0, 3, 0, 0x00001a44, 0xffffffff, 0x34342426, },
++	{ 0, 3, 1, 0x00001a48, 0xffffffff, 0x32343434, },
++	{ 0, 3, 1, 0x00001a4c, 0xffffffff, 0x24262830, },
++	{ 0, 3, 2, 0x00001ae0, 0xffffffff, 0x34343434, },
++	{ 0, 3, 2, 0x00001ae4, 0xffffffff, 0x28303234, },
++	{ 0, 3, 2, 0x00001ae8, 0x0000ffff, 0x24263434, },
++	{ 1, 0, 0, 0x00000c24, 0xffffffff, 0x34343434, },
++	{ 1, 0, 0, 0x00000c28, 0xffffffff, 0x30323434, },
++	{ 1, 0, 0, 0x00000c2c, 0xffffffff, 0x34343434, },
++	{ 1, 0, 0, 0x00000c30, 0xffffffff, 0x28303234, },
++	{ 1, 0, 1, 0x00000c34, 0xffffffff, 0x34343434, },
++	{ 1, 0, 1, 0x00000c38, 0xffffffff, 0x28303234, },
++	{ 1, 0, 2, 0x00000cd8, 0xffffffff, 0x34343434, },
++	{ 1, 0, 2, 0x00000cdc, 0xffffffff, 0x28303234, },
++	{ 1, 0, 0, 0x00000c3c, 0xffffffff, 0x34343434, },
++	{ 1, 0, 0, 0x00000c40, 0xffffffff, 0x28303234, },
++	{ 1, 0, 0, 0x00000c44, 0xffffffff, 0x34342426, },
++	{ 1, 0, 1, 0x00000c48, 0xffffffff, 0x32343434, },
++	{ 1, 0, 1, 0x00000c4c, 0xffffffff, 0x24262830, },
++	{ 1, 0, 2, 0x00000ce0, 0xffffffff, 0x34343434, },
++	{ 1, 0, 2, 0x00000ce4, 0xffffffff, 0x28303234, },
++	{ 1, 0, 2, 0x00000ce8, 0x0000ffff, 0x24263434, },
++	{ 1, 1, 0, 0x00000e24, 0xffffffff, 0x34343434, },
++	{ 1, 1, 0, 0x00000e28, 0xffffffff, 0x30323434, },
++	{ 1, 1, 0, 0x00000e2c, 0xffffffff, 0x34343434, },
++	{ 1, 1, 0, 0x00000e30, 0xffffffff, 0x28303234, },
++	{ 1, 1, 1, 0x00000e34, 0xffffffff, 0x34343434, },
++	{ 1, 1, 1, 0x00000e38, 0xffffffff, 0x28303234, },
++	{ 1, 1, 2, 0x00000ed8, 0xffffffff, 0x34343434, },
++	{ 1, 1, 2, 0x00000edc, 0xffffffff, 0x28303234, },
++	{ 1, 1, 0, 0x00000e3c, 0xffffffff, 0x34343434, },
++	{ 1, 1, 0, 0x00000e40, 0xffffffff, 0x28303234, },
++	{ 1, 1, 0, 0x00000e44, 0xffffffff, 0x34342426, },
++	{ 1, 1, 1, 0x00000e48, 0xffffffff, 0x32343434, },
++	{ 1, 1, 1, 0x00000e4c, 0xffffffff, 0x24262830, },
++	{ 1, 1, 2, 0x00000ee0, 0xffffffff, 0x34343434, },
++	{ 1, 1, 2, 0x00000ee4, 0xffffffff, 0x28303234, },
++	{ 1, 1, 2, 0x00000ee8, 0x0000ffff, 0x24263434, },
++	{ 1, 2, 0, 0x00001824, 0xffffffff, 0x34343434, },
++	{ 1, 2, 0, 0x00001828, 0xffffffff, 0x30323434, },
++	{ 1, 2, 0, 0x0000182c, 0xffffffff, 0x34343434, },
++	{ 1, 2, 0, 0x00001830, 0xffffffff, 0x28303234, },
++	{ 1, 2, 1, 0x00001834, 0xffffffff, 0x34343434, },
++	{ 1, 2, 1, 0x00001838, 0xffffffff, 0x28303234, },
++	{ 1, 2, 2, 0x000018d8, 0xffffffff, 0x34343434, },
++	{ 1, 2, 2, 0x000018dc, 0xffffffff, 0x28303234, },
++	{ 1, 2, 0, 0x0000183c, 0xffffffff, 0x34343434, },
++	{ 1, 2, 0, 0x00001840, 0xffffffff, 0x28303234, },
++	{ 1, 2, 0, 0x00001844, 0xffffffff, 0x34342426, },
++	{ 1, 2, 1, 0x00001848, 0xffffffff, 0x32343434, },
++	{ 1, 2, 1, 0x0000184c, 0xffffffff, 0x24262830, },
++	{ 1, 2, 2, 0x000018e0, 0xffffffff, 0x34343434, },
++	{ 1, 2, 2, 0x000018e4, 0xffffffff, 0x28303234, },
++	{ 1, 2, 2, 0x000018e8, 0x0000ffff, 0x24263434, },
++	{ 1, 3, 0, 0x00001a24, 0xffffffff, 0x34343434, },
++	{ 1, 3, 0, 0x00001a28, 0xffffffff, 0x30323434, },
++	{ 1, 3, 0, 0x00001a2c, 0xffffffff, 0x34343434, },
++	{ 1, 3, 0, 0x00001a30, 0xffffffff, 0x28303234, },
++	{ 1, 3, 1, 0x00001a34, 0xffffffff, 0x34343434, },
++	{ 1, 3, 1, 0x00001a38, 0xffffffff, 0x28303234, },
++	{ 1, 3, 2, 0x00001ad8, 0xffffffff, 0x34343434, },
++	{ 1, 3, 2, 0x00001adc, 0xffffffff, 0x28303234, },
++	{ 1, 3, 0, 0x00001a3c, 0xffffffff, 0x34343434, },
++	{ 1, 3, 0, 0x00001a40, 0xffffffff, 0x28303234, },
++	{ 1, 3, 0, 0x00001a44, 0xffffffff, 0x34342426, },
++	{ 1, 3, 1, 0x00001a48, 0xffffffff, 0x32343434, },
++	{ 1, 3, 1, 0x00001a4c, 0xffffffff, 0x24262830, },
++	{ 1, 3, 2, 0x00001ae0, 0xffffffff, 0x34343434, },
++	{ 1, 3, 2, 0x00001ae4, 0xffffffff, 0x28303234, },
++	{ 1, 3, 2, 0x00001ae8, 0x0000ffff, 0x24263434, },
++};
++
++RTW_DECL_TABLE_BB_PG(rtw8814a_bb_pg_type7);
++
++static const struct rtw_phy_pg_cfg_pair rtw8814a_bb_pg_type8[] = {
++	{ 0, 0, 0, 0x00000c20, 0xffffffff, 0x43434343, },
++	{ 0, 0, 0, 0x00000c24, 0xffffffff, 0x43434343, },
++	{ 0, 0, 0, 0x00000c28, 0xffffffff, 0x35373941, },
++	{ 0, 0, 0, 0x00000c2c, 0xffffffff, 0x43434343, },
++	{ 0, 0, 0, 0x00000c30, 0xffffffff, 0x33353739, },
++	{ 0, 0, 1, 0x00000c34, 0xffffffff, 0x43434343, },
++	{ 0, 0, 1, 0x00000c38, 0xffffffff, 0x31333537, },
++	{ 0, 0, 2, 0x00000cd8, 0xffffffff, 0x43434343, },
++	{ 0, 0, 2, 0x00000cdc, 0xffffffff, 0x29313335, },
++	{ 0, 0, 0, 0x00000c3c, 0xffffffff, 0x34343434, },
++	{ 0, 0, 0, 0x00000c40, 0xffffffff, 0x28303234, },
++	{ 0, 0, 0, 0x00000c44, 0xffffffff, 0x32322426, },
++	{ 0, 0, 1, 0x00000c48, 0xffffffff, 0x30323232, },
++	{ 0, 0, 1, 0x00000c4c, 0xffffffff, 0x22242628, },
++	{ 0, 0, 2, 0x00000ce0, 0xffffffff, 0x30303030, },
++	{ 0, 0, 2, 0x00000ce4, 0xffffffff, 0x24262830, },
++	{ 0, 0, 2, 0x00000ce8, 0x0000ffff, 0x20222222, },
++	{ 0, 1, 0, 0x00000e20, 0xffffffff, 0x43434343, },
++	{ 0, 1, 0, 0x00000e24, 0xffffffff, 0x43434343, },
++	{ 0, 1, 0, 0x00000e28, 0xffffffff, 0x35373941, },
++	{ 0, 1, 0, 0x00000e2c, 0xffffffff, 0x41434343, },
++	{ 0, 1, 0, 0x00000e30, 0xffffffff, 0x33353739, },
++	{ 0, 1, 1, 0x00000e34, 0xffffffff, 0x39414141, },
++	{ 0, 1, 1, 0x00000e38, 0xffffffff, 0x31333537, },
++	{ 0, 1, 2, 0x00000ed8, 0xffffffff, 0x37393939, },
++	{ 0, 1, 2, 0x00000edc, 0xffffffff, 0x29313335, },
++	{ 0, 1, 0, 0x00000e3c, 0xffffffff, 0x34343434, },
++	{ 0, 1, 0, 0x00000e40, 0xffffffff, 0x28303234, },
++	{ 0, 1, 0, 0x00000e44, 0xffffffff, 0x32322426, },
++	{ 0, 1, 1, 0x00000e48, 0xffffffff, 0x30323232, },
++	{ 0, 1, 1, 0x00000e4c, 0xffffffff, 0x22242628, },
++	{ 0, 1, 2, 0x00000ee0, 0xffffffff, 0x30303030, },
++	{ 0, 1, 2, 0x00000ee4, 0xffffffff, 0x24262830, },
++	{ 0, 1, 2, 0x00000ee8, 0x0000ffff, 0x20222222, },
++	{ 0, 2, 0, 0x00001820, 0xffffffff, 0x43434343, },
++	{ 0, 2, 0, 0x00001824, 0xffffffff, 0x43434343, },
++	{ 0, 2, 0, 0x00001828, 0xffffffff, 0x35373941, },
++	{ 0, 2, 0, 0x0000182c, 0xffffffff, 0x41434343, },
++	{ 0, 2, 0, 0x00001830, 0xffffffff, 0x33353739, },
++	{ 0, 2, 1, 0x00001834, 0xffffffff, 0x39414141, },
++	{ 0, 2, 1, 0x00001838, 0xffffffff, 0x31333537, },
++	{ 0, 2, 2, 0x000018d8, 0xffffffff, 0x37393939, },
++	{ 0, 2, 2, 0x000018dc, 0xffffffff, 0x29313335, },
++	{ 0, 2, 0, 0x0000183c, 0xffffffff, 0x34343434, },
++	{ 0, 2, 0, 0x00001840, 0xffffffff, 0x28303234, },
++	{ 0, 2, 0, 0x00001844, 0xffffffff, 0x32322426, },
++	{ 0, 2, 1, 0x00001848, 0xffffffff, 0x30323232, },
++	{ 0, 2, 1, 0x0000184c, 0xffffffff, 0x22242628, },
++	{ 0, 2, 2, 0x000018e0, 0xffffffff, 0x30303030, },
++	{ 0, 2, 2, 0x000018e4, 0xffffffff, 0x24262830, },
++	{ 0, 2, 2, 0x000018e8, 0x0000ffff, 0x20222222, },
++	{ 0, 3, 0, 0x00001a20, 0xffffffff, 0x43434343, },
++	{ 0, 3, 0, 0x00001a24, 0xffffffff, 0x43434343, },
++	{ 0, 3, 0, 0x00001a28, 0xffffffff, 0x35373941, },
++	{ 0, 3, 0, 0x00001a2c, 0xffffffff, 0x41434343, },
++	{ 0, 3, 0, 0x00001a30, 0xffffffff, 0x33353739, },
++	{ 0, 3, 1, 0x00001a34, 0xffffffff, 0x39414141, },
++	{ 0, 3, 1, 0x00001a38, 0xffffffff, 0x31333537, },
++	{ 0, 3, 2, 0x00001ad8, 0xffffffff, 0x37393939, },
++	{ 0, 3, 2, 0x00001adc, 0xffffffff, 0x29313335, },
++	{ 0, 3, 0, 0x00001a3c, 0xffffffff, 0x34343434, },
++	{ 0, 3, 0, 0x00001a40, 0xffffffff, 0x28303234, },
++	{ 0, 3, 0, 0x00001a44, 0xffffffff, 0x32322426, },
++	{ 0, 3, 1, 0x00001a48, 0xffffffff, 0x30323232, },
++	{ 0, 3, 1, 0x00001a4c, 0xffffffff, 0x22242628, },
++	{ 0, 3, 2, 0x00001ae0, 0xffffffff, 0x30303030, },
++	{ 0, 3, 2, 0x00001ae4, 0xffffffff, 0x24262830, },
++	{ 0, 3, 2, 0x00001ae8, 0x0000ffff, 0x20222222, },
++	{ 1, 0, 0, 0x00000c24, 0xffffffff, 0x46464646, },
++	{ 1, 0, 0, 0x00000c28, 0xffffffff, 0x39414345, },
++	{ 1, 0, 0, 0x00000c2c, 0xffffffff, 0x46464646, },
++	{ 1, 0, 0, 0x00000c30, 0xffffffff, 0x38404244, },
++	{ 1, 0, 1, 0x00000c34, 0xffffffff, 0x46464646, },
++	{ 1, 0, 1, 0x00000c38, 0xffffffff, 0x36384042, },
++	{ 1, 0, 2, 0x00000cd8, 0xffffffff, 0x46464646, },
++	{ 1, 0, 2, 0x00000cdc, 0xffffffff, 0x34363840, },
++	{ 1, 0, 0, 0x00000c3c, 0xffffffff, 0x46464646, },
++	{ 1, 0, 0, 0x00000c40, 0xffffffff, 0x38404244, },
++	{ 1, 0, 0, 0x00000c44, 0xffffffff, 0x46463738, },
++	{ 1, 0, 1, 0x00000c48, 0xffffffff, 0x42444646, },
++	{ 1, 0, 1, 0x00000c4c, 0xffffffff, 0x35373840, },
++	{ 1, 0, 2, 0x00000ce0, 0xffffffff, 0x46464646, },
++	{ 1, 0, 2, 0x00000ce4, 0xffffffff, 0x37394143, },
++	{ 1, 0, 2, 0x00000ce8, 0x0000ffff, 0x33333335, },
++	{ 1, 1, 0, 0x00000e24, 0xffffffff, 0x46464646, },
++	{ 1, 1, 0, 0x00000e28, 0xffffffff, 0x39414345, },
++	{ 1, 1, 0, 0x00000e2c, 0xffffffff, 0x46464646, },
++	{ 1, 1, 0, 0x00000e30, 0xffffffff, 0x38404244, },
++	{ 1, 1, 1, 0x00000e34, 0xffffffff, 0x46464646, },
++	{ 1, 1, 1, 0x00000e38, 0xffffffff, 0x36384042, },
++	{ 1, 1, 2, 0x00000ed8, 0xffffffff, 0x46464646, },
++	{ 1, 1, 2, 0x00000edc, 0xffffffff, 0x34363840, },
++	{ 1, 1, 0, 0x00000e3c, 0xffffffff, 0x46464646, },
++	{ 1, 1, 0, 0x00000e40, 0xffffffff, 0x38404244, },
++	{ 1, 1, 0, 0x00000e44, 0xffffffff, 0x46463738, },
++	{ 1, 1, 1, 0x00000e48, 0xffffffff, 0x42444646, },
++	{ 1, 1, 1, 0x00000e4c, 0xffffffff, 0x35373840, },
++	{ 1, 1, 2, 0x00000ee0, 0xffffffff, 0x46464646, },
++	{ 1, 1, 2, 0x00000ee4, 0xffffffff, 0x37394143, },
++	{ 1, 1, 2, 0x00000ee8, 0x0000ffff, 0x33333335, },
++	{ 1, 2, 0, 0x00001824, 0xffffffff, 0x46464646, },
++	{ 1, 2, 0, 0x00001828, 0xffffffff, 0x39414345, },
++	{ 1, 2, 0, 0x0000182c, 0xffffffff, 0x46464646, },
++	{ 1, 2, 0, 0x00001830, 0xffffffff, 0x38404244, },
++	{ 1, 2, 1, 0x00001834, 0xffffffff, 0x46464646, },
++	{ 1, 2, 1, 0x00001838, 0xffffffff, 0x36384042, },
++	{ 1, 2, 2, 0x000018d8, 0xffffffff, 0x46464646, },
++	{ 1, 2, 2, 0x000018dc, 0xffffffff, 0x34363840, },
++	{ 1, 2, 0, 0x0000183c, 0xffffffff, 0x46464646, },
++	{ 1, 2, 0, 0x00001840, 0xffffffff, 0x38404244, },
++	{ 1, 2, 0, 0x00001844, 0xffffffff, 0x46463738, },
++	{ 1, 2, 1, 0x00001848, 0xffffffff, 0x42444646, },
++	{ 1, 2, 1, 0x0000184c, 0xffffffff, 0x35373840, },
++	{ 1, 2, 2, 0x000018e0, 0xffffffff, 0x46464646, },
++	{ 1, 2, 2, 0x000018e4, 0xffffffff, 0x37394143, },
++	{ 1, 2, 2, 0x000018e8, 0x0000ffff, 0x33333335, },
++	{ 1, 3, 0, 0x00001a24, 0xffffffff, 0x46464646, },
++	{ 1, 3, 0, 0x00001a28, 0xffffffff, 0x39414345, },
++	{ 1, 3, 0, 0x00001a2c, 0xffffffff, 0x46464646, },
++	{ 1, 3, 0, 0x00001a30, 0xffffffff, 0x38404244, },
++	{ 1, 3, 1, 0x00001a34, 0xffffffff, 0x46464646, },
++	{ 1, 3, 1, 0x00001a38, 0xffffffff, 0x36384042, },
++	{ 1, 3, 2, 0x00001ad8, 0xffffffff, 0x46464646, },
++	{ 1, 3, 2, 0x00001adc, 0xffffffff, 0x34363840, },
++	{ 1, 3, 0, 0x00001a3c, 0xffffffff, 0x46464646, },
++	{ 1, 3, 0, 0x00001a40, 0xffffffff, 0x38404244, },
++	{ 1, 3, 0, 0x00001a44, 0xffffffff, 0x46463738, },
++	{ 1, 3, 1, 0x00001a48, 0xffffffff, 0x42444646, },
++	{ 1, 3, 1, 0x00001a4c, 0xffffffff, 0x35373840, },
++	{ 1, 3, 2, 0x00001ae0, 0xffffffff, 0x46464646, },
++	{ 1, 3, 2, 0x00001ae4, 0xffffffff, 0x37394143, },
++	{ 1, 3, 2, 0x00001ae8, 0x0000ffff, 0x33333335, },
++};
++
++RTW_DECL_TABLE_BB_PG(rtw8814a_bb_pg_type8);
++
++static const u32 rtw8814a_rf_a[] = {
++		0x018, 0x00013124,
++		0x040, 0x00000C00,
++		0x058, 0x00000F98,
++		0x07F, 0x00068004,
++		0x0B0, 0x000FFFFE,
++		0x0B1, 0x0003FF48,
++		0x0B2, 0x0006AA3F,
++		0x0B3, 0x000FFC9A,
++		0x0B4, 0x0000A78F,
++		0x0B5, 0x00000A3F,
++		0x0B6, 0x0000C09C,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x0B7, 0x00030008,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x0B7, 0x00030008,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x0B7, 0x00030008,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x0B7, 0x00030008,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x0B7, 0x00030008,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x0B7, 0x00030008,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x0B7, 0x00030008,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x0B7, 0x00030008,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x0B7, 0x00030008,
++	0xA0000000,	0x00000000,
++		0x0B7, 0x0003000C,
++	0xB0000000,	0x00000000,
++		0x0B8, 0x0007400E,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x0B9, 0x000FBF50,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x0B9, 0x000FBF50,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x0B9, 0x000FBF50,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x0B9, 0x000FBF50,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x0B9, 0x000FBF50,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x0B9, 0x000FBF50,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x0B9, 0x000FBF50,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x0B9, 0x000FBF50,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x0B9, 0x000FBF50,
++	0xA0000000,	0x00000000,
++		0x0B9, 0x000FBF50,
++	0xB0000000,	0x00000000,
++		0x0BA, 0x00050780,
++		0x0BB, 0x00000000,
++		0x0BC, 0x00040009,
++		0x0BD, 0x00000000,
++		0x0BE, 0x00000000,
++		0x0BF, 0x00000000,
++		0x0EF, 0x00020000,
++		0x03E, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03F, 0x00030000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03F, 0x00030000,
++	0xA0000000,	0x00000000,
++		0x03F, 0x00030000,
++	0xB0000000,	0x00000000,
++		0x03E, 0x00020000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03F, 0x00040000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03F, 0x00040000,
++	0xA0000000,	0x00000000,
++		0x03F, 0x00040000,
++	0xB0000000,	0x00000000,
++		0x03E, 0x00040000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03F, 0x00030000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03F, 0x00030000,
++	0xA0000000,	0x00000000,
++		0x03F, 0x00030000,
++	0xB0000000,	0x00000000,
++		0x03E, 0x00060000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03F, 0x00030000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03F, 0x00030000,
++	0xA0000000,	0x00000000,
++		0x03F, 0x00030000,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++		0x0EF, 0x00010000,
++		0x03E, 0x00000000,
++		0x03F, 0x00006800,
++		0x03E, 0x00000080,
++		0x03F, 0x00006000,
++		0x03E, 0x00000100,
++		0x03F, 0x00004800,
++		0x03E, 0x00000180,
++		0x03F, 0x00004000,
++		0x03E, 0x00000200,
++		0x03F, 0x00004000,
++		0x03E, 0x00000280,
++		0x03F, 0x00002800,
++		0x03E, 0x00000300,
++		0x03F, 0x00002800,
++		0x03E, 0x00000380,
++		0x03F, 0x00002000,
++		0x0EF, 0x00000000,
++		0x0EF, 0x00040000,
++		0x03E, 0x00000000,
++		0x03F, 0x000000BC,
++		0x03E, 0x00000040,
++		0x03F, 0x00000053,
++		0x03E, 0x00000050,
++		0x03F, 0x00000050,
++		0x03E, 0x00000060,
++		0x03F, 0x00000050,
++		0x0EF, 0x00000000,
++		0x0EF, 0x00000400,
++		0x03E, 0x00000006,
++		0x041, 0x000EE080,
++		0x03E, 0x00000008,
++		0x041, 0x000EE0C0,
++		0x03E, 0x0000000A,
++		0x041, 0x000EE100,
++		0x03E, 0x0000000C,
++		0x041, 0x000EE100,
++		0x0EF, 0x00000000,
++		0x018, 0x00000006,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0xA0000000,	0x00000000,
++		0x086, 0x000E4B58,
++		0x087, 0x00049F80,
++	0xB0000000,	0x00000000,
++		0x0DF, 0x00000008,
++		0x0EF, 0x00002000,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x000179C3,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x000179C3,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x000179C3,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x000179C3,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x000179C3,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x000179C3,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x000179C3,
++	0xA0000000,	0x00000000,
++		0x03B, 0x0003F258,
++		0x03B, 0x00030A58,
++		0x03B, 0x0002FA58,
++		0x03B, 0x00022590,
++		0x03B, 0x0001FA50,
++		0x03B, 0x00010248,
++		0x03B, 0x00008240,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000100,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0xA0000000,	0x00000000,
++		0x034, 0x0000ADF6,
++		0x034, 0x00009DF3,
++		0x034, 0x00008DF0,
++		0x034, 0x00007DED,
++		0x034, 0x00006DEA,
++		0x034, 0x00005CED,
++		0x034, 0x00004CEA,
++		0x034, 0x000034EA,
++		0x034, 0x000024E7,
++		0x034, 0x0000146A,
++		0x034, 0x0000006B,
++	0xB0000000,	0x00000000,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0xA0000000,	0x00000000,
++		0x034, 0x0008ADF6,
++		0x034, 0x00089DF3,
++		0x034, 0x00088DF0,
++		0x034, 0x00087DED,
++		0x034, 0x00086DEA,
++		0x034, 0x00085CED,
++		0x034, 0x00084CEA,
++		0x034, 0x000834EA,
++		0x034, 0x000824E7,
++		0x034, 0x0008146A,
++		0x034, 0x0008006B,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++		0x0EF, 0x000020A2,
++		0x0DF, 0x00000080,
++		0x035, 0x00000192,
++		0x035, 0x00008192,
++		0x035, 0x00010192,
++		0x036, 0x00000024,
++		0x036, 0x00008024,
++		0x036, 0x00010024,
++		0x036, 0x00018024,
++		0x0EF, 0x00000000,
++		0x051, 0x00000C21,
++		0x052, 0x000006D9,
++		0x053, 0x000FC649,
++		0x054, 0x0000017E,
++		0x018, 0x0001012A,
++		0x081, 0x0007FC00,
++		0x089, 0x00050110,
++		0x08A, 0x00043E50,
++		0x08B, 0x0002E180,
++		0x08C, 0x00093C3C,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x085, 0x000F8000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x085, 0x000F8000,
++	0xA0000000,	0x00000000,
++		0x085, 0x000F8000,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0xA0000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00001000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00038023,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00024000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00024000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00088000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00024000,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00084000,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00088000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00088000,
++	0xA0000000,	0x00000000,
++		0x03C, 0x00028000,
++	0xB0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00030023,
++		0x03C, 0x00048000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00028623,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00021633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x0001C633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00010293,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00009593,
++		0x03C, 0x00000000,
++		0x03A, 0x00000148,
++	0x80000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0000118B,
++	0xA0000000,	0x00000000,
++		0x03B, 0x0000078B,
++	0xB0000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0xA0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00024000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x000AC000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00024000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00088000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00024000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00024000,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00040000,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00088000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00088000,
++	0xA0000000,	0x00000000,
++		0x03C, 0x0004C000,
++	0xB0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00070023,
++		0x03C, 0x00048000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00068623,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00061633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x0005C633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00050293,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00049593,
++		0x03C, 0x00000000,
++		0x03A, 0x00000148,
++	0x80000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0004138B,
++	0xA0000000,	0x00000000,
++		0x03B, 0x0004078B,
++	0xB0000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0xA0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00084000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0008C000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00084000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00084000,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00060000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00084000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00084000,
++	0xA0000000,	0x00000000,
++		0x03C, 0x00004000,
++	0xB0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B0023,
++	0x80000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0xA0000000,	0x00000000,
++		0x03C, 0x00020000,
++	0xB0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000A8623,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000A1633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x0009C633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00090293,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00089593,
++		0x03C, 0x00000000,
++		0x03A, 0x00000148,
++	0x80000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0008118B,
++	0xA0000000,	0x00000000,
++		0x03B, 0x0008078B,
++	0xB0000000,	0x00000000,
++		0x03C, 0x00000000,
++		0x0EF, 0x00000000,
++		0x0EF, 0x00000800,
++		0x03B, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000803,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000801,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000803,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001003,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001003,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001003,
++	0xA0000000,	0x00000000,
++		0x03A, 0x00000803,
++	0xB0000000,	0x00000000,
++		0x03B, 0x00040000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001801,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000003,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000003,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001000,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001001,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000000,
++	0xA0000000,	0x00000000,
++		0x03A, 0x00001000,
++	0xB0000000,	0x00000000,
++		0x03B, 0x00080000,
++	0x80000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001802,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000800,
++	0xA0000000,	0x00000000,
++		0x03A, 0x00001002,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0xA0000000,	0x00000000,
++	0xB0000000,	0x00000000,
++		0x018, 0x00013124,
++		0x0EF, 0x00000100,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A1AD,
++		0x034, 0x000491AA,
++		0x034, 0x000481A7,
++		0x034, 0x000470AA,
++		0x034, 0x000460A7,
++		0x034, 0x00045049,
++		0x034, 0x00044046,
++		0x034, 0x00043026,
++		0x034, 0x00042009,
++		0x034, 0x00041006,
++		0x034, 0x00040003,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3EF,
++		0x034, 0x000493AF,
++		0x034, 0x000483AB,
++		0x034, 0x0004718C,
++		0x034, 0x00046189,
++		0x034, 0x0004506D,
++		0x034, 0x0004406A,
++		0x034, 0x0004302C,
++		0x034, 0x00042029,
++		0x034, 0x00041026,
++		0x034, 0x00040023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3EF,
++		0x034, 0x000493AF,
++		0x034, 0x000483AB,
++		0x034, 0x0004718C,
++		0x034, 0x00046189,
++		0x034, 0x0004506D,
++		0x034, 0x0004406A,
++		0x034, 0x0004302C,
++		0x034, 0x00042029,
++		0x034, 0x00041026,
++		0x034, 0x00040023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3EF,
++		0x034, 0x000493AF,
++		0x034, 0x000483AB,
++		0x034, 0x0004718C,
++		0x034, 0x00046189,
++		0x034, 0x0004506D,
++		0x034, 0x0004406A,
++		0x034, 0x0004302C,
++		0x034, 0x00042029,
++		0x034, 0x00041026,
++		0x034, 0x00040023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3EF,
++		0x034, 0x000493AF,
++		0x034, 0x000483AB,
++		0x034, 0x0004718C,
++		0x034, 0x00046189,
++		0x034, 0x0004506D,
++		0x034, 0x0004406A,
++		0x034, 0x0004302C,
++		0x034, 0x00042029,
++		0x034, 0x00041026,
++		0x034, 0x00040023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3F5,
++		0x034, 0x000493F2,
++		0x034, 0x000483B0,
++		0x034, 0x00047370,
++		0x034, 0x0004636D,
++		0x034, 0x0004536A,
++		0x034, 0x00044349,
++		0x034, 0x0004316A,
++		0x034, 0x00042167,
++		0x034, 0x00041129,
++		0x034, 0x00040049,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3EF,
++		0x034, 0x000493AF,
++		0x034, 0x000483AB,
++		0x034, 0x0004718C,
++		0x034, 0x00046189,
++		0x034, 0x0004506D,
++		0x034, 0x0004406A,
++		0x034, 0x0004302C,
++		0x034, 0x00042029,
++		0x034, 0x00041026,
++		0x034, 0x00040023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3EF,
++		0x034, 0x000493AF,
++		0x034, 0x000483AB,
++		0x034, 0x0004718C,
++		0x034, 0x00046189,
++		0x034, 0x0004506D,
++		0x034, 0x0004406A,
++		0x034, 0x0004302C,
++		0x034, 0x00042029,
++		0x034, 0x00041026,
++		0x034, 0x00040023,
++	0xA0000000,	0x00000000,
++		0x034, 0x0004AFF1,
++		0x034, 0x00049FEE,
++		0x034, 0x00048FEB,
++		0x034, 0x00047FE8,
++		0x034, 0x00046DEA,
++		0x034, 0x00045DE7,
++		0x034, 0x00044CEA,
++		0x034, 0x00043CE7,
++		0x034, 0x00042C69,
++		0x034, 0x00041C66,
++		0x034, 0x00040C28,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A1AD,
++		0x034, 0x000291AA,
++		0x034, 0x000281A7,
++		0x034, 0x000270AA,
++		0x034, 0x000260A7,
++		0x034, 0x00025049,
++		0x034, 0x00024046,
++		0x034, 0x00023026,
++		0x034, 0x00022009,
++		0x034, 0x00021006,
++		0x034, 0x00020003,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3EF,
++		0x034, 0x000293AC,
++		0x034, 0x0002838A,
++		0x034, 0x0002718C,
++		0x034, 0x00026189,
++		0x034, 0x0002506D,
++		0x034, 0x0002406A,
++		0x034, 0x0002302C,
++		0x034, 0x00022029,
++		0x034, 0x00021026,
++		0x034, 0x00020023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3EF,
++		0x034, 0x000293AC,
++		0x034, 0x0002838A,
++		0x034, 0x0002718C,
++		0x034, 0x00026189,
++		0x034, 0x0002506D,
++		0x034, 0x0002406A,
++		0x034, 0x0002302C,
++		0x034, 0x00022029,
++		0x034, 0x00021026,
++		0x034, 0x00020023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3EF,
++		0x034, 0x000293AC,
++		0x034, 0x0002838A,
++		0x034, 0x0002718C,
++		0x034, 0x00026189,
++		0x034, 0x0002506D,
++		0x034, 0x0002406A,
++		0x034, 0x0002302C,
++		0x034, 0x00022029,
++		0x034, 0x00021026,
++		0x034, 0x00020023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3EF,
++		0x034, 0x000293AC,
++		0x034, 0x0002838A,
++		0x034, 0x0002718C,
++		0x034, 0x00026189,
++		0x034, 0x0002506D,
++		0x034, 0x0002406A,
++		0x034, 0x0002302C,
++		0x034, 0x00022029,
++		0x034, 0x00021026,
++		0x034, 0x00020023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3F5,
++		0x034, 0x000293F2,
++		0x034, 0x000282F1,
++		0x034, 0x000272B0,
++		0x034, 0x000262AD,
++		0x034, 0x000252AA,
++		0x034, 0x000242A7,
++		0x034, 0x000230EC,
++		0x034, 0x000220E9,
++		0x034, 0x0002106A,
++		0x034, 0x00020067,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3EF,
++		0x034, 0x000293AC,
++		0x034, 0x0002838A,
++		0x034, 0x0002718C,
++		0x034, 0x00026189,
++		0x034, 0x0002506D,
++		0x034, 0x0002406A,
++		0x034, 0x0002302C,
++		0x034, 0x00022029,
++		0x034, 0x00021026,
++		0x034, 0x00020023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3EF,
++		0x034, 0x000293AC,
++		0x034, 0x0002838A,
++		0x034, 0x0002718C,
++		0x034, 0x00026189,
++		0x034, 0x0002506D,
++		0x034, 0x0002406A,
++		0x034, 0x0002302C,
++		0x034, 0x00022029,
++		0x034, 0x00021026,
++		0x034, 0x00020023,
++	0xA0000000,	0x00000000,
++		0x034, 0x0002AFF1,
++		0x034, 0x00029FEE,
++		0x034, 0x00028FEB,
++		0x034, 0x00027FE8,
++		0x034, 0x00026DEA,
++		0x034, 0x00025DE7,
++		0x034, 0x00024CEA,
++		0x034, 0x00023CE7,
++		0x034, 0x00022C69,
++		0x034, 0x00021C66,
++		0x034, 0x00020C28,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EC,
++		0x034, 0x0000938C,
++		0x034, 0x000081AD,
++		0x034, 0x000071AA,
++		0x034, 0x000061A7,
++		0x034, 0x000050AA,
++		0x034, 0x000040A7,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x0000100C,
++		0x034, 0x00000009,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EE,
++		0x034, 0x000093AC,
++		0x034, 0x0000838A,
++		0x034, 0x0000718C,
++		0x034, 0x00006189,
++		0x034, 0x0000506D,
++		0x034, 0x0000406A,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EE,
++		0x034, 0x000093AC,
++		0x034, 0x0000838A,
++		0x034, 0x0000718C,
++		0x034, 0x00006189,
++		0x034, 0x0000506D,
++		0x034, 0x0000406A,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EE,
++		0x034, 0x000093AC,
++		0x034, 0x0000838A,
++		0x034, 0x0000718C,
++		0x034, 0x00006189,
++		0x034, 0x0000506D,
++		0x034, 0x0000406A,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EE,
++		0x034, 0x000093AC,
++		0x034, 0x0000838A,
++		0x034, 0x0000718C,
++		0x034, 0x00006189,
++		0x034, 0x0000506D,
++		0x034, 0x0000406A,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3F4,
++		0x034, 0x000093F1,
++		0x034, 0x000082B1,
++		0x034, 0x000071D1,
++		0x034, 0x000061CE,
++		0x034, 0x000051CB,
++		0x034, 0x000041C8,
++		0x034, 0x000030CB,
++		0x034, 0x000020C8,
++		0x034, 0x00001087,
++		0x034, 0x00000084,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EE,
++		0x034, 0x000093AC,
++		0x034, 0x0000838A,
++		0x034, 0x0000718C,
++		0x034, 0x00006189,
++		0x034, 0x0000506D,
++		0x034, 0x0000406A,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EE,
++		0x034, 0x000093AC,
++		0x034, 0x0000838A,
++		0x034, 0x0000718C,
++		0x034, 0x00006189,
++		0x034, 0x0000506D,
++		0x034, 0x0000406A,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0xA0000000,	0x00000000,
++		0x034, 0x0000AFF1,
++		0x034, 0x00009FEE,
++		0x034, 0x00008FEB,
++		0x034, 0x00007FE8,
++		0x034, 0x00006DEA,
++		0x034, 0x00005DE7,
++		0x034, 0x00004CEA,
++		0x034, 0x00003CE7,
++		0x034, 0x00002C69,
++		0x034, 0x00001C66,
++		0x034, 0x00000C28,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA1AD,
++		0x034, 0x000C91AA,
++		0x034, 0x000C81A7,
++		0x034, 0x000C70AA,
++		0x034, 0x000C60A7,
++		0x034, 0x000C5049,
++		0x034, 0x000C4046,
++		0x034, 0x000C3026,
++		0x034, 0x000C2009,
++		0x034, 0x000C1006,
++		0x034, 0x000C0003,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3EF,
++		0x034, 0x000C93AF,
++		0x034, 0x000C83AB,
++		0x034, 0x000C718C,
++		0x034, 0x000C6189,
++		0x034, 0x000C506D,
++		0x034, 0x000C406A,
++		0x034, 0x000C302C,
++		0x034, 0x000C2029,
++		0x034, 0x000C1026,
++		0x034, 0x000C0023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3EF,
++		0x034, 0x000C93AF,
++		0x034, 0x000C83AB,
++		0x034, 0x000C718C,
++		0x034, 0x000C6189,
++		0x034, 0x000C506D,
++		0x034, 0x000C406A,
++		0x034, 0x000C302C,
++		0x034, 0x000C2029,
++		0x034, 0x000C1026,
++		0x034, 0x000C0023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3EF,
++		0x034, 0x000C93AF,
++		0x034, 0x000C83AB,
++		0x034, 0x000C718C,
++		0x034, 0x000C6189,
++		0x034, 0x000C506D,
++		0x034, 0x000C406A,
++		0x034, 0x000C302C,
++		0x034, 0x000C2029,
++		0x034, 0x000C1026,
++		0x034, 0x000C0023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3EF,
++		0x034, 0x000C93AF,
++		0x034, 0x000C83AB,
++		0x034, 0x000C718C,
++		0x034, 0x000C6189,
++		0x034, 0x000C506D,
++		0x034, 0x000C406A,
++		0x034, 0x000C302C,
++		0x034, 0x000C2029,
++		0x034, 0x000C1026,
++		0x034, 0x000C0023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3F5,
++		0x034, 0x000C93F2,
++		0x034, 0x000C83B0,
++		0x034, 0x000C7370,
++		0x034, 0x000C636D,
++		0x034, 0x000C536A,
++		0x034, 0x000C4349,
++		0x034, 0x000C316A,
++		0x034, 0x000C2167,
++		0x034, 0x000C1129,
++		0x034, 0x000C0049,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3EF,
++		0x034, 0x000C93AF,
++		0x034, 0x000C83AB,
++		0x034, 0x000C718C,
++		0x034, 0x000C6189,
++		0x034, 0x000C506D,
++		0x034, 0x000C406A,
++		0x034, 0x000C302C,
++		0x034, 0x000C2029,
++		0x034, 0x000C1026,
++		0x034, 0x000C0023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3EF,
++		0x034, 0x000C93AF,
++		0x034, 0x000C83AB,
++		0x034, 0x000C718C,
++		0x034, 0x000C6189,
++		0x034, 0x000C506D,
++		0x034, 0x000C406A,
++		0x034, 0x000C302C,
++		0x034, 0x000C2029,
++		0x034, 0x000C1026,
++		0x034, 0x000C0023,
++	0xA0000000,	0x00000000,
++		0x034, 0x000CA794,
++		0x034, 0x000C9791,
++		0x034, 0x000C878E,
++		0x034, 0x000C778B,
++		0x034, 0x000C658D,
++		0x034, 0x000C558A,
++		0x034, 0x000C448D,
++		0x034, 0x000C348A,
++		0x034, 0x000C244C,
++		0x034, 0x000C1449,
++		0x034, 0x000C042B,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA1AD,
++		0x034, 0x000A91AA,
++		0x034, 0x000A81A7,
++		0x034, 0x000A70AA,
++		0x034, 0x000A60A7,
++		0x034, 0x000A5049,
++		0x034, 0x000A4046,
++		0x034, 0x000A3026,
++		0x034, 0x000A2009,
++		0x034, 0x000A1006,
++		0x034, 0x000A0003,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3EF,
++		0x034, 0x000A93AC,
++		0x034, 0x000A838A,
++		0x034, 0x000A718C,
++		0x034, 0x000A6189,
++		0x034, 0x000A506D,
++		0x034, 0x000A406A,
++		0x034, 0x000A302C,
++		0x034, 0x000A2029,
++		0x034, 0x000A1026,
++		0x034, 0x000A0023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3EF,
++		0x034, 0x000A93AC,
++		0x034, 0x000A838A,
++		0x034, 0x000A718C,
++		0x034, 0x000A6189,
++		0x034, 0x000A506D,
++		0x034, 0x000A406A,
++		0x034, 0x000A302C,
++		0x034, 0x000A2029,
++		0x034, 0x000A1026,
++		0x034, 0x000A0023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3EF,
++		0x034, 0x000A93AC,
++		0x034, 0x000A838A,
++		0x034, 0x000A718C,
++		0x034, 0x000A6189,
++		0x034, 0x000A506D,
++		0x034, 0x000A406A,
++		0x034, 0x000A302C,
++		0x034, 0x000A2029,
++		0x034, 0x000A1026,
++		0x034, 0x000A0023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3EF,
++		0x034, 0x000A93AC,
++		0x034, 0x000A838A,
++		0x034, 0x000A718C,
++		0x034, 0x000A6189,
++		0x034, 0x000A506D,
++		0x034, 0x000A406A,
++		0x034, 0x000A302C,
++		0x034, 0x000A2029,
++		0x034, 0x000A1026,
++		0x034, 0x000A0023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3F5,
++		0x034, 0x000A93F2,
++		0x034, 0x000A82F1,
++		0x034, 0x000A72B0,
++		0x034, 0x000A62AD,
++		0x034, 0x000A52AA,
++		0x034, 0x000A42A7,
++		0x034, 0x000A30EC,
++		0x034, 0x000A20E9,
++		0x034, 0x000A106A,
++		0x034, 0x000A0067,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3EF,
++		0x034, 0x000A93AC,
++		0x034, 0x000A838A,
++		0x034, 0x000A718C,
++		0x034, 0x000A6189,
++		0x034, 0x000A506D,
++		0x034, 0x000A406A,
++		0x034, 0x000A302C,
++		0x034, 0x000A2029,
++		0x034, 0x000A1026,
++		0x034, 0x000A0023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3EF,
++		0x034, 0x000A93AC,
++		0x034, 0x000A838A,
++		0x034, 0x000A718C,
++		0x034, 0x000A6189,
++		0x034, 0x000A506D,
++		0x034, 0x000A406A,
++		0x034, 0x000A302C,
++		0x034, 0x000A2029,
++		0x034, 0x000A1026,
++		0x034, 0x000A0023,
++	0xA0000000,	0x00000000,
++		0x034, 0x000AA794,
++		0x034, 0x000A9791,
++		0x034, 0x000A878E,
++		0x034, 0x000A778B,
++		0x034, 0x000A658D,
++		0x034, 0x000A558A,
++		0x034, 0x000A448D,
++		0x034, 0x000A348A,
++		0x034, 0x000A244C,
++		0x034, 0x000A1449,
++		0x034, 0x000A042B,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EC,
++		0x034, 0x0008938C,
++		0x034, 0x000881AD,
++		0x034, 0x000871AA,
++		0x034, 0x000861A7,
++		0x034, 0x000850AA,
++		0x034, 0x000840A7,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x0008100C,
++		0x034, 0x00080009,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EE,
++		0x034, 0x000893AC,
++		0x034, 0x0008838A,
++		0x034, 0x0008718C,
++		0x034, 0x00086189,
++		0x034, 0x0008506D,
++		0x034, 0x0008406A,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EE,
++		0x034, 0x000893AC,
++		0x034, 0x0008838A,
++		0x034, 0x0008718C,
++		0x034, 0x00086189,
++		0x034, 0x0008506D,
++		0x034, 0x0008406A,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EE,
++		0x034, 0x000893AC,
++		0x034, 0x0008838A,
++		0x034, 0x0008718C,
++		0x034, 0x00086189,
++		0x034, 0x0008506D,
++		0x034, 0x0008406A,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EE,
++		0x034, 0x000893AC,
++		0x034, 0x0008838A,
++		0x034, 0x0008718C,
++		0x034, 0x00086189,
++		0x034, 0x0008506D,
++		0x034, 0x0008406A,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3F4,
++		0x034, 0x000893F1,
++		0x034, 0x000882B1,
++		0x034, 0x000871D1,
++		0x034, 0x000861CE,
++		0x034, 0x000851CB,
++		0x034, 0x000841C8,
++		0x034, 0x000830CB,
++		0x034, 0x000820C8,
++		0x034, 0x00081087,
++		0x034, 0x00080084,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EE,
++		0x034, 0x000893AC,
++		0x034, 0x0008838A,
++		0x034, 0x0008718C,
++		0x034, 0x00086189,
++		0x034, 0x0008506D,
++		0x034, 0x0008406A,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EE,
++		0x034, 0x000893AC,
++		0x034, 0x0008838A,
++		0x034, 0x0008718C,
++		0x034, 0x00086189,
++		0x034, 0x0008506D,
++		0x034, 0x0008406A,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0xA0000000,	0x00000000,
++		0x034, 0x0008A794,
++		0x034, 0x00089791,
++		0x034, 0x0008878E,
++		0x034, 0x0008778B,
++		0x034, 0x0008658D,
++		0x034, 0x0008558A,
++		0x034, 0x0008448D,
++		0x034, 0x0008348A,
++		0x034, 0x0008244C,
++		0x034, 0x00081449,
++		0x034, 0x0008042B,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++		0x0DF, 0x00000001,
++		0x018, 0x0001712A,
++		0x0EF, 0x00000040,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0xA0000000,	0x00000000,
++		0x035, 0x00000747,
++		0x035, 0x00008747,
++		0x035, 0x00010747,
++		0x035, 0x00020747,
++		0x035, 0x00028747,
++		0x035, 0x00030747,
++		0x035, 0x00040747,
++		0x035, 0x00048747,
++		0x035, 0x00050747,
++		0x035, 0x000805FB,
++		0x035, 0x000885FB,
++		0x035, 0x000905FB,
++		0x035, 0x000A05FB,
++		0x035, 0x000A85FB,
++		0x035, 0x000B05FB,
++		0x035, 0x000C05FB,
++		0x035, 0x000C85FB,
++		0x035, 0x000D05FB,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++		0x0DF, 0x00000001,
++		0x018, 0x0001712A,
++		0x0EF, 0x00000010,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000473,
++		0x036, 0x00008473,
++		0x036, 0x00010473,
++		0x036, 0x00020473,
++		0x036, 0x00028473,
++		0x036, 0x00030473,
++		0x036, 0x00040473,
++		0x036, 0x00048473,
++		0x036, 0x00050473,
++		0x036, 0x00080473,
++		0x036, 0x00088473,
++		0x036, 0x00090473,
++		0x036, 0x000A0473,
++		0x036, 0x000A8473,
++		0x036, 0x000B0473,
++		0x036, 0x000C0473,
++		0x036, 0x000C8473,
++		0x036, 0x000D0473,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0xA0000000,	0x00000000,
++		0x036, 0x00000473,
++		0x036, 0x00008473,
++		0x036, 0x00010473,
++		0x036, 0x00020473,
++		0x036, 0x00028473,
++		0x036, 0x00030473,
++		0x036, 0x00040473,
++		0x036, 0x00048473,
++		0x036, 0x00050473,
++		0x036, 0x00080473,
++		0x036, 0x00088473,
++		0x036, 0x00090473,
++		0x036, 0x000A0473,
++		0x036, 0x000A8473,
++		0x036, 0x000B0473,
++		0x036, 0x000C0473,
++		0x036, 0x000C8473,
++		0x036, 0x000D0473,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0xA0000000,	0x00000000,
++		0x0EF, 0x00000004,
++		0x037, 0x00000000,
++		0x038, 0x00005146,
++		0x037, 0x00004000,
++		0x038, 0x00005146,
++		0x037, 0x00008000,
++		0x038, 0x00005146,
++		0x037, 0x00010000,
++		0x038, 0x00005146,
++		0x037, 0x00014000,
++		0x038, 0x00005146,
++		0x037, 0x00018000,
++		0x038, 0x00004D4E,
++		0x037, 0x0001C000,
++		0x038, 0x00004D4E,
++		0x037, 0x00020000,
++		0x038, 0x00004D4E,
++		0x037, 0x00024000,
++		0x038, 0x000071C6,
++		0x037, 0x00028000,
++		0x038, 0x000071C6,
++		0x037, 0x0002C000,
++		0x038, 0x000071C6,
++		0x037, 0x00030000,
++		0x038, 0x000071CE,
++		0x037, 0x00034000,
++		0x038, 0x000071CE,
++		0x037, 0x00038000,
++		0x038, 0x00005126,
++		0x037, 0x0003C000,
++		0x038, 0x00005126,
++		0x037, 0x00040000,
++		0x038, 0x00005126,
++		0x037, 0x00044000,
++		0x038, 0x00005126,
++		0x037, 0x00048000,
++		0x038, 0x00005126,
++		0x037, 0x00080000,
++		0x038, 0x00005ECE,
++		0x037, 0x00084000,
++		0x038, 0x00005ECE,
++		0x037, 0x00088000,
++		0x038, 0x00005ECE,
++		0x037, 0x00090000,
++		0x038, 0x00005ECE,
++		0x037, 0x00094000,
++		0x038, 0x00005ECE,
++		0x037, 0x00098000,
++		0x038, 0x00005ECE,
++		0x037, 0x0009C000,
++		0x038, 0x00005ECE,
++		0x037, 0x000A0000,
++		0x038, 0x00005ECE,
++		0x037, 0x000A4000,
++		0x038, 0x00005ECE,
++		0x037, 0x000A8000,
++		0x038, 0x00005ECE,
++		0x037, 0x000AC000,
++		0x038, 0x00005ECE,
++		0x037, 0x000B0000,
++		0x038, 0x00005ECE,
++		0x037, 0x000B4000,
++		0x038, 0x00005ECE,
++		0x037, 0x000B8000,
++		0x038, 0x00005ECE,
++		0x037, 0x000BC000,
++		0x038, 0x00005ECE,
++		0x037, 0x000C0000,
++		0x038, 0x00005ECE,
++		0x037, 0x000C4000,
++		0x038, 0x00005ECE,
++		0x037, 0x000C8000,
++		0x038, 0x00005ECE,
++		0x0EF, 0x00000000,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000008,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0xA0000000,	0x00000000,
++		0x03C, 0x0000007D,
++		0x03C, 0x0000047D,
++		0x03C, 0x0000087D,
++		0x03C, 0x0000107D,
++		0x03C, 0x0000147D,
++		0x03C, 0x0000187D,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027D,
++		0x03C, 0x0000054A,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127D,
++		0x03C, 0x0000154A,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227D,
++		0x03C, 0x0000254A,
++		0x03C, 0x00002821,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027D,
++		0x03C, 0x0000054A,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127D,
++		0x03C, 0x0000154A,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227D,
++		0x03C, 0x0000254A,
++		0x03C, 0x00002821,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027D,
++		0x03C, 0x0000054A,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127D,
++		0x03C, 0x0000154A,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227D,
++		0x03C, 0x0000254A,
++		0x03C, 0x00002821,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027D,
++		0x03C, 0x0000054A,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127D,
++		0x03C, 0x0000154A,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227D,
++		0x03C, 0x0000254A,
++		0x03C, 0x00002821,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027D,
++		0x03C, 0x0000054A,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127D,
++		0x03C, 0x0000154A,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227D,
++		0x03C, 0x0000254A,
++		0x03C, 0x00002821,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027D,
++		0x03C, 0x0000054A,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127D,
++		0x03C, 0x0000154A,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227D,
++		0x03C, 0x0000254A,
++		0x03C, 0x00002821,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027D,
++		0x03C, 0x0000054A,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127D,
++		0x03C, 0x0000154A,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227D,
++		0x03C, 0x0000254A,
++		0x03C, 0x00002821,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027D,
++		0x03C, 0x0000054A,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127D,
++		0x03C, 0x0000154A,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227D,
++		0x03C, 0x0000254A,
++		0x03C, 0x00002821,
++	0xA0000000,	0x00000000,
++		0x03C, 0x0000037E,
++		0x03C, 0x00000575,
++		0x03C, 0x00000971,
++		0x03C, 0x0000127E,
++		0x03C, 0x00001575,
++		0x03C, 0x00001871,
++		0x03C, 0x0000217E,
++		0x03C, 0x00002575,
++		0x03C, 0x00002871,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++		0x061, 0x000C0D47,
++		0x062, 0x0000133C,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0xA0000000,	0x00000000,
++		0x063, 0x0007D0E7,
++	0xB0000000,	0x00000000,
++		0x064, 0x00014FEC,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0xA0000000,	0x00000000,
++		0x065, 0x000933FF,
++	0xB0000000,	0x00000000,
++		0x066, 0x00000040,
++		0x057, 0x00050000,
++		0x056, 0x00051DF0,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x055, 0x00082061,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x055, 0x00082061,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x055, 0x00082061,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x055, 0x00082061,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x055, 0x00082061,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x055, 0x00082061,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x055, 0x00082061,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x055, 0x00082061,
++	0xA0000000,	0x00000000,
++		0x055, 0x00082060,
++	0xB0000000,	0x00000000,
++		0x01C, 0x000739D2,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x01F, 0x0002255C,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x01F, 0x0002255C,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x01F, 0x0002255C,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x01F, 0x0002255C,
++	0xA0000000,	0x00000000,
++		0x01F, 0x0002255C,
++	0xB0000000,	0x00000000,
++		0x0B1, 0x0007FF48,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x0C4, 0x00081700,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x0C4, 0x00081700,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x0C4, 0x00081700,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x0C4, 0x00081700,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x0C4, 0x00081700,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x0C4, 0x00081700,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x0C4, 0x00081700,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x0C4, 0x00081700,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x0C4, 0x00081700,
++	0xA0000000,	0x00000000,
++		0x0C4, 0x00083F00,
++	0xB0000000,	0x00000000,
++		0x018, 0x0001B126,
++		0xFFE, 0x00000000,
++		0xFFE, 0x00000000,
++		0xFFE, 0x00000000,
++		0x018, 0x00013126,
++		0x018, 0x00013124,
++};
++
++RTW_DECL_TABLE_RF_RADIO(rtw8814a_rf_a, A);
++
++static const u32 rtw8814a_rf_b[] = {
++		0x018, 0x00013124,
++		0x040, 0x00000C00,
++		0x058, 0x00000F98,
++		0x07F, 0x00068004,
++		0x018, 0x00000006,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0xA0000000,	0x00000000,
++		0x086, 0x000E4B58,
++		0x087, 0x00049F80,
++	0xB0000000,	0x00000000,
++		0x0DF, 0x00000008,
++		0x0EF, 0x00002000,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x00017BC3,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F39B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x00017BC3,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x00017BC3,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F39B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x00017BC3,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x00017BC3,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x00017BC3,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x00017BC3,
++	0xA0000000,	0x00000000,
++		0x03B, 0x0003F258,
++		0x03B, 0x00030A58,
++		0x03B, 0x0002FA58,
++		0x03B, 0x00022590,
++		0x03B, 0x0001FA50,
++		0x03B, 0x00010248,
++		0x03B, 0x00008240,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000100,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0xA0000000,	0x00000000,
++		0x034, 0x0000ADF6,
++		0x034, 0x00009DF3,
++		0x034, 0x00008DF0,
++		0x034, 0x00007DED,
++		0x034, 0x00006DEA,
++		0x034, 0x00005CED,
++		0x034, 0x00004CEA,
++		0x034, 0x000034EA,
++		0x034, 0x000024E7,
++		0x034, 0x0000146A,
++		0x034, 0x0000006B,
++	0xB0000000,	0x00000000,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0xA0000000,	0x00000000,
++		0x034, 0x0008ADF6,
++		0x034, 0x00089DF3,
++		0x034, 0x00088DF0,
++		0x034, 0x00087DED,
++		0x034, 0x00086DEA,
++		0x034, 0x00085CED,
++		0x034, 0x00084CEA,
++		0x034, 0x000834EA,
++		0x034, 0x000824E7,
++		0x034, 0x0008146A,
++		0x034, 0x0008006B,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++		0x0EF, 0x000020A2,
++		0x0DF, 0x00000080,
++		0x035, 0x00000192,
++		0x035, 0x00008192,
++		0x035, 0x00010192,
++		0x036, 0x00000024,
++		0x036, 0x00008024,
++		0x036, 0x00010024,
++		0x036, 0x00018024,
++		0x0EF, 0x00000000,
++		0x051, 0x00000C21,
++		0x052, 0x000006D9,
++		0x053, 0x000FC649,
++		0x054, 0x0000017E,
++		0x018, 0x0001012A,
++		0x081, 0x0007FC00,
++		0x089, 0x00050110,
++		0x08A, 0x00043E50,
++		0x08B, 0x0002E180,
++		0x08C, 0x00093C3C,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x085, 0x000F8000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x085, 0x000F8000,
++	0xA0000000,	0x00000000,
++		0x085, 0x000F8000,
++	0xB0000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++		0x0EF, 0x00001000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00038023,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00088000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00084000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00088000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00088000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00088000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00088000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00088000,
++	0xA0000000,	0x00000000,
++		0x03C, 0x00040000,
++	0xB0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00030023,
++		0x03C, 0x00048000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00028623,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00021633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x0001C633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00010293,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00009593,
++		0x03C, 0x00000000,
++		0x03A, 0x00000148,
++	0x80000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x00000F8B,
++	0xA0000000,	0x00000000,
++		0x03B, 0x0000078B,
++	0xB0000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0xA0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00060000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00048000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00048000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00088000,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00048000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00048000,
++	0xA0000000,	0x00000000,
++		0x03C, 0x00020000,
++	0xB0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00070023,
++		0x03C, 0x00048000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00068623,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00061633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x0005C633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00050293,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00049593,
++		0x03C, 0x00000000,
++		0x03A, 0x00000148,
++		0x03B, 0x0004078B,
++		0x03C, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0xA0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00048000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00060000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0004C000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00044000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0004C000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00048000,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00004000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00044000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00044000,
++	0xA0000000,	0x00000000,
++		0x03C, 0x00020000,
++	0xB0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B0023,
++	0x80000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0xA0000000,	0x00000000,
++		0x03C, 0x00020000,
++	0xB0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000A8623,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000A1633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x0009C633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00090293,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00089593,
++		0x03C, 0x00000000,
++		0x03A, 0x00000148,
++	0x80000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0008138B,
++	0xA0000000,	0x00000000,
++		0x03B, 0x0008078B,
++	0xB0000000,	0x00000000,
++		0x03C, 0x00000000,
++		0x0EF, 0x00000000,
++		0x0EF, 0x00000800,
++		0x03B, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000803,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000803,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001003,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001003,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001003,
++	0xA0000000,	0x00000000,
++		0x03A, 0x00000803,
++	0xB0000000,	0x00000000,
++		0x03B, 0x00040000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001001,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000803,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001003,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001000,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000800,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000800,
++	0xA0000000,	0x00000000,
++		0x03A, 0x00001000,
++	0xB0000000,	0x00000000,
++		0x03B, 0x00080000,
++	0x80000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000000,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001802,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001802,
++	0xA0000000,	0x00000000,
++		0x03A, 0x00001002,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0xA0000000,	0x00000000,
++	0xB0000000,	0x00000000,
++		0x018, 0x00013124,
++		0x0EF, 0x00000100,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A38C,
++		0x034, 0x000491AD,
++		0x034, 0x000481AA,
++		0x034, 0x000471A7,
++		0x034, 0x000460AA,
++		0x034, 0x000450A7,
++		0x034, 0x0004402C,
++		0x034, 0x00043029,
++		0x034, 0x0004200C,
++		0x034, 0x00041009,
++		0x034, 0x00040006,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A38C,
++		0x034, 0x00049389,
++		0x034, 0x0004816D,
++		0x034, 0x0004716A,
++		0x034, 0x0004606D,
++		0x034, 0x0004506A,
++		0x034, 0x0004402C,
++		0x034, 0x00043029,
++		0x034, 0x00042026,
++		0x034, 0x00041009,
++		0x034, 0x00040006,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A38B,
++		0x034, 0x00049388,
++		0x034, 0x0004818B,
++		0x034, 0x00047188,
++		0x034, 0x0004606D,
++		0x034, 0x0004506A,
++		0x034, 0x0004402C,
++		0x034, 0x00043029,
++		0x034, 0x00042026,
++		0x034, 0x00041009,
++		0x034, 0x00040006,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A38C,
++		0x034, 0x00049389,
++		0x034, 0x0004816D,
++		0x034, 0x0004716A,
++		0x034, 0x0004606D,
++		0x034, 0x0004506A,
++		0x034, 0x0004402C,
++		0x034, 0x00043029,
++		0x034, 0x00042026,
++		0x034, 0x00041009,
++		0x034, 0x00040006,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A38B,
++		0x034, 0x00049388,
++		0x034, 0x0004818B,
++		0x034, 0x00047188,
++		0x034, 0x0004606D,
++		0x034, 0x0004506A,
++		0x034, 0x0004402C,
++		0x034, 0x00043029,
++		0x034, 0x00042026,
++		0x034, 0x00041009,
++		0x034, 0x00040006,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3F5,
++		0x034, 0x000493F3,
++		0x034, 0x000483B2,
++		0x034, 0x00047390,
++		0x034, 0x0004638D,
++		0x034, 0x0004538A,
++		0x034, 0x00044387,
++		0x034, 0x0004324A,
++		0x034, 0x00042247,
++		0x034, 0x0004104D,
++		0x034, 0x0004004A,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004AFF7,
++		0x034, 0x00049FF6,
++		0x034, 0x00048FF3,
++		0x034, 0x00047FF0,
++		0x034, 0x00046FED,
++		0x034, 0x00045FEA,
++		0x034, 0x00044FE7,
++		0x034, 0x00043DEA,
++		0x034, 0x00042DE7,
++		0x034, 0x00041DE4,
++		0x034, 0x00040CE7,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A38C,
++		0x034, 0x00049389,
++		0x034, 0x0004816D,
++		0x034, 0x0004716A,
++		0x034, 0x0004606D,
++		0x034, 0x0004506A,
++		0x034, 0x0004402C,
++		0x034, 0x00043029,
++		0x034, 0x00042026,
++		0x034, 0x00041009,
++		0x034, 0x00040006,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A38C,
++		0x034, 0x00049389,
++		0x034, 0x0004816D,
++		0x034, 0x0004716A,
++		0x034, 0x0004606D,
++		0x034, 0x0004506A,
++		0x034, 0x0004402C,
++		0x034, 0x00043029,
++		0x034, 0x00042026,
++		0x034, 0x00041009,
++		0x034, 0x00040006,
++	0xA0000000,	0x00000000,
++		0x034, 0x0004AFF4,
++		0x034, 0x00049FF1,
++		0x034, 0x00048FEE,
++		0x034, 0x00047FEB,
++		0x034, 0x00046FE8,
++		0x034, 0x00045DEA,
++		0x034, 0x00044CED,
++		0x034, 0x00043CEA,
++		0x034, 0x00042C6C,
++		0x034, 0x00041C69,
++		0x034, 0x00040C2B,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A38C,
++		0x034, 0x000291AD,
++		0x034, 0x000281AA,
++		0x034, 0x000271A7,
++		0x034, 0x000260AA,
++		0x034, 0x000250A7,
++		0x034, 0x0002402C,
++		0x034, 0x00023029,
++		0x034, 0x0002200C,
++		0x034, 0x00021009,
++		0x034, 0x00020006,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3EE,
++		0x034, 0x000293AC,
++		0x034, 0x00028389,
++		0x034, 0x0002716D,
++		0x034, 0x0002616A,
++		0x034, 0x0002506D,
++		0x034, 0x0002406A,
++		0x034, 0x0002302C,
++		0x034, 0x00022029,
++		0x034, 0x00021026,
++		0x034, 0x00020023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3EF,
++		0x034, 0x000293AD,
++		0x034, 0x0002838A,
++		0x034, 0x0002718C,
++		0x034, 0x00026189,
++		0x034, 0x0002506D,
++		0x034, 0x0002406A,
++		0x034, 0x0002302C,
++		0x034, 0x00022029,
++		0x034, 0x00021026,
++		0x034, 0x00020023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3EE,
++		0x034, 0x000293AC,
++		0x034, 0x00028389,
++		0x034, 0x0002716D,
++		0x034, 0x0002616A,
++		0x034, 0x0002506D,
++		0x034, 0x0002406A,
++		0x034, 0x0002302C,
++		0x034, 0x00022029,
++		0x034, 0x00021026,
++		0x034, 0x00020023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3EF,
++		0x034, 0x000293AD,
++		0x034, 0x0002838A,
++		0x034, 0x0002718C,
++		0x034, 0x00026189,
++		0x034, 0x0002506D,
++		0x034, 0x0002406A,
++		0x034, 0x0002302C,
++		0x034, 0x00022029,
++		0x034, 0x00021026,
++		0x034, 0x00020023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3F5,
++		0x034, 0x000293F3,
++		0x034, 0x000283D0,
++		0x034, 0x00027371,
++		0x034, 0x0002636E,
++		0x034, 0x0002536B,
++		0x034, 0x00024368,
++		0x034, 0x0002332A,
++		0x034, 0x00022327,
++		0x034, 0x0002104C,
++		0x034, 0x00020049,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002AFF7,
++		0x034, 0x00029FF6,
++		0x034, 0x00028FF3,
++		0x034, 0x00027FF0,
++		0x034, 0x00026FED,
++		0x034, 0x00025FEA,
++		0x034, 0x00024FE7,
++		0x034, 0x00023DEA,
++		0x034, 0x00022DE7,
++		0x034, 0x00021DE4,
++		0x034, 0x00020F25,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3EE,
++		0x034, 0x000293AC,
++		0x034, 0x00028389,
++		0x034, 0x0002716D,
++		0x034, 0x0002616A,
++		0x034, 0x0002506D,
++		0x034, 0x0002406A,
++		0x034, 0x0002302C,
++		0x034, 0x00022029,
++		0x034, 0x00021026,
++		0x034, 0x00020023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3EE,
++		0x034, 0x000293AC,
++		0x034, 0x00028389,
++		0x034, 0x0002716D,
++		0x034, 0x0002616A,
++		0x034, 0x0002506D,
++		0x034, 0x0002406A,
++		0x034, 0x0002302C,
++		0x034, 0x00022029,
++		0x034, 0x00021026,
++		0x034, 0x00020023,
++	0xA0000000,	0x00000000,
++		0x034, 0x0002AFF4,
++		0x034, 0x00029FF1,
++		0x034, 0x00028FEE,
++		0x034, 0x00027FEB,
++		0x034, 0x00026FE8,
++		0x034, 0x00025DEA,
++		0x034, 0x00024CED,
++		0x034, 0x00023CEA,
++		0x034, 0x00022C6C,
++		0x034, 0x00021C69,
++		0x034, 0x00020C2B,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A38C,
++		0x034, 0x000091AD,
++		0x034, 0x000081AA,
++		0x034, 0x000071A7,
++		0x034, 0x000060AA,
++		0x034, 0x000050A7,
++		0x034, 0x0000402C,
++		0x034, 0x00003029,
++		0x034, 0x00002026,
++		0x034, 0x00001009,
++		0x034, 0x00000006,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EC,
++		0x034, 0x000093AC,
++		0x034, 0x000081EC,
++		0x034, 0x0000716D,
++		0x034, 0x0000616A,
++		0x034, 0x0000506D,
++		0x034, 0x0000404C,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EF,
++		0x034, 0x000093AD,
++		0x034, 0x0000838A,
++		0x034, 0x0000718C,
++		0x034, 0x00006189,
++		0x034, 0x0000506D,
++		0x034, 0x0000406A,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EC,
++		0x034, 0x000093AC,
++		0x034, 0x000081EC,
++		0x034, 0x0000716D,
++		0x034, 0x0000616A,
++		0x034, 0x0000506D,
++		0x034, 0x0000404C,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EF,
++		0x034, 0x000093AD,
++		0x034, 0x0000838A,
++		0x034, 0x0000718C,
++		0x034, 0x00006189,
++		0x034, 0x0000506D,
++		0x034, 0x0000406A,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3F4,
++		0x034, 0x000093F0,
++		0x034, 0x000083AE,
++		0x034, 0x00007350,
++		0x034, 0x0000634D,
++		0x034, 0x0000534A,
++		0x034, 0x00004347,
++		0x034, 0x0000312D,
++		0x034, 0x0000212A,
++		0x034, 0x00001127,
++		0x034, 0x0000002A,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000AFF7,
++		0x034, 0x00009FF4,
++		0x034, 0x00008FF1,
++		0x034, 0x00007FEE,
++		0x034, 0x00006FEB,
++		0x034, 0x00005FE8,
++		0x034, 0x00004DEB,
++		0x034, 0x00003DE8,
++		0x034, 0x00002DE5,
++		0x034, 0x00001C8B,
++		0x034, 0x00000C88,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EC,
++		0x034, 0x000093AC,
++		0x034, 0x000081EC,
++		0x034, 0x0000716D,
++		0x034, 0x0000616A,
++		0x034, 0x0000506D,
++		0x034, 0x0000404C,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EC,
++		0x034, 0x000093AC,
++		0x034, 0x000081EC,
++		0x034, 0x0000716D,
++		0x034, 0x0000616A,
++		0x034, 0x0000506D,
++		0x034, 0x0000404C,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0xA0000000,	0x00000000,
++		0x034, 0x0000AFF4,
++		0x034, 0x00009FF1,
++		0x034, 0x00008FEE,
++		0x034, 0x00007FEB,
++		0x034, 0x00006FE8,
++		0x034, 0x00005DEA,
++		0x034, 0x00004CED,
++		0x034, 0x00003CEA,
++		0x034, 0x00002C6C,
++		0x034, 0x00001C69,
++		0x034, 0x00000C2B,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA38C,
++		0x034, 0x000C91AD,
++		0x034, 0x000C81AA,
++		0x034, 0x000C71A7,
++		0x034, 0x000C60AA,
++		0x034, 0x000C50A7,
++		0x034, 0x000C402C,
++		0x034, 0x000C3029,
++		0x034, 0x000C200C,
++		0x034, 0x000C1009,
++		0x034, 0x000C0006,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA38C,
++		0x034, 0x000C9389,
++		0x034, 0x000C816D,
++		0x034, 0x000C716A,
++		0x034, 0x000C606D,
++		0x034, 0x000C506A,
++		0x034, 0x000C402C,
++		0x034, 0x000C3029,
++		0x034, 0x000C2026,
++		0x034, 0x000C1009,
++		0x034, 0x000C0006,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA38B,
++		0x034, 0x000C9388,
++		0x034, 0x000C818B,
++		0x034, 0x000C7188,
++		0x034, 0x000C606D,
++		0x034, 0x000C506A,
++		0x034, 0x000C402C,
++		0x034, 0x000C3029,
++		0x034, 0x000C2026,
++		0x034, 0x000C1009,
++		0x034, 0x000C0006,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA38C,
++		0x034, 0x000C9389,
++		0x034, 0x000C816D,
++		0x034, 0x000C716A,
++		0x034, 0x000C606D,
++		0x034, 0x000C506A,
++		0x034, 0x000C402C,
++		0x034, 0x000C3029,
++		0x034, 0x000C2026,
++		0x034, 0x000C1009,
++		0x034, 0x000C0006,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA38B,
++		0x034, 0x000C9388,
++		0x034, 0x000C818B,
++		0x034, 0x000C7188,
++		0x034, 0x000C606D,
++		0x034, 0x000C506A,
++		0x034, 0x000C402C,
++		0x034, 0x000C3029,
++		0x034, 0x000C2026,
++		0x034, 0x000C1009,
++		0x034, 0x000C0006,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3F5,
++		0x034, 0x000C93F3,
++		0x034, 0x000C83B2,
++		0x034, 0x000C7390,
++		0x034, 0x000C638D,
++		0x034, 0x000C538A,
++		0x034, 0x000C4387,
++		0x034, 0x000C324A,
++		0x034, 0x000C2247,
++		0x034, 0x000C104D,
++		0x034, 0x000C004A,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CAFF7,
++		0x034, 0x000C9FF6,
++		0x034, 0x000C8FF3,
++		0x034, 0x000C7FF0,
++		0x034, 0x000C6FED,
++		0x034, 0x000C5FEA,
++		0x034, 0x000C4FE7,
++		0x034, 0x000C3DEA,
++		0x034, 0x000C2DE7,
++		0x034, 0x000C1DE4,
++		0x034, 0x000C0CE7,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA38C,
++		0x034, 0x000C9389,
++		0x034, 0x000C816D,
++		0x034, 0x000C716A,
++		0x034, 0x000C606D,
++		0x034, 0x000C506A,
++		0x034, 0x000C402C,
++		0x034, 0x000C3029,
++		0x034, 0x000C2026,
++		0x034, 0x000C1009,
++		0x034, 0x000C0006,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA38C,
++		0x034, 0x000C9389,
++		0x034, 0x000C816D,
++		0x034, 0x000C716A,
++		0x034, 0x000C606D,
++		0x034, 0x000C506A,
++		0x034, 0x000C402C,
++		0x034, 0x000C3029,
++		0x034, 0x000C2026,
++		0x034, 0x000C1009,
++		0x034, 0x000C0006,
++	0xA0000000,	0x00000000,
++		0x034, 0x000CA794,
++		0x034, 0x000C9791,
++		0x034, 0x000C878E,
++		0x034, 0x000C778B,
++		0x034, 0x000C658D,
++		0x034, 0x000C558A,
++		0x034, 0x000C448D,
++		0x034, 0x000C348A,
++		0x034, 0x000C244C,
++		0x034, 0x000C1449,
++		0x034, 0x000C042B,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA38C,
++		0x034, 0x000A91AD,
++		0x034, 0x000A81AA,
++		0x034, 0x000A71A7,
++		0x034, 0x000A60AA,
++		0x034, 0x000A50A7,
++		0x034, 0x000A402C,
++		0x034, 0x000A3029,
++		0x034, 0x000A200C,
++		0x034, 0x000A1009,
++		0x034, 0x000A0006,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3EE,
++		0x034, 0x000A93AC,
++		0x034, 0x000A8389,
++		0x034, 0x000A716D,
++		0x034, 0x000A616A,
++		0x034, 0x000A506D,
++		0x034, 0x000A406A,
++		0x034, 0x000A302C,
++		0x034, 0x000A2029,
++		0x034, 0x000A1026,
++		0x034, 0x000A0023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3EF,
++		0x034, 0x000A93AD,
++		0x034, 0x000A838A,
++		0x034, 0x000A718C,
++		0x034, 0x000A6189,
++		0x034, 0x000A506D,
++		0x034, 0x000A406A,
++		0x034, 0x000A302C,
++		0x034, 0x000A2029,
++		0x034, 0x000A1026,
++		0x034, 0x000A0023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3EE,
++		0x034, 0x000A93AC,
++		0x034, 0x000A8389,
++		0x034, 0x000A716D,
++		0x034, 0x000A616A,
++		0x034, 0x000A506D,
++		0x034, 0x000A406A,
++		0x034, 0x000A302C,
++		0x034, 0x000A2029,
++		0x034, 0x000A1026,
++		0x034, 0x000A0023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3EF,
++		0x034, 0x000A93AD,
++		0x034, 0x000A838A,
++		0x034, 0x000A718C,
++		0x034, 0x000A6189,
++		0x034, 0x000A506D,
++		0x034, 0x000A406A,
++		0x034, 0x000A302C,
++		0x034, 0x000A2029,
++		0x034, 0x000A1026,
++		0x034, 0x000A0023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3F5,
++		0x034, 0x000A93F3,
++		0x034, 0x000A83D0,
++		0x034, 0x000A7371,
++		0x034, 0x000A636E,
++		0x034, 0x000A536B,
++		0x034, 0x000A4368,
++		0x034, 0x000A332A,
++		0x034, 0x000A2327,
++		0x034, 0x000A104C,
++		0x034, 0x000A0049,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AAFF7,
++		0x034, 0x000A9FF6,
++		0x034, 0x000A8FF3,
++		0x034, 0x000A7FF0,
++		0x034, 0x000A6FED,
++		0x034, 0x000A5FEA,
++		0x034, 0x000A4FE7,
++		0x034, 0x000A3DEA,
++		0x034, 0x000A2DE7,
++		0x034, 0x000A1DE4,
++		0x034, 0x000A0F25,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3EE,
++		0x034, 0x000A93AC,
++		0x034, 0x000A8389,
++		0x034, 0x000A716D,
++		0x034, 0x000A616A,
++		0x034, 0x000A506D,
++		0x034, 0x000A406A,
++		0x034, 0x000A302C,
++		0x034, 0x000A2029,
++		0x034, 0x000A1026,
++		0x034, 0x000A0023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3EE,
++		0x034, 0x000A93AC,
++		0x034, 0x000A8389,
++		0x034, 0x000A716D,
++		0x034, 0x000A616A,
++		0x034, 0x000A506D,
++		0x034, 0x000A406A,
++		0x034, 0x000A302C,
++		0x034, 0x000A2029,
++		0x034, 0x000A1026,
++		0x034, 0x000A0023,
++	0xA0000000,	0x00000000,
++		0x034, 0x000AA794,
++		0x034, 0x000A9791,
++		0x034, 0x000A878E,
++		0x034, 0x000A778B,
++		0x034, 0x000A658D,
++		0x034, 0x000A558A,
++		0x034, 0x000A448D,
++		0x034, 0x000A348A,
++		0x034, 0x000A244C,
++		0x034, 0x000A1449,
++		0x034, 0x000A042B,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A38C,
++		0x034, 0x000891AD,
++		0x034, 0x000881AA,
++		0x034, 0x000871A7,
++		0x034, 0x000860AA,
++		0x034, 0x000850A7,
++		0x034, 0x0008402C,
++		0x034, 0x00083029,
++		0x034, 0x00082026,
++		0x034, 0x00081009,
++		0x034, 0x00080006,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EC,
++		0x034, 0x000893AC,
++		0x034, 0x000881EC,
++		0x034, 0x0008716D,
++		0x034, 0x0008616A,
++		0x034, 0x0008506D,
++		0x034, 0x0008404C,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EF,
++		0x034, 0x000893AD,
++		0x034, 0x0008838A,
++		0x034, 0x0008718C,
++		0x034, 0x00086189,
++		0x034, 0x0008506D,
++		0x034, 0x0008406A,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EC,
++		0x034, 0x000893AC,
++		0x034, 0x000881EC,
++		0x034, 0x0008716D,
++		0x034, 0x0008616A,
++		0x034, 0x0008506D,
++		0x034, 0x0008404C,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EF,
++		0x034, 0x000893AD,
++		0x034, 0x0008838A,
++		0x034, 0x0008718C,
++		0x034, 0x00086189,
++		0x034, 0x0008506D,
++		0x034, 0x0008406A,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3F4,
++		0x034, 0x000893F0,
++		0x034, 0x000883AE,
++		0x034, 0x00087350,
++		0x034, 0x0008634D,
++		0x034, 0x0008534A,
++		0x034, 0x00084347,
++		0x034, 0x0008312D,
++		0x034, 0x0008212A,
++		0x034, 0x00081127,
++		0x034, 0x0008002A,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008AFF7,
++		0x034, 0x00089FF4,
++		0x034, 0x00088FF1,
++		0x034, 0x00087FEE,
++		0x034, 0x00086FEB,
++		0x034, 0x00085FE8,
++		0x034, 0x00084DEB,
++		0x034, 0x00083DE8,
++		0x034, 0x00082DE5,
++		0x034, 0x00081C8B,
++		0x034, 0x00080C88,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EC,
++		0x034, 0x000893AC,
++		0x034, 0x000881EC,
++		0x034, 0x0008716D,
++		0x034, 0x0008616A,
++		0x034, 0x0008506D,
++		0x034, 0x0008404C,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EC,
++		0x034, 0x000893AC,
++		0x034, 0x000881EC,
++		0x034, 0x0008716D,
++		0x034, 0x0008616A,
++		0x034, 0x0008506D,
++		0x034, 0x0008404C,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0xA0000000,	0x00000000,
++		0x034, 0x0008A794,
++		0x034, 0x00089791,
++		0x034, 0x0008878E,
++		0x034, 0x0008778B,
++		0x034, 0x0008658D,
++		0x034, 0x0008558A,
++		0x034, 0x0008448D,
++		0x034, 0x0008348A,
++		0x034, 0x0008244C,
++		0x034, 0x00081449,
++		0x034, 0x0008042B,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0xA0000000,	0x00000000,
++		0x0DF, 0x00000000,
++	0xB0000000,	0x00000000,
++		0x018, 0x0001712A,
++		0x0EF, 0x00000040,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0xA0000000,	0x00000000,
++		0x035, 0x00000484,
++		0x035, 0x00008484,
++		0x035, 0x00010484,
++		0x035, 0x00020584,
++		0x035, 0x00028584,
++		0x035, 0x00030584,
++		0x035, 0x00040584,
++		0x035, 0x00048584,
++		0x035, 0x00050584,
++		0x035, 0x000805FB,
++		0x035, 0x000885FB,
++		0x035, 0x000905FB,
++		0x035, 0x000A05FB,
++		0x035, 0x000A85FB,
++		0x035, 0x000B05FB,
++		0x035, 0x000C05FB,
++		0x035, 0x000C85FB,
++		0x035, 0x000D05FB,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0xA0000000,	0x00000000,
++		0x0DF, 0x00000000,
++	0xB0000000,	0x00000000,
++		0x018, 0x0001712A,
++		0x0EF, 0x00000010,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000473,
++		0x036, 0x00008473,
++		0x036, 0x00010473,
++		0x036, 0x00020473,
++		0x036, 0x00028473,
++		0x036, 0x00030473,
++		0x036, 0x00040473,
++		0x036, 0x00048473,
++		0x036, 0x00050473,
++		0x036, 0x00080473,
++		0x036, 0x00088473,
++		0x036, 0x00090473,
++		0x036, 0x000A0473,
++		0x036, 0x000A8473,
++		0x036, 0x000B0473,
++		0x036, 0x000C0473,
++		0x036, 0x000C8473,
++		0x036, 0x000D0473,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0xA0000000,	0x00000000,
++		0x036, 0x00000474,
++		0x036, 0x00008474,
++		0x036, 0x00010474,
++		0x036, 0x00020474,
++		0x036, 0x00028474,
++		0x036, 0x00030474,
++		0x036, 0x00040474,
++		0x036, 0x00048474,
++		0x036, 0x00050474,
++		0x036, 0x00080474,
++		0x036, 0x00088474,
++		0x036, 0x00090474,
++		0x036, 0x000A0474,
++		0x036, 0x000A8474,
++		0x036, 0x000B0474,
++		0x036, 0x000C0474,
++		0x036, 0x000C8474,
++		0x036, 0x000D0474,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0xA0000000,	0x00000000,
++		0x0EF, 0x00000004,
++		0x037, 0x00000000,
++		0x038, 0x0000514E,
++		0x037, 0x00004000,
++		0x038, 0x0000514E,
++		0x037, 0x00008000,
++		0x038, 0x0000514E,
++		0x037, 0x00010000,
++		0x038, 0x0000514E,
++		0x037, 0x00014000,
++		0x038, 0x0000514E,
++		0x037, 0x00018000,
++		0x038, 0x0000514E,
++		0x037, 0x0001C000,
++		0x038, 0x0000514E,
++		0x037, 0x00020000,
++		0x038, 0x0000514E,
++		0x037, 0x00024000,
++		0x038, 0x0000514E,
++		0x037, 0x00028000,
++		0x038, 0x0000514E,
++		0x037, 0x0002C000,
++		0x038, 0x0000714E,
++		0x037, 0x00030000,
++		0x038, 0x0000514E,
++		0x037, 0x00034000,
++		0x038, 0x0000514E,
++		0x037, 0x00038000,
++		0x038, 0x0000514E,
++		0x037, 0x0003C000,
++		0x038, 0x0000514E,
++		0x037, 0x00040000,
++		0x038, 0x0000514E,
++		0x037, 0x00044000,
++		0x038, 0x0000514E,
++		0x037, 0x00048000,
++		0x038, 0x0000514E,
++		0x037, 0x00080000,
++		0x038, 0x00005ECE,
++		0x037, 0x00084000,
++		0x038, 0x00005ECE,
++		0x037, 0x00088000,
++		0x038, 0x00005ECE,
++		0x037, 0x00090000,
++		0x038, 0x00005ECE,
++		0x037, 0x00094000,
++		0x038, 0x00005ECE,
++		0x037, 0x00098000,
++		0x038, 0x00005ECE,
++		0x037, 0x0009C000,
++		0x038, 0x00005ECE,
++		0x037, 0x000A0000,
++		0x038, 0x00005ECE,
++		0x037, 0x000A4000,
++		0x038, 0x00005ECE,
++		0x037, 0x000A8000,
++		0x038, 0x00005ECE,
++		0x037, 0x000AC000,
++		0x038, 0x00005ECE,
++		0x037, 0x000B0000,
++		0x038, 0x00005ECE,
++		0x037, 0x000B4000,
++		0x038, 0x00005ECE,
++		0x037, 0x000B8000,
++		0x038, 0x00005ECE,
++		0x037, 0x000BC000,
++		0x038, 0x00005ECE,
++		0x037, 0x000C0000,
++		0x038, 0x00005ECE,
++		0x037, 0x000C4000,
++		0x038, 0x00005ECE,
++		0x037, 0x000C8000,
++		0x038, 0x00005ECE,
++		0x0EF, 0x00000000,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000008,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0xA0000000,	0x00000000,
++		0x03C, 0x0000007D,
++		0x03C, 0x0000047D,
++		0x03C, 0x0000087D,
++		0x03C, 0x0000107D,
++		0x03C, 0x0000147D,
++		0x03C, 0x0000187D,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027E,
++		0x03C, 0x00000546,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127E,
++		0x03C, 0x00001546,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227E,
++		0x03C, 0x00002546,
++		0x03C, 0x00002821,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027E,
++		0x03C, 0x00000546,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127E,
++		0x03C, 0x00001546,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227E,
++		0x03C, 0x00002546,
++		0x03C, 0x00002821,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027E,
++		0x03C, 0x00000546,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127E,
++		0x03C, 0x00001546,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227E,
++		0x03C, 0x00002546,
++		0x03C, 0x00002821,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027E,
++		0x03C, 0x00000546,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127E,
++		0x03C, 0x00001546,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227E,
++		0x03C, 0x00002546,
++		0x03C, 0x00002821,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027E,
++		0x03C, 0x00000546,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127E,
++		0x03C, 0x00001546,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227E,
++		0x03C, 0x00002546,
++		0x03C, 0x00002821,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027E,
++		0x03C, 0x00000546,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127E,
++		0x03C, 0x00001546,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227E,
++		0x03C, 0x00002546,
++		0x03C, 0x00002821,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027E,
++		0x03C, 0x00000546,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127E,
++		0x03C, 0x00001546,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227E,
++		0x03C, 0x00002546,
++		0x03C, 0x00002821,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027E,
++		0x03C, 0x00000546,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127E,
++		0x03C, 0x00001546,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227E,
++		0x03C, 0x00002546,
++		0x03C, 0x00002821,
++	0xA0000000,	0x00000000,
++		0x03C, 0x0000037E,
++		0x03C, 0x00000575,
++		0x03C, 0x00000971,
++		0x03C, 0x0000127E,
++		0x03C, 0x00001575,
++		0x03C, 0x00001871,
++		0x03C, 0x0000217E,
++		0x03C, 0x00002575,
++		0x03C, 0x00002871,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++		0x061, 0x000C0D47,
++		0x062, 0x0000133C,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0xA0000000,	0x00000000,
++		0x063, 0x0007D0E7,
++	0xB0000000,	0x00000000,
++		0x064, 0x00014FEC,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0xA0000000,	0x00000000,
++		0x065, 0x000923FF,
++	0xB0000000,	0x00000000,
++		0x066, 0x00000040,
++		0x057, 0x00050000,
++		0x056, 0x00051DF0,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0xA0000000,	0x00000000,
++		0x055, 0x00082060,
++	0xB0000000,	0x00000000,
++};
++
++RTW_DECL_TABLE_RF_RADIO(rtw8814a_rf_b, B);
++
++static const u32 rtw8814a_rf_c[] = {
++		0x018, 0x00013124,
++		0x040, 0x00000C00,
++		0x058, 0x00000F98,
++		0x07F, 0x00068004,
++		0x018, 0x00000006,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0xA0000000,	0x00000000,
++		0x086, 0x000E4B58,
++		0x087, 0x00049F80,
++	0xB0000000,	0x00000000,
++		0x0DF, 0x00000008,
++		0x0EF, 0x00002000,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x00017823,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x00017823,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x00017823,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x00017823,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x00017823,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x00017823,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x00017823,
++	0xA0000000,	0x00000000,
++		0x03B, 0x0003F258,
++		0x03B, 0x00030A58,
++		0x03B, 0x0002FA58,
++		0x03B, 0x00022590,
++		0x03B, 0x0001FA50,
++		0x03B, 0x00010248,
++		0x03B, 0x00008240,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000100,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0xA0000000,	0x00000000,
++		0x034, 0x0000ADF6,
++		0x034, 0x00009DF3,
++		0x034, 0x00008DF0,
++		0x034, 0x00007DED,
++		0x034, 0x00006DEA,
++		0x034, 0x00005CED,
++		0x034, 0x00004CEA,
++		0x034, 0x000034EA,
++		0x034, 0x000024E7,
++		0x034, 0x0000146A,
++		0x034, 0x0000006B,
++	0xB0000000,	0x00000000,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0xA0000000,	0x00000000,
++		0x034, 0x0008ADF6,
++		0x034, 0x00089DF3,
++		0x034, 0x00088DF0,
++		0x034, 0x00087DED,
++		0x034, 0x00086DEA,
++		0x034, 0x00085CED,
++		0x034, 0x00084CEA,
++		0x034, 0x000834EA,
++		0x034, 0x000824E7,
++		0x034, 0x0008146A,
++		0x034, 0x0008006B,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++		0x0EF, 0x000020A2,
++		0x0DF, 0x00000080,
++		0x035, 0x00000192,
++		0x035, 0x00008192,
++		0x035, 0x00010192,
++		0x036, 0x00000024,
++		0x036, 0x00008024,
++		0x036, 0x00010024,
++		0x036, 0x00018024,
++		0x0EF, 0x00000000,
++		0x051, 0x00000C21,
++		0x052, 0x000006D9,
++		0x053, 0x000FC649,
++		0x054, 0x0000017E,
++		0x018, 0x0001012A,
++		0x081, 0x0007FC00,
++		0x089, 0x00050110,
++		0x08A, 0x00043E50,
++		0x08B, 0x0002E180,
++		0x08C, 0x00093C3C,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x085, 0x000F8000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x085, 0x000F8000,
++	0xA0000000,	0x00000000,
++		0x085, 0x000F8000,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0xA0000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00001000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00038023,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0006C000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x000D4000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00080000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00088000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0006C000,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0008C000,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00004000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00088000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00088000,
++	0xA0000000,	0x00000000,
++		0x03C, 0x000A0000,
++	0xB0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00030023,
++		0x03C, 0x00048000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00028623,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00021633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x0001C633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00010293,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00009593,
++		0x03C, 0x00000000,
++		0x03A, 0x00000148,
++	0x80000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0000118B,
++	0xA0000000,	0x00000000,
++		0x03B, 0x0000078B,
++	0xB0000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0xA0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0004C000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00084000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00080000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0004C000,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x000D0000,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00080000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00080000,
++	0xA0000000,	0x00000000,
++		0x03C, 0x00028000,
++	0xB0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00070023,
++		0x03C, 0x00048000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00068623,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00061633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x0005C633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00050293,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00049593,
++		0x03C, 0x00000000,
++		0x03A, 0x00000148,
++		0x03B, 0x0004078B,
++		0x03C, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0xA0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00024000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00060000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00080000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00024000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00024000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00024000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00024000,
++	0xA0000000,	0x00000000,
++		0x03C, 0x00020000,
++	0xB0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B0023,
++	0x80000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0xA0000000,	0x00000000,
++		0x03C, 0x00020000,
++	0xB0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000A8623,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000A1633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x0009C633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00090293,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00089593,
++		0x03C, 0x00000000,
++		0x03A, 0x00000148,
++	0x80000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0008128B,
++	0xA0000000,	0x00000000,
++		0x03B, 0x0008078B,
++	0xB0000000,	0x00000000,
++		0x03C, 0x00000000,
++		0x0EF, 0x00000000,
++		0x0EF, 0x00000800,
++		0x03B, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000803,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001803,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001803,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000803,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001003,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001003,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001003,
++	0xA0000000,	0x00000000,
++		0x03A, 0x00000803,
++	0xB0000000,	0x00000000,
++		0x03B, 0x00040000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000800,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000803,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000803,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001000,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000000,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000000,
++	0xA0000000,	0x00000000,
++		0x03A, 0x00001000,
++	0xB0000000,	0x00000000,
++		0x03B, 0x00080000,
++	0x80000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000000,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001802,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001802,
++	0xA0000000,	0x00000000,
++		0x03A, 0x00001002,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0xA0000000,	0x00000000,
++	0xB0000000,	0x00000000,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++		0x018, 0x00013124,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x018, 0x00013124,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x018, 0x00013124,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x018, 0x00013124,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x018, 0x00013124,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x018, 0x00013124,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x018, 0x00013124,
++	0xA0000000,	0x00000000,
++		0x018, 0x00013124,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000100,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A38C,
++		0x034, 0x000491AD,
++		0x034, 0x000481AA,
++		0x034, 0x000471A7,
++		0x034, 0x000460AA,
++		0x034, 0x000450A7,
++		0x034, 0x0004402C,
++		0x034, 0x00043029,
++		0x034, 0x0004200C,
++		0x034, 0x00041009,
++		0x034, 0x00040006,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3EF,
++		0x034, 0x000493AD,
++		0x034, 0x0004838A,
++		0x034, 0x0004718C,
++		0x034, 0x00046189,
++		0x034, 0x0004506D,
++		0x034, 0x0004404C,
++		0x034, 0x0004302C,
++		0x034, 0x00042029,
++		0x034, 0x00041026,
++		0x034, 0x00040023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3EF,
++		0x034, 0x000493AD,
++		0x034, 0x0004838A,
++		0x034, 0x0004718C,
++		0x034, 0x00046189,
++		0x034, 0x0004506D,
++		0x034, 0x0004404C,
++		0x034, 0x0004302C,
++		0x034, 0x00042029,
++		0x034, 0x00041026,
++		0x034, 0x00040023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3EF,
++		0x034, 0x000493AD,
++		0x034, 0x0004838A,
++		0x034, 0x0004718C,
++		0x034, 0x00046189,
++		0x034, 0x0004506D,
++		0x034, 0x0004404C,
++		0x034, 0x0004302C,
++		0x034, 0x00042029,
++		0x034, 0x00041026,
++		0x034, 0x00040023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3EF,
++		0x034, 0x000493AD,
++		0x034, 0x0004838A,
++		0x034, 0x0004718C,
++		0x034, 0x00046189,
++		0x034, 0x0004506D,
++		0x034, 0x0004404C,
++		0x034, 0x0004302C,
++		0x034, 0x00042029,
++		0x034, 0x00041026,
++		0x034, 0x00040023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3F5,
++		0x034, 0x000493F3,
++		0x034, 0x00048393,
++		0x034, 0x00047390,
++		0x034, 0x0004638D,
++		0x034, 0x0004538A,
++		0x034, 0x00044387,
++		0x034, 0x000430ED,
++		0x034, 0x000420EA,
++		0x034, 0x000410E7,
++		0x034, 0x0004002D,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004AFF7,
++		0x034, 0x00049FF6,
++		0x034, 0x00048FF3,
++		0x034, 0x00047FF0,
++		0x034, 0x00046FED,
++		0x034, 0x00045FEA,
++		0x034, 0x00044FE7,
++		0x034, 0x00043CD0,
++		0x034, 0x00042CCD,
++		0x034, 0x00041CCA,
++		0x034, 0x00040CC7,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3EF,
++		0x034, 0x000493AD,
++		0x034, 0x0004838A,
++		0x034, 0x0004718C,
++		0x034, 0x00046189,
++		0x034, 0x0004506D,
++		0x034, 0x0004404C,
++		0x034, 0x0004302C,
++		0x034, 0x00042029,
++		0x034, 0x00041026,
++		0x034, 0x00040023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3EF,
++		0x034, 0x000493AD,
++		0x034, 0x0004838A,
++		0x034, 0x0004718C,
++		0x034, 0x00046189,
++		0x034, 0x0004506D,
++		0x034, 0x0004404C,
++		0x034, 0x0004302C,
++		0x034, 0x00042029,
++		0x034, 0x00041026,
++		0x034, 0x00040023,
++	0xA0000000,	0x00000000,
++		0x034, 0x0004AFF4,
++		0x034, 0x00049FF1,
++		0x034, 0x00048FEE,
++		0x034, 0x00047FEB,
++		0x034, 0x00046FE8,
++		0x034, 0x00045DEA,
++		0x034, 0x00044CED,
++		0x034, 0x00043CEA,
++		0x034, 0x00042C6C,
++		0x034, 0x00041C69,
++		0x034, 0x00040C2B,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3EC,
++		0x034, 0x0002938C,
++		0x034, 0x000281AD,
++		0x034, 0x000271AA,
++		0x034, 0x000261A7,
++		0x034, 0x000250AA,
++		0x034, 0x000240A7,
++		0x034, 0x0002302C,
++		0x034, 0x00022029,
++		0x034, 0x0002100C,
++		0x034, 0x00020009,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3EC,
++		0x034, 0x0002936D,
++		0x034, 0x0002836A,
++		0x034, 0x0002716D,
++		0x034, 0x0002616A,
++		0x034, 0x0002506D,
++		0x034, 0x0002406A,
++		0x034, 0x0002302C,
++		0x034, 0x00022029,
++		0x034, 0x00021026,
++		0x034, 0x00020023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3EC,
++		0x034, 0x000293AC,
++		0x034, 0x0002838A,
++		0x034, 0x0002718C,
++		0x034, 0x00026189,
++		0x034, 0x0002506D,
++		0x034, 0x0002406A,
++		0x034, 0x0002302C,
++		0x034, 0x00022029,
++		0x034, 0x00021026,
++		0x034, 0x00020023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3EC,
++		0x034, 0x0002936D,
++		0x034, 0x0002836A,
++		0x034, 0x0002716D,
++		0x034, 0x0002616A,
++		0x034, 0x0002506D,
++		0x034, 0x0002406A,
++		0x034, 0x0002302C,
++		0x034, 0x00022029,
++		0x034, 0x00021026,
++		0x034, 0x00020023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3EC,
++		0x034, 0x000293AC,
++		0x034, 0x0002838A,
++		0x034, 0x0002718C,
++		0x034, 0x00026189,
++		0x034, 0x0002506D,
++		0x034, 0x0002406A,
++		0x034, 0x0002302C,
++		0x034, 0x00022029,
++		0x034, 0x00021026,
++		0x034, 0x00020023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3F5,
++		0x034, 0x000293F3,
++		0x034, 0x000282F2,
++		0x034, 0x000272D0,
++		0x034, 0x000262CD,
++		0x034, 0x000252CA,
++		0x034, 0x000242C7,
++		0x034, 0x000230CD,
++		0x034, 0x000220CA,
++		0x034, 0x000210C7,
++		0x034, 0x00020086,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002AFF7,
++		0x034, 0x00029FF6,
++		0x034, 0x00028FF3,
++		0x034, 0x00027FF0,
++		0x034, 0x00026FED,
++		0x034, 0x00025FEA,
++		0x034, 0x00024FE7,
++		0x034, 0x00023DEA,
++		0x034, 0x00022DE7,
++		0x034, 0x00021DE4,
++		0x034, 0x00020E44,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3EC,
++		0x034, 0x0002936D,
++		0x034, 0x0002836A,
++		0x034, 0x0002716D,
++		0x034, 0x0002616A,
++		0x034, 0x0002506D,
++		0x034, 0x0002406A,
++		0x034, 0x0002302C,
++		0x034, 0x00022029,
++		0x034, 0x00021026,
++		0x034, 0x00020023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3EC,
++		0x034, 0x0002936D,
++		0x034, 0x0002836A,
++		0x034, 0x0002716D,
++		0x034, 0x0002616A,
++		0x034, 0x0002506D,
++		0x034, 0x0002406A,
++		0x034, 0x0002302C,
++		0x034, 0x00022029,
++		0x034, 0x00021026,
++		0x034, 0x00020023,
++	0xA0000000,	0x00000000,
++		0x034, 0x0002AFF4,
++		0x034, 0x00029FF1,
++		0x034, 0x00028FEE,
++		0x034, 0x00027FEB,
++		0x034, 0x00026FE8,
++		0x034, 0x00025DEA,
++		0x034, 0x00024CED,
++		0x034, 0x00023CEA,
++		0x034, 0x00022C6C,
++		0x034, 0x00021C69,
++		0x034, 0x00020C2B,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A38C,
++		0x034, 0x000091AD,
++		0x034, 0x000081AA,
++		0x034, 0x000071A7,
++		0x034, 0x000060AA,
++		0x034, 0x000050A7,
++		0x034, 0x0000402C,
++		0x034, 0x00003029,
++		0x034, 0x0000200C,
++		0x034, 0x00001009,
++		0x034, 0x00000006,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EE,
++		0x034, 0x000093AB,
++		0x034, 0x00008389,
++		0x034, 0x0000718C,
++		0x034, 0x00006189,
++		0x034, 0x0000506D,
++		0x034, 0x0000406A,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EE,
++		0x034, 0x000093AB,
++		0x034, 0x00008389,
++		0x034, 0x0000718C,
++		0x034, 0x00006189,
++		0x034, 0x0000506D,
++		0x034, 0x0000406A,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EE,
++		0x034, 0x000093AB,
++		0x034, 0x00008389,
++		0x034, 0x0000718C,
++		0x034, 0x00006189,
++		0x034, 0x0000506D,
++		0x034, 0x0000406A,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EE,
++		0x034, 0x000093AB,
++		0x034, 0x00008389,
++		0x034, 0x0000718C,
++		0x034, 0x00006189,
++		0x034, 0x0000506D,
++		0x034, 0x0000406A,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3F5,
++		0x034, 0x000093F1,
++		0x034, 0x000083B0,
++		0x034, 0x00007370,
++		0x034, 0x0000636D,
++		0x034, 0x0000536A,
++		0x034, 0x00004367,
++		0x034, 0x0000308E,
++		0x034, 0x0000208B,
++		0x034, 0x00001088,
++		0x034, 0x00000085,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000AFF7,
++		0x034, 0x00009FF5,
++		0x034, 0x00008FF2,
++		0x034, 0x00007FEF,
++		0x034, 0x00006FEC,
++		0x034, 0x00005FE9,
++		0x034, 0x00004EAA,
++		0x034, 0x00003EA7,
++		0x034, 0x00002C70,
++		0x034, 0x00001C6D,
++		0x034, 0x00000C6A,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EE,
++		0x034, 0x000093AB,
++		0x034, 0x00008389,
++		0x034, 0x0000718C,
++		0x034, 0x00006189,
++		0x034, 0x0000506D,
++		0x034, 0x0000406A,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EE,
++		0x034, 0x000093AB,
++		0x034, 0x00008389,
++		0x034, 0x0000718C,
++		0x034, 0x00006189,
++		0x034, 0x0000506D,
++		0x034, 0x0000406A,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0xA0000000,	0x00000000,
++		0x034, 0x0000AFF4,
++		0x034, 0x00009FF1,
++		0x034, 0x00008FEE,
++		0x034, 0x00007FEB,
++		0x034, 0x00006FE8,
++		0x034, 0x00005DEA,
++		0x034, 0x00004CED,
++		0x034, 0x00003CEA,
++		0x034, 0x00002C6C,
++		0x034, 0x00001C69,
++		0x034, 0x00000C2B,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA38C,
++		0x034, 0x000C91AD,
++		0x034, 0x000C81AA,
++		0x034, 0x000C71A7,
++		0x034, 0x000C60AA,
++		0x034, 0x000C50A7,
++		0x034, 0x000C402C,
++		0x034, 0x000C3029,
++		0x034, 0x000C200C,
++		0x034, 0x000C1009,
++		0x034, 0x000C0006,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3EF,
++		0x034, 0x000C93AD,
++		0x034, 0x000C838A,
++		0x034, 0x000C718C,
++		0x034, 0x000C6189,
++		0x034, 0x000C506D,
++		0x034, 0x000C404C,
++		0x034, 0x000C302C,
++		0x034, 0x000C2029,
++		0x034, 0x000C1026,
++		0x034, 0x000C0023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3EF,
++		0x034, 0x000C93AD,
++		0x034, 0x000C838A,
++		0x034, 0x000C718C,
++		0x034, 0x000C6189,
++		0x034, 0x000C506D,
++		0x034, 0x000C404C,
++		0x034, 0x000C302C,
++		0x034, 0x000C2029,
++		0x034, 0x000C1026,
++		0x034, 0x000C0023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3EF,
++		0x034, 0x000C93AD,
++		0x034, 0x000C838A,
++		0x034, 0x000C718C,
++		0x034, 0x000C6189,
++		0x034, 0x000C506D,
++		0x034, 0x000C404C,
++		0x034, 0x000C302C,
++		0x034, 0x000C2029,
++		0x034, 0x000C1026,
++		0x034, 0x000C0023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3EF,
++		0x034, 0x000C93AD,
++		0x034, 0x000C838A,
++		0x034, 0x000C718C,
++		0x034, 0x000C6189,
++		0x034, 0x000C506D,
++		0x034, 0x000C404C,
++		0x034, 0x000C302C,
++		0x034, 0x000C2029,
++		0x034, 0x000C1026,
++		0x034, 0x000C0023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3F5,
++		0x034, 0x000C93F3,
++		0x034, 0x000C8393,
++		0x034, 0x000C7390,
++		0x034, 0x000C638D,
++		0x034, 0x000C538A,
++		0x034, 0x000C4387,
++		0x034, 0x000C30ED,
++		0x034, 0x000C20EA,
++		0x034, 0x000C10E7,
++		0x034, 0x000C002D,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CAFF7,
++		0x034, 0x000C9FF6,
++		0x034, 0x000C8FF3,
++		0x034, 0x000C7FF0,
++		0x034, 0x000C6FED,
++		0x034, 0x000C5FEA,
++		0x034, 0x000C4FE7,
++		0x034, 0x000C3CD0,
++		0x034, 0x000C2CCD,
++		0x034, 0x000C1CCA,
++		0x034, 0x000C0CC7,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3EF,
++		0x034, 0x000C93AD,
++		0x034, 0x000C838A,
++		0x034, 0x000C718C,
++		0x034, 0x000C6189,
++		0x034, 0x000C506D,
++		0x034, 0x000C404C,
++		0x034, 0x000C302C,
++		0x034, 0x000C2029,
++		0x034, 0x000C1026,
++		0x034, 0x000C0023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3EF,
++		0x034, 0x000C93AD,
++		0x034, 0x000C838A,
++		0x034, 0x000C718C,
++		0x034, 0x000C6189,
++		0x034, 0x000C506D,
++		0x034, 0x000C404C,
++		0x034, 0x000C302C,
++		0x034, 0x000C2029,
++		0x034, 0x000C1026,
++		0x034, 0x000C0023,
++	0xA0000000,	0x00000000,
++		0x034, 0x000CA794,
++		0x034, 0x000C9791,
++		0x034, 0x000C878E,
++		0x034, 0x000C778B,
++		0x034, 0x000C658D,
++		0x034, 0x000C558A,
++		0x034, 0x000C448D,
++		0x034, 0x000C348A,
++		0x034, 0x000C244C,
++		0x034, 0x000C1449,
++		0x034, 0x000C042B,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3EC,
++		0x034, 0x000A938C,
++		0x034, 0x000A81AD,
++		0x034, 0x000A71AA,
++		0x034, 0x000A61A7,
++		0x034, 0x000A50AA,
++		0x034, 0x000A40A7,
++		0x034, 0x000A302C,
++		0x034, 0x000A2029,
++		0x034, 0x000A100C,
++		0x034, 0x000A0009,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3EC,
++		0x034, 0x000A936D,
++		0x034, 0x000A836A,
++		0x034, 0x000A716D,
++		0x034, 0x000A616A,
++		0x034, 0x000A506D,
++		0x034, 0x000A406A,
++		0x034, 0x000A302C,
++		0x034, 0x000A2029,
++		0x034, 0x000A1026,
++		0x034, 0x000A0023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3EC,
++		0x034, 0x000A93AC,
++		0x034, 0x000A838A,
++		0x034, 0x000A718C,
++		0x034, 0x000A6189,
++		0x034, 0x000A506D,
++		0x034, 0x000A406A,
++		0x034, 0x000A302C,
++		0x034, 0x000A2029,
++		0x034, 0x000A1026,
++		0x034, 0x000A0023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3EC,
++		0x034, 0x000A936D,
++		0x034, 0x000A836A,
++		0x034, 0x000A716D,
++		0x034, 0x000A616A,
++		0x034, 0x000A506D,
++		0x034, 0x000A406A,
++		0x034, 0x000A302C,
++		0x034, 0x000A2029,
++		0x034, 0x000A1026,
++		0x034, 0x000A0023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3EC,
++		0x034, 0x000A93AC,
++		0x034, 0x000A838A,
++		0x034, 0x000A718C,
++		0x034, 0x000A6189,
++		0x034, 0x000A506D,
++		0x034, 0x000A406A,
++		0x034, 0x000A302C,
++		0x034, 0x000A2029,
++		0x034, 0x000A1026,
++		0x034, 0x000A0023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3F5,
++		0x034, 0x000A93F3,
++		0x034, 0x000A82F2,
++		0x034, 0x000A72D0,
++		0x034, 0x000A62CD,
++		0x034, 0x000A52CA,
++		0x034, 0x000A42C7,
++		0x034, 0x000A30CD,
++		0x034, 0x000A20CA,
++		0x034, 0x000A10C7,
++		0x034, 0x000A0086,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AAFF7,
++		0x034, 0x000A9FF6,
++		0x034, 0x000A8FF3,
++		0x034, 0x000A7FF0,
++		0x034, 0x000A6FED,
++		0x034, 0x000A5FEA,
++		0x034, 0x000A4FE7,
++		0x034, 0x000A3DEA,
++		0x034, 0x000A2DE7,
++		0x034, 0x000A1DE4,
++		0x034, 0x000A0E44,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3EC,
++		0x034, 0x000A936D,
++		0x034, 0x000A836A,
++		0x034, 0x000A716D,
++		0x034, 0x000A616A,
++		0x034, 0x000A506D,
++		0x034, 0x000A406A,
++		0x034, 0x000A302C,
++		0x034, 0x000A2029,
++		0x034, 0x000A1026,
++		0x034, 0x000A0023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3EC,
++		0x034, 0x000A936D,
++		0x034, 0x000A836A,
++		0x034, 0x000A716D,
++		0x034, 0x000A616A,
++		0x034, 0x000A506D,
++		0x034, 0x000A406A,
++		0x034, 0x000A302C,
++		0x034, 0x000A2029,
++		0x034, 0x000A1026,
++		0x034, 0x000A0023,
++	0xA0000000,	0x00000000,
++		0x034, 0x000AA794,
++		0x034, 0x000A9791,
++		0x034, 0x000A878E,
++		0x034, 0x000A778B,
++		0x034, 0x000A658D,
++		0x034, 0x000A558A,
++		0x034, 0x000A448D,
++		0x034, 0x000A348A,
++		0x034, 0x000A244C,
++		0x034, 0x000A1449,
++		0x034, 0x000A042B,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A38C,
++		0x034, 0x000891AD,
++		0x034, 0x000881AA,
++		0x034, 0x000871A7,
++		0x034, 0x000860AA,
++		0x034, 0x000850A7,
++		0x034, 0x0008402C,
++		0x034, 0x00083029,
++		0x034, 0x0008200C,
++		0x034, 0x00081009,
++		0x034, 0x00000006,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EE,
++		0x034, 0x000893AB,
++		0x034, 0x00088389,
++		0x034, 0x0008718C,
++		0x034, 0x00086189,
++		0x034, 0x0008506D,
++		0x034, 0x0008406A,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EE,
++		0x034, 0x000893AB,
++		0x034, 0x00088389,
++		0x034, 0x0008718C,
++		0x034, 0x00086189,
++		0x034, 0x0008506D,
++		0x034, 0x0008406A,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EE,
++		0x034, 0x000893AB,
++		0x034, 0x00088389,
++		0x034, 0x0008718C,
++		0x034, 0x00086189,
++		0x034, 0x0008506D,
++		0x034, 0x0008406A,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EE,
++		0x034, 0x000893AB,
++		0x034, 0x00088389,
++		0x034, 0x0008718C,
++		0x034, 0x00086189,
++		0x034, 0x0008506D,
++		0x034, 0x0008406A,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3F5,
++		0x034, 0x000893F1,
++		0x034, 0x000883B0,
++		0x034, 0x00087370,
++		0x034, 0x0008636D,
++		0x034, 0x0008536A,
++		0x034, 0x00084367,
++		0x034, 0x0008308E,
++		0x034, 0x0008208B,
++		0x034, 0x00081088,
++		0x034, 0x00080085,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008AFF7,
++		0x034, 0x00089FF5,
++		0x034, 0x00088FF2,
++		0x034, 0x00087FEF,
++		0x034, 0x00086FEC,
++		0x034, 0x00085FE9,
++		0x034, 0x00084EAA,
++		0x034, 0x00083EA7,
++		0x034, 0x00082C70,
++		0x034, 0x00081C6D,
++		0x034, 0x00080C6A,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EE,
++		0x034, 0x000893AB,
++		0x034, 0x00088389,
++		0x034, 0x0008718C,
++		0x034, 0x00086189,
++		0x034, 0x0008506D,
++		0x034, 0x0008406A,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EE,
++		0x034, 0x000893AB,
++		0x034, 0x00088389,
++		0x034, 0x0008718C,
++		0x034, 0x00086189,
++		0x034, 0x0008506D,
++		0x034, 0x0008406A,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0xA0000000,	0x00000000,
++		0x034, 0x0008A794,
++		0x034, 0x00089791,
++		0x034, 0x0008878E,
++		0x034, 0x0008778B,
++		0x034, 0x0008658D,
++		0x034, 0x0008558A,
++		0x034, 0x0008448D,
++		0x034, 0x0008348A,
++		0x034, 0x0008244C,
++		0x034, 0x00081449,
++		0x034, 0x0008042B,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0xA0000000,	0x00000000,
++		0x0DF, 0x00000000,
++	0xB0000000,	0x00000000,
++		0x018, 0x0001712A,
++		0x0EF, 0x00000040,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0xA0000000,	0x00000000,
++		0x035, 0x00000484,
++		0x035, 0x00008484,
++		0x035, 0x00010484,
++		0x035, 0x00020584,
++		0x035, 0x00028584,
++		0x035, 0x00030584,
++		0x035, 0x00040584,
++		0x035, 0x00048584,
++		0x035, 0x00050584,
++		0x035, 0x000805FB,
++		0x035, 0x000885FB,
++		0x035, 0x000905FB,
++		0x035, 0x000A05FB,
++		0x035, 0x000A85FB,
++		0x035, 0x000B05FB,
++		0x035, 0x000C05FB,
++		0x035, 0x000C85FB,
++		0x035, 0x000D05FB,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0xA0000000,	0x00000000,
++		0x0DF, 0x00000000,
++	0xB0000000,	0x00000000,
++		0x018, 0x0001712A,
++		0x0EF, 0x00000010,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000473,
++		0x036, 0x00008473,
++		0x036, 0x00010473,
++		0x036, 0x00020473,
++		0x036, 0x00028473,
++		0x036, 0x00030473,
++		0x036, 0x00040473,
++		0x036, 0x00048473,
++		0x036, 0x00050473,
++		0x036, 0x00080473,
++		0x036, 0x00088473,
++		0x036, 0x00090473,
++		0x036, 0x000A0473,
++		0x036, 0x000A8473,
++		0x036, 0x000B0473,
++		0x036, 0x000C0473,
++		0x036, 0x000C8473,
++		0x036, 0x000D0473,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0xA0000000,	0x00000000,
++		0x036, 0x00000474,
++		0x036, 0x00008474,
++		0x036, 0x00010474,
++		0x036, 0x00020474,
++		0x036, 0x00028474,
++		0x036, 0x00030474,
++		0x036, 0x00040474,
++		0x036, 0x00048474,
++		0x036, 0x00050474,
++		0x036, 0x00080474,
++		0x036, 0x00088474,
++		0x036, 0x00090474,
++		0x036, 0x000A0474,
++		0x036, 0x000A8474,
++		0x036, 0x000B0474,
++		0x036, 0x000C0474,
++		0x036, 0x000C8474,
++		0x036, 0x000D0474,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0xA0000000,	0x00000000,
++		0x0EF, 0x00000004,
++		0x037, 0x00000000,
++		0x038, 0x0000514E,
++		0x037, 0x00004000,
++		0x038, 0x0000514E,
++		0x037, 0x00008000,
++		0x038, 0x0000514E,
++		0x037, 0x00010000,
++		0x038, 0x0000514E,
++		0x037, 0x00014000,
++		0x038, 0x0000514E,
++		0x037, 0x00018000,
++		0x038, 0x0000514E,
++		0x037, 0x0001C000,
++		0x038, 0x0000514E,
++		0x037, 0x00020000,
++		0x038, 0x0000514E,
++		0x037, 0x00024000,
++		0x038, 0x0000514E,
++		0x037, 0x00028000,
++		0x038, 0x0000514E,
++		0x037, 0x0002C000,
++		0x038, 0x0000714E,
++		0x037, 0x00030000,
++		0x038, 0x0000514E,
++		0x037, 0x00034000,
++		0x038, 0x0000514E,
++		0x037, 0x00038000,
++		0x038, 0x0000514E,
++		0x037, 0x0003C000,
++		0x038, 0x0000514E,
++		0x037, 0x00040000,
++		0x038, 0x0000514E,
++		0x037, 0x00044000,
++		0x038, 0x0000514E,
++		0x037, 0x00048000,
++		0x038, 0x0000514E,
++		0x037, 0x00080000,
++		0x038, 0x00005ECE,
++		0x037, 0x00084000,
++		0x038, 0x00005ECE,
++		0x037, 0x00088000,
++		0x038, 0x00005ECE,
++		0x037, 0x00090000,
++		0x038, 0x00005ECE,
++		0x037, 0x00094000,
++		0x038, 0x00005ECE,
++		0x037, 0x00098000,
++		0x038, 0x00005ECE,
++		0x037, 0x0009C000,
++		0x038, 0x00005ECE,
++		0x037, 0x000A0000,
++		0x038, 0x00005ECE,
++		0x037, 0x000A4000,
++		0x038, 0x00005ECE,
++		0x037, 0x000A8000,
++		0x038, 0x00005ECE,
++		0x037, 0x000AC000,
++		0x038, 0x00005ECE,
++		0x037, 0x000B0000,
++		0x038, 0x00005ECE,
++		0x037, 0x000B4000,
++		0x038, 0x00005ECE,
++		0x037, 0x000B8000,
++		0x038, 0x00005ECE,
++		0x037, 0x000BC000,
++		0x038, 0x00005ECE,
++		0x037, 0x000C0000,
++		0x038, 0x00005ECE,
++		0x037, 0x000C4000,
++		0x038, 0x00005ECE,
++		0x037, 0x000C8000,
++		0x038, 0x00005ECE,
++		0x0EF, 0x00000000,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000008,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0xA0000000,	0x00000000,
++		0x03C, 0x0000007D,
++		0x03C, 0x0000047D,
++		0x03C, 0x0000087D,
++		0x03C, 0x0000107D,
++		0x03C, 0x0000147D,
++		0x03C, 0x0000187D,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027D,
++		0x03C, 0x00000541,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127D,
++		0x03C, 0x00001541,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227D,
++		0x03C, 0x00002541,
++		0x03C, 0x00002821,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027D,
++		0x03C, 0x00000546,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127D,
++		0x03C, 0x00001546,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227D,
++		0x03C, 0x00002546,
++		0x03C, 0x00002821,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027D,
++		0x03C, 0x00000546,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127D,
++		0x03C, 0x00001546,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227D,
++		0x03C, 0x00002546,
++		0x03C, 0x00002821,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027D,
++		0x03C, 0x00000546,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127D,
++		0x03C, 0x00001546,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227D,
++		0x03C, 0x00002546,
++		0x03C, 0x00002821,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027D,
++		0x03C, 0x00000546,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127D,
++		0x03C, 0x00001546,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227D,
++		0x03C, 0x00002546,
++		0x03C, 0x00002821,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027D,
++		0x03C, 0x00000546,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127D,
++		0x03C, 0x00001546,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227D,
++		0x03C, 0x00002546,
++		0x03C, 0x00002821,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027D,
++		0x03C, 0x00000546,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127D,
++		0x03C, 0x00001546,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227D,
++		0x03C, 0x00002546,
++		0x03C, 0x00002821,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027D,
++		0x03C, 0x00000546,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127D,
++		0x03C, 0x00001546,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227D,
++		0x03C, 0x00002546,
++		0x03C, 0x00002821,
++	0xA0000000,	0x00000000,
++		0x03C, 0x0000037E,
++		0x03C, 0x00000575,
++		0x03C, 0x00000971,
++		0x03C, 0x0000127E,
++		0x03C, 0x00001575,
++		0x03C, 0x00001871,
++		0x03C, 0x0000217E,
++		0x03C, 0x00002575,
++		0x03C, 0x00002871,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++		0x061, 0x000C0D47,
++		0x062, 0x0000133C,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0xA0000000,	0x00000000,
++		0x063, 0x0007D0E7,
++	0xB0000000,	0x00000000,
++		0x064, 0x00014FEC,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0xA0000000,	0x00000000,
++		0x065, 0x000923FF,
++	0xB0000000,	0x00000000,
++		0x066, 0x00000040,
++		0x057, 0x00050000,
++		0x056, 0x00051DF0,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0xA0000000,	0x00000000,
++		0x055, 0x00082060,
++	0xB0000000,	0x00000000,
++};
++
++RTW_DECL_TABLE_RF_RADIO(rtw8814a_rf_c, C);
diff --git a/package/kernel/mac80211/patches/rtl/087-v6.15-wifi-rtw88-Add-rtw8814a_table.c-part-2-2.patch b/package/kernel/mac80211/patches/rtl/087-v6.15-wifi-rtw88-Add-rtw8814a_table.c-part-2-2.patch
new file mode 100644
index 0000000000..56402a4ad3
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/087-v6.15-wifi-rtw88-Add-rtw8814a_table.c-part-2-2.patch
@@ -0,0 +1,11450 @@
+From e38246889cc9f8497c8d7413b73856ae1634322d Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Fri, 7 Mar 2025 02:24:02 +0200
+Subject: [PATCH] wifi: rtw88: Add rtw8814a_table.c (part 2/2)
+
+This contains various tables for initialising the RTL8814A, plus TX
+power limits.
+
+Also add rtw8814a_table.h.
+
+Split into two patches because they are big.
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/4c48e35e-1b04-42ed-940e-0e931693def6@gmail.com
+---
+ .../wireless/realtek/rtw88/rtw8814a_table.c   | 11379 ++++++++++++++++
+ .../wireless/realtek/rtw88/rtw8814a_table.h   |    40 +
+ 2 files changed, 11419 insertions(+)
+ create mode 100644 drivers/net/wireless/realtek/rtw88/rtw8814a_table.h
+
+--- a/drivers/net/wireless/realtek/rtw88/rtw8814a_table.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8814a_table.c
+@@ -12549,3 +12549,11382 @@ static const u32 rtw8814a_rf_c[] = {
+ };
+ 
+ RTW_DECL_TABLE_RF_RADIO(rtw8814a_rf_c, C);
++
++static const u32 rtw8814a_rf_d[] = {
++		0x018, 0x00013124,
++		0x040, 0x00000C00,
++		0x058, 0x00000F98,
++		0x07F, 0x00068004,
++		0x018, 0x00000006,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x086, 0x000E335A,
++		0x087, 0x00079F80,
++	0xA0000000,	0x00000000,
++		0x086, 0x000E4B58,
++		0x087, 0x00049F80,
++	0xB0000000,	0x00000000,
++		0x0DF, 0x00000008,
++		0x0EF, 0x00002000,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x00017803,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F09B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x00017803,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x00017803,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F09B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x00017803,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x00017803,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x00017803,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0003F19B,
++		0x03B, 0x00037A5B,
++		0x03B, 0x0002A433,
++		0x03B, 0x00027BD3,
++		0x03B, 0x0001F80B,
++		0x03B, 0x00017803,
++	0xA0000000,	0x00000000,
++		0x03B, 0x0003F258,
++		0x03B, 0x00030A58,
++		0x03B, 0x0002FA58,
++		0x03B, 0x00022590,
++		0x03B, 0x0001FA50,
++		0x03B, 0x00010248,
++		0x03B, 0x00008240,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000100,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0xA0000000,	0x00000000,
++		0x034, 0x0000ADF6,
++		0x034, 0x00009DF3,
++		0x034, 0x00008DF0,
++		0x034, 0x00007DED,
++		0x034, 0x00006DEA,
++		0x034, 0x00005CED,
++		0x034, 0x00004CEA,
++		0x034, 0x000034EA,
++		0x034, 0x000024E7,
++		0x034, 0x0000146A,
++		0x034, 0x0000006B,
++	0xB0000000,	0x00000000,
++	0x80000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A0D0,
++		0x034, 0x000090CD,
++		0x034, 0x000080CA,
++		0x034, 0x0000704D,
++		0x034, 0x0000604A,
++		0x034, 0x00005047,
++		0x034, 0x0000400A,
++		0x034, 0x00003007,
++		0x034, 0x00002004,
++		0x034, 0x00001001,
++		0x034, 0x00000001,
++	0xA0000000,	0x00000000,
++		0x034, 0x0008ADF6,
++		0x034, 0x00089DF3,
++		0x034, 0x00088DF0,
++		0x034, 0x00087DED,
++		0x034, 0x00086DEA,
++		0x034, 0x00085CED,
++		0x034, 0x00084CEA,
++		0x034, 0x000834EA,
++		0x034, 0x000824E7,
++		0x034, 0x0008146A,
++		0x034, 0x0008006B,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++		0x0EF, 0x000020A2,
++		0x0DF, 0x00000080,
++		0x035, 0x00000192,
++		0x035, 0x00008192,
++		0x035, 0x00010192,
++		0x036, 0x00000024,
++		0x036, 0x00008024,
++		0x036, 0x00010024,
++		0x036, 0x00018024,
++		0x0EF, 0x00000000,
++		0x051, 0x00000C21,
++		0x052, 0x000006D9,
++		0x053, 0x000FC649,
++		0x054, 0x0000017E,
++		0x018, 0x0001012A,
++		0x081, 0x0007FC00,
++		0x089, 0x00050110,
++		0x08A, 0x00043E50,
++		0x08B, 0x0002E180,
++		0x08C, 0x00093C3C,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x085, 0x000F8000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x085, 0x000F8000,
++	0xA0000000,	0x00000000,
++		0x085, 0x000F8000,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0xA0000000,	0x00000000,
++		0x08D, 0x000FFFF0,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00001000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00038023,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00038023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00038023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00038023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00038023,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00038023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00038023,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00038023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00038023,
++	0xA0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00038023,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00044000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00048000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00088000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00044000,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00088000,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00040000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00088000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00088000,
++	0xA0000000,	0x00000000,
++		0x03C, 0x00048000,
++	0xB0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00030023,
++		0x03C, 0x00048000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00028623,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00021633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x0001C633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00010293,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00009593,
++		0x03C, 0x00000000,
++		0x03A, 0x00000148,
++	0x80000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x00000F8B,
++	0xA0000000,	0x00000000,
++		0x03B, 0x0000078B,
++	0xB0000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0xA0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00078023,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00044000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00044000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00044000,
++	0xA0000000,	0x00000000,
++		0x03C, 0x00024000,
++	0xB0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00070023,
++		0x03C, 0x00048000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00068623,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00061633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x0005C633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00050293,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00049593,
++		0x03C, 0x00000000,
++		0x03A, 0x00000148,
++	0x80000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x00040F8B,
++	0xA0000000,	0x00000000,
++		0x03B, 0x0004078B,
++	0xB0000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0xA0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B8023,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00004000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00060000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00024000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00004000,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00060000,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00024000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00024000,
++	0xA0000000,	0x00000000,
++		0x03C, 0x00004000,
++	0xB0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000B0023,
++	0x80000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00020000,
++	0xA0000000,	0x00000000,
++		0x03C, 0x00020000,
++	0xB0000000,	0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000A8623,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x000A1633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x0009C633,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00090293,
++		0x03C, 0x00000000,
++		0x03A, 0x0000013C,
++		0x03B, 0x00089593,
++		0x03C, 0x00000000,
++		0x03A, 0x00000148,
++	0x80000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03B, 0x0008138B,
++	0xA0000000,	0x00000000,
++		0x03B, 0x0008078B,
++	0xB0000000,	0x00000000,
++		0x03C, 0x00000000,
++		0x0EF, 0x00000000,
++		0x0EF, 0x00000800,
++		0x03B, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000803,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000803,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000803,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000803,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000803,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000803,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001003,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001003,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001803,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000803,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000803,
++	0xA0000000,	0x00000000,
++		0x03A, 0x00000803,
++	0xB0000000,	0x00000000,
++		0x03B, 0x00040000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001002,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000001,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001000,
++	0x90000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000802,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001803,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001000,
++	0xA0000000,	0x00000000,
++		0x03A, 0x00001000,
++	0xB0000000,	0x00000000,
++		0x03B, 0x00080000,
++	0x80000007,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001802,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00001000,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x03A, 0x00000802,
++	0xA0000000,	0x00000000,
++		0x03A, 0x00001002,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x90000006,	0x00000000,	0x40000000,	0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0xA0000000,	0x00000000,
++	0xB0000000,	0x00000000,
++		0x018, 0x00013124,
++		0x0EF, 0x00000100,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3EB,
++		0x034, 0x0004938B,
++		0x034, 0x000481AC,
++		0x034, 0x000471A9,
++		0x034, 0x000460AC,
++		0x034, 0x000450A9,
++		0x034, 0x0004402E,
++		0x034, 0x0004302B,
++		0x034, 0x00042028,
++		0x034, 0x0004100B,
++		0x034, 0x00040008,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3AD,
++		0x034, 0x0004938A,
++		0x034, 0x0004818C,
++		0x034, 0x00047189,
++		0x034, 0x0004606D,
++		0x034, 0x0004506A,
++		0x034, 0x0004402C,
++		0x034, 0x00043029,
++		0x034, 0x00042026,
++		0x034, 0x00041009,
++		0x034, 0x00040006,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3AD,
++		0x034, 0x0004938A,
++		0x034, 0x0004818C,
++		0x034, 0x00047189,
++		0x034, 0x0004606D,
++		0x034, 0x0004506A,
++		0x034, 0x0004402C,
++		0x034, 0x00043029,
++		0x034, 0x00042026,
++		0x034, 0x00041009,
++		0x034, 0x00040006,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3AD,
++		0x034, 0x0004938A,
++		0x034, 0x0004818C,
++		0x034, 0x00047189,
++		0x034, 0x0004606D,
++		0x034, 0x0004506A,
++		0x034, 0x0004402C,
++		0x034, 0x00043029,
++		0x034, 0x00042026,
++		0x034, 0x00041009,
++		0x034, 0x00040006,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3AD,
++		0x034, 0x0004938A,
++		0x034, 0x0004818C,
++		0x034, 0x00047189,
++		0x034, 0x0004606D,
++		0x034, 0x0004506A,
++		0x034, 0x0004402C,
++		0x034, 0x00043029,
++		0x034, 0x00042026,
++		0x034, 0x00041009,
++		0x034, 0x00040006,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3F4,
++		0x034, 0x000493D2,
++		0x034, 0x000482D1,
++		0x034, 0x000471F1,
++		0x034, 0x000461EE,
++		0x034, 0x000451EB,
++		0x034, 0x000441E8,
++		0x034, 0x0004314B,
++		0x034, 0x00042148,
++		0x034, 0x0004104B,
++		0x034, 0x00040048,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004AFF7,
++		0x034, 0x00049FF6,
++		0x034, 0x00048FF3,
++		0x034, 0x00047FF0,
++		0x034, 0x00046FED,
++		0x034, 0x00045FEA,
++		0x034, 0x00044FE7,
++		0x034, 0x00043CB1,
++		0x034, 0x00042CAE,
++		0x034, 0x00041CAB,
++		0x034, 0x00040CA8,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3AD,
++		0x034, 0x0004938A,
++		0x034, 0x0004818C,
++		0x034, 0x00047189,
++		0x034, 0x0004606D,
++		0x034, 0x0004506A,
++		0x034, 0x0004402C,
++		0x034, 0x00043029,
++		0x034, 0x00042026,
++		0x034, 0x00041009,
++		0x034, 0x00040006,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0004A3AD,
++		0x034, 0x0004938A,
++		0x034, 0x0004818C,
++		0x034, 0x00047189,
++		0x034, 0x0004606D,
++		0x034, 0x0004506A,
++		0x034, 0x0004402C,
++		0x034, 0x00043029,
++		0x034, 0x00042026,
++		0x034, 0x00041009,
++		0x034, 0x00040006,
++	0xA0000000,	0x00000000,
++		0x034, 0x0004AFF4,
++		0x034, 0x00049FF1,
++		0x034, 0x00048FEE,
++		0x034, 0x00047FEB,
++		0x034, 0x00046FE8,
++		0x034, 0x00045DEA,
++		0x034, 0x00044CED,
++		0x034, 0x00043CEA,
++		0x034, 0x00042C6C,
++		0x034, 0x00041C69,
++		0x034, 0x00040C2B,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3EE,
++		0x034, 0x000293EB,
++		0x034, 0x0002838B,
++		0x034, 0x000271AC,
++		0x034, 0x000261A9,
++		0x034, 0x000250AC,
++		0x034, 0x000240A9,
++		0x034, 0x000230A6,
++		0x034, 0x0002202C,
++		0x034, 0x00021029,
++		0x034, 0x00020026,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3AD,
++		0x034, 0x0002938A,
++		0x034, 0x0002818C,
++		0x034, 0x00027189,
++		0x034, 0x0002606D,
++		0x034, 0x0002504C,
++		0x034, 0x0002402C,
++		0x034, 0x00023029,
++		0x034, 0x00022026,
++		0x034, 0x00021023,
++		0x034, 0x00020006,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3AD,
++		0x034, 0x0002938A,
++		0x034, 0x0002818C,
++		0x034, 0x00027189,
++		0x034, 0x0002606D,
++		0x034, 0x0002504C,
++		0x034, 0x0002402C,
++		0x034, 0x00023029,
++		0x034, 0x00022026,
++		0x034, 0x00021023,
++		0x034, 0x00020006,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3AD,
++		0x034, 0x0002938A,
++		0x034, 0x0002818C,
++		0x034, 0x00027189,
++		0x034, 0x0002606D,
++		0x034, 0x0002504C,
++		0x034, 0x0002402C,
++		0x034, 0x00023029,
++		0x034, 0x00022026,
++		0x034, 0x00021023,
++		0x034, 0x00020006,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3AD,
++		0x034, 0x0002938A,
++		0x034, 0x0002818C,
++		0x034, 0x00027189,
++		0x034, 0x0002606D,
++		0x034, 0x0002504C,
++		0x034, 0x0002402C,
++		0x034, 0x00023029,
++		0x034, 0x00022026,
++		0x034, 0x00021023,
++		0x034, 0x00020006,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3F5,
++		0x034, 0x000293D2,
++		0x034, 0x000283CE,
++		0x034, 0x00027290,
++		0x034, 0x0002628D,
++		0x034, 0x0002528A,
++		0x034, 0x00024287,
++		0x034, 0x0002308D,
++		0x034, 0x0002208A,
++		0x034, 0x00021087,
++		0x034, 0x00020048,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002AFF7,
++		0x034, 0x00029FF6,
++		0x034, 0x00028FF3,
++		0x034, 0x00027FF0,
++		0x034, 0x00026FED,
++		0x034, 0x00025FEA,
++		0x034, 0x00024FE7,
++		0x034, 0x00023DEA,
++		0x034, 0x00022DE7,
++		0x034, 0x00021DE4,
++		0x034, 0x00020D48,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3AD,
++		0x034, 0x0002938A,
++		0x034, 0x0002818C,
++		0x034, 0x00027189,
++		0x034, 0x0002606D,
++		0x034, 0x0002504C,
++		0x034, 0x0002402C,
++		0x034, 0x00023029,
++		0x034, 0x00022026,
++		0x034, 0x00021023,
++		0x034, 0x00020006,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0002A3AD,
++		0x034, 0x0002938A,
++		0x034, 0x0002818C,
++		0x034, 0x00027189,
++		0x034, 0x0002606D,
++		0x034, 0x0002504C,
++		0x034, 0x0002402C,
++		0x034, 0x00023029,
++		0x034, 0x00022026,
++		0x034, 0x00021023,
++		0x034, 0x00020006,
++	0xA0000000,	0x00000000,
++		0x034, 0x0002AFF4,
++		0x034, 0x00029FF1,
++		0x034, 0x00028FEE,
++		0x034, 0x00027FEB,
++		0x034, 0x00026FE8,
++		0x034, 0x00025DEA,
++		0x034, 0x00024CED,
++		0x034, 0x00023CEA,
++		0x034, 0x00022C6C,
++		0x034, 0x00021C69,
++		0x034, 0x00020C2B,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EF,
++		0x034, 0x000093EC,
++		0x034, 0x0000838C,
++		0x034, 0x000071AD,
++		0x034, 0x000061AA,
++		0x034, 0x000050AD,
++		0x034, 0x000040AA,
++		0x034, 0x0000306A,
++		0x034, 0x0000202D,
++		0x034, 0x0000102A,
++		0x034, 0x00000027,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EE,
++		0x034, 0x000093AC,
++		0x034, 0x0000838A,
++		0x034, 0x0000718C,
++		0x034, 0x00006189,
++		0x034, 0x0000506D,
++		0x034, 0x0000406A,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EE,
++		0x034, 0x000093AC,
++		0x034, 0x0000838A,
++		0x034, 0x0000718C,
++		0x034, 0x00006189,
++		0x034, 0x0000506D,
++		0x034, 0x0000406A,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EE,
++		0x034, 0x000093AC,
++		0x034, 0x0000838A,
++		0x034, 0x0000718C,
++		0x034, 0x00006189,
++		0x034, 0x0000506D,
++		0x034, 0x0000406A,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EE,
++		0x034, 0x000093AC,
++		0x034, 0x0000838A,
++		0x034, 0x0000718C,
++		0x034, 0x00006189,
++		0x034, 0x0000506D,
++		0x034, 0x0000406A,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3F1,
++		0x034, 0x000092B1,
++		0x034, 0x000081CF,
++		0x034, 0x00007170,
++		0x034, 0x0000616D,
++		0x034, 0x0000516A,
++		0x034, 0x00004167,
++		0x034, 0x0000302F,
++		0x034, 0x0000202C,
++		0x034, 0x00001029,
++		0x034, 0x00000026,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000AFF7,
++		0x034, 0x00009FF6,
++		0x034, 0x00008FF3,
++		0x034, 0x00007FF0,
++		0x034, 0x00006FED,
++		0x034, 0x00005FEA,
++		0x034, 0x00004FE7,
++		0x034, 0x00003EC7,
++		0x034, 0x00002EC4,
++		0x034, 0x00001D4B,
++		0x034, 0x00000D48,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EE,
++		0x034, 0x000093AC,
++		0x034, 0x0000838A,
++		0x034, 0x0000718C,
++		0x034, 0x00006189,
++		0x034, 0x0000506D,
++		0x034, 0x0000406A,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0000A3EE,
++		0x034, 0x000093AC,
++		0x034, 0x0000838A,
++		0x034, 0x0000718C,
++		0x034, 0x00006189,
++		0x034, 0x0000506D,
++		0x034, 0x0000406A,
++		0x034, 0x0000302C,
++		0x034, 0x00002029,
++		0x034, 0x00001026,
++		0x034, 0x00000023,
++	0xA0000000,	0x00000000,
++		0x034, 0x0000AFF4,
++		0x034, 0x00009FF1,
++		0x034, 0x00008FEE,
++		0x034, 0x00007FEB,
++		0x034, 0x00006FE8,
++		0x034, 0x00005DEA,
++		0x034, 0x00004CED,
++		0x034, 0x00003CEA,
++		0x034, 0x00002C6C,
++		0x034, 0x00001C69,
++		0x034, 0x00000C2B,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3EB,
++		0x034, 0x000C938B,
++		0x034, 0x000C81AC,
++		0x034, 0x000C71A9,
++		0x034, 0x000C60AC,
++		0x034, 0x000C50A9,
++		0x034, 0x000C402E,
++		0x034, 0x000C302B,
++		0x034, 0x000C2028,
++		0x034, 0x000C100B,
++		0x034, 0x000C0008,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3AD,
++		0x034, 0x000C938A,
++		0x034, 0x000C818C,
++		0x034, 0x000C7189,
++		0x034, 0x000C606D,
++		0x034, 0x000C506A,
++		0x034, 0x000C402C,
++		0x034, 0x000C3029,
++		0x034, 0x000C2026,
++		0x034, 0x000C1009,
++		0x034, 0x000C0006,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3AD,
++		0x034, 0x000C938A,
++		0x034, 0x000C818C,
++		0x034, 0x000C7189,
++		0x034, 0x000C606D,
++		0x034, 0x000C506A,
++		0x034, 0x000C402C,
++		0x034, 0x000C3029,
++		0x034, 0x000C2026,
++		0x034, 0x000C1009,
++		0x034, 0x000C0006,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3AD,
++		0x034, 0x000C938A,
++		0x034, 0x000C818C,
++		0x034, 0x000C7189,
++		0x034, 0x000C606D,
++		0x034, 0x000C506A,
++		0x034, 0x000C402C,
++		0x034, 0x000C3029,
++		0x034, 0x000C2026,
++		0x034, 0x000C1009,
++		0x034, 0x000C0006,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3AD,
++		0x034, 0x000C938A,
++		0x034, 0x000C818C,
++		0x034, 0x000C7189,
++		0x034, 0x000C606D,
++		0x034, 0x000C506A,
++		0x034, 0x000C402C,
++		0x034, 0x000C3029,
++		0x034, 0x000C2026,
++		0x034, 0x000C1009,
++		0x034, 0x000C0006,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3F4,
++		0x034, 0x000C93D2,
++		0x034, 0x000C82D1,
++		0x034, 0x000C71F1,
++		0x034, 0x000C61EE,
++		0x034, 0x000C51EB,
++		0x034, 0x000C41E8,
++		0x034, 0x000C314B,
++		0x034, 0x000C2148,
++		0x034, 0x000C104B,
++		0x034, 0x000C0048,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CAFF7,
++		0x034, 0x000C9FF6,
++		0x034, 0x000C8FF3,
++		0x034, 0x000C7FF0,
++		0x034, 0x000C6FED,
++		0x034, 0x000C5FEA,
++		0x034, 0x000C4FE7,
++		0x034, 0x000C3CB1,
++		0x034, 0x000C2CAE,
++		0x034, 0x000C1CAB,
++		0x034, 0x000C0CA8,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3AD,
++		0x034, 0x000C938A,
++		0x034, 0x000C818C,
++		0x034, 0x000C7189,
++		0x034, 0x000C606D,
++		0x034, 0x000C506A,
++		0x034, 0x000C402C,
++		0x034, 0x000C3029,
++		0x034, 0x000C2026,
++		0x034, 0x000C1009,
++		0x034, 0x000C0006,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000CA3AD,
++		0x034, 0x000C938A,
++		0x034, 0x000C818C,
++		0x034, 0x000C7189,
++		0x034, 0x000C606D,
++		0x034, 0x000C506A,
++		0x034, 0x000C402C,
++		0x034, 0x000C3029,
++		0x034, 0x000C2026,
++		0x034, 0x000C1009,
++		0x034, 0x000C0006,
++	0xA0000000,	0x00000000,
++		0x034, 0x000CA794,
++		0x034, 0x000C9791,
++		0x034, 0x000C878E,
++		0x034, 0x000C778B,
++		0x034, 0x000C658D,
++		0x034, 0x000C558A,
++		0x034, 0x000C448D,
++		0x034, 0x000C348A,
++		0x034, 0x000C244C,
++		0x034, 0x000C1449,
++		0x034, 0x000C042B,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3EE,
++		0x034, 0x000A93EB,
++		0x034, 0x000A838B,
++		0x034, 0x000A71AC,
++		0x034, 0x000A61A9,
++		0x034, 0x000A50AC,
++		0x034, 0x000A40A9,
++		0x034, 0x000A30A6,
++		0x034, 0x000A202C,
++		0x034, 0x000A1029,
++		0x034, 0x000A0026,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3AD,
++		0x034, 0x000A938A,
++		0x034, 0x000A818C,
++		0x034, 0x000A7189,
++		0x034, 0x000A606D,
++		0x034, 0x000A504C,
++		0x034, 0x000A402C,
++		0x034, 0x000A3029,
++		0x034, 0x000A2026,
++		0x034, 0x000A1023,
++		0x034, 0x000A0006,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3AD,
++		0x034, 0x000A938A,
++		0x034, 0x000A818C,
++		0x034, 0x000A7189,
++		0x034, 0x000A606D,
++		0x034, 0x000A504C,
++		0x034, 0x000A402C,
++		0x034, 0x000A3029,
++		0x034, 0x000A2026,
++		0x034, 0x000A1023,
++		0x034, 0x000A0006,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3AD,
++		0x034, 0x000A938A,
++		0x034, 0x000A818C,
++		0x034, 0x000A7189,
++		0x034, 0x000A606D,
++		0x034, 0x000A504C,
++		0x034, 0x000A402C,
++		0x034, 0x000A3029,
++		0x034, 0x000A2026,
++		0x034, 0x000A1023,
++		0x034, 0x000A0006,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3AD,
++		0x034, 0x000A938A,
++		0x034, 0x000A818C,
++		0x034, 0x000A7189,
++		0x034, 0x000A606D,
++		0x034, 0x000A504C,
++		0x034, 0x000A402C,
++		0x034, 0x000A3029,
++		0x034, 0x000A2026,
++		0x034, 0x000A1023,
++		0x034, 0x000A0006,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3F5,
++		0x034, 0x000A93D2,
++		0x034, 0x000A83CE,
++		0x034, 0x000A7290,
++		0x034, 0x000A628D,
++		0x034, 0x000A528A,
++		0x034, 0x000A4287,
++		0x034, 0x000A308D,
++		0x034, 0x000A208A,
++		0x034, 0x000A1087,
++		0x034, 0x000A0048,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AAFF7,
++		0x034, 0x000A9FF6,
++		0x034, 0x000A8FF3,
++		0x034, 0x000A7FF0,
++		0x034, 0x000A6FED,
++		0x034, 0x000A5FEA,
++		0x034, 0x000A4FE7,
++		0x034, 0x000A3DEA,
++		0x034, 0x000A2DE7,
++		0x034, 0x000A1DE4,
++		0x034, 0x000A0D48,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3AD,
++		0x034, 0x000A938A,
++		0x034, 0x000A818C,
++		0x034, 0x000A7189,
++		0x034, 0x000A606D,
++		0x034, 0x000A504C,
++		0x034, 0x000A402C,
++		0x034, 0x000A3029,
++		0x034, 0x000A2026,
++		0x034, 0x000A1023,
++		0x034, 0x000A0006,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x000AA3AD,
++		0x034, 0x000A938A,
++		0x034, 0x000A818C,
++		0x034, 0x000A7189,
++		0x034, 0x000A606D,
++		0x034, 0x000A504C,
++		0x034, 0x000A402C,
++		0x034, 0x000A3029,
++		0x034, 0x000A2026,
++		0x034, 0x000A1023,
++		0x034, 0x000A0006,
++	0xA0000000,	0x00000000,
++		0x034, 0x000AA794,
++		0x034, 0x000A9791,
++		0x034, 0x000A878E,
++		0x034, 0x000A778B,
++		0x034, 0x000A658D,
++		0x034, 0x000A558A,
++		0x034, 0x000A448D,
++		0x034, 0x000A348A,
++		0x034, 0x000A244C,
++		0x034, 0x000A1449,
++		0x034, 0x000A042B,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EF,
++		0x034, 0x000893EC,
++		0x034, 0x0008838C,
++		0x034, 0x000871AD,
++		0x034, 0x000861AA,
++		0x034, 0x000850AD,
++		0x034, 0x000840AA,
++		0x034, 0x0008306A,
++		0x034, 0x0008202D,
++		0x034, 0x0008102A,
++		0x034, 0x00080027,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EE,
++		0x034, 0x000893AC,
++		0x034, 0x0008838A,
++		0x034, 0x0008718C,
++		0x034, 0x00086189,
++		0x034, 0x0008506D,
++		0x034, 0x0008406A,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EE,
++		0x034, 0x000893AC,
++		0x034, 0x0008838A,
++		0x034, 0x0008718C,
++		0x034, 0x00086189,
++		0x034, 0x0008506D,
++		0x034, 0x0008406A,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EE,
++		0x034, 0x000893AC,
++		0x034, 0x0008838A,
++		0x034, 0x0008718C,
++		0x034, 0x00086189,
++		0x034, 0x0008506D,
++		0x034, 0x0008406A,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EE,
++		0x034, 0x000893AC,
++		0x034, 0x0008838A,
++		0x034, 0x0008718C,
++		0x034, 0x00086189,
++		0x034, 0x0008506D,
++		0x034, 0x0008406A,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3F1,
++		0x034, 0x000892B1,
++		0x034, 0x000881CF,
++		0x034, 0x00087170,
++		0x034, 0x0008616D,
++		0x034, 0x0008516A,
++		0x034, 0x00084167,
++		0x034, 0x0008302F,
++		0x034, 0x0008202C,
++		0x034, 0x00081029,
++		0x034, 0x00080026,
++	0x90000009,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008AFF7,
++		0x034, 0x00089FF6,
++		0x034, 0x00088FF3,
++		0x034, 0x00087FF0,
++		0x034, 0x00086FED,
++		0x034, 0x00085FEA,
++		0x034, 0x00084FE7,
++		0x034, 0x00083EC7,
++		0x034, 0x00082EC4,
++		0x034, 0x00081D4B,
++		0x034, 0x00080D48,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EE,
++		0x034, 0x000893AC,
++		0x034, 0x0008838A,
++		0x034, 0x0008718C,
++		0x034, 0x00086189,
++		0x034, 0x0008506D,
++		0x034, 0x0008406A,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x034, 0x0008A3EE,
++		0x034, 0x000893AC,
++		0x034, 0x0008838A,
++		0x034, 0x0008718C,
++		0x034, 0x00086189,
++		0x034, 0x0008506D,
++		0x034, 0x0008406A,
++		0x034, 0x0008302C,
++		0x034, 0x00082029,
++		0x034, 0x00081026,
++		0x034, 0x00080023,
++	0xA0000000,	0x00000000,
++		0x034, 0x0008A794,
++		0x034, 0x00089791,
++		0x034, 0x0008878E,
++		0x034, 0x0008778B,
++		0x034, 0x0008658D,
++		0x034, 0x0008558A,
++		0x034, 0x0008448D,
++		0x034, 0x0008348A,
++		0x034, 0x0008244C,
++		0x034, 0x00081449,
++		0x034, 0x0008042B,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0xA0000000,	0x00000000,
++		0x0DF, 0x00000000,
++	0xB0000000,	0x00000000,
++		0x018, 0x0001712A,
++		0x0EF, 0x00000040,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x035, 0x000006CC,
++		0x035, 0x000086CC,
++		0x035, 0x000106CC,
++		0x035, 0x000206CC,
++		0x035, 0x000286CC,
++		0x035, 0x000306CC,
++		0x035, 0x000406CC,
++		0x035, 0x000486CC,
++		0x035, 0x000506CC,
++		0x035, 0x000806CC,
++		0x035, 0x000886CC,
++		0x035, 0x000906CC,
++		0x035, 0x000A06CC,
++		0x035, 0x000A86CC,
++		0x035, 0x000B06CC,
++		0x035, 0x000C06CC,
++		0x035, 0x000C86CC,
++		0x035, 0x000D06CC,
++	0xA0000000,	0x00000000,
++		0x035, 0x00000484,
++		0x035, 0x00008484,
++		0x035, 0x00010484,
++		0x035, 0x00020584,
++		0x035, 0x00028584,
++		0x035, 0x00030584,
++		0x035, 0x00040584,
++		0x035, 0x00048584,
++		0x035, 0x00050584,
++		0x035, 0x000805FB,
++		0x035, 0x000885FB,
++		0x035, 0x000905FB,
++		0x035, 0x000A05FB,
++		0x035, 0x000A85FB,
++		0x035, 0x000B05FB,
++		0x035, 0x000C05FB,
++		0x035, 0x000C85FB,
++		0x035, 0x000D05FB,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x0DF, 0x00000001,
++	0xA0000000,	0x00000000,
++		0x0DF, 0x00000000,
++	0xB0000000,	0x00000000,
++		0x018, 0x0001712A,
++		0x0EF, 0x00000010,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000473,
++		0x036, 0x00008473,
++		0x036, 0x00010473,
++		0x036, 0x00020473,
++		0x036, 0x00028473,
++		0x036, 0x00030473,
++		0x036, 0x00040473,
++		0x036, 0x00048473,
++		0x036, 0x00050473,
++		0x036, 0x00080473,
++		0x036, 0x00088473,
++		0x036, 0x00090473,
++		0x036, 0x000A0473,
++		0x036, 0x000A8473,
++		0x036, 0x000B0473,
++		0x036, 0x000C0473,
++		0x036, 0x000C8473,
++		0x036, 0x000D0473,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x036, 0x00000475,
++		0x036, 0x00008475,
++		0x036, 0x00010475,
++		0x036, 0x00020475,
++		0x036, 0x00028475,
++		0x036, 0x00030475,
++		0x036, 0x00040475,
++		0x036, 0x00048475,
++		0x036, 0x00050475,
++		0x036, 0x00080475,
++		0x036, 0x00088475,
++		0x036, 0x00090475,
++		0x036, 0x000A0475,
++		0x036, 0x000A8475,
++		0x036, 0x000B0475,
++		0x036, 0x000C0475,
++		0x036, 0x000C8475,
++		0x036, 0x000D0475,
++	0xA0000000,	0x00000000,
++		0x036, 0x00000474,
++		0x036, 0x00008474,
++		0x036, 0x00010474,
++		0x036, 0x00020474,
++		0x036, 0x00028474,
++		0x036, 0x00030474,
++		0x036, 0x00040474,
++		0x036, 0x00048474,
++		0x036, 0x00050474,
++		0x036, 0x00080474,
++		0x036, 0x00088474,
++		0x036, 0x00090474,
++		0x036, 0x000A0474,
++		0x036, 0x000A8474,
++		0x036, 0x000B0474,
++		0x036, 0x000C0474,
++		0x036, 0x000C8474,
++		0x036, 0x000D0474,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0xA0000000,	0x00000000,
++		0x0EF, 0x00000004,
++		0x037, 0x00000000,
++		0x038, 0x0000514E,
++		0x037, 0x00004000,
++		0x038, 0x0000514E,
++		0x037, 0x00008000,
++		0x038, 0x0000514E,
++		0x037, 0x00010000,
++		0x038, 0x0000514E,
++		0x037, 0x00014000,
++		0x038, 0x0000514E,
++		0x037, 0x00018000,
++		0x038, 0x0000514E,
++		0x037, 0x0001C000,
++		0x038, 0x0000514E,
++		0x037, 0x00020000,
++		0x038, 0x0000514E,
++		0x037, 0x00024000,
++		0x038, 0x0000514E,
++		0x037, 0x00028000,
++		0x038, 0x0000514E,
++		0x037, 0x0002C000,
++		0x038, 0x0000714E,
++		0x037, 0x00030000,
++		0x038, 0x0000514E,
++		0x037, 0x00034000,
++		0x038, 0x0000514E,
++		0x037, 0x00038000,
++		0x038, 0x0000514E,
++		0x037, 0x0003C000,
++		0x038, 0x0000514E,
++		0x037, 0x00040000,
++		0x038, 0x0000514E,
++		0x037, 0x00044000,
++		0x038, 0x0000514E,
++		0x037, 0x00048000,
++		0x038, 0x0000514E,
++		0x037, 0x00080000,
++		0x038, 0x00005ECE,
++		0x037, 0x00084000,
++		0x038, 0x00005ECE,
++		0x037, 0x00088000,
++		0x038, 0x00005ECE,
++		0x037, 0x00090000,
++		0x038, 0x00005ECE,
++		0x037, 0x00094000,
++		0x038, 0x00005ECE,
++		0x037, 0x00098000,
++		0x038, 0x00005ECE,
++		0x037, 0x0009C000,
++		0x038, 0x00005ECE,
++		0x037, 0x000A0000,
++		0x038, 0x00005ECE,
++		0x037, 0x000A4000,
++		0x038, 0x00005ECE,
++		0x037, 0x000A8000,
++		0x038, 0x00005ECE,
++		0x037, 0x000AC000,
++		0x038, 0x00005ECE,
++		0x037, 0x000B0000,
++		0x038, 0x00005ECE,
++		0x037, 0x000B4000,
++		0x038, 0x00005ECE,
++		0x037, 0x000B8000,
++		0x038, 0x00005ECE,
++		0x037, 0x000BC000,
++		0x038, 0x00005ECE,
++		0x037, 0x000C0000,
++		0x038, 0x00005ECE,
++		0x037, 0x000C4000,
++		0x038, 0x00005ECE,
++		0x037, 0x000C8000,
++		0x038, 0x00005ECE,
++		0x0EF, 0x00000000,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000008,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0xA0000000,	0x00000000,
++		0x03C, 0x0000007D,
++		0x03C, 0x0000047D,
++		0x03C, 0x0000087D,
++		0x03C, 0x0000107D,
++		0x03C, 0x0000147D,
++		0x03C, 0x0000187D,
++	0xB0000000,	0x00000000,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x00000275,
++		0x03C, 0x00000542,
++		0x03C, 0x00000821,
++		0x03C, 0x00001275,
++		0x03C, 0x00001542,
++		0x03C, 0x00001821,
++		0x03C, 0x00002275,
++		0x03C, 0x00002542,
++		0x03C, 0x00002821,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027F,
++		0x03C, 0x00000542,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127F,
++		0x03C, 0x00001542,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227F,
++		0x03C, 0x00002542,
++		0x03C, 0x00002821,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027F,
++		0x03C, 0x00000542,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127F,
++		0x03C, 0x00001542,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227F,
++		0x03C, 0x00002542,
++		0x03C, 0x00002821,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027F,
++		0x03C, 0x00000542,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127F,
++		0x03C, 0x00001542,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227F,
++		0x03C, 0x00002542,
++		0x03C, 0x00002821,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027F,
++		0x03C, 0x00000542,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127F,
++		0x03C, 0x00001542,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227F,
++		0x03C, 0x00002542,
++		0x03C, 0x00002821,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027F,
++		0x03C, 0x00000542,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127F,
++		0x03C, 0x00001542,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227F,
++		0x03C, 0x00002542,
++		0x03C, 0x00002821,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027F,
++		0x03C, 0x00000542,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127F,
++		0x03C, 0x00001542,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227F,
++		0x03C, 0x00002542,
++		0x03C, 0x00002821,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x03C, 0x0000027F,
++		0x03C, 0x00000542,
++		0x03C, 0x00000821,
++		0x03C, 0x0000127F,
++		0x03C, 0x00001542,
++		0x03C, 0x00001821,
++		0x03C, 0x0000227F,
++		0x03C, 0x00002542,
++		0x03C, 0x00002821,
++	0xA0000000,	0x00000000,
++		0x03C, 0x0000037E,
++		0x03C, 0x00000575,
++		0x03C, 0x00000971,
++		0x03C, 0x0000127E,
++		0x03C, 0x00001575,
++		0x03C, 0x00001871,
++		0x03C, 0x0000217E,
++		0x03C, 0x00002575,
++		0x03C, 0x00002871,
++	0xB0000000,	0x00000000,
++		0x0EF, 0x00000000,
++		0x061, 0x000C0D47,
++		0x062, 0x0000133C,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x063, 0x000750E7,
++	0xA0000000,	0x00000000,
++		0x063, 0x0007D0E7,
++	0xB0000000,	0x00000000,
++		0x064, 0x00014FEC,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++		0x065, 0x000920D0,
++	0xA0000000,	0x00000000,
++		0x065, 0x000923FF,
++	0xB0000000,	0x00000000,
++		0x066, 0x00000040,
++		0x057, 0x00050000,
++		0x056, 0x00051DF0,
++	0x80000001,	0x00000000,	0x40000000,	0x00000000,
++	0x90000002,	0x00000000,	0x40000000,	0x00000000,
++	0x90000003,	0x00000000,	0x40000000,	0x00000000,
++	0x90000004,	0x00000000,	0x40000000,	0x00000000,
++	0x90000005,	0x00000000,	0x40000000,	0x00000000,
++	0x90000008,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000a,	0x00000000,	0x40000000,	0x00000000,
++	0x9000000b,	0x00000000,	0x40000000,	0x00000000,
++	0xA0000000,	0x00000000,
++		0x055, 0x00082060,
++	0xB0000000,	0x00000000,
++};
++
++RTW_DECL_TABLE_RF_RADIO(rtw8814a_rf_d, D);
++
++static const struct rtw_txpwr_lmt_cfg_pair rtw8814a_txpwr_lmt[] = {
++	{ 0, 0, 0, 0, 1, 36, },
++	{ 2, 0, 0, 0, 1, 32, },
++	{ 1, 0, 0, 0, 1, 32, },
++	{ 0, 0, 0, 0, 2, 36, },
++	{ 2, 0, 0, 0, 2, 32, },
++	{ 1, 0, 0, 0, 2, 32, },
++	{ 0, 0, 0, 0, 3, 36, },
++	{ 2, 0, 0, 0, 3, 32, },
++	{ 1, 0, 0, 0, 3, 32, },
++	{ 0, 0, 0, 0, 4, 36, },
++	{ 2, 0, 0, 0, 4, 32, },
++	{ 1, 0, 0, 0, 4, 32, },
++	{ 0, 0, 0, 0, 5, 36, },
++	{ 2, 0, 0, 0, 5, 32, },
++	{ 1, 0, 0, 0, 5, 32, },
++	{ 0, 0, 0, 0, 6, 36, },
++	{ 2, 0, 0, 0, 6, 32, },
++	{ 1, 0, 0, 0, 6, 32, },
++	{ 0, 0, 0, 0, 7, 36, },
++	{ 2, 0, 0, 0, 7, 32, },
++	{ 1, 0, 0, 0, 7, 32, },
++	{ 0, 0, 0, 0, 8, 36, },
++	{ 2, 0, 0, 0, 8, 32, },
++	{ 1, 0, 0, 0, 8, 32, },
++	{ 0, 0, 0, 0, 9, 36, },
++	{ 2, 0, 0, 0, 9, 32, },
++	{ 1, 0, 0, 0, 9, 32, },
++	{ 0, 0, 0, 0, 10, 36, },
++	{ 2, 0, 0, 0, 10, 32, },
++	{ 1, 0, 0, 0, 10, 32, },
++	{ 0, 0, 0, 0, 11, 36, },
++	{ 2, 0, 0, 0, 11, 32, },
++	{ 1, 0, 0, 0, 11, 32, },
++	{ 0, 0, 0, 0, 12, 63, },
++	{ 2, 0, 0, 0, 12, 32, },
++	{ 1, 0, 0, 0, 12, 32, },
++	{ 0, 0, 0, 0, 13, 63, },
++	{ 2, 0, 0, 0, 13, 32, },
++	{ 1, 0, 0, 0, 13, 32, },
++	{ 0, 0, 0, 0, 14, 63, },
++	{ 2, 0, 0, 0, 14, 63, },
++	{ 1, 0, 0, 0, 14, 32, },
++	{ 0, 0, 0, 1, 1, 34, },
++	{ 2, 0, 0, 1, 1, 32, },
++	{ 1, 0, 0, 1, 1, 32, },
++	{ 0, 0, 0, 1, 2, 36, },
++	{ 2, 0, 0, 1, 2, 32, },
++	{ 1, 0, 0, 1, 2, 32, },
++	{ 0, 0, 0, 1, 3, 36, },
++	{ 2, 0, 0, 1, 3, 32, },
++	{ 1, 0, 0, 1, 3, 32, },
++	{ 0, 0, 0, 1, 4, 36, },
++	{ 2, 0, 0, 1, 4, 32, },
++	{ 1, 0, 0, 1, 4, 32, },
++	{ 0, 0, 0, 1, 5, 36, },
++	{ 2, 0, 0, 1, 5, 32, },
++	{ 1, 0, 0, 1, 5, 32, },
++	{ 0, 0, 0, 1, 6, 36, },
++	{ 2, 0, 0, 1, 6, 32, },
++	{ 1, 0, 0, 1, 6, 32, },
++	{ 0, 0, 0, 1, 7, 36, },
++	{ 2, 0, 0, 1, 7, 32, },
++	{ 1, 0, 0, 1, 7, 32, },
++	{ 0, 0, 0, 1, 8, 36, },
++	{ 2, 0, 0, 1, 8, 32, },
++	{ 1, 0, 0, 1, 8, 32, },
++	{ 0, 0, 0, 1, 9, 36, },
++	{ 2, 0, 0, 1, 9, 32, },
++	{ 1, 0, 0, 1, 9, 32, },
++	{ 0, 0, 0, 1, 10, 36, },
++	{ 2, 0, 0, 1, 10, 32, },
++	{ 1, 0, 0, 1, 10, 32, },
++	{ 0, 0, 0, 1, 11, 32, },
++	{ 2, 0, 0, 1, 11, 32, },
++	{ 1, 0, 0, 1, 11, 32, },
++	{ 0, 0, 0, 1, 12, 63, },
++	{ 2, 0, 0, 1, 12, 32, },
++	{ 1, 0, 0, 1, 12, 32, },
++	{ 0, 0, 0, 1, 13, 63, },
++	{ 2, 0, 0, 1, 13, 32, },
++	{ 1, 0, 0, 1, 13, 32, },
++	{ 0, 0, 0, 1, 14, 63, },
++	{ 2, 0, 0, 1, 14, 63, },
++	{ 1, 0, 0, 1, 14, 63, },
++	{ 0, 0, 0, 2, 1, 34, },
++	{ 2, 0, 0, 2, 1, 32, },
++	{ 1, 0, 0, 2, 1, 32, },
++	{ 0, 0, 0, 2, 2, 36, },
++	{ 2, 0, 0, 2, 2, 32, },
++	{ 1, 0, 0, 2, 2, 32, },
++	{ 0, 0, 0, 2, 3, 36, },
++	{ 2, 0, 0, 2, 3, 32, },
++	{ 1, 0, 0, 2, 3, 32, },
++	{ 0, 0, 0, 2, 4, 36, },
++	{ 2, 0, 0, 2, 4, 32, },
++	{ 1, 0, 0, 2, 4, 32, },
++	{ 0, 0, 0, 2, 5, 36, },
++	{ 2, 0, 0, 2, 5, 32, },
++	{ 1, 0, 0, 2, 5, 32, },
++	{ 0, 0, 0, 2, 6, 36, },
++	{ 2, 0, 0, 2, 6, 32, },
++	{ 1, 0, 0, 2, 6, 32, },
++	{ 0, 0, 0, 2, 7, 36, },
++	{ 2, 0, 0, 2, 7, 32, },
++	{ 1, 0, 0, 2, 7, 32, },
++	{ 0, 0, 0, 2, 8, 36, },
++	{ 2, 0, 0, 2, 8, 32, },
++	{ 1, 0, 0, 2, 8, 32, },
++	{ 0, 0, 0, 2, 9, 36, },
++	{ 2, 0, 0, 2, 9, 32, },
++	{ 1, 0, 0, 2, 9, 32, },
++	{ 0, 0, 0, 2, 10, 36, },
++	{ 2, 0, 0, 2, 10, 32, },
++	{ 1, 0, 0, 2, 10, 32, },
++	{ 0, 0, 0, 2, 11, 32, },
++	{ 2, 0, 0, 2, 11, 32, },
++	{ 1, 0, 0, 2, 11, 32, },
++	{ 0, 0, 0, 2, 12, 63, },
++	{ 2, 0, 0, 2, 12, 32, },
++	{ 1, 0, 0, 2, 12, 32, },
++	{ 0, 0, 0, 2, 13, 63, },
++	{ 2, 0, 0, 2, 13, 32, },
++	{ 1, 0, 0, 2, 13, 32, },
++	{ 0, 0, 0, 2, 14, 63, },
++	{ 2, 0, 0, 2, 14, 63, },
++	{ 1, 0, 0, 2, 14, 63, },
++	{ 0, 0, 0, 3, 1, 32, },
++	{ 2, 0, 0, 3, 1, 30, },
++	{ 1, 0, 0, 3, 1, 30, },
++	{ 0, 0, 0, 3, 2, 34, },
++	{ 2, 0, 0, 3, 2, 30, },
++	{ 1, 0, 0, 3, 2, 30, },
++	{ 0, 0, 0, 3, 3, 34, },
++	{ 2, 0, 0, 3, 3, 30, },
++	{ 1, 0, 0, 3, 3, 30, },
++	{ 0, 0, 0, 3, 4, 34, },
++	{ 2, 0, 0, 3, 4, 30, },
++	{ 1, 0, 0, 3, 4, 30, },
++	{ 0, 0, 0, 3, 5, 34, },
++	{ 2, 0, 0, 3, 5, 30, },
++	{ 1, 0, 0, 3, 5, 30, },
++	{ 0, 0, 0, 3, 6, 34, },
++	{ 2, 0, 0, 3, 6, 30, },
++	{ 1, 0, 0, 3, 6, 30, },
++	{ 0, 0, 0, 3, 7, 34, },
++	{ 2, 0, 0, 3, 7, 30, },
++	{ 1, 0, 0, 3, 7, 30, },
++	{ 0, 0, 0, 3, 8, 34, },
++	{ 2, 0, 0, 3, 8, 30, },
++	{ 1, 0, 0, 3, 8, 30, },
++	{ 0, 0, 0, 3, 9, 34, },
++	{ 2, 0, 0, 3, 9, 30, },
++	{ 1, 0, 0, 3, 9, 30, },
++	{ 0, 0, 0, 3, 10, 34, },
++	{ 2, 0, 0, 3, 10, 30, },
++	{ 1, 0, 0, 3, 10, 30, },
++	{ 0, 0, 0, 3, 11, 30, },
++	{ 2, 0, 0, 3, 11, 30, },
++	{ 1, 0, 0, 3, 11, 30, },
++	{ 0, 0, 0, 3, 12, 63, },
++	{ 2, 0, 0, 3, 12, 30, },
++	{ 1, 0, 0, 3, 12, 30, },
++	{ 0, 0, 0, 3, 13, 63, },
++	{ 2, 0, 0, 3, 13, 30, },
++	{ 1, 0, 0, 3, 13, 30, },
++	{ 0, 0, 0, 3, 14, 63, },
++	{ 2, 0, 0, 3, 14, 63, },
++	{ 1, 0, 0, 3, 14, 63, },
++	{ 0, 0, 0, 6, 1, 30, },
++	{ 2, 0, 0, 6, 1, 28, },
++	{ 1, 0, 0, 6, 1, 28, },
++	{ 0, 0, 0, 6, 2, 32, },
++	{ 2, 0, 0, 6, 2, 28, },
++	{ 1, 0, 0, 6, 2, 28, },
++	{ 0, 0, 0, 6, 3, 32, },
++	{ 2, 0, 0, 6, 3, 28, },
++	{ 1, 0, 0, 6, 3, 28, },
++	{ 0, 0, 0, 6, 4, 32, },
++	{ 2, 0, 0, 6, 4, 28, },
++	{ 1, 0, 0, 6, 4, 28, },
++	{ 0, 0, 0, 6, 5, 32, },
++	{ 2, 0, 0, 6, 5, 28, },
++	{ 1, 0, 0, 6, 5, 28, },
++	{ 0, 0, 0, 6, 6, 32, },
++	{ 2, 0, 0, 6, 6, 28, },
++	{ 1, 0, 0, 6, 6, 28, },
++	{ 0, 0, 0, 6, 7, 32, },
++	{ 2, 0, 0, 6, 7, 28, },
++	{ 1, 0, 0, 6, 7, 28, },
++	{ 0, 0, 0, 6, 8, 32, },
++	{ 2, 0, 0, 6, 8, 28, },
++	{ 1, 0, 0, 6, 8, 28, },
++	{ 0, 0, 0, 6, 9, 32, },
++	{ 2, 0, 0, 6, 9, 28, },
++	{ 1, 0, 0, 6, 9, 28, },
++	{ 0, 0, 0, 6, 10, 32, },
++	{ 2, 0, 0, 6, 10, 28, },
++	{ 1, 0, 0, 6, 10, 28, },
++	{ 0, 0, 0, 6, 11, 28, },
++	{ 2, 0, 0, 6, 11, 28, },
++	{ 1, 0, 0, 6, 11, 28, },
++	{ 0, 0, 0, 6, 12, 63, },
++	{ 2, 0, 0, 6, 12, 28, },
++	{ 1, 0, 0, 6, 12, 28, },
++	{ 0, 0, 0, 6, 13, 63, },
++	{ 2, 0, 0, 6, 13, 28, },
++	{ 1, 0, 0, 6, 13, 28, },
++	{ 0, 0, 0, 6, 14, 63, },
++	{ 2, 0, 0, 6, 14, 63, },
++	{ 1, 0, 0, 6, 14, 63, },
++	{ 0, 0, 0, 7, 1, 28, },
++	{ 2, 0, 0, 7, 1, 26, },
++	{ 1, 0, 0, 7, 1, 26, },
++	{ 0, 0, 0, 7, 2, 30, },
++	{ 2, 0, 0, 7, 2, 26, },
++	{ 1, 0, 0, 7, 2, 26, },
++	{ 0, 0, 0, 7, 3, 30, },
++	{ 2, 0, 0, 7, 3, 26, },
++	{ 1, 0, 0, 7, 3, 26, },
++	{ 0, 0, 0, 7, 4, 30, },
++	{ 2, 0, 0, 7, 4, 26, },
++	{ 1, 0, 0, 7, 4, 26, },
++	{ 0, 0, 0, 7, 5, 30, },
++	{ 2, 0, 0, 7, 5, 26, },
++	{ 1, 0, 0, 7, 5, 26, },
++	{ 0, 0, 0, 7, 6, 30, },
++	{ 2, 0, 0, 7, 6, 26, },
++	{ 1, 0, 0, 7, 6, 26, },
++	{ 0, 0, 0, 7, 7, 30, },
++	{ 2, 0, 0, 7, 7, 26, },
++	{ 1, 0, 0, 7, 7, 26, },
++	{ 0, 0, 0, 7, 8, 30, },
++	{ 2, 0, 0, 7, 8, 26, },
++	{ 1, 0, 0, 7, 8, 26, },
++	{ 0, 0, 0, 7, 9, 30, },
++	{ 2, 0, 0, 7, 9, 26, },
++	{ 1, 0, 0, 7, 9, 26, },
++	{ 0, 0, 0, 7, 10, 30, },
++	{ 2, 0, 0, 7, 10, 26, },
++	{ 1, 0, 0, 7, 10, 26, },
++	{ 0, 0, 0, 7, 11, 26, },
++	{ 2, 0, 0, 7, 11, 26, },
++	{ 1, 0, 0, 7, 11, 26, },
++	{ 0, 0, 0, 7, 12, 63, },
++	{ 2, 0, 0, 7, 12, 26, },
++	{ 1, 0, 0, 7, 12, 26, },
++	{ 0, 0, 0, 7, 13, 63, },
++	{ 2, 0, 0, 7, 13, 26, },
++	{ 1, 0, 0, 7, 13, 26, },
++	{ 0, 0, 0, 7, 14, 63, },
++	{ 2, 0, 0, 7, 14, 63, },
++	{ 1, 0, 0, 7, 14, 63, },
++	{ 0, 0, 1, 2, 1, 63, },
++	{ 2, 0, 1, 2, 1, 63, },
++	{ 1, 0, 1, 2, 1, 63, },
++	{ 0, 0, 1, 2, 2, 63, },
++	{ 2, 0, 1, 2, 2, 63, },
++	{ 1, 0, 1, 2, 2, 63, },
++	{ 0, 0, 1, 2, 3, 32, },
++	{ 2, 0, 1, 2, 3, 32, },
++	{ 1, 0, 1, 2, 3, 32, },
++	{ 0, 0, 1, 2, 4, 36, },
++	{ 2, 0, 1, 2, 4, 32, },
++	{ 1, 0, 1, 2, 4, 32, },
++	{ 0, 0, 1, 2, 5, 36, },
++	{ 2, 0, 1, 2, 5, 32, },
++	{ 1, 0, 1, 2, 5, 32, },
++	{ 0, 0, 1, 2, 6, 36, },
++	{ 2, 0, 1, 2, 6, 32, },
++	{ 1, 0, 1, 2, 6, 32, },
++	{ 0, 0, 1, 2, 7, 36, },
++	{ 2, 0, 1, 2, 7, 32, },
++	{ 1, 0, 1, 2, 7, 32, },
++	{ 0, 0, 1, 2, 8, 36, },
++	{ 2, 0, 1, 2, 8, 32, },
++	{ 1, 0, 1, 2, 8, 32, },
++	{ 0, 0, 1, 2, 9, 36, },
++	{ 2, 0, 1, 2, 9, 32, },
++	{ 1, 0, 1, 2, 9, 32, },
++	{ 0, 0, 1, 2, 10, 36, },
++	{ 2, 0, 1, 2, 10, 32, },
++	{ 1, 0, 1, 2, 10, 32, },
++	{ 0, 0, 1, 2, 11, 32, },
++	{ 2, 0, 1, 2, 11, 32, },
++	{ 1, 0, 1, 2, 11, 32, },
++	{ 0, 0, 1, 2, 12, 63, },
++	{ 2, 0, 1, 2, 12, 32, },
++	{ 1, 0, 1, 2, 12, 32, },
++	{ 0, 0, 1, 2, 13, 63, },
++	{ 2, 0, 1, 2, 13, 32, },
++	{ 1, 0, 1, 2, 13, 32, },
++	{ 0, 0, 1, 2, 14, 63, },
++	{ 2, 0, 1, 2, 14, 63, },
++	{ 1, 0, 1, 2, 14, 63, },
++	{ 0, 0, 1, 3, 1, 63, },
++	{ 2, 0, 1, 3, 1, 63, },
++	{ 1, 0, 1, 3, 1, 63, },
++	{ 0, 0, 1, 3, 2, 63, },
++	{ 2, 0, 1, 3, 2, 63, },
++	{ 1, 0, 1, 3, 2, 63, },
++	{ 0, 0, 1, 3, 3, 30, },
++	{ 2, 0, 1, 3, 3, 30, },
++	{ 1, 0, 1, 3, 3, 30, },
++	{ 0, 0, 1, 3, 4, 34, },
++	{ 2, 0, 1, 3, 4, 30, },
++	{ 1, 0, 1, 3, 4, 30, },
++	{ 0, 0, 1, 3, 5, 34, },
++	{ 2, 0, 1, 3, 5, 30, },
++	{ 1, 0, 1, 3, 5, 30, },
++	{ 0, 0, 1, 3, 6, 34, },
++	{ 2, 0, 1, 3, 6, 30, },
++	{ 1, 0, 1, 3, 6, 30, },
++	{ 0, 0, 1, 3, 7, 34, },
++	{ 2, 0, 1, 3, 7, 30, },
++	{ 1, 0, 1, 3, 7, 30, },
++	{ 0, 0, 1, 3, 8, 34, },
++	{ 2, 0, 1, 3, 8, 30, },
++	{ 1, 0, 1, 3, 8, 30, },
++	{ 0, 0, 1, 3, 9, 34, },
++	{ 2, 0, 1, 3, 9, 30, },
++	{ 1, 0, 1, 3, 9, 30, },
++	{ 0, 0, 1, 3, 10, 34, },
++	{ 2, 0, 1, 3, 10, 30, },
++	{ 1, 0, 1, 3, 10, 30, },
++	{ 0, 0, 1, 3, 11, 30, },
++	{ 2, 0, 1, 3, 11, 30, },
++	{ 1, 0, 1, 3, 11, 30, },
++	{ 0, 0, 1, 3, 12, 63, },
++	{ 2, 0, 1, 3, 12, 30, },
++	{ 1, 0, 1, 3, 12, 30, },
++	{ 0, 0, 1, 3, 13, 63, },
++	{ 2, 0, 1, 3, 13, 30, },
++	{ 1, 0, 1, 3, 13, 30, },
++	{ 0, 0, 1, 3, 14, 63, },
++	{ 2, 0, 1, 3, 14, 63, },
++	{ 1, 0, 1, 3, 14, 63, },
++	{ 0, 0, 1, 6, 1, 63, },
++	{ 2, 0, 1, 6, 1, 63, },
++	{ 1, 0, 1, 6, 1, 63, },
++	{ 0, 0, 1, 6, 2, 63, },
++	{ 2, 0, 1, 6, 2, 63, },
++	{ 1, 0, 1, 6, 2, 63, },
++	{ 0, 0, 1, 6, 3, 28, },
++	{ 2, 0, 1, 6, 3, 28, },
++	{ 1, 0, 1, 6, 3, 28, },
++	{ 0, 0, 1, 6, 4, 32, },
++	{ 2, 0, 1, 6, 4, 28, },
++	{ 1, 0, 1, 6, 4, 28, },
++	{ 0, 0, 1, 6, 5, 32, },
++	{ 2, 0, 1, 6, 5, 28, },
++	{ 1, 0, 1, 6, 5, 28, },
++	{ 0, 0, 1, 6, 6, 32, },
++	{ 2, 0, 1, 6, 6, 28, },
++	{ 1, 0, 1, 6, 6, 28, },
++	{ 0, 0, 1, 6, 7, 32, },
++	{ 2, 0, 1, 6, 7, 28, },
++	{ 1, 0, 1, 6, 7, 28, },
++	{ 0, 0, 1, 6, 8, 32, },
++	{ 2, 0, 1, 6, 8, 28, },
++	{ 1, 0, 1, 6, 8, 28, },
++	{ 0, 0, 1, 6, 9, 32, },
++	{ 2, 0, 1, 6, 9, 28, },
++	{ 1, 0, 1, 6, 9, 28, },
++	{ 0, 0, 1, 6, 10, 32, },
++	{ 2, 0, 1, 6, 10, 28, },
++	{ 1, 0, 1, 6, 10, 28, },
++	{ 0, 0, 1, 6, 11, 28, },
++	{ 2, 0, 1, 6, 11, 28, },
++	{ 1, 0, 1, 6, 11, 28, },
++	{ 0, 0, 1, 6, 12, 63, },
++	{ 2, 0, 1, 6, 12, 28, },
++	{ 1, 0, 1, 6, 12, 28, },
++	{ 0, 0, 1, 6, 13, 63, },
++	{ 2, 0, 1, 6, 13, 28, },
++	{ 1, 0, 1, 6, 13, 28, },
++	{ 0, 0, 1, 6, 14, 63, },
++	{ 2, 0, 1, 6, 14, 63, },
++	{ 1, 0, 1, 6, 14, 63, },
++	{ 0, 0, 1, 7, 1, 63, },
++	{ 2, 0, 1, 7, 1, 63, },
++	{ 1, 0, 1, 7, 1, 63, },
++	{ 0, 0, 1, 7, 2, 63, },
++	{ 2, 0, 1, 7, 2, 63, },
++	{ 1, 0, 1, 7, 2, 63, },
++	{ 0, 0, 1, 7, 3, 26, },
++	{ 2, 0, 1, 7, 3, 26, },
++	{ 1, 0, 1, 7, 3, 26, },
++	{ 0, 0, 1, 7, 4, 30, },
++	{ 2, 0, 1, 7, 4, 26, },
++	{ 1, 0, 1, 7, 4, 26, },
++	{ 0, 0, 1, 7, 5, 30, },
++	{ 2, 0, 1, 7, 5, 26, },
++	{ 1, 0, 1, 7, 5, 26, },
++	{ 0, 0, 1, 7, 6, 30, },
++	{ 2, 0, 1, 7, 6, 26, },
++	{ 1, 0, 1, 7, 6, 26, },
++	{ 0, 0, 1, 7, 7, 30, },
++	{ 2, 0, 1, 7, 7, 26, },
++	{ 1, 0, 1, 7, 7, 26, },
++	{ 0, 0, 1, 7, 8, 30, },
++	{ 2, 0, 1, 7, 8, 26, },
++	{ 1, 0, 1, 7, 8, 26, },
++	{ 0, 0, 1, 7, 9, 30, },
++	{ 2, 0, 1, 7, 9, 26, },
++	{ 1, 0, 1, 7, 9, 26, },
++	{ 0, 0, 1, 7, 10, 30, },
++	{ 2, 0, 1, 7, 10, 26, },
++	{ 1, 0, 1, 7, 10, 26, },
++	{ 0, 0, 1, 7, 11, 26, },
++	{ 2, 0, 1, 7, 11, 26, },
++	{ 1, 0, 1, 7, 11, 26, },
++	{ 0, 0, 1, 7, 12, 63, },
++	{ 2, 0, 1, 7, 12, 26, },
++	{ 1, 0, 1, 7, 12, 26, },
++	{ 0, 0, 1, 7, 13, 63, },
++	{ 2, 0, 1, 7, 13, 26, },
++	{ 1, 0, 1, 7, 13, 26, },
++	{ 0, 0, 1, 7, 14, 63, },
++	{ 2, 0, 1, 7, 14, 63, },
++	{ 1, 0, 1, 7, 14, 63, },
++	{ 0, 1, 0, 1, 36, 30, },
++	{ 2, 1, 0, 1, 36, 32, },
++	{ 1, 1, 0, 1, 36, 32, },
++	{ 0, 1, 0, 1, 40, 30, },
++	{ 2, 1, 0, 1, 40, 32, },
++	{ 1, 1, 0, 1, 40, 32, },
++	{ 0, 1, 0, 1, 44, 30, },
++	{ 2, 1, 0, 1, 44, 32, },
++	{ 1, 1, 0, 1, 44, 32, },
++	{ 0, 1, 0, 1, 48, 30, },
++	{ 2, 1, 0, 1, 48, 32, },
++	{ 1, 1, 0, 1, 48, 32, },
++	{ 0, 1, 0, 1, 52, 36, },
++	{ 2, 1, 0, 1, 52, 32, },
++	{ 1, 1, 0, 1, 52, 32, },
++	{ 0, 1, 0, 1, 56, 34, },
++	{ 2, 1, 0, 1, 56, 32, },
++	{ 1, 1, 0, 1, 56, 32, },
++	{ 0, 1, 0, 1, 60, 32, },
++	{ 2, 1, 0, 1, 60, 32, },
++	{ 1, 1, 0, 1, 60, 32, },
++	{ 0, 1, 0, 1, 64, 28, },
++	{ 2, 1, 0, 1, 64, 32, },
++	{ 1, 1, 0, 1, 64, 32, },
++	{ 0, 1, 0, 1, 100, 30, },
++	{ 2, 1, 0, 1, 100, 32, },
++	{ 1, 1, 0, 1, 100, 32, },
++	{ 0, 1, 0, 1, 104, 30, },
++	{ 2, 1, 0, 1, 104, 32, },
++	{ 1, 1, 0, 1, 104, 32, },
++	{ 0, 1, 0, 1, 108, 32, },
++	{ 2, 1, 0, 1, 108, 32, },
++	{ 1, 1, 0, 1, 108, 32, },
++	{ 0, 1, 0, 1, 112, 34, },
++	{ 2, 1, 0, 1, 112, 32, },
++	{ 1, 1, 0, 1, 112, 32, },
++	{ 0, 1, 0, 1, 116, 34, },
++	{ 2, 1, 0, 1, 116, 32, },
++	{ 1, 1, 0, 1, 116, 32, },
++	{ 0, 1, 0, 1, 120, 36, },
++	{ 2, 1, 0, 1, 120, 32, },
++	{ 1, 1, 0, 1, 120, 32, },
++	{ 0, 1, 0, 1, 124, 34, },
++	{ 2, 1, 0, 1, 124, 32, },
++	{ 1, 1, 0, 1, 124, 32, },
++	{ 0, 1, 0, 1, 128, 32, },
++	{ 2, 1, 0, 1, 128, 32, },
++	{ 1, 1, 0, 1, 128, 32, },
++	{ 0, 1, 0, 1, 132, 30, },
++	{ 2, 1, 0, 1, 132, 32, },
++	{ 1, 1, 0, 1, 132, 32, },
++	{ 0, 1, 0, 1, 136, 30, },
++	{ 2, 1, 0, 1, 136, 32, },
++	{ 1, 1, 0, 1, 136, 32, },
++	{ 0, 1, 0, 1, 140, 28, },
++	{ 2, 1, 0, 1, 140, 32, },
++	{ 1, 1, 0, 1, 140, 32, },
++	{ 0, 1, 0, 1, 149, 36, },
++	{ 2, 1, 0, 1, 149, 32, },
++	{ 1, 1, 0, 1, 149, 63, },
++	{ 0, 1, 0, 1, 153, 36, },
++	{ 2, 1, 0, 1, 153, 32, },
++	{ 1, 1, 0, 1, 153, 63, },
++	{ 0, 1, 0, 1, 157, 36, },
++	{ 2, 1, 0, 1, 157, 32, },
++	{ 1, 1, 0, 1, 157, 63, },
++	{ 0, 1, 0, 1, 161, 36, },
++	{ 2, 1, 0, 1, 161, 32, },
++	{ 1, 1, 0, 1, 161, 63, },
++	{ 0, 1, 0, 1, 165, 36, },
++	{ 2, 1, 0, 1, 165, 32, },
++	{ 1, 1, 0, 1, 165, 63, },
++	{ 0, 1, 0, 2, 36, 30, },
++	{ 2, 1, 0, 2, 36, 32, },
++	{ 1, 1, 0, 2, 36, 32, },
++	{ 0, 1, 0, 2, 40, 30, },
++	{ 2, 1, 0, 2, 40, 32, },
++	{ 1, 1, 0, 2, 40, 32, },
++	{ 0, 1, 0, 2, 44, 30, },
++	{ 2, 1, 0, 2, 44, 32, },
++	{ 1, 1, 0, 2, 44, 32, },
++	{ 0, 1, 0, 2, 48, 30, },
++	{ 2, 1, 0, 2, 48, 32, },
++	{ 1, 1, 0, 2, 48, 32, },
++	{ 0, 1, 0, 2, 52, 36, },
++	{ 2, 1, 0, 2, 52, 32, },
++	{ 1, 1, 0, 2, 52, 32, },
++	{ 0, 1, 0, 2, 56, 34, },
++	{ 2, 1, 0, 2, 56, 32, },
++	{ 1, 1, 0, 2, 56, 32, },
++	{ 0, 1, 0, 2, 60, 32, },
++	{ 2, 1, 0, 2, 60, 32, },
++	{ 1, 1, 0, 2, 60, 32, },
++	{ 0, 1, 0, 2, 64, 28, },
++	{ 2, 1, 0, 2, 64, 32, },
++	{ 1, 1, 0, 2, 64, 32, },
++	{ 0, 1, 0, 2, 100, 30, },
++	{ 2, 1, 0, 2, 100, 32, },
++	{ 1, 1, 0, 2, 100, 32, },
++	{ 0, 1, 0, 2, 104, 30, },
++	{ 2, 1, 0, 2, 104, 32, },
++	{ 1, 1, 0, 2, 104, 32, },
++	{ 0, 1, 0, 2, 108, 32, },
++	{ 2, 1, 0, 2, 108, 32, },
++	{ 1, 1, 0, 2, 108, 32, },
++	{ 0, 1, 0, 2, 112, 34, },
++	{ 2, 1, 0, 2, 112, 32, },
++	{ 1, 1, 0, 2, 112, 32, },
++	{ 0, 1, 0, 2, 116, 34, },
++	{ 2, 1, 0, 2, 116, 32, },
++	{ 1, 1, 0, 2, 116, 32, },
++	{ 0, 1, 0, 2, 120, 36, },
++	{ 2, 1, 0, 2, 120, 32, },
++	{ 1, 1, 0, 2, 120, 32, },
++	{ 0, 1, 0, 2, 124, 34, },
++	{ 2, 1, 0, 2, 124, 32, },
++	{ 1, 1, 0, 2, 124, 32, },
++	{ 0, 1, 0, 2, 128, 32, },
++	{ 2, 1, 0, 2, 128, 32, },
++	{ 1, 1, 0, 2, 128, 32, },
++	{ 0, 1, 0, 2, 132, 30, },
++	{ 2, 1, 0, 2, 132, 32, },
++	{ 1, 1, 0, 2, 132, 32, },
++	{ 0, 1, 0, 2, 136, 30, },
++	{ 2, 1, 0, 2, 136, 32, },
++	{ 1, 1, 0, 2, 136, 32, },
++	{ 0, 1, 0, 2, 140, 28, },
++	{ 2, 1, 0, 2, 140, 32, },
++	{ 1, 1, 0, 2, 140, 32, },
++	{ 0, 1, 0, 2, 149, 36, },
++	{ 2, 1, 0, 2, 149, 32, },
++	{ 1, 1, 0, 2, 149, 63, },
++	{ 0, 1, 0, 2, 153, 36, },
++	{ 2, 1, 0, 2, 153, 32, },
++	{ 1, 1, 0, 2, 153, 63, },
++	{ 0, 1, 0, 2, 157, 36, },
++	{ 2, 1, 0, 2, 157, 32, },
++	{ 1, 1, 0, 2, 157, 63, },
++	{ 0, 1, 0, 2, 161, 36, },
++	{ 2, 1, 0, 2, 161, 32, },
++	{ 1, 1, 0, 2, 161, 63, },
++	{ 0, 1, 0, 2, 165, 36, },
++	{ 2, 1, 0, 2, 165, 32, },
++	{ 1, 1, 0, 2, 165, 63, },
++	{ 0, 1, 0, 3, 36, 28, },
++	{ 2, 1, 0, 3, 36, 30, },
++	{ 1, 1, 0, 3, 36, 30, },
++	{ 0, 1, 0, 3, 40, 28, },
++	{ 2, 1, 0, 3, 40, 30, },
++	{ 1, 1, 0, 3, 40, 30, },
++	{ 0, 1, 0, 3, 44, 28, },
++	{ 2, 1, 0, 3, 44, 30, },
++	{ 1, 1, 0, 3, 44, 30, },
++	{ 0, 1, 0, 3, 48, 28, },
++	{ 2, 1, 0, 3, 48, 30, },
++	{ 1, 1, 0, 3, 48, 30, },
++	{ 0, 1, 0, 3, 52, 34, },
++	{ 2, 1, 0, 3, 52, 30, },
++	{ 1, 1, 0, 3, 52, 30, },
++	{ 0, 1, 0, 3, 56, 32, },
++	{ 2, 1, 0, 3, 56, 30, },
++	{ 1, 1, 0, 3, 56, 30, },
++	{ 0, 1, 0, 3, 60, 30, },
++	{ 2, 1, 0, 3, 60, 30, },
++	{ 1, 1, 0, 3, 60, 30, },
++	{ 0, 1, 0, 3, 64, 26, },
++	{ 2, 1, 0, 3, 64, 30, },
++	{ 1, 1, 0, 3, 64, 30, },
++	{ 0, 1, 0, 3, 100, 28, },
++	{ 2, 1, 0, 3, 100, 30, },
++	{ 1, 1, 0, 3, 100, 30, },
++	{ 0, 1, 0, 3, 104, 28, },
++	{ 2, 1, 0, 3, 104, 30, },
++	{ 1, 1, 0, 3, 104, 30, },
++	{ 0, 1, 0, 3, 108, 30, },
++	{ 2, 1, 0, 3, 108, 30, },
++	{ 1, 1, 0, 3, 108, 30, },
++	{ 0, 1, 0, 3, 112, 32, },
++	{ 2, 1, 0, 3, 112, 30, },
++	{ 1, 1, 0, 3, 112, 30, },
++	{ 0, 1, 0, 3, 116, 32, },
++	{ 2, 1, 0, 3, 116, 30, },
++	{ 1, 1, 0, 3, 116, 30, },
++	{ 0, 1, 0, 3, 120, 34, },
++	{ 2, 1, 0, 3, 120, 30, },
++	{ 1, 1, 0, 3, 120, 30, },
++	{ 0, 1, 0, 3, 124, 32, },
++	{ 2, 1, 0, 3, 124, 30, },
++	{ 1, 1, 0, 3, 124, 30, },
++	{ 0, 1, 0, 3, 128, 30, },
++	{ 2, 1, 0, 3, 128, 30, },
++	{ 1, 1, 0, 3, 128, 30, },
++	{ 0, 1, 0, 3, 132, 28, },
++	{ 2, 1, 0, 3, 132, 30, },
++	{ 1, 1, 0, 3, 132, 30, },
++	{ 0, 1, 0, 3, 136, 28, },
++	{ 2, 1, 0, 3, 136, 30, },
++	{ 1, 1, 0, 3, 136, 30, },
++	{ 0, 1, 0, 3, 140, 26, },
++	{ 2, 1, 0, 3, 140, 30, },
++	{ 1, 1, 0, 3, 140, 30, },
++	{ 0, 1, 0, 3, 149, 34, },
++	{ 2, 1, 0, 3, 149, 30, },
++	{ 1, 1, 0, 3, 149, 63, },
++	{ 0, 1, 0, 3, 153, 34, },
++	{ 2, 1, 0, 3, 153, 30, },
++	{ 1, 1, 0, 3, 153, 63, },
++	{ 0, 1, 0, 3, 157, 34, },
++	{ 2, 1, 0, 3, 157, 30, },
++	{ 1, 1, 0, 3, 157, 63, },
++	{ 0, 1, 0, 3, 161, 34, },
++	{ 2, 1, 0, 3, 161, 30, },
++	{ 1, 1, 0, 3, 161, 63, },
++	{ 0, 1, 0, 3, 165, 34, },
++	{ 2, 1, 0, 3, 165, 30, },
++	{ 1, 1, 0, 3, 165, 63, },
++	{ 0, 1, 0, 6, 36, 26, },
++	{ 2, 1, 0, 6, 36, 28, },
++	{ 1, 1, 0, 6, 36, 28, },
++	{ 0, 1, 0, 6, 40, 26, },
++	{ 2, 1, 0, 6, 40, 28, },
++	{ 1, 1, 0, 6, 40, 28, },
++	{ 0, 1, 0, 6, 44, 26, },
++	{ 2, 1, 0, 6, 44, 28, },
++	{ 1, 1, 0, 6, 44, 28, },
++	{ 0, 1, 0, 6, 48, 26, },
++	{ 2, 1, 0, 6, 48, 28, },
++	{ 1, 1, 0, 6, 48, 28, },
++	{ 0, 1, 0, 6, 52, 32, },
++	{ 2, 1, 0, 6, 52, 28, },
++	{ 1, 1, 0, 6, 52, 28, },
++	{ 0, 1, 0, 6, 56, 30, },
++	{ 2, 1, 0, 6, 56, 28, },
++	{ 1, 1, 0, 6, 56, 28, },
++	{ 0, 1, 0, 6, 60, 28, },
++	{ 2, 1, 0, 6, 60, 28, },
++	{ 1, 1, 0, 6, 60, 28, },
++	{ 0, 1, 0, 6, 64, 24, },
++	{ 2, 1, 0, 6, 64, 28, },
++	{ 1, 1, 0, 6, 64, 28, },
++	{ 0, 1, 0, 6, 100, 26, },
++	{ 2, 1, 0, 6, 100, 28, },
++	{ 1, 1, 0, 6, 100, 28, },
++	{ 0, 1, 0, 6, 104, 26, },
++	{ 2, 1, 0, 6, 104, 28, },
++	{ 1, 1, 0, 6, 104, 28, },
++	{ 0, 1, 0, 6, 108, 28, },
++	{ 2, 1, 0, 6, 108, 28, },
++	{ 1, 1, 0, 6, 108, 28, },
++	{ 0, 1, 0, 6, 112, 30, },
++	{ 2, 1, 0, 6, 112, 28, },
++	{ 1, 1, 0, 6, 112, 28, },
++	{ 0, 1, 0, 6, 116, 30, },
++	{ 2, 1, 0, 6, 116, 28, },
++	{ 1, 1, 0, 6, 116, 28, },
++	{ 0, 1, 0, 6, 120, 32, },
++	{ 2, 1, 0, 6, 120, 28, },
++	{ 1, 1, 0, 6, 120, 28, },
++	{ 0, 1, 0, 6, 124, 30, },
++	{ 2, 1, 0, 6, 124, 28, },
++	{ 1, 1, 0, 6, 124, 28, },
++	{ 0, 1, 0, 6, 128, 28, },
++	{ 2, 1, 0, 6, 128, 28, },
++	{ 1, 1, 0, 6, 128, 28, },
++	{ 0, 1, 0, 6, 132, 26, },
++	{ 2, 1, 0, 6, 132, 28, },
++	{ 1, 1, 0, 6, 132, 28, },
++	{ 0, 1, 0, 6, 136, 26, },
++	{ 2, 1, 0, 6, 136, 28, },
++	{ 1, 1, 0, 6, 136, 28, },
++	{ 0, 1, 0, 6, 140, 24, },
++	{ 2, 1, 0, 6, 140, 28, },
++	{ 1, 1, 0, 6, 140, 28, },
++	{ 0, 1, 0, 6, 149, 32, },
++	{ 2, 1, 0, 6, 149, 28, },
++	{ 1, 1, 0, 6, 149, 63, },
++	{ 0, 1, 0, 6, 153, 32, },
++	{ 2, 1, 0, 6, 153, 28, },
++	{ 1, 1, 0, 6, 153, 63, },
++	{ 0, 1, 0, 6, 157, 32, },
++	{ 2, 1, 0, 6, 157, 28, },
++	{ 1, 1, 0, 6, 157, 63, },
++	{ 0, 1, 0, 6, 161, 32, },
++	{ 2, 1, 0, 6, 161, 28, },
++	{ 1, 1, 0, 6, 161, 63, },
++	{ 0, 1, 0, 6, 165, 32, },
++	{ 2, 1, 0, 6, 165, 28, },
++	{ 1, 1, 0, 6, 165, 63, },
++	{ 0, 1, 0, 7, 36, 24, },
++	{ 2, 1, 0, 7, 36, 26, },
++	{ 1, 1, 0, 7, 36, 26, },
++	{ 0, 1, 0, 7, 40, 24, },
++	{ 2, 1, 0, 7, 40, 26, },
++	{ 1, 1, 0, 7, 40, 26, },
++	{ 0, 1, 0, 7, 44, 24, },
++	{ 2, 1, 0, 7, 44, 26, },
++	{ 1, 1, 0, 7, 44, 26, },
++	{ 0, 1, 0, 7, 48, 24, },
++	{ 2, 1, 0, 7, 48, 26, },
++	{ 1, 1, 0, 7, 48, 26, },
++	{ 0, 1, 0, 7, 52, 30, },
++	{ 2, 1, 0, 7, 52, 26, },
++	{ 1, 1, 0, 7, 52, 26, },
++	{ 0, 1, 0, 7, 56, 28, },
++	{ 2, 1, 0, 7, 56, 26, },
++	{ 1, 1, 0, 7, 56, 26, },
++	{ 0, 1, 0, 7, 60, 26, },
++	{ 2, 1, 0, 7, 60, 26, },
++	{ 1, 1, 0, 7, 60, 26, },
++	{ 0, 1, 0, 7, 64, 22, },
++	{ 2, 1, 0, 7, 64, 26, },
++	{ 1, 1, 0, 7, 64, 26, },
++	{ 0, 1, 0, 7, 100, 24, },
++	{ 2, 1, 0, 7, 100, 26, },
++	{ 1, 1, 0, 7, 100, 26, },
++	{ 0, 1, 0, 7, 104, 24, },
++	{ 2, 1, 0, 7, 104, 26, },
++	{ 1, 1, 0, 7, 104, 26, },
++	{ 0, 1, 0, 7, 108, 26, },
++	{ 2, 1, 0, 7, 108, 26, },
++	{ 1, 1, 0, 7, 108, 26, },
++	{ 0, 1, 0, 7, 112, 28, },
++	{ 2, 1, 0, 7, 112, 26, },
++	{ 1, 1, 0, 7, 112, 26, },
++	{ 0, 1, 0, 7, 116, 28, },
++	{ 2, 1, 0, 7, 116, 26, },
++	{ 1, 1, 0, 7, 116, 26, },
++	{ 0, 1, 0, 7, 120, 30, },
++	{ 2, 1, 0, 7, 120, 26, },
++	{ 1, 1, 0, 7, 120, 26, },
++	{ 0, 1, 0, 7, 124, 28, },
++	{ 2, 1, 0, 7, 124, 26, },
++	{ 1, 1, 0, 7, 124, 26, },
++	{ 0, 1, 0, 7, 128, 26, },
++	{ 2, 1, 0, 7, 128, 26, },
++	{ 1, 1, 0, 7, 128, 26, },
++	{ 0, 1, 0, 7, 132, 24, },
++	{ 2, 1, 0, 7, 132, 26, },
++	{ 1, 1, 0, 7, 132, 26, },
++	{ 0, 1, 0, 7, 136, 24, },
++	{ 2, 1, 0, 7, 136, 26, },
++	{ 1, 1, 0, 7, 136, 26, },
++	{ 0, 1, 0, 7, 140, 22, },
++	{ 2, 1, 0, 7, 140, 26, },
++	{ 1, 1, 0, 7, 140, 26, },
++	{ 0, 1, 0, 7, 149, 30, },
++	{ 2, 1, 0, 7, 149, 26, },
++	{ 1, 1, 0, 7, 149, 63, },
++	{ 0, 1, 0, 7, 153, 30, },
++	{ 2, 1, 0, 7, 153, 26, },
++	{ 1, 1, 0, 7, 153, 63, },
++	{ 0, 1, 0, 7, 157, 30, },
++	{ 2, 1, 0, 7, 157, 26, },
++	{ 1, 1, 0, 7, 157, 63, },
++	{ 0, 1, 0, 7, 161, 30, },
++	{ 2, 1, 0, 7, 161, 26, },
++	{ 1, 1, 0, 7, 161, 63, },
++	{ 0, 1, 0, 7, 165, 30, },
++	{ 2, 1, 0, 7, 165, 26, },
++	{ 1, 1, 0, 7, 165, 63, },
++	{ 0, 1, 1, 2, 38, 30, },
++	{ 2, 1, 1, 2, 38, 32, },
++	{ 1, 1, 1, 2, 38, 32, },
++	{ 0, 1, 1, 2, 46, 30, },
++	{ 2, 1, 1, 2, 46, 32, },
++	{ 1, 1, 1, 2, 46, 32, },
++	{ 0, 1, 1, 2, 54, 32, },
++	{ 2, 1, 1, 2, 54, 32, },
++	{ 1, 1, 1, 2, 54, 32, },
++	{ 0, 1, 1, 2, 62, 32, },
++	{ 2, 1, 1, 2, 62, 32, },
++	{ 1, 1, 1, 2, 62, 32, },
++	{ 0, 1, 1, 2, 102, 28, },
++	{ 2, 1, 1, 2, 102, 32, },
++	{ 1, 1, 1, 2, 102, 32, },
++	{ 0, 1, 1, 2, 110, 32, },
++	{ 2, 1, 1, 2, 110, 32, },
++	{ 1, 1, 1, 2, 110, 32, },
++	{ 0, 1, 1, 2, 118, 36, },
++	{ 2, 1, 1, 2, 118, 32, },
++	{ 1, 1, 1, 2, 118, 32, },
++	{ 0, 1, 1, 2, 126, 34, },
++	{ 2, 1, 1, 2, 126, 32, },
++	{ 1, 1, 1, 2, 126, 32, },
++	{ 0, 1, 1, 2, 134, 32, },
++	{ 2, 1, 1, 2, 134, 32, },
++	{ 1, 1, 1, 2, 134, 32, },
++	{ 0, 1, 1, 2, 151, 36, },
++	{ 2, 1, 1, 2, 151, 32, },
++	{ 1, 1, 1, 2, 151, 63, },
++	{ 0, 1, 1, 2, 159, 36, },
++	{ 2, 1, 1, 2, 159, 32, },
++	{ 1, 1, 1, 2, 159, 63, },
++	{ 0, 1, 1, 3, 38, 28, },
++	{ 2, 1, 1, 3, 38, 30, },
++	{ 1, 1, 1, 3, 38, 30, },
++	{ 0, 1, 1, 3, 46, 28, },
++	{ 2, 1, 1, 3, 46, 30, },
++	{ 1, 1, 1, 3, 46, 30, },
++	{ 0, 1, 1, 3, 54, 30, },
++	{ 2, 1, 1, 3, 54, 30, },
++	{ 1, 1, 1, 3, 54, 30, },
++	{ 0, 1, 1, 3, 62, 30, },
++	{ 2, 1, 1, 3, 62, 30, },
++	{ 1, 1, 1, 3, 62, 30, },
++	{ 0, 1, 1, 3, 102, 26, },
++	{ 2, 1, 1, 3, 102, 30, },
++	{ 1, 1, 1, 3, 102, 30, },
++	{ 0, 1, 1, 3, 110, 30, },
++	{ 2, 1, 1, 3, 110, 30, },
++	{ 1, 1, 1, 3, 110, 30, },
++	{ 0, 1, 1, 3, 118, 34, },
++	{ 2, 1, 1, 3, 118, 30, },
++	{ 1, 1, 1, 3, 118, 30, },
++	{ 0, 1, 1, 3, 126, 32, },
++	{ 2, 1, 1, 3, 126, 30, },
++	{ 1, 1, 1, 3, 126, 30, },
++	{ 0, 1, 1, 3, 134, 30, },
++	{ 2, 1, 1, 3, 134, 30, },
++	{ 1, 1, 1, 3, 134, 30, },
++	{ 0, 1, 1, 3, 151, 34, },
++	{ 2, 1, 1, 3, 151, 30, },
++	{ 1, 1, 1, 3, 151, 63, },
++	{ 0, 1, 1, 3, 159, 34, },
++	{ 2, 1, 1, 3, 159, 30, },
++	{ 1, 1, 1, 3, 159, 63, },
++	{ 0, 1, 1, 6, 38, 26, },
++	{ 2, 1, 1, 6, 38, 28, },
++	{ 1, 1, 1, 6, 38, 28, },
++	{ 0, 1, 1, 6, 46, 26, },
++	{ 2, 1, 1, 6, 46, 28, },
++	{ 1, 1, 1, 6, 46, 28, },
++	{ 0, 1, 1, 6, 54, 28, },
++	{ 2, 1, 1, 6, 54, 28, },
++	{ 1, 1, 1, 6, 54, 28, },
++	{ 0, 1, 1, 6, 62, 28, },
++	{ 2, 1, 1, 6, 62, 28, },
++	{ 1, 1, 1, 6, 62, 28, },
++	{ 0, 1, 1, 6, 102, 24, },
++	{ 2, 1, 1, 6, 102, 28, },
++	{ 1, 1, 1, 6, 102, 28, },
++	{ 0, 1, 1, 6, 110, 28, },
++	{ 2, 1, 1, 6, 110, 28, },
++	{ 1, 1, 1, 6, 110, 28, },
++	{ 0, 1, 1, 6, 118, 32, },
++	{ 2, 1, 1, 6, 118, 28, },
++	{ 1, 1, 1, 6, 118, 28, },
++	{ 0, 1, 1, 6, 126, 30, },
++	{ 2, 1, 1, 6, 126, 28, },
++	{ 1, 1, 1, 6, 126, 28, },
++	{ 0, 1, 1, 6, 134, 28, },
++	{ 2, 1, 1, 6, 134, 28, },
++	{ 1, 1, 1, 6, 134, 28, },
++	{ 0, 1, 1, 6, 151, 32, },
++	{ 2, 1, 1, 6, 151, 28, },
++	{ 1, 1, 1, 6, 151, 63, },
++	{ 0, 1, 1, 6, 159, 32, },
++	{ 2, 1, 1, 6, 159, 28, },
++	{ 1, 1, 1, 6, 159, 63, },
++	{ 0, 1, 1, 7, 38, 24, },
++	{ 2, 1, 1, 7, 38, 26, },
++	{ 1, 1, 1, 7, 38, 26, },
++	{ 0, 1, 1, 7, 46, 24, },
++	{ 2, 1, 1, 7, 46, 26, },
++	{ 1, 1, 1, 7, 46, 26, },
++	{ 0, 1, 1, 7, 54, 26, },
++	{ 2, 1, 1, 7, 54, 26, },
++	{ 1, 1, 1, 7, 54, 26, },
++	{ 0, 1, 1, 7, 62, 26, },
++	{ 2, 1, 1, 7, 62, 26, },
++	{ 1, 1, 1, 7, 62, 26, },
++	{ 0, 1, 1, 7, 102, 22, },
++	{ 2, 1, 1, 7, 102, 26, },
++	{ 1, 1, 1, 7, 102, 26, },
++	{ 0, 1, 1, 7, 110, 26, },
++	{ 2, 1, 1, 7, 110, 26, },
++	{ 1, 1, 1, 7, 110, 26, },
++	{ 0, 1, 1, 7, 118, 30, },
++	{ 2, 1, 1, 7, 118, 26, },
++	{ 1, 1, 1, 7, 118, 26, },
++	{ 0, 1, 1, 7, 126, 28, },
++	{ 2, 1, 1, 7, 126, 26, },
++	{ 1, 1, 1, 7, 126, 26, },
++	{ 0, 1, 1, 7, 134, 26, },
++	{ 2, 1, 1, 7, 134, 26, },
++	{ 1, 1, 1, 7, 134, 26, },
++	{ 0, 1, 1, 7, 151, 30, },
++	{ 2, 1, 1, 7, 151, 26, },
++	{ 1, 1, 1, 7, 151, 63, },
++	{ 0, 1, 1, 7, 159, 30, },
++	{ 2, 1, 1, 7, 159, 26, },
++	{ 1, 1, 1, 7, 159, 63, },
++	{ 0, 1, 2, 4, 42, 30, },
++	{ 2, 1, 2, 4, 42, 32, },
++	{ 1, 1, 2, 4, 42, 32, },
++	{ 0, 1, 2, 4, 58, 28, },
++	{ 2, 1, 2, 4, 58, 32, },
++	{ 1, 1, 2, 4, 58, 32, },
++	{ 0, 1, 2, 4, 106, 30, },
++	{ 2, 1, 2, 4, 106, 32, },
++	{ 1, 1, 2, 4, 106, 32, },
++	{ 0, 1, 2, 4, 122, 34, },
++	{ 2, 1, 2, 4, 122, 32, },
++	{ 1, 1, 2, 4, 122, 32, },
++	{ 0, 1, 2, 4, 155, 36, },
++	{ 2, 1, 2, 4, 155, 32, },
++	{ 1, 1, 2, 4, 155, 63, },
++	{ 0, 1, 2, 5, 42, 28, },
++	{ 2, 1, 2, 5, 42, 30, },
++	{ 1, 1, 2, 5, 42, 30, },
++	{ 0, 1, 2, 5, 58, 26, },
++	{ 2, 1, 2, 5, 58, 30, },
++	{ 1, 1, 2, 5, 58, 30, },
++	{ 0, 1, 2, 5, 106, 28, },
++	{ 2, 1, 2, 5, 106, 30, },
++	{ 1, 1, 2, 5, 106, 30, },
++	{ 0, 1, 2, 5, 122, 32, },
++	{ 2, 1, 2, 5, 122, 30, },
++	{ 1, 1, 2, 5, 122, 30, },
++	{ 0, 1, 2, 5, 155, 34, },
++	{ 2, 1, 2, 5, 155, 30, },
++	{ 1, 1, 2, 5, 155, 63, },
++	{ 0, 1, 2, 8, 42, 26, },
++	{ 2, 1, 2, 8, 42, 28, },
++	{ 1, 1, 2, 8, 42, 28, },
++	{ 0, 1, 2, 8, 58, 24, },
++	{ 2, 1, 2, 8, 58, 28, },
++	{ 1, 1, 2, 8, 58, 28, },
++	{ 0, 1, 2, 8, 106, 26, },
++	{ 2, 1, 2, 8, 106, 28, },
++	{ 1, 1, 2, 8, 106, 28, },
++	{ 0, 1, 2, 8, 122, 30, },
++	{ 2, 1, 2, 8, 122, 28, },
++	{ 1, 1, 2, 8, 122, 28, },
++	{ 0, 1, 2, 8, 155, 32, },
++	{ 2, 1, 2, 8, 155, 28, },
++	{ 1, 1, 2, 8, 155, 63, },
++	{ 0, 1, 2, 9, 42, 24, },
++	{ 2, 1, 2, 9, 42, 26, },
++	{ 1, 1, 2, 9, 42, 26, },
++	{ 0, 1, 2, 9, 58, 22, },
++	{ 2, 1, 2, 9, 58, 26, },
++	{ 1, 1, 2, 9, 58, 26, },
++	{ 0, 1, 2, 9, 106, 24, },
++	{ 2, 1, 2, 9, 106, 26, },
++	{ 1, 1, 2, 9, 106, 26, },
++	{ 0, 1, 2, 9, 122, 28, },
++	{ 2, 1, 2, 9, 122, 26, },
++	{ 1, 1, 2, 9, 122, 26, },
++	{ 0, 1, 2, 9, 155, 30, },
++	{ 2, 1, 2, 9, 155, 26, },
++	{ 1, 1, 2, 9, 155, 63, },
++};
++
++RTW_DECL_TABLE_TXPWR_LMT(rtw8814a_txpwr_lmt);
++
++static const struct rtw_txpwr_lmt_cfg_pair rtw8814a_txpwr_lmt_type0[] = {
++	{ 0, 0, 0, 0, 1, 32, },
++	{ 2, 0, 0, 0, 1, 32, },
++	{ 1, 0, 0, 0, 1, 32, },
++	{ 0, 0, 0, 0, 2, 32, },
++	{ 2, 0, 0, 0, 2, 32, },
++	{ 1, 0, 0, 0, 2, 32, },
++	{ 0, 0, 0, 0, 3, 32, },
++	{ 2, 0, 0, 0, 3, 32, },
++	{ 1, 0, 0, 0, 3, 32, },
++	{ 0, 0, 0, 0, 4, 32, },
++	{ 2, 0, 0, 0, 4, 32, },
++	{ 1, 0, 0, 0, 4, 32, },
++	{ 0, 0, 0, 0, 5, 32, },
++	{ 2, 0, 0, 0, 5, 32, },
++	{ 1, 0, 0, 0, 5, 32, },
++	{ 0, 0, 0, 0, 6, 32, },
++	{ 2, 0, 0, 0, 6, 32, },
++	{ 1, 0, 0, 0, 6, 32, },
++	{ 0, 0, 0, 0, 7, 32, },
++	{ 2, 0, 0, 0, 7, 32, },
++	{ 1, 0, 0, 0, 7, 32, },
++	{ 0, 0, 0, 0, 8, 32, },
++	{ 2, 0, 0, 0, 8, 32, },
++	{ 1, 0, 0, 0, 8, 32, },
++	{ 0, 0, 0, 0, 9, 32, },
++	{ 2, 0, 0, 0, 9, 32, },
++	{ 1, 0, 0, 0, 9, 32, },
++	{ 0, 0, 0, 0, 10, 32, },
++	{ 2, 0, 0, 0, 10, 32, },
++	{ 1, 0, 0, 0, 10, 32, },
++	{ 0, 0, 0, 0, 11, 32, },
++	{ 2, 0, 0, 0, 11, 32, },
++	{ 1, 0, 0, 0, 11, 32, },
++	{ 0, 0, 0, 0, 12, 24, },
++	{ 2, 0, 0, 0, 12, 32, },
++	{ 1, 0, 0, 0, 12, 32, },
++	{ 0, 0, 0, 0, 13, 16, },
++	{ 2, 0, 0, 0, 13, 32, },
++	{ 1, 0, 0, 0, 13, 32, },
++	{ 0, 0, 0, 0, 14, 63, },
++	{ 2, 0, 0, 0, 14, 63, },
++	{ 1, 0, 0, 0, 14, 32, },
++	{ 0, 0, 0, 1, 1, 28, },
++	{ 2, 0, 0, 1, 1, 32, },
++	{ 1, 0, 0, 1, 1, 32, },
++	{ 0, 0, 0, 1, 2, 32, },
++	{ 2, 0, 0, 1, 2, 32, },
++	{ 1, 0, 0, 1, 2, 32, },
++	{ 0, 0, 0, 1, 3, 32, },
++	{ 2, 0, 0, 1, 3, 32, },
++	{ 1, 0, 0, 1, 3, 32, },
++	{ 0, 0, 0, 1, 4, 32, },
++	{ 2, 0, 0, 1, 4, 32, },
++	{ 1, 0, 0, 1, 4, 32, },
++	{ 0, 0, 0, 1, 5, 32, },
++	{ 2, 0, 0, 1, 5, 32, },
++	{ 1, 0, 0, 1, 5, 32, },
++	{ 0, 0, 0, 1, 6, 32, },
++	{ 2, 0, 0, 1, 6, 32, },
++	{ 1, 0, 0, 1, 6, 32, },
++	{ 0, 0, 0, 1, 7, 32, },
++	{ 2, 0, 0, 1, 7, 32, },
++	{ 1, 0, 0, 1, 7, 32, },
++	{ 0, 0, 0, 1, 8, 32, },
++	{ 2, 0, 0, 1, 8, 32, },
++	{ 1, 0, 0, 1, 8, 32, },
++	{ 0, 0, 0, 1, 9, 32, },
++	{ 2, 0, 0, 1, 9, 32, },
++	{ 1, 0, 0, 1, 9, 32, },
++	{ 0, 0, 0, 1, 10, 32, },
++	{ 2, 0, 0, 1, 10, 32, },
++	{ 1, 0, 0, 1, 10, 32, },
++	{ 0, 0, 0, 1, 11, 28, },
++	{ 2, 0, 0, 1, 11, 32, },
++	{ 1, 0, 0, 1, 11, 32, },
++	{ 0, 0, 0, 1, 12, 18, },
++	{ 2, 0, 0, 1, 12, 32, },
++	{ 1, 0, 0, 1, 12, 32, },
++	{ 0, 0, 0, 1, 13, 8, },
++	{ 2, 0, 0, 1, 13, 32, },
++	{ 1, 0, 0, 1, 13, 32, },
++	{ 0, 0, 0, 1, 14, 63, },
++	{ 2, 0, 0, 1, 14, 63, },
++	{ 1, 0, 0, 1, 14, 63, },
++	{ 0, 0, 0, 2, 1, 26, },
++	{ 2, 0, 0, 2, 1, 32, },
++	{ 1, 0, 0, 2, 1, 32, },
++	{ 0, 0, 0, 2, 2, 32, },
++	{ 2, 0, 0, 2, 2, 32, },
++	{ 1, 0, 0, 2, 2, 32, },
++	{ 0, 0, 0, 2, 3, 32, },
++	{ 2, 0, 0, 2, 3, 32, },
++	{ 1, 0, 0, 2, 3, 32, },
++	{ 0, 0, 0, 2, 4, 32, },
++	{ 2, 0, 0, 2, 4, 32, },
++	{ 1, 0, 0, 2, 4, 32, },
++	{ 0, 0, 0, 2, 5, 32, },
++	{ 2, 0, 0, 2, 5, 32, },
++	{ 1, 0, 0, 2, 5, 32, },
++	{ 0, 0, 0, 2, 6, 32, },
++	{ 2, 0, 0, 2, 6, 32, },
++	{ 1, 0, 0, 2, 6, 32, },
++	{ 0, 0, 0, 2, 7, 32, },
++	{ 2, 0, 0, 2, 7, 32, },
++	{ 1, 0, 0, 2, 7, 32, },
++	{ 0, 0, 0, 2, 8, 32, },
++	{ 2, 0, 0, 2, 8, 32, },
++	{ 1, 0, 0, 2, 8, 32, },
++	{ 0, 0, 0, 2, 9, 32, },
++	{ 2, 0, 0, 2, 9, 32, },
++	{ 1, 0, 0, 2, 9, 32, },
++	{ 0, 0, 0, 2, 10, 32, },
++	{ 2, 0, 0, 2, 10, 32, },
++	{ 1, 0, 0, 2, 10, 32, },
++	{ 0, 0, 0, 2, 11, 26, },
++	{ 2, 0, 0, 2, 11, 32, },
++	{ 1, 0, 0, 2, 11, 32, },
++	{ 0, 0, 0, 2, 12, 16, },
++	{ 2, 0, 0, 2, 12, 32, },
++	{ 1, 0, 0, 2, 12, 32, },
++	{ 0, 0, 0, 2, 13, 6, },
++	{ 2, 0, 0, 2, 13, 32, },
++	{ 1, 0, 0, 2, 13, 32, },
++	{ 0, 0, 0, 2, 14, 63, },
++	{ 2, 0, 0, 2, 14, 63, },
++	{ 1, 0, 0, 2, 14, 63, },
++	{ 0, 0, 0, 3, 1, 24, },
++	{ 2, 0, 0, 3, 1, 30, },
++	{ 1, 0, 0, 3, 1, 30, },
++	{ 0, 0, 0, 3, 2, 30, },
++	{ 2, 0, 0, 3, 2, 30, },
++	{ 1, 0, 0, 3, 2, 30, },
++	{ 0, 0, 0, 3, 3, 30, },
++	{ 2, 0, 0, 3, 3, 30, },
++	{ 1, 0, 0, 3, 3, 30, },
++	{ 0, 0, 0, 3, 4, 30, },
++	{ 2, 0, 0, 3, 4, 30, },
++	{ 1, 0, 0, 3, 4, 30, },
++	{ 0, 0, 0, 3, 5, 30, },
++	{ 2, 0, 0, 3, 5, 30, },
++	{ 1, 0, 0, 3, 5, 30, },
++	{ 0, 0, 0, 3, 6, 30, },
++	{ 2, 0, 0, 3, 6, 30, },
++	{ 1, 0, 0, 3, 6, 30, },
++	{ 0, 0, 0, 3, 7, 30, },
++	{ 2, 0, 0, 3, 7, 30, },
++	{ 1, 0, 0, 3, 7, 30, },
++	{ 0, 0, 0, 3, 8, 30, },
++	{ 2, 0, 0, 3, 8, 30, },
++	{ 1, 0, 0, 3, 8, 30, },
++	{ 0, 0, 0, 3, 9, 30, },
++	{ 2, 0, 0, 3, 9, 30, },
++	{ 1, 0, 0, 3, 9, 30, },
++	{ 0, 0, 0, 3, 10, 30, },
++	{ 2, 0, 0, 3, 10, 30, },
++	{ 1, 0, 0, 3, 10, 30, },
++	{ 0, 0, 0, 3, 11, 24, },
++	{ 2, 0, 0, 3, 11, 30, },
++	{ 1, 0, 0, 3, 11, 30, },
++	{ 0, 0, 0, 3, 12, 14, },
++	{ 2, 0, 0, 3, 12, 30, },
++	{ 1, 0, 0, 3, 12, 30, },
++	{ 0, 0, 0, 3, 13, 4, },
++	{ 2, 0, 0, 3, 13, 30, },
++	{ 1, 0, 0, 3, 13, 30, },
++	{ 0, 0, 0, 3, 14, 63, },
++	{ 2, 0, 0, 3, 14, 63, },
++	{ 1, 0, 0, 3, 14, 63, },
++	{ 0, 0, 0, 6, 1, 22, },
++	{ 2, 0, 0, 6, 1, 28, },
++	{ 1, 0, 0, 6, 1, 28, },
++	{ 0, 0, 0, 6, 2, 28, },
++	{ 2, 0, 0, 6, 2, 28, },
++	{ 1, 0, 0, 6, 2, 28, },
++	{ 0, 0, 0, 6, 3, 28, },
++	{ 2, 0, 0, 6, 3, 28, },
++	{ 1, 0, 0, 6, 3, 28, },
++	{ 0, 0, 0, 6, 4, 28, },
++	{ 2, 0, 0, 6, 4, 28, },
++	{ 1, 0, 0, 6, 4, 28, },
++	{ 0, 0, 0, 6, 5, 28, },
++	{ 2, 0, 0, 6, 5, 28, },
++	{ 1, 0, 0, 6, 5, 28, },
++	{ 0, 0, 0, 6, 6, 28, },
++	{ 2, 0, 0, 6, 6, 28, },
++	{ 1, 0, 0, 6, 6, 28, },
++	{ 0, 0, 0, 6, 7, 28, },
++	{ 2, 0, 0, 6, 7, 28, },
++	{ 1, 0, 0, 6, 7, 28, },
++	{ 0, 0, 0, 6, 8, 28, },
++	{ 2, 0, 0, 6, 8, 28, },
++	{ 1, 0, 0, 6, 8, 28, },
++	{ 0, 0, 0, 6, 9, 28, },
++	{ 2, 0, 0, 6, 9, 28, },
++	{ 1, 0, 0, 6, 9, 28, },
++	{ 0, 0, 0, 6, 10, 28, },
++	{ 2, 0, 0, 6, 10, 28, },
++	{ 1, 0, 0, 6, 10, 28, },
++	{ 0, 0, 0, 6, 11, 22, },
++	{ 2, 0, 0, 6, 11, 28, },
++	{ 1, 0, 0, 6, 11, 28, },
++	{ 0, 0, 0, 6, 12, 14, },
++	{ 2, 0, 0, 6, 12, 28, },
++	{ 1, 0, 0, 6, 12, 28, },
++	{ 0, 0, 0, 6, 13, 4, },
++	{ 2, 0, 0, 6, 13, 28, },
++	{ 1, 0, 0, 6, 13, 28, },
++	{ 0, 0, 0, 6, 14, 63, },
++	{ 2, 0, 0, 6, 14, 63, },
++	{ 1, 0, 0, 6, 14, 63, },
++	{ 0, 0, 0, 7, 1, 20, },
++	{ 2, 0, 0, 7, 1, 26, },
++	{ 1, 0, 0, 7, 1, 26, },
++	{ 0, 0, 0, 7, 2, 26, },
++	{ 2, 0, 0, 7, 2, 26, },
++	{ 1, 0, 0, 7, 2, 26, },
++	{ 0, 0, 0, 7, 3, 26, },
++	{ 2, 0, 0, 7, 3, 26, },
++	{ 1, 0, 0, 7, 3, 26, },
++	{ 0, 0, 0, 7, 4, 26, },
++	{ 2, 0, 0, 7, 4, 26, },
++	{ 1, 0, 0, 7, 4, 26, },
++	{ 0, 0, 0, 7, 5, 26, },
++	{ 2, 0, 0, 7, 5, 26, },
++	{ 1, 0, 0, 7, 5, 26, },
++	{ 0, 0, 0, 7, 6, 26, },
++	{ 2, 0, 0, 7, 6, 26, },
++	{ 1, 0, 0, 7, 6, 26, },
++	{ 0, 0, 0, 7, 7, 26, },
++	{ 2, 0, 0, 7, 7, 26, },
++	{ 1, 0, 0, 7, 7, 26, },
++	{ 0, 0, 0, 7, 8, 26, },
++	{ 2, 0, 0, 7, 8, 26, },
++	{ 1, 0, 0, 7, 8, 26, },
++	{ 0, 0, 0, 7, 9, 26, },
++	{ 2, 0, 0, 7, 9, 26, },
++	{ 1, 0, 0, 7, 9, 26, },
++	{ 0, 0, 0, 7, 10, 26, },
++	{ 2, 0, 0, 7, 10, 26, },
++	{ 1, 0, 0, 7, 10, 26, },
++	{ 0, 0, 0, 7, 11, 20, },
++	{ 2, 0, 0, 7, 11, 26, },
++	{ 1, 0, 0, 7, 11, 26, },
++	{ 0, 0, 0, 7, 12, 14, },
++	{ 2, 0, 0, 7, 12, 26, },
++	{ 1, 0, 0, 7, 12, 26, },
++	{ 0, 0, 0, 7, 13, 4, },
++	{ 2, 0, 0, 7, 13, 26, },
++	{ 1, 0, 0, 7, 13, 26, },
++	{ 0, 0, 0, 7, 14, 63, },
++	{ 2, 0, 0, 7, 14, 63, },
++	{ 1, 0, 0, 7, 14, 63, },
++	{ 0, 0, 1, 2, 1, 63, },
++	{ 2, 0, 1, 2, 1, 63, },
++	{ 1, 0, 1, 2, 1, 63, },
++	{ 0, 0, 1, 2, 2, 63, },
++	{ 2, 0, 1, 2, 2, 63, },
++	{ 1, 0, 1, 2, 2, 63, },
++	{ 0, 0, 1, 2, 3, 26, },
++	{ 2, 0, 1, 2, 3, 32, },
++	{ 1, 0, 1, 2, 3, 32, },
++	{ 0, 0, 1, 2, 4, 32, },
++	{ 2, 0, 1, 2, 4, 32, },
++	{ 1, 0, 1, 2, 4, 32, },
++	{ 0, 0, 1, 2, 5, 32, },
++	{ 2, 0, 1, 2, 5, 32, },
++	{ 1, 0, 1, 2, 5, 32, },
++	{ 0, 0, 1, 2, 6, 32, },
++	{ 2, 0, 1, 2, 6, 32, },
++	{ 1, 0, 1, 2, 6, 32, },
++	{ 0, 0, 1, 2, 7, 32, },
++	{ 2, 0, 1, 2, 7, 32, },
++	{ 1, 0, 1, 2, 7, 32, },
++	{ 0, 0, 1, 2, 8, 32, },
++	{ 2, 0, 1, 2, 8, 32, },
++	{ 1, 0, 1, 2, 8, 32, },
++	{ 0, 0, 1, 2, 9, 32, },
++	{ 2, 0, 1, 2, 9, 32, },
++	{ 1, 0, 1, 2, 9, 32, },
++	{ 0, 0, 1, 2, 10, 32, },
++	{ 2, 0, 1, 2, 10, 32, },
++	{ 1, 0, 1, 2, 10, 32, },
++	{ 0, 0, 1, 2, 11, 26, },
++	{ 2, 0, 1, 2, 11, 32, },
++	{ 1, 0, 1, 2, 11, 32, },
++	{ 0, 0, 1, 2, 12, 16, },
++	{ 2, 0, 1, 2, 12, 32, },
++	{ 1, 0, 1, 2, 12, 32, },
++	{ 0, 0, 1, 2, 13, 10, },
++	{ 2, 0, 1, 2, 13, 32, },
++	{ 1, 0, 1, 2, 13, 32, },
++	{ 0, 0, 1, 2, 14, 63, },
++	{ 2, 0, 1, 2, 14, 63, },
++	{ 1, 0, 1, 2, 14, 63, },
++	{ 0, 0, 1, 3, 1, 63, },
++	{ 2, 0, 1, 3, 1, 63, },
++	{ 1, 0, 1, 3, 1, 63, },
++	{ 0, 0, 1, 3, 2, 63, },
++	{ 2, 0, 1, 3, 2, 63, },
++	{ 1, 0, 1, 3, 2, 63, },
++	{ 0, 0, 1, 3, 3, 24, },
++	{ 2, 0, 1, 3, 3, 30, },
++	{ 1, 0, 1, 3, 3, 30, },
++	{ 0, 0, 1, 3, 4, 30, },
++	{ 2, 0, 1, 3, 4, 30, },
++	{ 1, 0, 1, 3, 4, 30, },
++	{ 0, 0, 1, 3, 5, 30, },
++	{ 2, 0, 1, 3, 5, 30, },
++	{ 1, 0, 1, 3, 5, 30, },
++	{ 0, 0, 1, 3, 6, 30, },
++	{ 2, 0, 1, 3, 6, 30, },
++	{ 1, 0, 1, 3, 6, 30, },
++	{ 0, 0, 1, 3, 7, 30, },
++	{ 2, 0, 1, 3, 7, 30, },
++	{ 1, 0, 1, 3, 7, 30, },
++	{ 0, 0, 1, 3, 8, 30, },
++	{ 2, 0, 1, 3, 8, 30, },
++	{ 1, 0, 1, 3, 8, 30, },
++	{ 0, 0, 1, 3, 9, 30, },
++	{ 2, 0, 1, 3, 9, 30, },
++	{ 1, 0, 1, 3, 9, 30, },
++	{ 0, 0, 1, 3, 10, 30, },
++	{ 2, 0, 1, 3, 10, 30, },
++	{ 1, 0, 1, 3, 10, 30, },
++	{ 0, 0, 1, 3, 11, 24, },
++	{ 2, 0, 1, 3, 11, 30, },
++	{ 1, 0, 1, 3, 11, 30, },
++	{ 0, 0, 1, 3, 12, 14, },
++	{ 2, 0, 1, 3, 12, 30, },
++	{ 1, 0, 1, 3, 12, 30, },
++	{ 0, 0, 1, 3, 13, 8, },
++	{ 2, 0, 1, 3, 13, 30, },
++	{ 1, 0, 1, 3, 13, 30, },
++	{ 0, 0, 1, 3, 14, 63, },
++	{ 2, 0, 1, 3, 14, 63, },
++	{ 1, 0, 1, 3, 14, 63, },
++	{ 0, 0, 1, 6, 1, 63, },
++	{ 2, 0, 1, 6, 1, 63, },
++	{ 1, 0, 1, 6, 1, 63, },
++	{ 0, 0, 1, 6, 2, 63, },
++	{ 2, 0, 1, 6, 2, 63, },
++	{ 1, 0, 1, 6, 2, 63, },
++	{ 0, 0, 1, 6, 3, 22, },
++	{ 2, 0, 1, 6, 3, 28, },
++	{ 1, 0, 1, 6, 3, 28, },
++	{ 0, 0, 1, 6, 4, 28, },
++	{ 2, 0, 1, 6, 4, 28, },
++	{ 1, 0, 1, 6, 4, 28, },
++	{ 0, 0, 1, 6, 5, 28, },
++	{ 2, 0, 1, 6, 5, 28, },
++	{ 1, 0, 1, 6, 5, 28, },
++	{ 0, 0, 1, 6, 6, 28, },
++	{ 2, 0, 1, 6, 6, 28, },
++	{ 1, 0, 1, 6, 6, 28, },
++	{ 0, 0, 1, 6, 7, 28, },
++	{ 2, 0, 1, 6, 7, 28, },
++	{ 1, 0, 1, 6, 7, 28, },
++	{ 0, 0, 1, 6, 8, 28, },
++	{ 2, 0, 1, 6, 8, 28, },
++	{ 1, 0, 1, 6, 8, 28, },
++	{ 0, 0, 1, 6, 9, 28, },
++	{ 2, 0, 1, 6, 9, 28, },
++	{ 1, 0, 1, 6, 9, 28, },
++	{ 0, 0, 1, 6, 10, 28, },
++	{ 2, 0, 1, 6, 10, 28, },
++	{ 1, 0, 1, 6, 10, 28, },
++	{ 0, 0, 1, 6, 11, 22, },
++	{ 2, 0, 1, 6, 11, 28, },
++	{ 1, 0, 1, 6, 11, 28, },
++	{ 0, 0, 1, 6, 12, 14, },
++	{ 2, 0, 1, 6, 12, 28, },
++	{ 1, 0, 1, 6, 12, 28, },
++	{ 0, 0, 1, 6, 13, 8, },
++	{ 2, 0, 1, 6, 13, 28, },
++	{ 1, 0, 1, 6, 13, 28, },
++	{ 0, 0, 1, 6, 14, 63, },
++	{ 2, 0, 1, 6, 14, 63, },
++	{ 1, 0, 1, 6, 14, 63, },
++	{ 0, 0, 1, 7, 1, 63, },
++	{ 2, 0, 1, 7, 1, 63, },
++	{ 1, 0, 1, 7, 1, 63, },
++	{ 0, 0, 1, 7, 2, 63, },
++	{ 2, 0, 1, 7, 2, 63, },
++	{ 1, 0, 1, 7, 2, 63, },
++	{ 0, 0, 1, 7, 3, 20, },
++	{ 2, 0, 1, 7, 3, 26, },
++	{ 1, 0, 1, 7, 3, 26, },
++	{ 0, 0, 1, 7, 4, 26, },
++	{ 2, 0, 1, 7, 4, 26, },
++	{ 1, 0, 1, 7, 4, 26, },
++	{ 0, 0, 1, 7, 5, 26, },
++	{ 2, 0, 1, 7, 5, 26, },
++	{ 1, 0, 1, 7, 5, 26, },
++	{ 0, 0, 1, 7, 6, 26, },
++	{ 2, 0, 1, 7, 6, 26, },
++	{ 1, 0, 1, 7, 6, 26, },
++	{ 0, 0, 1, 7, 7, 26, },
++	{ 2, 0, 1, 7, 7, 26, },
++	{ 1, 0, 1, 7, 7, 26, },
++	{ 0, 0, 1, 7, 8, 26, },
++	{ 2, 0, 1, 7, 8, 26, },
++	{ 1, 0, 1, 7, 8, 26, },
++	{ 0, 0, 1, 7, 9, 26, },
++	{ 2, 0, 1, 7, 9, 26, },
++	{ 1, 0, 1, 7, 9, 26, },
++	{ 0, 0, 1, 7, 10, 26, },
++	{ 2, 0, 1, 7, 10, 26, },
++	{ 1, 0, 1, 7, 10, 26, },
++	{ 0, 0, 1, 7, 11, 20, },
++	{ 2, 0, 1, 7, 11, 26, },
++	{ 1, 0, 1, 7, 11, 26, },
++	{ 0, 0, 1, 7, 12, 14, },
++	{ 2, 0, 1, 7, 12, 26, },
++	{ 1, 0, 1, 7, 12, 26, },
++	{ 0, 0, 1, 7, 13, 8, },
++	{ 2, 0, 1, 7, 13, 26, },
++	{ 1, 0, 1, 7, 13, 26, },
++	{ 0, 0, 1, 7, 14, 63, },
++	{ 2, 0, 1, 7, 14, 63, },
++	{ 1, 0, 1, 7, 14, 63, },
++	{ 0, 1, 0, 1, 36, 28, },
++	{ 2, 1, 0, 1, 36, 32, },
++	{ 1, 1, 0, 1, 36, 32, },
++	{ 0, 1, 0, 1, 40, 32, },
++	{ 2, 1, 0, 1, 40, 32, },
++	{ 1, 1, 0, 1, 40, 32, },
++	{ 0, 1, 0, 1, 44, 32, },
++	{ 2, 1, 0, 1, 44, 32, },
++	{ 1, 1, 0, 1, 44, 32, },
++	{ 0, 1, 0, 1, 48, 32, },
++	{ 2, 1, 0, 1, 48, 32, },
++	{ 1, 1, 0, 1, 48, 32, },
++	{ 0, 1, 0, 1, 52, 32, },
++	{ 2, 1, 0, 1, 52, 32, },
++	{ 1, 1, 0, 1, 52, 32, },
++	{ 0, 1, 0, 1, 56, 32, },
++	{ 2, 1, 0, 1, 56, 32, },
++	{ 1, 1, 0, 1, 56, 32, },
++	{ 0, 1, 0, 1, 60, 32, },
++	{ 2, 1, 0, 1, 60, 32, },
++	{ 1, 1, 0, 1, 60, 32, },
++	{ 0, 1, 0, 1, 64, 28, },
++	{ 2, 1, 0, 1, 64, 32, },
++	{ 1, 1, 0, 1, 64, 32, },
++	{ 0, 1, 0, 1, 100, 28, },
++	{ 2, 1, 0, 1, 100, 32, },
++	{ 1, 1, 0, 1, 100, 32, },
++	{ 0, 1, 0, 1, 104, 32, },
++	{ 2, 1, 0, 1, 104, 32, },
++	{ 1, 1, 0, 1, 104, 32, },
++	{ 0, 1, 0, 1, 108, 32, },
++	{ 2, 1, 0, 1, 108, 32, },
++	{ 1, 1, 0, 1, 108, 32, },
++	{ 0, 1, 0, 1, 112, 32, },
++	{ 2, 1, 0, 1, 112, 32, },
++	{ 1, 1, 0, 1, 112, 32, },
++	{ 0, 1, 0, 1, 116, 32, },
++	{ 2, 1, 0, 1, 116, 32, },
++	{ 1, 1, 0, 1, 116, 32, },
++	{ 0, 1, 0, 1, 120, 32, },
++	{ 2, 1, 0, 1, 120, 32, },
++	{ 1, 1, 0, 1, 120, 32, },
++	{ 0, 1, 0, 1, 124, 32, },
++	{ 2, 1, 0, 1, 124, 32, },
++	{ 1, 1, 0, 1, 124, 32, },
++	{ 0, 1, 0, 1, 128, 32, },
++	{ 2, 1, 0, 1, 128, 32, },
++	{ 1, 1, 0, 1, 128, 32, },
++	{ 0, 1, 0, 1, 132, 32, },
++	{ 2, 1, 0, 1, 132, 32, },
++	{ 1, 1, 0, 1, 132, 32, },
++	{ 0, 1, 0, 1, 136, 32, },
++	{ 2, 1, 0, 1, 136, 32, },
++	{ 1, 1, 0, 1, 136, 32, },
++	{ 0, 1, 0, 1, 140, 28, },
++	{ 2, 1, 0, 1, 140, 32, },
++	{ 1, 1, 0, 1, 140, 32, },
++	{ 0, 1, 0, 1, 149, 28, },
++	{ 2, 1, 0, 1, 149, 32, },
++	{ 1, 1, 0, 1, 149, 63, },
++	{ 0, 1, 0, 1, 153, 32, },
++	{ 2, 1, 0, 1, 153, 32, },
++	{ 1, 1, 0, 1, 153, 63, },
++	{ 0, 1, 0, 1, 157, 32, },
++	{ 2, 1, 0, 1, 157, 32, },
++	{ 1, 1, 0, 1, 157, 63, },
++	{ 0, 1, 0, 1, 161, 32, },
++	{ 2, 1, 0, 1, 161, 32, },
++	{ 1, 1, 0, 1, 161, 63, },
++	{ 0, 1, 0, 1, 165, 32, },
++	{ 2, 1, 0, 1, 165, 32, },
++	{ 1, 1, 0, 1, 165, 63, },
++	{ 0, 1, 0, 2, 36, 26, },
++	{ 2, 1, 0, 2, 36, 32, },
++	{ 1, 1, 0, 2, 36, 32, },
++	{ 0, 1, 0, 2, 40, 32, },
++	{ 2, 1, 0, 2, 40, 32, },
++	{ 1, 1, 0, 2, 40, 32, },
++	{ 0, 1, 0, 2, 44, 32, },
++	{ 2, 1, 0, 2, 44, 32, },
++	{ 1, 1, 0, 2, 44, 32, },
++	{ 0, 1, 0, 2, 48, 32, },
++	{ 2, 1, 0, 2, 48, 32, },
++	{ 1, 1, 0, 2, 48, 32, },
++	{ 0, 1, 0, 2, 52, 32, },
++	{ 2, 1, 0, 2, 52, 32, },
++	{ 1, 1, 0, 2, 52, 32, },
++	{ 0, 1, 0, 2, 56, 32, },
++	{ 2, 1, 0, 2, 56, 32, },
++	{ 1, 1, 0, 2, 56, 32, },
++	{ 0, 1, 0, 2, 60, 32, },
++	{ 2, 1, 0, 2, 60, 32, },
++	{ 1, 1, 0, 2, 60, 32, },
++	{ 0, 1, 0, 2, 64, 26, },
++	{ 2, 1, 0, 2, 64, 32, },
++	{ 1, 1, 0, 2, 64, 32, },
++	{ 0, 1, 0, 2, 100, 26, },
++	{ 2, 1, 0, 2, 100, 32, },
++	{ 1, 1, 0, 2, 100, 32, },
++	{ 0, 1, 0, 2, 104, 32, },
++	{ 2, 1, 0, 2, 104, 32, },
++	{ 1, 1, 0, 2, 104, 32, },
++	{ 0, 1, 0, 2, 108, 32, },
++	{ 2, 1, 0, 2, 108, 32, },
++	{ 1, 1, 0, 2, 108, 32, },
++	{ 0, 1, 0, 2, 112, 32, },
++	{ 2, 1, 0, 2, 112, 32, },
++	{ 1, 1, 0, 2, 112, 32, },
++	{ 0, 1, 0, 2, 116, 32, },
++	{ 2, 1, 0, 2, 116, 32, },
++	{ 1, 1, 0, 2, 116, 32, },
++	{ 0, 1, 0, 2, 120, 32, },
++	{ 2, 1, 0, 2, 120, 32, },
++	{ 1, 1, 0, 2, 120, 32, },
++	{ 0, 1, 0, 2, 124, 32, },
++	{ 2, 1, 0, 2, 124, 32, },
++	{ 1, 1, 0, 2, 124, 32, },
++	{ 0, 1, 0, 2, 128, 32, },
++	{ 2, 1, 0, 2, 128, 32, },
++	{ 1, 1, 0, 2, 128, 32, },
++	{ 0, 1, 0, 2, 132, 32, },
++	{ 2, 1, 0, 2, 132, 32, },
++	{ 1, 1, 0, 2, 132, 32, },
++	{ 0, 1, 0, 2, 136, 32, },
++	{ 2, 1, 0, 2, 136, 32, },
++	{ 1, 1, 0, 2, 136, 32, },
++	{ 0, 1, 0, 2, 140, 26, },
++	{ 2, 1, 0, 2, 140, 32, },
++	{ 1, 1, 0, 2, 140, 32, },
++	{ 0, 1, 0, 2, 149, 26, },
++	{ 2, 1, 0, 2, 149, 32, },
++	{ 1, 1, 0, 2, 149, 63, },
++	{ 0, 1, 0, 2, 153, 32, },
++	{ 2, 1, 0, 2, 153, 32, },
++	{ 1, 1, 0, 2, 153, 63, },
++	{ 0, 1, 0, 2, 157, 32, },
++	{ 2, 1, 0, 2, 157, 32, },
++	{ 1, 1, 0, 2, 157, 63, },
++	{ 0, 1, 0, 2, 161, 32, },
++	{ 2, 1, 0, 2, 161, 32, },
++	{ 1, 1, 0, 2, 161, 63, },
++	{ 0, 1, 0, 2, 165, 32, },
++	{ 2, 1, 0, 2, 165, 32, },
++	{ 1, 1, 0, 2, 165, 63, },
++	{ 0, 1, 0, 3, 36, 24, },
++	{ 2, 1, 0, 3, 36, 28, },
++	{ 1, 1, 0, 3, 36, 28, },
++	{ 0, 1, 0, 3, 40, 28, },
++	{ 2, 1, 0, 3, 40, 28, },
++	{ 1, 1, 0, 3, 40, 28, },
++	{ 0, 1, 0, 3, 44, 28, },
++	{ 2, 1, 0, 3, 44, 28, },
++	{ 1, 1, 0, 3, 44, 28, },
++	{ 0, 1, 0, 3, 48, 28, },
++	{ 2, 1, 0, 3, 48, 28, },
++	{ 1, 1, 0, 3, 48, 28, },
++	{ 0, 1, 0, 3, 52, 28, },
++	{ 2, 1, 0, 3, 52, 28, },
++	{ 1, 1, 0, 3, 52, 28, },
++	{ 0, 1, 0, 3, 56, 28, },
++	{ 2, 1, 0, 3, 56, 28, },
++	{ 1, 1, 0, 3, 56, 28, },
++	{ 0, 1, 0, 3, 60, 28, },
++	{ 2, 1, 0, 3, 60, 28, },
++	{ 1, 1, 0, 3, 60, 28, },
++	{ 0, 1, 0, 3, 64, 24, },
++	{ 2, 1, 0, 3, 64, 28, },
++	{ 1, 1, 0, 3, 64, 28, },
++	{ 0, 1, 0, 3, 100, 24, },
++	{ 2, 1, 0, 3, 100, 28, },
++	{ 1, 1, 0, 3, 100, 28, },
++	{ 0, 1, 0, 3, 104, 28, },
++	{ 2, 1, 0, 3, 104, 28, },
++	{ 1, 1, 0, 3, 104, 28, },
++	{ 0, 1, 0, 3, 108, 28, },
++	{ 2, 1, 0, 3, 108, 28, },
++	{ 1, 1, 0, 3, 108, 28, },
++	{ 0, 1, 0, 3, 112, 28, },
++	{ 2, 1, 0, 3, 112, 28, },
++	{ 1, 1, 0, 3, 112, 28, },
++	{ 0, 1, 0, 3, 116, 28, },
++	{ 2, 1, 0, 3, 116, 28, },
++	{ 1, 1, 0, 3, 116, 28, },
++	{ 0, 1, 0, 3, 120, 28, },
++	{ 2, 1, 0, 3, 120, 28, },
++	{ 1, 1, 0, 3, 120, 28, },
++	{ 0, 1, 0, 3, 124, 28, },
++	{ 2, 1, 0, 3, 124, 28, },
++	{ 1, 1, 0, 3, 124, 28, },
++	{ 0, 1, 0, 3, 128, 28, },
++	{ 2, 1, 0, 3, 128, 28, },
++	{ 1, 1, 0, 3, 128, 28, },
++	{ 0, 1, 0, 3, 132, 28, },
++	{ 2, 1, 0, 3, 132, 28, },
++	{ 1, 1, 0, 3, 132, 28, },
++	{ 0, 1, 0, 3, 136, 28, },
++	{ 2, 1, 0, 3, 136, 28, },
++	{ 1, 1, 0, 3, 136, 28, },
++	{ 0, 1, 0, 3, 140, 24, },
++	{ 2, 1, 0, 3, 140, 28, },
++	{ 1, 1, 0, 3, 140, 28, },
++	{ 0, 1, 0, 3, 149, 24, },
++	{ 2, 1, 0, 3, 149, 28, },
++	{ 1, 1, 0, 3, 149, 63, },
++	{ 0, 1, 0, 3, 153, 28, },
++	{ 2, 1, 0, 3, 153, 28, },
++	{ 1, 1, 0, 3, 153, 63, },
++	{ 0, 1, 0, 3, 157, 28, },
++	{ 2, 1, 0, 3, 157, 28, },
++	{ 1, 1, 0, 3, 157, 63, },
++	{ 0, 1, 0, 3, 161, 28, },
++	{ 2, 1, 0, 3, 161, 28, },
++	{ 1, 1, 0, 3, 161, 63, },
++	{ 0, 1, 0, 3, 165, 28, },
++	{ 2, 1, 0, 3, 165, 28, },
++	{ 1, 1, 0, 3, 165, 63, },
++	{ 0, 1, 0, 6, 36, 22, },
++	{ 2, 1, 0, 6, 36, 26, },
++	{ 1, 1, 0, 6, 36, 26, },
++	{ 0, 1, 0, 6, 40, 26, },
++	{ 2, 1, 0, 6, 40, 26, },
++	{ 1, 1, 0, 6, 40, 26, },
++	{ 0, 1, 0, 6, 44, 26, },
++	{ 2, 1, 0, 6, 44, 26, },
++	{ 1, 1, 0, 6, 44, 26, },
++	{ 0, 1, 0, 6, 48, 26, },
++	{ 2, 1, 0, 6, 48, 26, },
++	{ 1, 1, 0, 6, 48, 26, },
++	{ 0, 1, 0, 6, 52, 26, },
++	{ 2, 1, 0, 6, 52, 26, },
++	{ 1, 1, 0, 6, 52, 26, },
++	{ 0, 1, 0, 6, 56, 26, },
++	{ 2, 1, 0, 6, 56, 26, },
++	{ 1, 1, 0, 6, 56, 26, },
++	{ 0, 1, 0, 6, 60, 26, },
++	{ 2, 1, 0, 6, 60, 26, },
++	{ 1, 1, 0, 6, 60, 26, },
++	{ 0, 1, 0, 6, 64, 22, },
++	{ 2, 1, 0, 6, 64, 26, },
++	{ 1, 1, 0, 6, 64, 26, },
++	{ 0, 1, 0, 6, 100, 22, },
++	{ 2, 1, 0, 6, 100, 26, },
++	{ 1, 1, 0, 6, 100, 26, },
++	{ 0, 1, 0, 6, 104, 26, },
++	{ 2, 1, 0, 6, 104, 26, },
++	{ 1, 1, 0, 6, 104, 26, },
++	{ 0, 1, 0, 6, 108, 26, },
++	{ 2, 1, 0, 6, 108, 26, },
++	{ 1, 1, 0, 6, 108, 26, },
++	{ 0, 1, 0, 6, 112, 26, },
++	{ 2, 1, 0, 6, 112, 26, },
++	{ 1, 1, 0, 6, 112, 26, },
++	{ 0, 1, 0, 6, 116, 26, },
++	{ 2, 1, 0, 6, 116, 26, },
++	{ 1, 1, 0, 6, 116, 26, },
++	{ 0, 1, 0, 6, 120, 26, },
++	{ 2, 1, 0, 6, 120, 26, },
++	{ 1, 1, 0, 6, 120, 26, },
++	{ 0, 1, 0, 6, 124, 26, },
++	{ 2, 1, 0, 6, 124, 26, },
++	{ 1, 1, 0, 6, 124, 26, },
++	{ 0, 1, 0, 6, 128, 26, },
++	{ 2, 1, 0, 6, 128, 26, },
++	{ 1, 1, 0, 6, 128, 26, },
++	{ 0, 1, 0, 6, 132, 26, },
++	{ 2, 1, 0, 6, 132, 26, },
++	{ 1, 1, 0, 6, 132, 26, },
++	{ 0, 1, 0, 6, 136, 26, },
++	{ 2, 1, 0, 6, 136, 26, },
++	{ 1, 1, 0, 6, 136, 26, },
++	{ 0, 1, 0, 6, 140, 22, },
++	{ 2, 1, 0, 6, 140, 26, },
++	{ 1, 1, 0, 6, 140, 26, },
++	{ 0, 1, 0, 6, 149, 22, },
++	{ 2, 1, 0, 6, 149, 26, },
++	{ 1, 1, 0, 6, 149, 63, },
++	{ 0, 1, 0, 6, 153, 26, },
++	{ 2, 1, 0, 6, 153, 26, },
++	{ 1, 1, 0, 6, 153, 63, },
++	{ 0, 1, 0, 6, 157, 26, },
++	{ 2, 1, 0, 6, 157, 26, },
++	{ 1, 1, 0, 6, 157, 63, },
++	{ 0, 1, 0, 6, 161, 26, },
++	{ 2, 1, 0, 6, 161, 26, },
++	{ 1, 1, 0, 6, 161, 63, },
++	{ 0, 1, 0, 6, 165, 26, },
++	{ 2, 1, 0, 6, 165, 26, },
++	{ 1, 1, 0, 6, 165, 63, },
++	{ 0, 1, 0, 7, 36, 20, },
++	{ 2, 1, 0, 7, 36, 24, },
++	{ 1, 1, 0, 7, 36, 24, },
++	{ 0, 1, 0, 7, 40, 24, },
++	{ 2, 1, 0, 7, 40, 24, },
++	{ 1, 1, 0, 7, 40, 24, },
++	{ 0, 1, 0, 7, 44, 24, },
++	{ 2, 1, 0, 7, 44, 24, },
++	{ 1, 1, 0, 7, 44, 24, },
++	{ 0, 1, 0, 7, 48, 24, },
++	{ 2, 1, 0, 7, 48, 24, },
++	{ 1, 1, 0, 7, 48, 24, },
++	{ 0, 1, 0, 7, 52, 24, },
++	{ 2, 1, 0, 7, 52, 24, },
++	{ 1, 1, 0, 7, 52, 24, },
++	{ 0, 1, 0, 7, 56, 24, },
++	{ 2, 1, 0, 7, 56, 24, },
++	{ 1, 1, 0, 7, 56, 24, },
++	{ 0, 1, 0, 7, 60, 24, },
++	{ 2, 1, 0, 7, 60, 24, },
++	{ 1, 1, 0, 7, 60, 24, },
++	{ 0, 1, 0, 7, 64, 20, },
++	{ 2, 1, 0, 7, 64, 24, },
++	{ 1, 1, 0, 7, 64, 24, },
++	{ 0, 1, 0, 7, 100, 20, },
++	{ 2, 1, 0, 7, 100, 24, },
++	{ 1, 1, 0, 7, 100, 24, },
++	{ 0, 1, 0, 7, 104, 24, },
++	{ 2, 1, 0, 7, 104, 24, },
++	{ 1, 1, 0, 7, 104, 24, },
++	{ 0, 1, 0, 7, 108, 24, },
++	{ 2, 1, 0, 7, 108, 24, },
++	{ 1, 1, 0, 7, 108, 24, },
++	{ 0, 1, 0, 7, 112, 24, },
++	{ 2, 1, 0, 7, 112, 24, },
++	{ 1, 1, 0, 7, 112, 24, },
++	{ 0, 1, 0, 7, 116, 24, },
++	{ 2, 1, 0, 7, 116, 24, },
++	{ 1, 1, 0, 7, 116, 24, },
++	{ 0, 1, 0, 7, 120, 24, },
++	{ 2, 1, 0, 7, 120, 24, },
++	{ 1, 1, 0, 7, 120, 24, },
++	{ 0, 1, 0, 7, 124, 24, },
++	{ 2, 1, 0, 7, 124, 24, },
++	{ 1, 1, 0, 7, 124, 24, },
++	{ 0, 1, 0, 7, 128, 24, },
++	{ 2, 1, 0, 7, 128, 24, },
++	{ 1, 1, 0, 7, 128, 24, },
++	{ 0, 1, 0, 7, 132, 24, },
++	{ 2, 1, 0, 7, 132, 24, },
++	{ 1, 1, 0, 7, 132, 24, },
++	{ 0, 1, 0, 7, 136, 24, },
++	{ 2, 1, 0, 7, 136, 24, },
++	{ 1, 1, 0, 7, 136, 24, },
++	{ 0, 1, 0, 7, 140, 20, },
++	{ 2, 1, 0, 7, 140, 24, },
++	{ 1, 1, 0, 7, 140, 24, },
++	{ 0, 1, 0, 7, 149, 20, },
++	{ 2, 1, 0, 7, 149, 24, },
++	{ 1, 1, 0, 7, 149, 63, },
++	{ 0, 1, 0, 7, 153, 24, },
++	{ 2, 1, 0, 7, 153, 24, },
++	{ 1, 1, 0, 7, 153, 63, },
++	{ 0, 1, 0, 7, 157, 24, },
++	{ 2, 1, 0, 7, 157, 24, },
++	{ 1, 1, 0, 7, 157, 63, },
++	{ 0, 1, 0, 7, 161, 24, },
++	{ 2, 1, 0, 7, 161, 24, },
++	{ 1, 1, 0, 7, 161, 63, },
++	{ 0, 1, 0, 7, 165, 24, },
++	{ 2, 1, 0, 7, 165, 24, },
++	{ 1, 1, 0, 7, 165, 63, },
++	{ 0, 1, 1, 2, 38, 26, },
++	{ 2, 1, 1, 2, 38, 32, },
++	{ 1, 1, 1, 2, 38, 32, },
++	{ 0, 1, 1, 2, 46, 32, },
++	{ 2, 1, 1, 2, 46, 32, },
++	{ 1, 1, 1, 2, 46, 32, },
++	{ 0, 1, 1, 2, 54, 32, },
++	{ 2, 1, 1, 2, 54, 32, },
++	{ 1, 1, 1, 2, 54, 32, },
++	{ 0, 1, 1, 2, 62, 26, },
++	{ 2, 1, 1, 2, 62, 32, },
++	{ 1, 1, 1, 2, 62, 32, },
++	{ 0, 1, 1, 2, 102, 26, },
++	{ 2, 1, 1, 2, 102, 32, },
++	{ 1, 1, 1, 2, 102, 32, },
++	{ 0, 1, 1, 2, 110, 32, },
++	{ 2, 1, 1, 2, 110, 32, },
++	{ 1, 1, 1, 2, 110, 32, },
++	{ 0, 1, 1, 2, 118, 32, },
++	{ 2, 1, 1, 2, 118, 32, },
++	{ 1, 1, 1, 2, 118, 32, },
++	{ 0, 1, 1, 2, 126, 32, },
++	{ 2, 1, 1, 2, 126, 32, },
++	{ 1, 1, 1, 2, 126, 32, },
++	{ 0, 1, 1, 2, 134, 32, },
++	{ 2, 1, 1, 2, 134, 32, },
++	{ 1, 1, 1, 2, 134, 32, },
++	{ 0, 1, 1, 2, 151, 26, },
++	{ 2, 1, 1, 2, 151, 32, },
++	{ 1, 1, 1, 2, 151, 63, },
++	{ 0, 1, 1, 2, 159, 32, },
++	{ 2, 1, 1, 2, 159, 32, },
++	{ 1, 1, 1, 2, 159, 63, },
++	{ 0, 1, 1, 3, 38, 24, },
++	{ 2, 1, 1, 3, 38, 28, },
++	{ 1, 1, 1, 3, 38, 28, },
++	{ 0, 1, 1, 3, 46, 28, },
++	{ 2, 1, 1, 3, 46, 28, },
++	{ 1, 1, 1, 3, 46, 28, },
++	{ 0, 1, 1, 3, 54, 28, },
++	{ 2, 1, 1, 3, 54, 28, },
++	{ 1, 1, 1, 3, 54, 28, },
++	{ 0, 1, 1, 3, 62, 24, },
++	{ 2, 1, 1, 3, 62, 28, },
++	{ 1, 1, 1, 3, 62, 28, },
++	{ 0, 1, 1, 3, 102, 24, },
++	{ 2, 1, 1, 3, 102, 28, },
++	{ 1, 1, 1, 3, 102, 28, },
++	{ 0, 1, 1, 3, 110, 28, },
++	{ 2, 1, 1, 3, 110, 28, },
++	{ 1, 1, 1, 3, 110, 28, },
++	{ 0, 1, 1, 3, 118, 28, },
++	{ 2, 1, 1, 3, 118, 28, },
++	{ 1, 1, 1, 3, 118, 28, },
++	{ 0, 1, 1, 3, 126, 28, },
++	{ 2, 1, 1, 3, 126, 28, },
++	{ 1, 1, 1, 3, 126, 28, },
++	{ 0, 1, 1, 3, 134, 28, },
++	{ 2, 1, 1, 3, 134, 28, },
++	{ 1, 1, 1, 3, 134, 28, },
++	{ 0, 1, 1, 3, 151, 24, },
++	{ 2, 1, 1, 3, 151, 28, },
++	{ 1, 1, 1, 3, 151, 63, },
++	{ 0, 1, 1, 3, 159, 28, },
++	{ 2, 1, 1, 3, 159, 28, },
++	{ 1, 1, 1, 3, 159, 63, },
++	{ 0, 1, 1, 6, 38, 20, },
++	{ 2, 1, 1, 6, 38, 26, },
++	{ 1, 1, 1, 6, 38, 26, },
++	{ 0, 1, 1, 6, 46, 26, },
++	{ 2, 1, 1, 6, 46, 26, },
++	{ 1, 1, 1, 6, 46, 26, },
++	{ 0, 1, 1, 6, 54, 26, },
++	{ 2, 1, 1, 6, 54, 26, },
++	{ 1, 1, 1, 6, 54, 26, },
++	{ 0, 1, 1, 6, 62, 20, },
++	{ 2, 1, 1, 6, 62, 26, },
++	{ 1, 1, 1, 6, 62, 26, },
++	{ 0, 1, 1, 6, 102, 20, },
++	{ 2, 1, 1, 6, 102, 26, },
++	{ 1, 1, 1, 6, 102, 26, },
++	{ 0, 1, 1, 6, 110, 26, },
++	{ 2, 1, 1, 6, 110, 26, },
++	{ 1, 1, 1, 6, 110, 26, },
++	{ 0, 1, 1, 6, 118, 26, },
++	{ 2, 1, 1, 6, 118, 26, },
++	{ 1, 1, 1, 6, 118, 26, },
++	{ 0, 1, 1, 6, 126, 26, },
++	{ 2, 1, 1, 6, 126, 26, },
++	{ 1, 1, 1, 6, 126, 26, },
++	{ 0, 1, 1, 6, 134, 26, },
++	{ 2, 1, 1, 6, 134, 26, },
++	{ 1, 1, 1, 6, 134, 26, },
++	{ 0, 1, 1, 6, 151, 20, },
++	{ 2, 1, 1, 6, 151, 26, },
++	{ 1, 1, 1, 6, 151, 63, },
++	{ 0, 1, 1, 6, 159, 26, },
++	{ 2, 1, 1, 6, 159, 26, },
++	{ 1, 1, 1, 6, 159, 63, },
++	{ 0, 1, 1, 7, 38, 18, },
++	{ 2, 1, 1, 7, 38, 24, },
++	{ 1, 1, 1, 7, 38, 24, },
++	{ 0, 1, 1, 7, 46, 24, },
++	{ 2, 1, 1, 7, 46, 24, },
++	{ 1, 1, 1, 7, 46, 24, },
++	{ 0, 1, 1, 7, 54, 24, },
++	{ 2, 1, 1, 7, 54, 24, },
++	{ 1, 1, 1, 7, 54, 24, },
++	{ 0, 1, 1, 7, 62, 18, },
++	{ 2, 1, 1, 7, 62, 24, },
++	{ 1, 1, 1, 7, 62, 24, },
++	{ 0, 1, 1, 7, 102, 18, },
++	{ 2, 1, 1, 7, 102, 24, },
++	{ 1, 1, 1, 7, 102, 24, },
++	{ 0, 1, 1, 7, 110, 24, },
++	{ 2, 1, 1, 7, 110, 24, },
++	{ 1, 1, 1, 7, 110, 24, },
++	{ 0, 1, 1, 7, 118, 24, },
++	{ 2, 1, 1, 7, 118, 24, },
++	{ 1, 1, 1, 7, 118, 24, },
++	{ 0, 1, 1, 7, 126, 24, },
++	{ 2, 1, 1, 7, 126, 24, },
++	{ 1, 1, 1, 7, 126, 24, },
++	{ 0, 1, 1, 7, 134, 24, },
++	{ 2, 1, 1, 7, 134, 24, },
++	{ 1, 1, 1, 7, 134, 24, },
++	{ 0, 1, 1, 7, 151, 18, },
++	{ 2, 1, 1, 7, 151, 24, },
++	{ 1, 1, 1, 7, 151, 63, },
++	{ 0, 1, 1, 7, 159, 24, },
++	{ 2, 1, 1, 7, 159, 24, },
++	{ 1, 1, 1, 7, 159, 63, },
++	{ 0, 1, 2, 4, 42, 22, },
++	{ 2, 1, 2, 4, 42, 30, },
++	{ 1, 1, 2, 4, 42, 30, },
++	{ 0, 1, 2, 4, 58, 22, },
++	{ 2, 1, 2, 4, 58, 30, },
++	{ 1, 1, 2, 4, 58, 30, },
++	{ 0, 1, 2, 4, 106, 22, },
++	{ 2, 1, 2, 4, 106, 30, },
++	{ 1, 1, 2, 4, 106, 30, },
++	{ 0, 1, 2, 4, 122, 30, },
++	{ 2, 1, 2, 4, 122, 30, },
++	{ 1, 1, 2, 4, 122, 30, },
++	{ 0, 1, 2, 4, 155, 22, },
++	{ 2, 1, 2, 4, 155, 30, },
++	{ 1, 1, 2, 4, 155, 63, },
++	{ 0, 1, 2, 5, 42, 20, },
++	{ 2, 1, 2, 5, 42, 28, },
++	{ 1, 1, 2, 5, 42, 28, },
++	{ 0, 1, 2, 5, 58, 20, },
++	{ 2, 1, 2, 5, 58, 28, },
++	{ 1, 1, 2, 5, 58, 28, },
++	{ 0, 1, 2, 5, 106, 20, },
++	{ 2, 1, 2, 5, 106, 28, },
++	{ 1, 1, 2, 5, 106, 28, },
++	{ 0, 1, 2, 5, 122, 28, },
++	{ 2, 1, 2, 5, 122, 28, },
++	{ 1, 1, 2, 5, 122, 28, },
++	{ 0, 1, 2, 5, 155, 20, },
++	{ 2, 1, 2, 5, 155, 28, },
++	{ 1, 1, 2, 5, 155, 63, },
++	{ 0, 1, 2, 8, 42, 18, },
++	{ 2, 1, 2, 8, 42, 26, },
++	{ 1, 1, 2, 8, 42, 26, },
++	{ 0, 1, 2, 8, 58, 18, },
++	{ 2, 1, 2, 8, 58, 26, },
++	{ 1, 1, 2, 8, 58, 26, },
++	{ 0, 1, 2, 8, 106, 18, },
++	{ 2, 1, 2, 8, 106, 26, },
++	{ 1, 1, 2, 8, 106, 26, },
++	{ 0, 1, 2, 8, 122, 26, },
++	{ 2, 1, 2, 8, 122, 26, },
++	{ 1, 1, 2, 8, 122, 26, },
++	{ 0, 1, 2, 8, 155, 18, },
++	{ 2, 1, 2, 8, 155, 26, },
++	{ 1, 1, 2, 8, 155, 63, },
++	{ 0, 1, 2, 9, 42, 16, },
++	{ 2, 1, 2, 9, 42, 24, },
++	{ 1, 1, 2, 9, 42, 24, },
++	{ 0, 1, 2, 9, 58, 16, },
++	{ 2, 1, 2, 9, 58, 24, },
++	{ 1, 1, 2, 9, 58, 24, },
++	{ 0, 1, 2, 9, 106, 16, },
++	{ 2, 1, 2, 9, 106, 24, },
++	{ 1, 1, 2, 9, 106, 24, },
++	{ 0, 1, 2, 9, 122, 24, },
++	{ 2, 1, 2, 9, 122, 24, },
++	{ 1, 1, 2, 9, 122, 24, },
++	{ 0, 1, 2, 9, 155, 16, },
++	{ 2, 1, 2, 9, 155, 24, },
++	{ 1, 1, 2, 9, 155, 63, },
++};
++
++RTW_DECL_TABLE_TXPWR_LMT(rtw8814a_txpwr_lmt_type0);
++
++static const struct rtw_txpwr_lmt_cfg_pair rtw8814a_txpwr_lmt_type1[] = {
++		{ 0, 0, 0, 0, 1, 34, },
++	{ 2, 0, 0, 0, 1, 32, },
++	{ 1, 0, 0, 0, 1, 32, },
++	{ 0, 0, 0, 0, 2, 34, },
++	{ 2, 0, 0, 0, 2, 32, },
++	{ 1, 0, 0, 0, 2, 32, },
++	{ 0, 0, 0, 0, 3, 34, },
++	{ 2, 0, 0, 0, 3, 32, },
++	{ 1, 0, 0, 0, 3, 32, },
++	{ 0, 0, 0, 0, 4, 34, },
++	{ 2, 0, 0, 0, 4, 32, },
++	{ 1, 0, 0, 0, 4, 32, },
++	{ 0, 0, 0, 0, 5, 34, },
++	{ 2, 0, 0, 0, 5, 32, },
++	{ 1, 0, 0, 0, 5, 32, },
++	{ 0, 0, 0, 0, 6, 34, },
++	{ 2, 0, 0, 0, 6, 32, },
++	{ 1, 0, 0, 0, 6, 32, },
++	{ 0, 0, 0, 0, 7, 34, },
++	{ 2, 0, 0, 0, 7, 32, },
++	{ 1, 0, 0, 0, 7, 32, },
++	{ 0, 0, 0, 0, 8, 34, },
++	{ 2, 0, 0, 0, 8, 32, },
++	{ 1, 0, 0, 0, 8, 32, },
++	{ 0, 0, 0, 0, 9, 34, },
++	{ 2, 0, 0, 0, 9, 32, },
++	{ 1, 0, 0, 0, 9, 32, },
++	{ 0, 0, 0, 0, 10, 34, },
++	{ 2, 0, 0, 0, 10, 32, },
++	{ 1, 0, 0, 0, 10, 32, },
++	{ 0, 0, 0, 0, 11, 34, },
++	{ 2, 0, 0, 0, 11, 32, },
++	{ 1, 0, 0, 0, 11, 32, },
++	{ 0, 0, 0, 0, 12, 24, },
++	{ 2, 0, 0, 0, 12, 32, },
++	{ 1, 0, 0, 0, 12, 32, },
++	{ 0, 0, 0, 0, 13, 16, },
++	{ 2, 0, 0, 0, 13, 32, },
++	{ 1, 0, 0, 0, 13, 32, },
++	{ 0, 0, 0, 0, 14, 63, },
++	{ 2, 0, 0, 0, 14, 63, },
++	{ 1, 0, 0, 0, 14, 32, },
++	{ 0, 0, 0, 1, 1, 30, },
++	{ 2, 0, 0, 1, 1, 32, },
++	{ 1, 0, 0, 1, 1, 32, },
++	{ 0, 0, 0, 1, 2, 32, },
++	{ 2, 0, 0, 1, 2, 32, },
++	{ 1, 0, 0, 1, 2, 32, },
++	{ 0, 0, 0, 1, 3, 32, },
++	{ 2, 0, 0, 1, 3, 32, },
++	{ 1, 0, 0, 1, 3, 32, },
++	{ 0, 0, 0, 1, 4, 32, },
++	{ 2, 0, 0, 1, 4, 32, },
++	{ 1, 0, 0, 1, 4, 32, },
++	{ 0, 0, 0, 1, 5, 32, },
++	{ 2, 0, 0, 1, 5, 32, },
++	{ 1, 0, 0, 1, 5, 32, },
++	{ 0, 0, 0, 1, 6, 32, },
++	{ 2, 0, 0, 1, 6, 32, },
++	{ 1, 0, 0, 1, 6, 32, },
++	{ 0, 0, 0, 1, 7, 32, },
++	{ 2, 0, 0, 1, 7, 32, },
++	{ 1, 0, 0, 1, 7, 32, },
++	{ 0, 0, 0, 1, 8, 32, },
++	{ 2, 0, 0, 1, 8, 32, },
++	{ 1, 0, 0, 1, 8, 32, },
++	{ 0, 0, 0, 1, 9, 32, },
++	{ 2, 0, 0, 1, 9, 32, },
++	{ 1, 0, 0, 1, 9, 32, },
++	{ 0, 0, 0, 1, 10, 32, },
++	{ 2, 0, 0, 1, 10, 32, },
++	{ 1, 0, 0, 1, 10, 32, },
++	{ 0, 0, 0, 1, 11, 30, },
++	{ 2, 0, 0, 1, 11, 32, },
++	{ 1, 0, 0, 1, 11, 32, },
++	{ 0, 0, 0, 1, 12, 18, },
++	{ 2, 0, 0, 1, 12, 32, },
++	{ 1, 0, 0, 1, 12, 32, },
++	{ 0, 0, 0, 1, 13, 8, },
++	{ 2, 0, 0, 1, 13, 32, },
++	{ 1, 0, 0, 1, 13, 32, },
++	{ 0, 0, 0, 1, 14, 63, },
++	{ 2, 0, 0, 1, 14, 63, },
++	{ 1, 0, 0, 1, 14, 63, },
++	{ 0, 0, 0, 2, 1, 28, },
++	{ 2, 0, 0, 2, 1, 32, },
++	{ 1, 0, 0, 2, 1, 32, },
++	{ 0, 0, 0, 2, 2, 32, },
++	{ 2, 0, 0, 2, 2, 32, },
++	{ 1, 0, 0, 2, 2, 32, },
++	{ 0, 0, 0, 2, 3, 32, },
++	{ 2, 0, 0, 2, 3, 32, },
++	{ 1, 0, 0, 2, 3, 32, },
++	{ 0, 0, 0, 2, 4, 32, },
++	{ 2, 0, 0, 2, 4, 32, },
++	{ 1, 0, 0, 2, 4, 32, },
++	{ 0, 0, 0, 2, 5, 32, },
++	{ 2, 0, 0, 2, 5, 32, },
++	{ 1, 0, 0, 2, 5, 32, },
++	{ 0, 0, 0, 2, 6, 32, },
++	{ 2, 0, 0, 2, 6, 32, },
++	{ 1, 0, 0, 2, 6, 32, },
++	{ 0, 0, 0, 2, 7, 32, },
++	{ 2, 0, 0, 2, 7, 32, },
++	{ 1, 0, 0, 2, 7, 32, },
++	{ 0, 0, 0, 2, 8, 32, },
++	{ 2, 0, 0, 2, 8, 32, },
++	{ 1, 0, 0, 2, 8, 32, },
++	{ 0, 0, 0, 2, 9, 32, },
++	{ 2, 0, 0, 2, 9, 32, },
++	{ 1, 0, 0, 2, 9, 32, },
++	{ 0, 0, 0, 2, 10, 32, },
++	{ 2, 0, 0, 2, 10, 32, },
++	{ 1, 0, 0, 2, 10, 32, },
++	{ 0, 0, 0, 2, 11, 28, },
++	{ 2, 0, 0, 2, 11, 32, },
++	{ 1, 0, 0, 2, 11, 32, },
++	{ 0, 0, 0, 2, 12, 16, },
++	{ 2, 0, 0, 2, 12, 32, },
++	{ 1, 0, 0, 2, 12, 32, },
++	{ 0, 0, 0, 2, 13, 6, },
++	{ 2, 0, 0, 2, 13, 32, },
++	{ 1, 0, 0, 2, 13, 32, },
++	{ 0, 0, 0, 2, 14, 63, },
++	{ 2, 0, 0, 2, 14, 63, },
++	{ 1, 0, 0, 2, 14, 63, },
++	{ 0, 0, 0, 3, 1, 26, },
++	{ 2, 0, 0, 3, 1, 30, },
++	{ 1, 0, 0, 3, 1, 30, },
++	{ 0, 0, 0, 3, 2, 30, },
++	{ 2, 0, 0, 3, 2, 30, },
++	{ 1, 0, 0, 3, 2, 30, },
++	{ 0, 0, 0, 3, 3, 30, },
++	{ 2, 0, 0, 3, 3, 30, },
++	{ 1, 0, 0, 3, 3, 30, },
++	{ 0, 0, 0, 3, 4, 30, },
++	{ 2, 0, 0, 3, 4, 30, },
++	{ 1, 0, 0, 3, 4, 30, },
++	{ 0, 0, 0, 3, 5, 30, },
++	{ 2, 0, 0, 3, 5, 30, },
++	{ 1, 0, 0, 3, 5, 30, },
++	{ 0, 0, 0, 3, 6, 30, },
++	{ 2, 0, 0, 3, 6, 30, },
++	{ 1, 0, 0, 3, 6, 30, },
++	{ 0, 0, 0, 3, 7, 30, },
++	{ 2, 0, 0, 3, 7, 30, },
++	{ 1, 0, 0, 3, 7, 30, },
++	{ 0, 0, 0, 3, 8, 30, },
++	{ 2, 0, 0, 3, 8, 30, },
++	{ 1, 0, 0, 3, 8, 30, },
++	{ 0, 0, 0, 3, 9, 30, },
++	{ 2, 0, 0, 3, 9, 30, },
++	{ 1, 0, 0, 3, 9, 30, },
++	{ 0, 0, 0, 3, 10, 30, },
++	{ 2, 0, 0, 3, 10, 30, },
++	{ 1, 0, 0, 3, 10, 30, },
++	{ 0, 0, 0, 3, 11, 26, },
++	{ 2, 0, 0, 3, 11, 30, },
++	{ 1, 0, 0, 3, 11, 30, },
++	{ 0, 0, 0, 3, 12, 14, },
++	{ 2, 0, 0, 3, 12, 30, },
++	{ 1, 0, 0, 3, 12, 30, },
++	{ 0, 0, 0, 3, 13, 4, },
++	{ 2, 0, 0, 3, 13, 30, },
++	{ 1, 0, 0, 3, 13, 30, },
++	{ 0, 0, 0, 3, 14, 63, },
++	{ 2, 0, 0, 3, 14, 63, },
++	{ 1, 0, 0, 3, 14, 63, },
++	{ 0, 0, 0, 6, 1, 24, },
++	{ 2, 0, 0, 6, 1, 28, },
++	{ 1, 0, 0, 6, 1, 28, },
++	{ 0, 0, 0, 6, 2, 28, },
++	{ 2, 0, 0, 6, 2, 28, },
++	{ 1, 0, 0, 6, 2, 28, },
++	{ 0, 0, 0, 6, 3, 28, },
++	{ 2, 0, 0, 6, 3, 28, },
++	{ 1, 0, 0, 6, 3, 28, },
++	{ 0, 0, 0, 6, 4, 28, },
++	{ 2, 0, 0, 6, 4, 28, },
++	{ 1, 0, 0, 6, 4, 28, },
++	{ 0, 0, 0, 6, 5, 28, },
++	{ 2, 0, 0, 6, 5, 28, },
++	{ 1, 0, 0, 6, 5, 28, },
++	{ 0, 0, 0, 6, 6, 28, },
++	{ 2, 0, 0, 6, 6, 28, },
++	{ 1, 0, 0, 6, 6, 28, },
++	{ 0, 0, 0, 6, 7, 28, },
++	{ 2, 0, 0, 6, 7, 28, },
++	{ 1, 0, 0, 6, 7, 28, },
++	{ 0, 0, 0, 6, 8, 28, },
++	{ 2, 0, 0, 6, 8, 28, },
++	{ 1, 0, 0, 6, 8, 28, },
++	{ 0, 0, 0, 6, 9, 28, },
++	{ 2, 0, 0, 6, 9, 28, },
++	{ 1, 0, 0, 6, 9, 28, },
++	{ 0, 0, 0, 6, 10, 28, },
++	{ 2, 0, 0, 6, 10, 28, },
++	{ 1, 0, 0, 6, 10, 28, },
++	{ 0, 0, 0, 6, 11, 24, },
++	{ 2, 0, 0, 6, 11, 28, },
++	{ 1, 0, 0, 6, 11, 28, },
++	{ 0, 0, 0, 6, 12, 14, },
++	{ 2, 0, 0, 6, 12, 28, },
++	{ 1, 0, 0, 6, 12, 28, },
++	{ 0, 0, 0, 6, 13, 4, },
++	{ 2, 0, 0, 6, 13, 28, },
++	{ 1, 0, 0, 6, 13, 28, },
++	{ 0, 0, 0, 6, 14, 63, },
++	{ 2, 0, 0, 6, 14, 63, },
++	{ 1, 0, 0, 6, 14, 63, },
++	{ 0, 0, 0, 7, 1, 22, },
++	{ 2, 0, 0, 7, 1, 26, },
++	{ 1, 0, 0, 7, 1, 26, },
++	{ 0, 0, 0, 7, 2, 26, },
++	{ 2, 0, 0, 7, 2, 26, },
++	{ 1, 0, 0, 7, 2, 26, },
++	{ 0, 0, 0, 7, 3, 26, },
++	{ 2, 0, 0, 7, 3, 26, },
++	{ 1, 0, 0, 7, 3, 26, },
++	{ 0, 0, 0, 7, 4, 26, },
++	{ 2, 0, 0, 7, 4, 26, },
++	{ 1, 0, 0, 7, 4, 26, },
++	{ 0, 0, 0, 7, 5, 26, },
++	{ 2, 0, 0, 7, 5, 26, },
++	{ 1, 0, 0, 7, 5, 26, },
++	{ 0, 0, 0, 7, 6, 26, },
++	{ 2, 0, 0, 7, 6, 26, },
++	{ 1, 0, 0, 7, 6, 26, },
++	{ 0, 0, 0, 7, 7, 26, },
++	{ 2, 0, 0, 7, 7, 26, },
++	{ 1, 0, 0, 7, 7, 26, },
++	{ 0, 0, 0, 7, 8, 26, },
++	{ 2, 0, 0, 7, 8, 26, },
++	{ 1, 0, 0, 7, 8, 26, },
++	{ 0, 0, 0, 7, 9, 26, },
++	{ 2, 0, 0, 7, 9, 26, },
++	{ 1, 0, 0, 7, 9, 26, },
++	{ 0, 0, 0, 7, 10, 26, },
++	{ 2, 0, 0, 7, 10, 26, },
++	{ 1, 0, 0, 7, 10, 26, },
++	{ 0, 0, 0, 7, 11, 22, },
++	{ 2, 0, 0, 7, 11, 26, },
++	{ 1, 0, 0, 7, 11, 26, },
++	{ 0, 0, 0, 7, 12, 14, },
++	{ 2, 0, 0, 7, 12, 26, },
++	{ 1, 0, 0, 7, 12, 26, },
++	{ 0, 0, 0, 7, 13, 4, },
++	{ 2, 0, 0, 7, 13, 26, },
++	{ 1, 0, 0, 7, 13, 26, },
++	{ 0, 0, 0, 7, 14, 63, },
++	{ 2, 0, 0, 7, 14, 63, },
++	{ 1, 0, 0, 7, 14, 63, },
++	{ 0, 0, 1, 2, 1, 63, },
++	{ 2, 0, 1, 2, 1, 63, },
++	{ 1, 0, 1, 2, 1, 63, },
++	{ 0, 0, 1, 2, 2, 63, },
++	{ 2, 0, 1, 2, 2, 63, },
++	{ 1, 0, 1, 2, 2, 63, },
++	{ 0, 0, 1, 2, 3, 28, },
++	{ 2, 0, 1, 2, 3, 32, },
++	{ 1, 0, 1, 2, 3, 32, },
++	{ 0, 0, 1, 2, 4, 32, },
++	{ 2, 0, 1, 2, 4, 32, },
++	{ 1, 0, 1, 2, 4, 32, },
++	{ 0, 0, 1, 2, 5, 32, },
++	{ 2, 0, 1, 2, 5, 32, },
++	{ 1, 0, 1, 2, 5, 32, },
++	{ 0, 0, 1, 2, 6, 32, },
++	{ 2, 0, 1, 2, 6, 32, },
++	{ 1, 0, 1, 2, 6, 32, },
++	{ 0, 0, 1, 2, 7, 32, },
++	{ 2, 0, 1, 2, 7, 32, },
++	{ 1, 0, 1, 2, 7, 32, },
++	{ 0, 0, 1, 2, 8, 32, },
++	{ 2, 0, 1, 2, 8, 32, },
++	{ 1, 0, 1, 2, 8, 32, },
++	{ 0, 0, 1, 2, 9, 32, },
++	{ 2, 0, 1, 2, 9, 32, },
++	{ 1, 0, 1, 2, 9, 32, },
++	{ 0, 0, 1, 2, 10, 32, },
++	{ 2, 0, 1, 2, 10, 32, },
++	{ 1, 0, 1, 2, 10, 32, },
++	{ 0, 0, 1, 2, 11, 28, },
++	{ 2, 0, 1, 2, 11, 32, },
++	{ 1, 0, 1, 2, 11, 32, },
++	{ 0, 0, 1, 2, 12, 16, },
++	{ 2, 0, 1, 2, 12, 32, },
++	{ 1, 0, 1, 2, 12, 32, },
++	{ 0, 0, 1, 2, 13, 10, },
++	{ 2, 0, 1, 2, 13, 32, },
++	{ 1, 0, 1, 2, 13, 32, },
++	{ 0, 0, 1, 2, 14, 63, },
++	{ 2, 0, 1, 2, 14, 63, },
++	{ 1, 0, 1, 2, 14, 63, },
++	{ 0, 0, 1, 3, 1, 63, },
++	{ 2, 0, 1, 3, 1, 63, },
++	{ 1, 0, 1, 3, 1, 63, },
++	{ 0, 0, 1, 3, 2, 63, },
++	{ 2, 0, 1, 3, 2, 63, },
++	{ 1, 0, 1, 3, 2, 63, },
++	{ 0, 0, 1, 3, 3, 26, },
++	{ 2, 0, 1, 3, 3, 30, },
++	{ 1, 0, 1, 3, 3, 30, },
++	{ 0, 0, 1, 3, 4, 30, },
++	{ 2, 0, 1, 3, 4, 30, },
++	{ 1, 0, 1, 3, 4, 30, },
++	{ 0, 0, 1, 3, 5, 30, },
++	{ 2, 0, 1, 3, 5, 30, },
++	{ 1, 0, 1, 3, 5, 30, },
++	{ 0, 0, 1, 3, 6, 30, },
++	{ 2, 0, 1, 3, 6, 30, },
++	{ 1, 0, 1, 3, 6, 30, },
++	{ 0, 0, 1, 3, 7, 30, },
++	{ 2, 0, 1, 3, 7, 30, },
++	{ 1, 0, 1, 3, 7, 30, },
++	{ 0, 0, 1, 3, 8, 30, },
++	{ 2, 0, 1, 3, 8, 30, },
++	{ 1, 0, 1, 3, 8, 30, },
++	{ 0, 0, 1, 3, 9, 30, },
++	{ 2, 0, 1, 3, 9, 30, },
++	{ 1, 0, 1, 3, 9, 30, },
++	{ 0, 0, 1, 3, 10, 30, },
++	{ 2, 0, 1, 3, 10, 30, },
++	{ 1, 0, 1, 3, 10, 30, },
++	{ 0, 0, 1, 3, 11, 26, },
++	{ 2, 0, 1, 3, 11, 30, },
++	{ 1, 0, 1, 3, 11, 30, },
++	{ 0, 0, 1, 3, 12, 14, },
++	{ 2, 0, 1, 3, 12, 30, },
++	{ 1, 0, 1, 3, 12, 30, },
++	{ 0, 0, 1, 3, 13, 8, },
++	{ 2, 0, 1, 3, 13, 30, },
++	{ 1, 0, 1, 3, 13, 30, },
++	{ 0, 0, 1, 3, 14, 63, },
++	{ 2, 0, 1, 3, 14, 63, },
++	{ 1, 0, 1, 3, 14, 63, },
++	{ 0, 0, 1, 6, 1, 63, },
++	{ 2, 0, 1, 6, 1, 63, },
++	{ 1, 0, 1, 6, 1, 63, },
++	{ 0, 0, 1, 6, 2, 63, },
++	{ 2, 0, 1, 6, 2, 63, },
++	{ 1, 0, 1, 6, 2, 63, },
++	{ 0, 0, 1, 6, 3, 24, },
++	{ 2, 0, 1, 6, 3, 28, },
++	{ 1, 0, 1, 6, 3, 28, },
++	{ 0, 0, 1, 6, 4, 28, },
++	{ 2, 0, 1, 6, 4, 28, },
++	{ 1, 0, 1, 6, 4, 28, },
++	{ 0, 0, 1, 6, 5, 28, },
++	{ 2, 0, 1, 6, 5, 28, },
++	{ 1, 0, 1, 6, 5, 28, },
++	{ 0, 0, 1, 6, 6, 28, },
++	{ 2, 0, 1, 6, 6, 28, },
++	{ 1, 0, 1, 6, 6, 28, },
++	{ 0, 0, 1, 6, 7, 28, },
++	{ 2, 0, 1, 6, 7, 28, },
++	{ 1, 0, 1, 6, 7, 28, },
++	{ 0, 0, 1, 6, 8, 28, },
++	{ 2, 0, 1, 6, 8, 28, },
++	{ 1, 0, 1, 6, 8, 28, },
++	{ 0, 0, 1, 6, 9, 28, },
++	{ 2, 0, 1, 6, 9, 28, },
++	{ 1, 0, 1, 6, 9, 28, },
++	{ 0, 0, 1, 6, 10, 28, },
++	{ 2, 0, 1, 6, 10, 28, },
++	{ 1, 0, 1, 6, 10, 28, },
++	{ 0, 0, 1, 6, 11, 24, },
++	{ 2, 0, 1, 6, 11, 28, },
++	{ 1, 0, 1, 6, 11, 28, },
++	{ 0, 0, 1, 6, 12, 14, },
++	{ 2, 0, 1, 6, 12, 28, },
++	{ 1, 0, 1, 6, 12, 28, },
++	{ 0, 0, 1, 6, 13, 8, },
++	{ 2, 0, 1, 6, 13, 28, },
++	{ 1, 0, 1, 6, 13, 28, },
++	{ 0, 0, 1, 6, 14, 63, },
++	{ 2, 0, 1, 6, 14, 63, },
++	{ 1, 0, 1, 6, 14, 63, },
++	{ 0, 0, 1, 7, 1, 63, },
++	{ 2, 0, 1, 7, 1, 63, },
++	{ 1, 0, 1, 7, 1, 63, },
++	{ 0, 0, 1, 7, 2, 63, },
++	{ 2, 0, 1, 7, 2, 63, },
++	{ 1, 0, 1, 7, 2, 63, },
++	{ 0, 0, 1, 7, 3, 22, },
++	{ 2, 0, 1, 7, 3, 26, },
++	{ 1, 0, 1, 7, 3, 26, },
++	{ 0, 0, 1, 7, 4, 26, },
++	{ 2, 0, 1, 7, 4, 26, },
++	{ 1, 0, 1, 7, 4, 26, },
++	{ 0, 0, 1, 7, 5, 26, },
++	{ 2, 0, 1, 7, 5, 26, },
++	{ 1, 0, 1, 7, 5, 26, },
++	{ 0, 0, 1, 7, 6, 26, },
++	{ 2, 0, 1, 7, 6, 26, },
++	{ 1, 0, 1, 7, 6, 26, },
++	{ 0, 0, 1, 7, 7, 26, },
++	{ 2, 0, 1, 7, 7, 26, },
++	{ 1, 0, 1, 7, 7, 26, },
++	{ 0, 0, 1, 7, 8, 26, },
++	{ 2, 0, 1, 7, 8, 26, },
++	{ 1, 0, 1, 7, 8, 26, },
++	{ 0, 0, 1, 7, 9, 26, },
++	{ 2, 0, 1, 7, 9, 26, },
++	{ 1, 0, 1, 7, 9, 26, },
++	{ 0, 0, 1, 7, 10, 26, },
++	{ 2, 0, 1, 7, 10, 26, },
++	{ 1, 0, 1, 7, 10, 26, },
++	{ 0, 0, 1, 7, 11, 22, },
++	{ 2, 0, 1, 7, 11, 26, },
++	{ 1, 0, 1, 7, 11, 26, },
++	{ 0, 0, 1, 7, 12, 14, },
++	{ 2, 0, 1, 7, 12, 26, },
++	{ 1, 0, 1, 7, 12, 26, },
++	{ 0, 0, 1, 7, 13, 8, },
++	{ 2, 0, 1, 7, 13, 26, },
++	{ 1, 0, 1, 7, 13, 26, },
++	{ 0, 0, 1, 7, 14, 63, },
++	{ 2, 0, 1, 7, 14, 63, },
++	{ 1, 0, 1, 7, 14, 63, },
++	{ 0, 1, 0, 1, 36, 28, },
++	{ 2, 1, 0, 1, 36, 32, },
++	{ 1, 1, 0, 1, 36, 32, },
++	{ 0, 1, 0, 1, 40, 32, },
++	{ 2, 1, 0, 1, 40, 32, },
++	{ 1, 1, 0, 1, 40, 32, },
++	{ 0, 1, 0, 1, 44, 32, },
++	{ 2, 1, 0, 1, 44, 32, },
++	{ 1, 1, 0, 1, 44, 32, },
++	{ 0, 1, 0, 1, 48, 32, },
++	{ 2, 1, 0, 1, 48, 32, },
++	{ 1, 1, 0, 1, 48, 32, },
++	{ 0, 1, 0, 1, 52, 32, },
++	{ 2, 1, 0, 1, 52, 32, },
++	{ 1, 1, 0, 1, 52, 32, },
++	{ 0, 1, 0, 1, 56, 32, },
++	{ 2, 1, 0, 1, 56, 32, },
++	{ 1, 1, 0, 1, 56, 32, },
++	{ 0, 1, 0, 1, 60, 32, },
++	{ 2, 1, 0, 1, 60, 32, },
++	{ 1, 1, 0, 1, 60, 32, },
++	{ 0, 1, 0, 1, 64, 30, },
++	{ 2, 1, 0, 1, 64, 32, },
++	{ 1, 1, 0, 1, 64, 32, },
++	{ 0, 1, 0, 1, 100, 28, },
++	{ 2, 1, 0, 1, 100, 32, },
++	{ 1, 1, 0, 1, 100, 32, },
++	{ 0, 1, 0, 1, 104, 32, },
++	{ 2, 1, 0, 1, 104, 32, },
++	{ 1, 1, 0, 1, 104, 32, },
++	{ 0, 1, 0, 1, 108, 32, },
++	{ 2, 1, 0, 1, 108, 32, },
++	{ 1, 1, 0, 1, 108, 32, },
++	{ 0, 1, 0, 1, 112, 32, },
++	{ 2, 1, 0, 1, 112, 32, },
++	{ 1, 1, 0, 1, 112, 32, },
++	{ 0, 1, 0, 1, 116, 32, },
++	{ 2, 1, 0, 1, 116, 32, },
++	{ 1, 1, 0, 1, 116, 32, },
++	{ 0, 1, 0, 1, 120, 32, },
++	{ 2, 1, 0, 1, 120, 32, },
++	{ 1, 1, 0, 1, 120, 32, },
++	{ 0, 1, 0, 1, 124, 32, },
++	{ 2, 1, 0, 1, 124, 32, },
++	{ 1, 1, 0, 1, 124, 32, },
++	{ 0, 1, 0, 1, 128, 32, },
++	{ 2, 1, 0, 1, 128, 32, },
++	{ 1, 1, 0, 1, 128, 32, },
++	{ 0, 1, 0, 1, 132, 32, },
++	{ 2, 1, 0, 1, 132, 32, },
++	{ 1, 1, 0, 1, 132, 32, },
++	{ 0, 1, 0, 1, 136, 32, },
++	{ 2, 1, 0, 1, 136, 32, },
++	{ 1, 1, 0, 1, 136, 32, },
++	{ 0, 1, 0, 1, 140, 28, },
++	{ 2, 1, 0, 1, 140, 32, },
++	{ 1, 1, 0, 1, 140, 32, },
++	{ 0, 1, 0, 1, 149, 28, },
++	{ 2, 1, 0, 1, 149, 32, },
++	{ 1, 1, 0, 1, 149, 63, },
++	{ 0, 1, 0, 1, 153, 32, },
++	{ 2, 1, 0, 1, 153, 32, },
++	{ 1, 1, 0, 1, 153, 63, },
++	{ 0, 1, 0, 1, 157, 32, },
++	{ 2, 1, 0, 1, 157, 32, },
++	{ 1, 1, 0, 1, 157, 63, },
++	{ 0, 1, 0, 1, 161, 32, },
++	{ 2, 1, 0, 1, 161, 32, },
++	{ 1, 1, 0, 1, 161, 63, },
++	{ 0, 1, 0, 1, 165, 32, },
++	{ 2, 1, 0, 1, 165, 32, },
++	{ 1, 1, 0, 1, 165, 63, },
++	{ 0, 1, 0, 2, 36, 28, },
++	{ 2, 1, 0, 2, 36, 32, },
++	{ 1, 1, 0, 2, 36, 32, },
++	{ 0, 1, 0, 2, 40, 32, },
++	{ 2, 1, 0, 2, 40, 32, },
++	{ 1, 1, 0, 2, 40, 32, },
++	{ 0, 1, 0, 2, 44, 32, },
++	{ 2, 1, 0, 2, 44, 32, },
++	{ 1, 1, 0, 2, 44, 32, },
++	{ 0, 1, 0, 2, 48, 32, },
++	{ 2, 1, 0, 2, 48, 32, },
++	{ 1, 1, 0, 2, 48, 32, },
++	{ 0, 1, 0, 2, 52, 32, },
++	{ 2, 1, 0, 2, 52, 32, },
++	{ 1, 1, 0, 2, 52, 32, },
++	{ 0, 1, 0, 2, 56, 32, },
++	{ 2, 1, 0, 2, 56, 32, },
++	{ 1, 1, 0, 2, 56, 32, },
++	{ 0, 1, 0, 2, 60, 32, },
++	{ 2, 1, 0, 2, 60, 32, },
++	{ 1, 1, 0, 2, 60, 32, },
++	{ 0, 1, 0, 2, 64, 30, },
++	{ 2, 1, 0, 2, 64, 32, },
++	{ 1, 1, 0, 2, 64, 32, },
++	{ 0, 1, 0, 2, 100, 28, },
++	{ 2, 1, 0, 2, 100, 32, },
++	{ 1, 1, 0, 2, 100, 32, },
++	{ 0, 1, 0, 2, 104, 32, },
++	{ 2, 1, 0, 2, 104, 32, },
++	{ 1, 1, 0, 2, 104, 32, },
++	{ 0, 1, 0, 2, 108, 32, },
++	{ 2, 1, 0, 2, 108, 32, },
++	{ 1, 1, 0, 2, 108, 32, },
++	{ 0, 1, 0, 2, 112, 32, },
++	{ 2, 1, 0, 2, 112, 32, },
++	{ 1, 1, 0, 2, 112, 32, },
++	{ 0, 1, 0, 2, 116, 32, },
++	{ 2, 1, 0, 2, 116, 32, },
++	{ 1, 1, 0, 2, 116, 32, },
++	{ 0, 1, 0, 2, 120, 32, },
++	{ 2, 1, 0, 2, 120, 32, },
++	{ 1, 1, 0, 2, 120, 32, },
++	{ 0, 1, 0, 2, 124, 32, },
++	{ 2, 1, 0, 2, 124, 32, },
++	{ 1, 1, 0, 2, 124, 32, },
++	{ 0, 1, 0, 2, 128, 32, },
++	{ 2, 1, 0, 2, 128, 32, },
++	{ 1, 1, 0, 2, 128, 32, },
++	{ 0, 1, 0, 2, 132, 32, },
++	{ 2, 1, 0, 2, 132, 32, },
++	{ 1, 1, 0, 2, 132, 32, },
++	{ 0, 1, 0, 2, 136, 32, },
++	{ 2, 1, 0, 2, 136, 32, },
++	{ 1, 1, 0, 2, 136, 32, },
++	{ 0, 1, 0, 2, 140, 28, },
++	{ 2, 1, 0, 2, 140, 32, },
++	{ 1, 1, 0, 2, 140, 32, },
++	{ 0, 1, 0, 2, 149, 28, },
++	{ 2, 1, 0, 2, 149, 32, },
++	{ 1, 1, 0, 2, 149, 63, },
++	{ 0, 1, 0, 2, 153, 32, },
++	{ 2, 1, 0, 2, 153, 32, },
++	{ 1, 1, 0, 2, 153, 63, },
++	{ 0, 1, 0, 2, 157, 32, },
++	{ 2, 1, 0, 2, 157, 32, },
++	{ 1, 1, 0, 2, 157, 63, },
++	{ 0, 1, 0, 2, 161, 32, },
++	{ 2, 1, 0, 2, 161, 32, },
++	{ 1, 1, 0, 2, 161, 63, },
++	{ 0, 1, 0, 2, 165, 32, },
++	{ 2, 1, 0, 2, 165, 32, },
++	{ 1, 1, 0, 2, 165, 63, },
++	{ 0, 1, 0, 3, 36, 26, },
++	{ 2, 1, 0, 3, 36, 30, },
++	{ 1, 1, 0, 3, 36, 30, },
++	{ 0, 1, 0, 3, 40, 30, },
++	{ 2, 1, 0, 3, 40, 30, },
++	{ 1, 1, 0, 3, 40, 30, },
++	{ 0, 1, 0, 3, 44, 30, },
++	{ 2, 1, 0, 3, 44, 30, },
++	{ 1, 1, 0, 3, 44, 30, },
++	{ 0, 1, 0, 3, 48, 30, },
++	{ 2, 1, 0, 3, 48, 30, },
++	{ 1, 1, 0, 3, 48, 30, },
++	{ 0, 1, 0, 3, 52, 30, },
++	{ 2, 1, 0, 3, 52, 30, },
++	{ 1, 1, 0, 3, 52, 30, },
++	{ 0, 1, 0, 3, 56, 30, },
++	{ 2, 1, 0, 3, 56, 30, },
++	{ 1, 1, 0, 3, 56, 30, },
++	{ 0, 1, 0, 3, 60, 30, },
++	{ 2, 1, 0, 3, 60, 30, },
++	{ 1, 1, 0, 3, 60, 30, },
++	{ 0, 1, 0, 3, 64, 28, },
++	{ 2, 1, 0, 3, 64, 30, },
++	{ 1, 1, 0, 3, 64, 30, },
++	{ 0, 1, 0, 3, 100, 28, },
++	{ 2, 1, 0, 3, 100, 30, },
++	{ 1, 1, 0, 3, 100, 30, },
++	{ 0, 1, 0, 3, 104, 30, },
++	{ 2, 1, 0, 3, 104, 30, },
++	{ 1, 1, 0, 3, 104, 30, },
++	{ 0, 1, 0, 3, 108, 30, },
++	{ 2, 1, 0, 3, 108, 30, },
++	{ 1, 1, 0, 3, 108, 30, },
++	{ 0, 1, 0, 3, 112, 30, },
++	{ 2, 1, 0, 3, 112, 30, },
++	{ 1, 1, 0, 3, 112, 30, },
++	{ 0, 1, 0, 3, 116, 30, },
++	{ 2, 1, 0, 3, 116, 30, },
++	{ 1, 1, 0, 3, 116, 30, },
++	{ 0, 1, 0, 3, 120, 30, },
++	{ 2, 1, 0, 3, 120, 30, },
++	{ 1, 1, 0, 3, 120, 30, },
++	{ 0, 1, 0, 3, 124, 30, },
++	{ 2, 1, 0, 3, 124, 30, },
++	{ 1, 1, 0, 3, 124, 30, },
++	{ 0, 1, 0, 3, 128, 30, },
++	{ 2, 1, 0, 3, 128, 30, },
++	{ 1, 1, 0, 3, 128, 30, },
++	{ 0, 1, 0, 3, 132, 30, },
++	{ 2, 1, 0, 3, 132, 30, },
++	{ 1, 1, 0, 3, 132, 30, },
++	{ 0, 1, 0, 3, 136, 30, },
++	{ 2, 1, 0, 3, 136, 30, },
++	{ 1, 1, 0, 3, 136, 30, },
++	{ 0, 1, 0, 3, 140, 26, },
++	{ 2, 1, 0, 3, 140, 30, },
++	{ 1, 1, 0, 3, 140, 30, },
++	{ 0, 1, 0, 3, 149, 26, },
++	{ 2, 1, 0, 3, 149, 30, },
++	{ 1, 1, 0, 3, 149, 63, },
++	{ 0, 1, 0, 3, 153, 30, },
++	{ 2, 1, 0, 3, 153, 30, },
++	{ 1, 1, 0, 3, 153, 63, },
++	{ 0, 1, 0, 3, 157, 30, },
++	{ 2, 1, 0, 3, 157, 30, },
++	{ 1, 1, 0, 3, 157, 63, },
++	{ 0, 1, 0, 3, 161, 30, },
++	{ 2, 1, 0, 3, 161, 30, },
++	{ 1, 1, 0, 3, 161, 63, },
++	{ 0, 1, 0, 3, 165, 30, },
++	{ 2, 1, 0, 3, 165, 30, },
++	{ 1, 1, 0, 3, 165, 63, },
++	{ 0, 1, 0, 6, 36, 24, },
++	{ 2, 1, 0, 6, 36, 28, },
++	{ 1, 1, 0, 6, 36, 28, },
++	{ 0, 1, 0, 6, 40, 28, },
++	{ 2, 1, 0, 6, 40, 28, },
++	{ 1, 1, 0, 6, 40, 28, },
++	{ 0, 1, 0, 6, 44, 28, },
++	{ 2, 1, 0, 6, 44, 28, },
++	{ 1, 1, 0, 6, 44, 28, },
++	{ 0, 1, 0, 6, 48, 28, },
++	{ 2, 1, 0, 6, 48, 28, },
++	{ 1, 1, 0, 6, 48, 28, },
++	{ 0, 1, 0, 6, 52, 28, },
++	{ 2, 1, 0, 6, 52, 28, },
++	{ 1, 1, 0, 6, 52, 28, },
++	{ 0, 1, 0, 6, 56, 28, },
++	{ 2, 1, 0, 6, 56, 28, },
++	{ 1, 1, 0, 6, 56, 28, },
++	{ 0, 1, 0, 6, 60, 28, },
++	{ 2, 1, 0, 6, 60, 28, },
++	{ 1, 1, 0, 6, 60, 28, },
++	{ 0, 1, 0, 6, 64, 26, },
++	{ 2, 1, 0, 6, 64, 28, },
++	{ 1, 1, 0, 6, 64, 28, },
++	{ 0, 1, 0, 6, 100, 24, },
++	{ 2, 1, 0, 6, 100, 28, },
++	{ 1, 1, 0, 6, 100, 28, },
++	{ 0, 1, 0, 6, 104, 28, },
++	{ 2, 1, 0, 6, 104, 28, },
++	{ 1, 1, 0, 6, 104, 28, },
++	{ 0, 1, 0, 6, 108, 28, },
++	{ 2, 1, 0, 6, 108, 28, },
++	{ 1, 1, 0, 6, 108, 28, },
++	{ 0, 1, 0, 6, 112, 28, },
++	{ 2, 1, 0, 6, 112, 28, },
++	{ 1, 1, 0, 6, 112, 28, },
++	{ 0, 1, 0, 6, 116, 28, },
++	{ 2, 1, 0, 6, 116, 28, },
++	{ 1, 1, 0, 6, 116, 28, },
++	{ 0, 1, 0, 6, 120, 28, },
++	{ 2, 1, 0, 6, 120, 28, },
++	{ 1, 1, 0, 6, 120, 28, },
++	{ 0, 1, 0, 6, 124, 28, },
++	{ 2, 1, 0, 6, 124, 28, },
++	{ 1, 1, 0, 6, 124, 28, },
++	{ 0, 1, 0, 6, 128, 28, },
++	{ 2, 1, 0, 6, 128, 28, },
++	{ 1, 1, 0, 6, 128, 28, },
++	{ 0, 1, 0, 6, 132, 28, },
++	{ 2, 1, 0, 6, 132, 28, },
++	{ 1, 1, 0, 6, 132, 28, },
++	{ 0, 1, 0, 6, 136, 28, },
++	{ 2, 1, 0, 6, 136, 28, },
++	{ 1, 1, 0, 6, 136, 28, },
++	{ 0, 1, 0, 6, 140, 24, },
++	{ 2, 1, 0, 6, 140, 28, },
++	{ 1, 1, 0, 6, 140, 28, },
++	{ 0, 1, 0, 6, 149, 24, },
++	{ 2, 1, 0, 6, 149, 28, },
++	{ 1, 1, 0, 6, 149, 63, },
++	{ 0, 1, 0, 6, 153, 28, },
++	{ 2, 1, 0, 6, 153, 28, },
++	{ 1, 1, 0, 6, 153, 63, },
++	{ 0, 1, 0, 6, 157, 28, },
++	{ 2, 1, 0, 6, 157, 28, },
++	{ 1, 1, 0, 6, 157, 63, },
++	{ 0, 1, 0, 6, 161, 28, },
++	{ 2, 1, 0, 6, 161, 28, },
++	{ 1, 1, 0, 6, 161, 63, },
++	{ 0, 1, 0, 6, 165, 28, },
++	{ 2, 1, 0, 6, 165, 28, },
++	{ 1, 1, 0, 6, 165, 63, },
++	{ 0, 1, 0, 7, 36, 22, },
++	{ 2, 1, 0, 7, 36, 26, },
++	{ 1, 1, 0, 7, 36, 26, },
++	{ 0, 1, 0, 7, 40, 26, },
++	{ 2, 1, 0, 7, 40, 26, },
++	{ 1, 1, 0, 7, 40, 26, },
++	{ 0, 1, 0, 7, 44, 26, },
++	{ 2, 1, 0, 7, 44, 26, },
++	{ 1, 1, 0, 7, 44, 26, },
++	{ 0, 1, 0, 7, 48, 26, },
++	{ 2, 1, 0, 7, 48, 26, },
++	{ 1, 1, 0, 7, 48, 26, },
++	{ 0, 1, 0, 7, 52, 26, },
++	{ 2, 1, 0, 7, 52, 26, },
++	{ 1, 1, 0, 7, 52, 26, },
++	{ 0, 1, 0, 7, 56, 26, },
++	{ 2, 1, 0, 7, 56, 26, },
++	{ 1, 1, 0, 7, 56, 26, },
++	{ 0, 1, 0, 7, 60, 26, },
++	{ 2, 1, 0, 7, 60, 26, },
++	{ 1, 1, 0, 7, 60, 26, },
++	{ 0, 1, 0, 7, 64, 24, },
++	{ 2, 1, 0, 7, 64, 26, },
++	{ 1, 1, 0, 7, 64, 26, },
++	{ 0, 1, 0, 7, 100, 22, },
++	{ 2, 1, 0, 7, 100, 26, },
++	{ 1, 1, 0, 7, 100, 26, },
++	{ 0, 1, 0, 7, 104, 26, },
++	{ 2, 1, 0, 7, 104, 26, },
++	{ 1, 1, 0, 7, 104, 26, },
++	{ 0, 1, 0, 7, 108, 26, },
++	{ 2, 1, 0, 7, 108, 26, },
++	{ 1, 1, 0, 7, 108, 26, },
++	{ 0, 1, 0, 7, 112, 26, },
++	{ 2, 1, 0, 7, 112, 26, },
++	{ 1, 1, 0, 7, 112, 26, },
++	{ 0, 1, 0, 7, 116, 26, },
++	{ 2, 1, 0, 7, 116, 26, },
++	{ 1, 1, 0, 7, 116, 26, },
++	{ 0, 1, 0, 7, 120, 26, },
++	{ 2, 1, 0, 7, 120, 26, },
++	{ 1, 1, 0, 7, 120, 26, },
++	{ 0, 1, 0, 7, 124, 26, },
++	{ 2, 1, 0, 7, 124, 26, },
++	{ 1, 1, 0, 7, 124, 26, },
++	{ 0, 1, 0, 7, 128, 26, },
++	{ 2, 1, 0, 7, 128, 26, },
++	{ 1, 1, 0, 7, 128, 26, },
++	{ 0, 1, 0, 7, 132, 26, },
++	{ 2, 1, 0, 7, 132, 26, },
++	{ 1, 1, 0, 7, 132, 26, },
++	{ 0, 1, 0, 7, 136, 26, },
++	{ 2, 1, 0, 7, 136, 26, },
++	{ 1, 1, 0, 7, 136, 26, },
++	{ 0, 1, 0, 7, 140, 22, },
++	{ 2, 1, 0, 7, 140, 26, },
++	{ 1, 1, 0, 7, 140, 26, },
++	{ 0, 1, 0, 7, 149, 22, },
++	{ 2, 1, 0, 7, 149, 26, },
++	{ 1, 1, 0, 7, 149, 63, },
++	{ 0, 1, 0, 7, 153, 26, },
++	{ 2, 1, 0, 7, 153, 26, },
++	{ 1, 1, 0, 7, 153, 63, },
++	{ 0, 1, 0, 7, 157, 26, },
++	{ 2, 1, 0, 7, 157, 26, },
++	{ 1, 1, 0, 7, 157, 63, },
++	{ 0, 1, 0, 7, 161, 26, },
++	{ 2, 1, 0, 7, 161, 26, },
++	{ 1, 1, 0, 7, 161, 63, },
++	{ 0, 1, 0, 7, 165, 26, },
++	{ 2, 1, 0, 7, 165, 26, },
++	{ 1, 1, 0, 7, 165, 63, },
++	{ 0, 1, 1, 2, 38, 28, },
++	{ 2, 1, 1, 2, 38, 32, },
++	{ 1, 1, 1, 2, 38, 32, },
++	{ 0, 1, 1, 2, 46, 32, },
++	{ 2, 1, 1, 2, 46, 32, },
++	{ 1, 1, 1, 2, 46, 32, },
++	{ 0, 1, 1, 2, 54, 32, },
++	{ 2, 1, 1, 2, 54, 32, },
++	{ 1, 1, 1, 2, 54, 32, },
++	{ 0, 1, 1, 2, 62, 28, },
++	{ 2, 1, 1, 2, 62, 32, },
++	{ 1, 1, 1, 2, 62, 32, },
++	{ 0, 1, 1, 2, 102, 28, },
++	{ 2, 1, 1, 2, 102, 32, },
++	{ 1, 1, 1, 2, 102, 32, },
++	{ 0, 1, 1, 2, 110, 32, },
++	{ 2, 1, 1, 2, 110, 32, },
++	{ 1, 1, 1, 2, 110, 32, },
++	{ 0, 1, 1, 2, 118, 32, },
++	{ 2, 1, 1, 2, 118, 32, },
++	{ 1, 1, 1, 2, 118, 32, },
++	{ 0, 1, 1, 2, 126, 32, },
++	{ 2, 1, 1, 2, 126, 32, },
++	{ 1, 1, 1, 2, 126, 32, },
++	{ 0, 1, 1, 2, 134, 30, },
++	{ 2, 1, 1, 2, 134, 32, },
++	{ 1, 1, 1, 2, 134, 32, },
++	{ 0, 1, 1, 2, 151, 28, },
++	{ 2, 1, 1, 2, 151, 32, },
++	{ 1, 1, 1, 2, 151, 63, },
++	{ 0, 1, 1, 2, 159, 32, },
++	{ 2, 1, 1, 2, 159, 32, },
++	{ 1, 1, 1, 2, 159, 63, },
++	{ 0, 1, 1, 3, 38, 26, },
++	{ 2, 1, 1, 3, 38, 30, },
++	{ 1, 1, 1, 3, 38, 30, },
++	{ 0, 1, 1, 3, 46, 30, },
++	{ 2, 1, 1, 3, 46, 30, },
++	{ 1, 1, 1, 3, 46, 30, },
++	{ 0, 1, 1, 3, 54, 30, },
++	{ 2, 1, 1, 3, 54, 30, },
++	{ 1, 1, 1, 3, 54, 30, },
++	{ 0, 1, 1, 3, 62, 26, },
++	{ 2, 1, 1, 3, 62, 30, },
++	{ 1, 1, 1, 3, 62, 30, },
++	{ 0, 1, 1, 3, 102, 26, },
++	{ 2, 1, 1, 3, 102, 30, },
++	{ 1, 1, 1, 3, 102, 30, },
++	{ 0, 1, 1, 3, 110, 30, },
++	{ 2, 1, 1, 3, 110, 30, },
++	{ 1, 1, 1, 3, 110, 30, },
++	{ 0, 1, 1, 3, 118, 30, },
++	{ 2, 1, 1, 3, 118, 30, },
++	{ 1, 1, 1, 3, 118, 30, },
++	{ 0, 1, 1, 3, 126, 30, },
++	{ 2, 1, 1, 3, 126, 30, },
++	{ 1, 1, 1, 3, 126, 30, },
++	{ 0, 1, 1, 3, 134, 28, },
++	{ 2, 1, 1, 3, 134, 30, },
++	{ 1, 1, 1, 3, 134, 30, },
++	{ 0, 1, 1, 3, 151, 26, },
++	{ 2, 1, 1, 3, 151, 30, },
++	{ 1, 1, 1, 3, 151, 63, },
++	{ 0, 1, 1, 3, 159, 30, },
++	{ 2, 1, 1, 3, 159, 30, },
++	{ 1, 1, 1, 3, 159, 63, },
++	{ 0, 1, 1, 6, 38, 20, },
++	{ 2, 1, 1, 6, 38, 28, },
++	{ 1, 1, 1, 6, 38, 28, },
++	{ 0, 1, 1, 6, 46, 28, },
++	{ 2, 1, 1, 6, 46, 28, },
++	{ 1, 1, 1, 6, 46, 28, },
++	{ 0, 1, 1, 6, 54, 28, },
++	{ 2, 1, 1, 6, 54, 28, },
++	{ 1, 1, 1, 6, 54, 28, },
++	{ 0, 1, 1, 6, 62, 20, },
++	{ 2, 1, 1, 6, 62, 28, },
++	{ 1, 1, 1, 6, 62, 28, },
++	{ 0, 1, 1, 6, 102, 22, },
++	{ 2, 1, 1, 6, 102, 28, },
++	{ 1, 1, 1, 6, 102, 28, },
++	{ 0, 1, 1, 6, 110, 28, },
++	{ 2, 1, 1, 6, 110, 28, },
++	{ 1, 1, 1, 6, 110, 28, },
++	{ 0, 1, 1, 6, 118, 28, },
++	{ 2, 1, 1, 6, 118, 28, },
++	{ 1, 1, 1, 6, 118, 28, },
++	{ 0, 1, 1, 6, 126, 28, },
++	{ 2, 1, 1, 6, 126, 28, },
++	{ 1, 1, 1, 6, 126, 28, },
++	{ 0, 1, 1, 6, 134, 26, },
++	{ 2, 1, 1, 6, 134, 28, },
++	{ 1, 1, 1, 6, 134, 28, },
++	{ 0, 1, 1, 6, 151, 22, },
++	{ 2, 1, 1, 6, 151, 28, },
++	{ 1, 1, 1, 6, 151, 63, },
++	{ 0, 1, 1, 6, 159, 28, },
++	{ 2, 1, 1, 6, 159, 28, },
++	{ 1, 1, 1, 6, 159, 63, },
++	{ 0, 1, 1, 7, 38, 18, },
++	{ 2, 1, 1, 7, 38, 26, },
++	{ 1, 1, 1, 7, 38, 26, },
++	{ 0, 1, 1, 7, 46, 26, },
++	{ 2, 1, 1, 7, 46, 26, },
++	{ 1, 1, 1, 7, 46, 26, },
++	{ 0, 1, 1, 7, 54, 26, },
++	{ 2, 1, 1, 7, 54, 26, },
++	{ 1, 1, 1, 7, 54, 26, },
++	{ 0, 1, 1, 7, 62, 18, },
++	{ 2, 1, 1, 7, 62, 26, },
++	{ 1, 1, 1, 7, 62, 26, },
++	{ 0, 1, 1, 7, 102, 20, },
++	{ 2, 1, 1, 7, 102, 26, },
++	{ 1, 1, 1, 7, 102, 26, },
++	{ 0, 1, 1, 7, 110, 26, },
++	{ 2, 1, 1, 7, 110, 26, },
++	{ 1, 1, 1, 7, 110, 26, },
++	{ 0, 1, 1, 7, 118, 26, },
++	{ 2, 1, 1, 7, 118, 26, },
++	{ 1, 1, 1, 7, 118, 26, },
++	{ 0, 1, 1, 7, 126, 26, },
++	{ 2, 1, 1, 7, 126, 26, },
++	{ 1, 1, 1, 7, 126, 26, },
++	{ 0, 1, 1, 7, 134, 24, },
++	{ 2, 1, 1, 7, 134, 26, },
++	{ 1, 1, 1, 7, 134, 26, },
++	{ 0, 1, 1, 7, 151, 20, },
++	{ 2, 1, 1, 7, 151, 26, },
++	{ 1, 1, 1, 7, 151, 63, },
++	{ 0, 1, 1, 7, 159, 26, },
++	{ 2, 1, 1, 7, 159, 26, },
++	{ 1, 1, 1, 7, 159, 63, },
++	{ 0, 1, 2, 4, 42, 24, },
++	{ 2, 1, 2, 4, 42, 32, },
++	{ 1, 1, 2, 4, 42, 32, },
++	{ 0, 1, 2, 4, 58, 24, },
++	{ 2, 1, 2, 4, 58, 32, },
++	{ 1, 1, 2, 4, 58, 32, },
++	{ 0, 1, 2, 4, 106, 24, },
++	{ 2, 1, 2, 4, 106, 32, },
++	{ 1, 1, 2, 4, 106, 32, },
++	{ 0, 1, 2, 4, 122, 32, },
++	{ 2, 1, 2, 4, 122, 32, },
++	{ 1, 1, 2, 4, 122, 32, },
++	{ 0, 1, 2, 4, 155, 26, },
++	{ 2, 1, 2, 4, 155, 32, },
++	{ 1, 1, 2, 4, 155, 63, },
++	{ 0, 1, 2, 5, 42, 22, },
++	{ 2, 1, 2, 5, 42, 30, },
++	{ 1, 1, 2, 5, 42, 30, },
++	{ 0, 1, 2, 5, 58, 22, },
++	{ 2, 1, 2, 5, 58, 30, },
++	{ 1, 1, 2, 5, 58, 30, },
++	{ 0, 1, 2, 5, 106, 22, },
++	{ 2, 1, 2, 5, 106, 30, },
++	{ 1, 1, 2, 5, 106, 30, },
++	{ 0, 1, 2, 5, 122, 30, },
++	{ 2, 1, 2, 5, 122, 30, },
++	{ 1, 1, 2, 5, 122, 30, },
++	{ 0, 1, 2, 5, 155, 24, },
++	{ 2, 1, 2, 5, 155, 30, },
++	{ 1, 1, 2, 5, 155, 63, },
++	{ 0, 1, 2, 8, 42, 20, },
++	{ 2, 1, 2, 8, 42, 28, },
++	{ 1, 1, 2, 8, 42, 28, },
++	{ 0, 1, 2, 8, 58, 20, },
++	{ 2, 1, 2, 8, 58, 28, },
++	{ 1, 1, 2, 8, 58, 28, },
++	{ 0, 1, 2, 8, 106, 20, },
++	{ 2, 1, 2, 8, 106, 28, },
++	{ 1, 1, 2, 8, 106, 28, },
++	{ 0, 1, 2, 8, 122, 28, },
++	{ 2, 1, 2, 8, 122, 28, },
++	{ 1, 1, 2, 8, 122, 28, },
++	{ 0, 1, 2, 8, 155, 20, },
++	{ 2, 1, 2, 8, 155, 28, },
++	{ 1, 1, 2, 8, 155, 63, },
++	{ 0, 1, 2, 9, 42, 18, },
++	{ 2, 1, 2, 9, 42, 26, },
++	{ 1, 1, 2, 9, 42, 26, },
++	{ 0, 1, 2, 9, 58, 18, },
++	{ 2, 1, 2, 9, 58, 26, },
++	{ 1, 1, 2, 9, 58, 26, },
++	{ 0, 1, 2, 9, 106, 18, },
++	{ 2, 1, 2, 9, 106, 26, },
++	{ 1, 1, 2, 9, 106, 26, },
++	{ 0, 1, 2, 9, 122, 26, },
++	{ 2, 1, 2, 9, 122, 26, },
++	{ 1, 1, 2, 9, 122, 26, },
++	{ 0, 1, 2, 9, 155, 18, },
++	{ 2, 1, 2, 9, 155, 26, },
++	{ 1, 1, 2, 9, 155, 63, },
++};
++
++RTW_DECL_TABLE_TXPWR_LMT(rtw8814a_txpwr_lmt_type1);
++
++static const struct rtw_txpwr_lmt_cfg_pair rtw8814a_txpwr_lmt_type2[] = {
++	{ 0, 0, 0, 0, 1, 42, },
++	{ 2, 0, 0, 0, 1, 42, },
++	{ 1, 0, 0, 0, 1, 42, },
++	{ 0, 0, 0, 0, 2, 50, },
++	{ 2, 0, 0, 0, 2, 42, },
++	{ 1, 0, 0, 0, 2, 42, },
++	{ 0, 0, 0, 0, 3, 50, },
++	{ 2, 0, 0, 0, 3, 42, },
++	{ 1, 0, 0, 0, 3, 42, },
++	{ 0, 0, 0, 0, 4, 50, },
++	{ 2, 0, 0, 0, 4, 42, },
++	{ 1, 0, 0, 0, 4, 42, },
++	{ 0, 0, 0, 0, 5, 50, },
++	{ 2, 0, 0, 0, 5, 42, },
++	{ 1, 0, 0, 0, 5, 42, },
++	{ 0, 0, 0, 0, 6, 50, },
++	{ 2, 0, 0, 0, 6, 42, },
++	{ 1, 0, 0, 0, 6, 42, },
++	{ 0, 0, 0, 0, 7, 50, },
++	{ 2, 0, 0, 0, 7, 42, },
++	{ 1, 0, 0, 0, 7, 42, },
++	{ 0, 0, 0, 0, 8, 50, },
++	{ 2, 0, 0, 0, 8, 42, },
++	{ 1, 0, 0, 0, 8, 42, },
++	{ 0, 0, 0, 0, 9, 50, },
++	{ 2, 0, 0, 0, 9, 42, },
++	{ 1, 0, 0, 0, 9, 42, },
++	{ 0, 0, 0, 0, 10, 50, },
++	{ 2, 0, 0, 0, 10, 42, },
++	{ 1, 0, 0, 0, 10, 42, },
++	{ 0, 0, 0, 0, 11, 44, },
++	{ 2, 0, 0, 0, 11, 42, },
++	{ 1, 0, 0, 0, 11, 42, },
++	{ 0, 0, 0, 0, 12, 63, },
++	{ 2, 0, 0, 0, 12, 42, },
++	{ 1, 0, 0, 0, 12, 42, },
++	{ 0, 0, 0, 0, 13, 63, },
++	{ 2, 0, 0, 0, 13, 42, },
++	{ 1, 0, 0, 0, 13, 42, },
++	{ 0, 0, 0, 0, 14, 63, },
++	{ 2, 0, 0, 0, 14, 63, },
++	{ 1, 0, 0, 0, 14, 42, },
++	{ 0, 0, 0, 1, 1, 32, },
++	{ 2, 0, 0, 1, 1, 42, },
++	{ 1, 0, 0, 1, 1, 42, },
++	{ 0, 0, 0, 1, 2, 42, },
++	{ 2, 0, 0, 1, 2, 42, },
++	{ 1, 0, 0, 1, 2, 42, },
++	{ 0, 0, 0, 1, 3, 42, },
++	{ 2, 0, 0, 1, 3, 42, },
++	{ 1, 0, 0, 1, 3, 42, },
++	{ 0, 0, 0, 1, 4, 42, },
++	{ 2, 0, 0, 1, 4, 42, },
++	{ 1, 0, 0, 1, 4, 42, },
++	{ 0, 0, 0, 1, 5, 42, },
++	{ 2, 0, 0, 1, 5, 42, },
++	{ 1, 0, 0, 1, 5, 42, },
++	{ 0, 0, 0, 1, 6, 42, },
++	{ 2, 0, 0, 1, 6, 42, },
++	{ 1, 0, 0, 1, 6, 42, },
++	{ 0, 0, 0, 1, 7, 42, },
++	{ 2, 0, 0, 1, 7, 42, },
++	{ 1, 0, 0, 1, 7, 42, },
++	{ 0, 0, 0, 1, 8, 42, },
++	{ 2, 0, 0, 1, 8, 42, },
++	{ 1, 0, 0, 1, 8, 42, },
++	{ 0, 0, 0, 1, 9, 42, },
++	{ 2, 0, 0, 1, 9, 42, },
++	{ 1, 0, 0, 1, 9, 42, },
++	{ 0, 0, 0, 1, 10, 42, },
++	{ 2, 0, 0, 1, 10, 42, },
++	{ 1, 0, 0, 1, 10, 42, },
++	{ 0, 0, 0, 1, 11, 32, },
++	{ 2, 0, 0, 1, 11, 42, },
++	{ 1, 0, 0, 1, 11, 42, },
++	{ 0, 0, 0, 1, 12, 63, },
++	{ 2, 0, 0, 1, 12, 42, },
++	{ 1, 0, 0, 1, 12, 42, },
++	{ 0, 0, 0, 1, 13, 63, },
++	{ 2, 0, 0, 1, 13, 42, },
++	{ 1, 0, 0, 1, 13, 42, },
++	{ 0, 0, 0, 1, 14, 63, },
++	{ 2, 0, 0, 1, 14, 63, },
++	{ 1, 0, 0, 1, 14, 63, },
++	{ 0, 0, 0, 2, 1, 32, },
++	{ 2, 0, 0, 2, 1, 42, },
++	{ 1, 0, 0, 2, 1, 42, },
++	{ 0, 0, 0, 2, 2, 40, },
++	{ 2, 0, 0, 2, 2, 42, },
++	{ 1, 0, 0, 2, 2, 42, },
++	{ 0, 0, 0, 2, 3, 40, },
++	{ 2, 0, 0, 2, 3, 42, },
++	{ 1, 0, 0, 2, 3, 42, },
++	{ 0, 0, 0, 2, 4, 40, },
++	{ 2, 0, 0, 2, 4, 42, },
++	{ 1, 0, 0, 2, 4, 42, },
++	{ 0, 0, 0, 2, 5, 40, },
++	{ 2, 0, 0, 2, 5, 42, },
++	{ 1, 0, 0, 2, 5, 42, },
++	{ 0, 0, 0, 2, 6, 40, },
++	{ 2, 0, 0, 2, 6, 42, },
++	{ 1, 0, 0, 2, 6, 42, },
++	{ 0, 0, 0, 2, 7, 40, },
++	{ 2, 0, 0, 2, 7, 42, },
++	{ 1, 0, 0, 2, 7, 42, },
++	{ 0, 0, 0, 2, 8, 40, },
++	{ 2, 0, 0, 2, 8, 42, },
++	{ 1, 0, 0, 2, 8, 42, },
++	{ 0, 0, 0, 2, 9, 40, },
++	{ 2, 0, 0, 2, 9, 42, },
++	{ 1, 0, 0, 2, 9, 42, },
++	{ 0, 0, 0, 2, 10, 40, },
++	{ 2, 0, 0, 2, 10, 42, },
++	{ 1, 0, 0, 2, 10, 42, },
++	{ 0, 0, 0, 2, 11, 28, },
++	{ 2, 0, 0, 2, 11, 42, },
++	{ 1, 0, 0, 2, 11, 42, },
++	{ 0, 0, 0, 2, 12, 63, },
++	{ 2, 0, 0, 2, 12, 42, },
++	{ 1, 0, 0, 2, 12, 42, },
++	{ 0, 0, 0, 2, 13, 63, },
++	{ 2, 0, 0, 2, 13, 42, },
++	{ 1, 0, 0, 2, 13, 42, },
++	{ 0, 0, 0, 2, 14, 63, },
++	{ 2, 0, 0, 2, 14, 63, },
++	{ 1, 0, 0, 2, 14, 63, },
++	{ 0, 0, 0, 3, 1, 32, },
++	{ 2, 0, 0, 3, 1, 40, },
++	{ 1, 0, 0, 3, 1, 40, },
++	{ 0, 0, 0, 3, 2, 40, },
++	{ 2, 0, 0, 3, 2, 40, },
++	{ 1, 0, 0, 3, 2, 40, },
++	{ 0, 0, 0, 3, 3, 40, },
++	{ 2, 0, 0, 3, 3, 40, },
++	{ 1, 0, 0, 3, 3, 40, },
++	{ 0, 0, 0, 3, 4, 40, },
++	{ 2, 0, 0, 3, 4, 40, },
++	{ 1, 0, 0, 3, 4, 40, },
++	{ 0, 0, 0, 3, 5, 40, },
++	{ 2, 0, 0, 3, 5, 40, },
++	{ 1, 0, 0, 3, 5, 40, },
++	{ 0, 0, 0, 3, 6, 40, },
++	{ 2, 0, 0, 3, 6, 40, },
++	{ 1, 0, 0, 3, 6, 40, },
++	{ 0, 0, 0, 3, 7, 40, },
++	{ 2, 0, 0, 3, 7, 40, },
++	{ 1, 0, 0, 3, 7, 40, },
++	{ 0, 0, 0, 3, 8, 40, },
++	{ 2, 0, 0, 3, 8, 40, },
++	{ 1, 0, 0, 3, 8, 40, },
++	{ 0, 0, 0, 3, 9, 40, },
++	{ 2, 0, 0, 3, 9, 40, },
++	{ 1, 0, 0, 3, 9, 40, },
++	{ 0, 0, 0, 3, 10, 40, },
++	{ 2, 0, 0, 3, 10, 40, },
++	{ 1, 0, 0, 3, 10, 40, },
++	{ 0, 0, 0, 3, 11, 28, },
++	{ 2, 0, 0, 3, 11, 40, },
++	{ 1, 0, 0, 3, 11, 40, },
++	{ 0, 0, 0, 3, 12, 63, },
++	{ 2, 0, 0, 3, 12, 40, },
++	{ 1, 0, 0, 3, 12, 40, },
++	{ 0, 0, 0, 3, 13, 63, },
++	{ 2, 0, 0, 3, 13, 40, },
++	{ 1, 0, 0, 3, 13, 40, },
++	{ 0, 0, 0, 3, 14, 63, },
++	{ 2, 0, 0, 3, 14, 63, },
++	{ 1, 0, 0, 3, 14, 63, },
++	{ 0, 0, 0, 6, 1, 32, },
++	{ 2, 0, 0, 6, 1, 40, },
++	{ 1, 0, 0, 6, 1, 40, },
++	{ 0, 0, 0, 6, 2, 40, },
++	{ 2, 0, 0, 6, 2, 40, },
++	{ 1, 0, 0, 6, 2, 40, },
++	{ 0, 0, 0, 6, 3, 40, },
++	{ 2, 0, 0, 6, 3, 40, },
++	{ 1, 0, 0, 6, 3, 40, },
++	{ 0, 0, 0, 6, 4, 40, },
++	{ 2, 0, 0, 6, 4, 40, },
++	{ 1, 0, 0, 6, 4, 40, },
++	{ 0, 0, 0, 6, 5, 40, },
++	{ 2, 0, 0, 6, 5, 40, },
++	{ 1, 0, 0, 6, 5, 40, },
++	{ 0, 0, 0, 6, 6, 40, },
++	{ 2, 0, 0, 6, 6, 40, },
++	{ 1, 0, 0, 6, 6, 40, },
++	{ 0, 0, 0, 6, 7, 40, },
++	{ 2, 0, 0, 6, 7, 40, },
++	{ 1, 0, 0, 6, 7, 40, },
++	{ 0, 0, 0, 6, 8, 40, },
++	{ 2, 0, 0, 6, 8, 40, },
++	{ 1, 0, 0, 6, 8, 40, },
++	{ 0, 0, 0, 6, 9, 40, },
++	{ 2, 0, 0, 6, 9, 40, },
++	{ 1, 0, 0, 6, 9, 40, },
++	{ 0, 0, 0, 6, 10, 40, },
++	{ 2, 0, 0, 6, 10, 40, },
++	{ 1, 0, 0, 6, 10, 40, },
++	{ 0, 0, 0, 6, 11, 28, },
++	{ 2, 0, 0, 6, 11, 40, },
++	{ 1, 0, 0, 6, 11, 40, },
++	{ 0, 0, 0, 6, 12, 63, },
++	{ 2, 0, 0, 6, 12, 40, },
++	{ 1, 0, 0, 6, 12, 40, },
++	{ 0, 0, 0, 6, 13, 63, },
++	{ 2, 0, 0, 6, 13, 40, },
++	{ 1, 0, 0, 6, 13, 40, },
++	{ 0, 0, 0, 6, 14, 63, },
++	{ 2, 0, 0, 6, 14, 63, },
++	{ 1, 0, 0, 6, 14, 63, },
++	{ 0, 0, 0, 7, 1, 32, },
++	{ 2, 0, 0, 7, 1, 40, },
++	{ 1, 0, 0, 7, 1, 40, },
++	{ 0, 0, 0, 7, 2, 40, },
++	{ 2, 0, 0, 7, 2, 40, },
++	{ 1, 0, 0, 7, 2, 40, },
++	{ 0, 0, 0, 7, 3, 40, },
++	{ 2, 0, 0, 7, 3, 40, },
++	{ 1, 0, 0, 7, 3, 40, },
++	{ 0, 0, 0, 7, 4, 40, },
++	{ 2, 0, 0, 7, 4, 40, },
++	{ 1, 0, 0, 7, 4, 40, },
++	{ 0, 0, 0, 7, 5, 40, },
++	{ 2, 0, 0, 7, 5, 40, },
++	{ 1, 0, 0, 7, 5, 40, },
++	{ 0, 0, 0, 7, 6, 40, },
++	{ 2, 0, 0, 7, 6, 40, },
++	{ 1, 0, 0, 7, 6, 40, },
++	{ 0, 0, 0, 7, 7, 40, },
++	{ 2, 0, 0, 7, 7, 40, },
++	{ 1, 0, 0, 7, 7, 40, },
++	{ 0, 0, 0, 7, 8, 40, },
++	{ 2, 0, 0, 7, 8, 40, },
++	{ 1, 0, 0, 7, 8, 40, },
++	{ 0, 0, 0, 7, 9, 40, },
++	{ 2, 0, 0, 7, 9, 40, },
++	{ 1, 0, 0, 7, 9, 40, },
++	{ 0, 0, 0, 7, 10, 40, },
++	{ 2, 0, 0, 7, 10, 40, },
++	{ 1, 0, 0, 7, 10, 40, },
++	{ 0, 0, 0, 7, 11, 28, },
++	{ 2, 0, 0, 7, 11, 40, },
++	{ 1, 0, 0, 7, 11, 40, },
++	{ 0, 0, 0, 7, 12, 63, },
++	{ 2, 0, 0, 7, 12, 40, },
++	{ 1, 0, 0, 7, 12, 40, },
++	{ 0, 0, 0, 7, 13, 63, },
++	{ 2, 0, 0, 7, 13, 40, },
++	{ 1, 0, 0, 7, 13, 40, },
++	{ 0, 0, 0, 7, 14, 63, },
++	{ 2, 0, 0, 7, 14, 63, },
++	{ 1, 0, 0, 7, 14, 63, },
++	{ 0, 0, 1, 2, 1, 63, },
++	{ 2, 0, 1, 2, 1, 63, },
++	{ 1, 0, 1, 2, 1, 63, },
++	{ 0, 0, 1, 2, 2, 63, },
++	{ 2, 0, 1, 2, 2, 63, },
++	{ 1, 0, 1, 2, 2, 63, },
++	{ 0, 0, 1, 2, 3, 30, },
++	{ 2, 0, 1, 2, 3, 34, },
++	{ 1, 0, 1, 2, 3, 34, },
++	{ 0, 0, 1, 2, 4, 34, },
++	{ 2, 0, 1, 2, 4, 34, },
++	{ 1, 0, 1, 2, 4, 34, },
++	{ 0, 0, 1, 2, 5, 34, },
++	{ 2, 0, 1, 2, 5, 34, },
++	{ 1, 0, 1, 2, 5, 34, },
++	{ 0, 0, 1, 2, 6, 34, },
++	{ 2, 0, 1, 2, 6, 34, },
++	{ 1, 0, 1, 2, 6, 34, },
++	{ 0, 0, 1, 2, 7, 34, },
++	{ 2, 0, 1, 2, 7, 34, },
++	{ 1, 0, 1, 2, 7, 34, },
++	{ 0, 0, 1, 2, 8, 34, },
++	{ 2, 0, 1, 2, 8, 34, },
++	{ 1, 0, 1, 2, 8, 34, },
++	{ 0, 0, 1, 2, 9, 34, },
++	{ 2, 0, 1, 2, 9, 34, },
++	{ 1, 0, 1, 2, 9, 34, },
++	{ 0, 0, 1, 2, 10, 34, },
++	{ 2, 0, 1, 2, 10, 34, },
++	{ 1, 0, 1, 2, 10, 34, },
++	{ 0, 0, 1, 2, 11, 28, },
++	{ 2, 0, 1, 2, 11, 34, },
++	{ 1, 0, 1, 2, 11, 34, },
++	{ 0, 0, 1, 2, 12, 63, },
++	{ 2, 0, 1, 2, 12, 34, },
++	{ 1, 0, 1, 2, 12, 34, },
++	{ 0, 0, 1, 2, 13, 63, },
++	{ 2, 0, 1, 2, 13, 34, },
++	{ 1, 0, 1, 2, 13, 34, },
++	{ 0, 0, 1, 2, 14, 63, },
++	{ 2, 0, 1, 2, 14, 63, },
++	{ 1, 0, 1, 2, 14, 63, },
++	{ 0, 0, 1, 3, 1, 63, },
++	{ 2, 0, 1, 3, 1, 63, },
++	{ 1, 0, 1, 3, 1, 63, },
++	{ 0, 0, 1, 3, 2, 63, },
++	{ 2, 0, 1, 3, 2, 63, },
++	{ 1, 0, 1, 3, 2, 63, },
++	{ 0, 0, 1, 3, 3, 30, },
++	{ 2, 0, 1, 3, 3, 34, },
++	{ 1, 0, 1, 3, 3, 34, },
++	{ 0, 0, 1, 3, 4, 34, },
++	{ 2, 0, 1, 3, 4, 34, },
++	{ 1, 0, 1, 3, 4, 34, },
++	{ 0, 0, 1, 3, 5, 34, },
++	{ 2, 0, 1, 3, 5, 34, },
++	{ 1, 0, 1, 3, 5, 34, },
++	{ 0, 0, 1, 3, 6, 34, },
++	{ 2, 0, 1, 3, 6, 34, },
++	{ 1, 0, 1, 3, 6, 34, },
++	{ 0, 0, 1, 3, 7, 34, },
++	{ 2, 0, 1, 3, 7, 34, },
++	{ 1, 0, 1, 3, 7, 34, },
++	{ 0, 0, 1, 3, 8, 34, },
++	{ 2, 0, 1, 3, 8, 34, },
++	{ 1, 0, 1, 3, 8, 34, },
++	{ 0, 0, 1, 3, 9, 34, },
++	{ 2, 0, 1, 3, 9, 34, },
++	{ 1, 0, 1, 3, 9, 34, },
++	{ 0, 0, 1, 3, 10, 34, },
++	{ 2, 0, 1, 3, 10, 34, },
++	{ 1, 0, 1, 3, 10, 34, },
++	{ 0, 0, 1, 3, 11, 28, },
++	{ 2, 0, 1, 3, 11, 34, },
++	{ 1, 0, 1, 3, 11, 34, },
++	{ 0, 0, 1, 3, 12, 63, },
++	{ 2, 0, 1, 3, 12, 34, },
++	{ 1, 0, 1, 3, 12, 34, },
++	{ 0, 0, 1, 3, 13, 63, },
++	{ 2, 0, 1, 3, 13, 34, },
++	{ 1, 0, 1, 3, 13, 34, },
++	{ 0, 0, 1, 3, 14, 63, },
++	{ 2, 0, 1, 3, 14, 63, },
++	{ 1, 0, 1, 3, 14, 63, },
++	{ 0, 0, 1, 6, 1, 63, },
++	{ 2, 0, 1, 6, 1, 63, },
++	{ 1, 0, 1, 6, 1, 63, },
++	{ 0, 0, 1, 6, 2, 63, },
++	{ 2, 0, 1, 6, 2, 63, },
++	{ 1, 0, 1, 6, 2, 63, },
++	{ 0, 0, 1, 6, 3, 30, },
++	{ 2, 0, 1, 6, 3, 34, },
++	{ 1, 0, 1, 6, 3, 34, },
++	{ 0, 0, 1, 6, 4, 34, },
++	{ 2, 0, 1, 6, 4, 34, },
++	{ 1, 0, 1, 6, 4, 34, },
++	{ 0, 0, 1, 6, 5, 34, },
++	{ 2, 0, 1, 6, 5, 34, },
++	{ 1, 0, 1, 6, 5, 34, },
++	{ 0, 0, 1, 6, 6, 34, },
++	{ 2, 0, 1, 6, 6, 34, },
++	{ 1, 0, 1, 6, 6, 34, },
++	{ 0, 0, 1, 6, 7, 34, },
++	{ 2, 0, 1, 6, 7, 34, },
++	{ 1, 0, 1, 6, 7, 34, },
++	{ 0, 0, 1, 6, 8, 34, },
++	{ 2, 0, 1, 6, 8, 34, },
++	{ 1, 0, 1, 6, 8, 34, },
++	{ 0, 0, 1, 6, 9, 34, },
++	{ 2, 0, 1, 6, 9, 34, },
++	{ 1, 0, 1, 6, 9, 34, },
++	{ 0, 0, 1, 6, 10, 34, },
++	{ 2, 0, 1, 6, 10, 34, },
++	{ 1, 0, 1, 6, 10, 34, },
++	{ 0, 0, 1, 6, 11, 28, },
++	{ 2, 0, 1, 6, 11, 34, },
++	{ 1, 0, 1, 6, 11, 34, },
++	{ 0, 0, 1, 6, 12, 63, },
++	{ 2, 0, 1, 6, 12, 34, },
++	{ 1, 0, 1, 6, 12, 34, },
++	{ 0, 0, 1, 6, 13, 63, },
++	{ 2, 0, 1, 6, 13, 34, },
++	{ 1, 0, 1, 6, 13, 34, },
++	{ 0, 0, 1, 6, 14, 63, },
++	{ 2, 0, 1, 6, 14, 63, },
++	{ 1, 0, 1, 6, 14, 63, },
++	{ 0, 0, 1, 7, 1, 63, },
++	{ 2, 0, 1, 7, 1, 63, },
++	{ 1, 0, 1, 7, 1, 63, },
++	{ 0, 0, 1, 7, 2, 63, },
++	{ 2, 0, 1, 7, 2, 63, },
++	{ 1, 0, 1, 7, 2, 63, },
++	{ 0, 0, 1, 7, 3, 30, },
++	{ 2, 0, 1, 7, 3, 34, },
++	{ 1, 0, 1, 7, 3, 34, },
++	{ 0, 0, 1, 7, 4, 34, },
++	{ 2, 0, 1, 7, 4, 34, },
++	{ 1, 0, 1, 7, 4, 34, },
++	{ 0, 0, 1, 7, 5, 34, },
++	{ 2, 0, 1, 7, 5, 34, },
++	{ 1, 0, 1, 7, 5, 34, },
++	{ 0, 0, 1, 7, 6, 34, },
++	{ 2, 0, 1, 7, 6, 34, },
++	{ 1, 0, 1, 7, 6, 34, },
++	{ 0, 0, 1, 7, 7, 34, },
++	{ 2, 0, 1, 7, 7, 34, },
++	{ 1, 0, 1, 7, 7, 34, },
++	{ 0, 0, 1, 7, 8, 34, },
++	{ 2, 0, 1, 7, 8, 34, },
++	{ 1, 0, 1, 7, 8, 34, },
++	{ 0, 0, 1, 7, 9, 34, },
++	{ 2, 0, 1, 7, 9, 34, },
++	{ 1, 0, 1, 7, 9, 34, },
++	{ 0, 0, 1, 7, 10, 34, },
++	{ 2, 0, 1, 7, 10, 34, },
++	{ 1, 0, 1, 7, 10, 34, },
++	{ 0, 0, 1, 7, 11, 28, },
++	{ 2, 0, 1, 7, 11, 34, },
++	{ 1, 0, 1, 7, 11, 34, },
++	{ 0, 0, 1, 7, 12, 63, },
++	{ 2, 0, 1, 7, 12, 34, },
++	{ 1, 0, 1, 7, 12, 34, },
++	{ 0, 0, 1, 7, 13, 63, },
++	{ 2, 0, 1, 7, 13, 34, },
++	{ 1, 0, 1, 7, 13, 34, },
++	{ 0, 0, 1, 7, 14, 63, },
++	{ 2, 0, 1, 7, 14, 63, },
++	{ 1, 0, 1, 7, 14, 63, },
++	{ 0, 1, 0, 1, 36, 42, },
++	{ 2, 1, 0, 1, 36, 42, },
++	{ 1, 1, 0, 1, 36, 42, },
++	{ 0, 1, 0, 1, 40, 42, },
++	{ 2, 1, 0, 1, 40, 42, },
++	{ 1, 1, 0, 1, 40, 42, },
++	{ 0, 1, 0, 1, 44, 42, },
++	{ 2, 1, 0, 1, 44, 42, },
++	{ 1, 1, 0, 1, 44, 42, },
++	{ 0, 1, 0, 1, 48, 42, },
++	{ 2, 1, 0, 1, 48, 42, },
++	{ 1, 1, 0, 1, 48, 42, },
++	{ 0, 1, 0, 1, 52, 42, },
++	{ 2, 1, 0, 1, 52, 42, },
++	{ 1, 1, 0, 1, 52, 42, },
++	{ 0, 1, 0, 1, 56, 42, },
++	{ 2, 1, 0, 1, 56, 42, },
++	{ 1, 1, 0, 1, 56, 42, },
++	{ 0, 1, 0, 1, 60, 42, },
++	{ 2, 1, 0, 1, 60, 42, },
++	{ 1, 1, 0, 1, 60, 42, },
++	{ 0, 1, 0, 1, 64, 42, },
++	{ 2, 1, 0, 1, 64, 42, },
++	{ 1, 1, 0, 1, 64, 42, },
++	{ 0, 1, 0, 1, 100, 42, },
++	{ 2, 1, 0, 1, 100, 42, },
++	{ 1, 1, 0, 1, 100, 42, },
++	{ 0, 1, 0, 1, 104, 42, },
++	{ 2, 1, 0, 1, 104, 42, },
++	{ 1, 1, 0, 1, 104, 42, },
++	{ 0, 1, 0, 1, 108, 42, },
++	{ 2, 1, 0, 1, 108, 42, },
++	{ 1, 1, 0, 1, 108, 42, },
++	{ 0, 1, 0, 1, 112, 42, },
++	{ 2, 1, 0, 1, 112, 42, },
++	{ 1, 1, 0, 1, 112, 42, },
++	{ 0, 1, 0, 1, 116, 42, },
++	{ 2, 1, 0, 1, 116, 42, },
++	{ 1, 1, 0, 1, 116, 42, },
++	{ 0, 1, 0, 1, 120, 42, },
++	{ 2, 1, 0, 1, 120, 42, },
++	{ 1, 1, 0, 1, 120, 42, },
++	{ 0, 1, 0, 1, 124, 42, },
++	{ 2, 1, 0, 1, 124, 42, },
++	{ 1, 1, 0, 1, 124, 42, },
++	{ 0, 1, 0, 1, 128, 42, },
++	{ 2, 1, 0, 1, 128, 42, },
++	{ 1, 1, 0, 1, 128, 42, },
++	{ 0, 1, 0, 1, 132, 42, },
++	{ 2, 1, 0, 1, 132, 42, },
++	{ 1, 1, 0, 1, 132, 42, },
++	{ 0, 1, 0, 1, 136, 42, },
++	{ 2, 1, 0, 1, 136, 42, },
++	{ 1, 1, 0, 1, 136, 42, },
++	{ 0, 1, 0, 1, 140, 40, },
++	{ 2, 1, 0, 1, 140, 40, },
++	{ 1, 1, 0, 1, 140, 40, },
++	{ 0, 1, 0, 1, 149, 44, },
++	{ 2, 1, 0, 1, 149, 44, },
++	{ 1, 1, 0, 1, 149, 63, },
++	{ 0, 1, 0, 1, 153, 44, },
++	{ 2, 1, 0, 1, 153, 44, },
++	{ 1, 1, 0, 1, 153, 63, },
++	{ 0, 1, 0, 1, 157, 44, },
++	{ 2, 1, 0, 1, 157, 44, },
++	{ 1, 1, 0, 1, 157, 63, },
++	{ 0, 1, 0, 1, 161, 44, },
++	{ 2, 1, 0, 1, 161, 44, },
++	{ 1, 1, 0, 1, 161, 63, },
++	{ 0, 1, 0, 1, 165, 44, },
++	{ 2, 1, 0, 1, 165, 44, },
++	{ 1, 1, 0, 1, 165, 63, },
++	{ 0, 1, 0, 2, 36, 32, },
++	{ 2, 1, 0, 2, 36, 32, },
++	{ 1, 1, 0, 2, 36, 32, },
++	{ 0, 1, 0, 2, 40, 32, },
++	{ 2, 1, 0, 2, 40, 32, },
++	{ 1, 1, 0, 2, 40, 32, },
++	{ 0, 1, 0, 2, 44, 32, },
++	{ 2, 1, 0, 2, 44, 32, },
++	{ 1, 1, 0, 2, 44, 32, },
++	{ 0, 1, 0, 2, 48, 36, },
++	{ 2, 1, 0, 2, 48, 36, },
++	{ 1, 1, 0, 2, 48, 36, },
++	{ 0, 1, 0, 2, 52, 36, },
++	{ 2, 1, 0, 2, 52, 36, },
++	{ 1, 1, 0, 2, 52, 36, },
++	{ 0, 1, 0, 2, 56, 32, },
++	{ 2, 1, 0, 2, 56, 32, },
++	{ 1, 1, 0, 2, 56, 32, },
++	{ 0, 1, 0, 2, 60, 32, },
++	{ 2, 1, 0, 2, 60, 32, },
++	{ 1, 1, 0, 2, 60, 32, },
++	{ 0, 1, 0, 2, 64, 32, },
++	{ 2, 1, 0, 2, 64, 32, },
++	{ 1, 1, 0, 2, 64, 32, },
++	{ 0, 1, 0, 2, 100, 32, },
++	{ 2, 1, 0, 2, 100, 32, },
++	{ 1, 1, 0, 2, 100, 32, },
++	{ 0, 1, 0, 2, 104, 32, },
++	{ 2, 1, 0, 2, 104, 32, },
++	{ 1, 1, 0, 2, 104, 32, },
++	{ 0, 1, 0, 2, 108, 32, },
++	{ 2, 1, 0, 2, 108, 32, },
++	{ 1, 1, 0, 2, 108, 32, },
++	{ 0, 1, 0, 2, 112, 32, },
++	{ 2, 1, 0, 2, 112, 32, },
++	{ 1, 1, 0, 2, 112, 32, },
++	{ 0, 1, 0, 2, 116, 32, },
++	{ 2, 1, 0, 2, 116, 32, },
++	{ 1, 1, 0, 2, 116, 32, },
++	{ 0, 1, 0, 2, 120, 32, },
++	{ 2, 1, 0, 2, 120, 32, },
++	{ 1, 1, 0, 2, 120, 32, },
++	{ 0, 1, 0, 2, 124, 32, },
++	{ 2, 1, 0, 2, 124, 32, },
++	{ 1, 1, 0, 2, 124, 32, },
++	{ 0, 1, 0, 2, 128, 32, },
++	{ 2, 1, 0, 2, 128, 32, },
++	{ 1, 1, 0, 2, 128, 32, },
++	{ 0, 1, 0, 2, 132, 32, },
++	{ 2, 1, 0, 2, 132, 32, },
++	{ 1, 1, 0, 2, 132, 32, },
++	{ 0, 1, 0, 2, 136, 32, },
++	{ 2, 1, 0, 2, 136, 32, },
++	{ 1, 1, 0, 2, 136, 32, },
++	{ 0, 1, 0, 2, 140, 30, },
++	{ 2, 1, 0, 2, 140, 30, },
++	{ 1, 1, 0, 2, 140, 30, },
++	{ 0, 1, 0, 2, 149, 40, },
++	{ 2, 1, 0, 2, 149, 40, },
++	{ 1, 1, 0, 2, 149, 63, },
++	{ 0, 1, 0, 2, 153, 40, },
++	{ 2, 1, 0, 2, 153, 40, },
++	{ 1, 1, 0, 2, 153, 63, },
++	{ 0, 1, 0, 2, 157, 40, },
++	{ 2, 1, 0, 2, 157, 40, },
++	{ 1, 1, 0, 2, 157, 63, },
++	{ 0, 1, 0, 2, 161, 40, },
++	{ 2, 1, 0, 2, 161, 40, },
++	{ 1, 1, 0, 2, 161, 63, },
++	{ 0, 1, 0, 2, 165, 42, },
++	{ 2, 1, 0, 2, 165, 42, },
++	{ 1, 1, 0, 2, 165, 63, },
++	{ 0, 1, 0, 3, 36, 32, },
++	{ 2, 1, 0, 3, 36, 32, },
++	{ 1, 1, 0, 3, 36, 32, },
++	{ 0, 1, 0, 3, 40, 32, },
++	{ 2, 1, 0, 3, 40, 32, },
++	{ 1, 1, 0, 3, 40, 32, },
++	{ 0, 1, 0, 3, 44, 32, },
++	{ 2, 1, 0, 3, 44, 32, },
++	{ 1, 1, 0, 3, 44, 32, },
++	{ 0, 1, 0, 3, 48, 36, },
++	{ 2, 1, 0, 3, 48, 36, },
++	{ 1, 1, 0, 3, 48, 36, },
++	{ 0, 1, 0, 3, 52, 36, },
++	{ 2, 1, 0, 3, 52, 36, },
++	{ 1, 1, 0, 3, 52, 36, },
++	{ 0, 1, 0, 3, 56, 32, },
++	{ 2, 1, 0, 3, 56, 32, },
++	{ 1, 1, 0, 3, 56, 32, },
++	{ 0, 1, 0, 3, 60, 32, },
++	{ 2, 1, 0, 3, 60, 32, },
++	{ 1, 1, 0, 3, 60, 32, },
++	{ 0, 1, 0, 3, 64, 32, },
++	{ 2, 1, 0, 3, 64, 32, },
++	{ 1, 1, 0, 3, 64, 32, },
++	{ 0, 1, 0, 3, 100, 32, },
++	{ 2, 1, 0, 3, 100, 32, },
++	{ 1, 1, 0, 3, 100, 32, },
++	{ 0, 1, 0, 3, 104, 32, },
++	{ 2, 1, 0, 3, 104, 32, },
++	{ 1, 1, 0, 3, 104, 32, },
++	{ 0, 1, 0, 3, 108, 32, },
++	{ 2, 1, 0, 3, 108, 32, },
++	{ 1, 1, 0, 3, 108, 32, },
++	{ 0, 1, 0, 3, 112, 32, },
++	{ 2, 1, 0, 3, 112, 32, },
++	{ 1, 1, 0, 3, 112, 32, },
++	{ 0, 1, 0, 3, 116, 32, },
++	{ 2, 1, 0, 3, 116, 32, },
++	{ 1, 1, 0, 3, 116, 32, },
++	{ 0, 1, 0, 3, 120, 32, },
++	{ 2, 1, 0, 3, 120, 32, },
++	{ 1, 1, 0, 3, 120, 32, },
++	{ 0, 1, 0, 3, 124, 32, },
++	{ 2, 1, 0, 3, 124, 32, },
++	{ 1, 1, 0, 3, 124, 32, },
++	{ 0, 1, 0, 3, 128, 32, },
++	{ 2, 1, 0, 3, 128, 32, },
++	{ 1, 1, 0, 3, 128, 32, },
++	{ 0, 1, 0, 3, 132, 32, },
++	{ 2, 1, 0, 3, 132, 32, },
++	{ 1, 1, 0, 3, 132, 32, },
++	{ 0, 1, 0, 3, 136, 32, },
++	{ 2, 1, 0, 3, 136, 32, },
++	{ 1, 1, 0, 3, 136, 32, },
++	{ 0, 1, 0, 3, 140, 30, },
++	{ 2, 1, 0, 3, 140, 30, },
++	{ 1, 1, 0, 3, 140, 30, },
++	{ 0, 1, 0, 3, 149, 40, },
++	{ 2, 1, 0, 3, 149, 40, },
++	{ 1, 1, 0, 3, 149, 63, },
++	{ 0, 1, 0, 3, 153, 40, },
++	{ 2, 1, 0, 3, 153, 40, },
++	{ 1, 1, 0, 3, 153, 63, },
++	{ 0, 1, 0, 3, 157, 40, },
++	{ 2, 1, 0, 3, 157, 40, },
++	{ 1, 1, 0, 3, 157, 63, },
++	{ 0, 1, 0, 3, 161, 40, },
++	{ 2, 1, 0, 3, 161, 40, },
++	{ 1, 1, 0, 3, 161, 63, },
++	{ 0, 1, 0, 3, 165, 42, },
++	{ 2, 1, 0, 3, 165, 42, },
++	{ 1, 1, 0, 3, 165, 63, },
++	{ 0, 1, 0, 6, 36, 32, },
++	{ 2, 1, 0, 6, 36, 32, },
++	{ 1, 1, 0, 6, 36, 32, },
++	{ 0, 1, 0, 6, 40, 32, },
++	{ 2, 1, 0, 6, 40, 32, },
++	{ 1, 1, 0, 6, 40, 32, },
++	{ 0, 1, 0, 6, 44, 32, },
++	{ 2, 1, 0, 6, 44, 32, },
++	{ 1, 1, 0, 6, 44, 32, },
++	{ 0, 1, 0, 6, 48, 36, },
++	{ 2, 1, 0, 6, 48, 36, },
++	{ 1, 1, 0, 6, 48, 36, },
++	{ 0, 1, 0, 6, 52, 36, },
++	{ 2, 1, 0, 6, 52, 36, },
++	{ 1, 1, 0, 6, 52, 36, },
++	{ 0, 1, 0, 6, 56, 32, },
++	{ 2, 1, 0, 6, 56, 32, },
++	{ 1, 1, 0, 6, 56, 32, },
++	{ 0, 1, 0, 6, 60, 32, },
++	{ 2, 1, 0, 6, 60, 32, },
++	{ 1, 1, 0, 6, 60, 32, },
++	{ 0, 1, 0, 6, 64, 32, },
++	{ 2, 1, 0, 6, 64, 32, },
++	{ 1, 1, 0, 6, 64, 32, },
++	{ 0, 1, 0, 6, 100, 32, },
++	{ 2, 1, 0, 6, 100, 32, },
++	{ 1, 1, 0, 6, 100, 32, },
++	{ 0, 1, 0, 6, 104, 32, },
++	{ 2, 1, 0, 6, 104, 32, },
++	{ 1, 1, 0, 6, 104, 32, },
++	{ 0, 1, 0, 6, 108, 32, },
++	{ 2, 1, 0, 6, 108, 32, },
++	{ 1, 1, 0, 6, 108, 32, },
++	{ 0, 1, 0, 6, 112, 32, },
++	{ 2, 1, 0, 6, 112, 32, },
++	{ 1, 1, 0, 6, 112, 32, },
++	{ 0, 1, 0, 6, 116, 32, },
++	{ 2, 1, 0, 6, 116, 32, },
++	{ 1, 1, 0, 6, 116, 32, },
++	{ 0, 1, 0, 6, 120, 32, },
++	{ 2, 1, 0, 6, 120, 32, },
++	{ 1, 1, 0, 6, 120, 32, },
++	{ 0, 1, 0, 6, 124, 32, },
++	{ 2, 1, 0, 6, 124, 32, },
++	{ 1, 1, 0, 6, 124, 32, },
++	{ 0, 1, 0, 6, 128, 32, },
++	{ 2, 1, 0, 6, 128, 32, },
++	{ 1, 1, 0, 6, 128, 32, },
++	{ 0, 1, 0, 6, 132, 32, },
++	{ 2, 1, 0, 6, 132, 32, },
++	{ 1, 1, 0, 6, 132, 32, },
++	{ 0, 1, 0, 6, 136, 32, },
++	{ 2, 1, 0, 6, 136, 32, },
++	{ 1, 1, 0, 6, 136, 32, },
++	{ 0, 1, 0, 6, 140, 30, },
++	{ 2, 1, 0, 6, 140, 30, },
++	{ 1, 1, 0, 6, 140, 30, },
++	{ 0, 1, 0, 6, 149, 40, },
++	{ 2, 1, 0, 6, 149, 40, },
++	{ 1, 1, 0, 6, 149, 63, },
++	{ 0, 1, 0, 6, 153, 40, },
++	{ 2, 1, 0, 6, 153, 40, },
++	{ 1, 1, 0, 6, 153, 63, },
++	{ 0, 1, 0, 6, 157, 40, },
++	{ 2, 1, 0, 6, 157, 40, },
++	{ 1, 1, 0, 6, 157, 63, },
++	{ 0, 1, 0, 6, 161, 40, },
++	{ 2, 1, 0, 6, 161, 40, },
++	{ 1, 1, 0, 6, 161, 63, },
++	{ 0, 1, 0, 6, 165, 42, },
++	{ 2, 1, 0, 6, 165, 42, },
++	{ 1, 1, 0, 6, 165, 63, },
++	{ 0, 1, 0, 7, 36, 32, },
++	{ 2, 1, 0, 7, 36, 32, },
++	{ 1, 1, 0, 7, 36, 32, },
++	{ 0, 1, 0, 7, 40, 32, },
++	{ 2, 1, 0, 7, 40, 32, },
++	{ 1, 1, 0, 7, 40, 32, },
++	{ 0, 1, 0, 7, 44, 32, },
++	{ 2, 1, 0, 7, 44, 32, },
++	{ 1, 1, 0, 7, 44, 32, },
++	{ 0, 1, 0, 7, 48, 36, },
++	{ 2, 1, 0, 7, 48, 36, },
++	{ 1, 1, 0, 7, 48, 36, },
++	{ 0, 1, 0, 7, 52, 36, },
++	{ 2, 1, 0, 7, 52, 36, },
++	{ 1, 1, 0, 7, 52, 36, },
++	{ 0, 1, 0, 7, 56, 32, },
++	{ 2, 1, 0, 7, 56, 32, },
++	{ 1, 1, 0, 7, 56, 32, },
++	{ 0, 1, 0, 7, 60, 32, },
++	{ 2, 1, 0, 7, 60, 32, },
++	{ 1, 1, 0, 7, 60, 32, },
++	{ 0, 1, 0, 7, 64, 32, },
++	{ 2, 1, 0, 7, 64, 32, },
++	{ 1, 1, 0, 7, 64, 32, },
++	{ 0, 1, 0, 7, 100, 32, },
++	{ 2, 1, 0, 7, 100, 32, },
++	{ 1, 1, 0, 7, 100, 32, },
++	{ 0, 1, 0, 7, 104, 32, },
++	{ 2, 1, 0, 7, 104, 32, },
++	{ 1, 1, 0, 7, 104, 32, },
++	{ 0, 1, 0, 7, 108, 32, },
++	{ 2, 1, 0, 7, 108, 32, },
++	{ 1, 1, 0, 7, 108, 32, },
++	{ 0, 1, 0, 7, 112, 32, },
++	{ 2, 1, 0, 7, 112, 32, },
++	{ 1, 1, 0, 7, 112, 32, },
++	{ 0, 1, 0, 7, 116, 32, },
++	{ 2, 1, 0, 7, 116, 32, },
++	{ 1, 1, 0, 7, 116, 32, },
++	{ 0, 1, 0, 7, 120, 32, },
++	{ 2, 1, 0, 7, 120, 32, },
++	{ 1, 1, 0, 7, 120, 32, },
++	{ 0, 1, 0, 7, 124, 32, },
++	{ 2, 1, 0, 7, 124, 32, },
++	{ 1, 1, 0, 7, 124, 32, },
++	{ 0, 1, 0, 7, 128, 32, },
++	{ 2, 1, 0, 7, 128, 32, },
++	{ 1, 1, 0, 7, 128, 32, },
++	{ 0, 1, 0, 7, 132, 32, },
++	{ 2, 1, 0, 7, 132, 32, },
++	{ 1, 1, 0, 7, 132, 32, },
++	{ 0, 1, 0, 7, 136, 32, },
++	{ 2, 1, 0, 7, 136, 32, },
++	{ 1, 1, 0, 7, 136, 32, },
++	{ 0, 1, 0, 7, 140, 30, },
++	{ 2, 1, 0, 7, 140, 30, },
++	{ 1, 1, 0, 7, 140, 30, },
++	{ 0, 1, 0, 7, 149, 40, },
++	{ 2, 1, 0, 7, 149, 40, },
++	{ 1, 1, 0, 7, 149, 63, },
++	{ 0, 1, 0, 7, 153, 40, },
++	{ 2, 1, 0, 7, 153, 40, },
++	{ 1, 1, 0, 7, 153, 63, },
++	{ 0, 1, 0, 7, 157, 40, },
++	{ 2, 1, 0, 7, 157, 40, },
++	{ 1, 1, 0, 7, 157, 63, },
++	{ 0, 1, 0, 7, 161, 40, },
++	{ 2, 1, 0, 7, 161, 40, },
++	{ 1, 1, 0, 7, 161, 63, },
++	{ 0, 1, 0, 7, 165, 42, },
++	{ 2, 1, 0, 7, 165, 42, },
++	{ 1, 1, 0, 7, 165, 63, },
++	{ 0, 1, 1, 2, 38, 32, },
++	{ 2, 1, 1, 2, 38, 32, },
++	{ 1, 1, 1, 2, 38, 32, },
++	{ 0, 1, 1, 2, 46, 36, },
++	{ 2, 1, 1, 2, 46, 36, },
++	{ 1, 1, 1, 2, 46, 36, },
++	{ 0, 1, 1, 2, 54, 36, },
++	{ 2, 1, 1, 2, 54, 36, },
++	{ 1, 1, 1, 2, 54, 36, },
++	{ 0, 1, 1, 2, 62, 32, },
++	{ 2, 1, 1, 2, 62, 32, },
++	{ 1, 1, 1, 2, 62, 32, },
++	{ 0, 1, 1, 2, 102, 30, },
++	{ 2, 1, 1, 2, 102, 30, },
++	{ 1, 1, 1, 2, 102, 30, },
++	{ 0, 1, 1, 2, 110, 32, },
++	{ 2, 1, 1, 2, 110, 32, },
++	{ 1, 1, 1, 2, 110, 32, },
++	{ 0, 1, 1, 2, 118, 32, },
++	{ 2, 1, 1, 2, 118, 32, },
++	{ 1, 1, 1, 2, 118, 32, },
++	{ 0, 1, 1, 2, 126, 32, },
++	{ 2, 1, 1, 2, 126, 32, },
++	{ 1, 1, 1, 2, 126, 32, },
++	{ 0, 1, 1, 2, 134, 36, },
++	{ 2, 1, 1, 2, 134, 36, },
++	{ 1, 1, 1, 2, 134, 36, },
++	{ 0, 1, 1, 2, 151, 36, },
++	{ 2, 1, 1, 2, 151, 36, },
++	{ 1, 1, 1, 2, 151, 63, },
++	{ 0, 1, 1, 2, 159, 40, },
++	{ 2, 1, 1, 2, 159, 40, },
++	{ 1, 1, 1, 2, 159, 63, },
++	{ 0, 1, 1, 3, 38, 32, },
++	{ 2, 1, 1, 3, 38, 32, },
++	{ 1, 1, 1, 3, 38, 32, },
++	{ 0, 1, 1, 3, 46, 36, },
++	{ 2, 1, 1, 3, 46, 36, },
++	{ 1, 1, 1, 3, 46, 36, },
++	{ 0, 1, 1, 3, 54, 36, },
++	{ 2, 1, 1, 3, 54, 36, },
++	{ 1, 1, 1, 3, 54, 36, },
++	{ 0, 1, 1, 3, 62, 32, },
++	{ 2, 1, 1, 3, 62, 32, },
++	{ 1, 1, 1, 3, 62, 32, },
++	{ 0, 1, 1, 3, 102, 30, },
++	{ 2, 1, 1, 3, 102, 30, },
++	{ 1, 1, 1, 3, 102, 30, },
++	{ 0, 1, 1, 3, 110, 32, },
++	{ 2, 1, 1, 3, 110, 32, },
++	{ 1, 1, 1, 3, 110, 32, },
++	{ 0, 1, 1, 3, 118, 32, },
++	{ 2, 1, 1, 3, 118, 32, },
++	{ 1, 1, 1, 3, 118, 32, },
++	{ 0, 1, 1, 3, 126, 32, },
++	{ 2, 1, 1, 3, 126, 32, },
++	{ 1, 1, 1, 3, 126, 32, },
++	{ 0, 1, 1, 3, 134, 36, },
++	{ 2, 1, 1, 3, 134, 36, },
++	{ 1, 1, 1, 3, 134, 36, },
++	{ 0, 1, 1, 3, 151, 36, },
++	{ 2, 1, 1, 3, 151, 36, },
++	{ 1, 1, 1, 3, 151, 63, },
++	{ 0, 1, 1, 3, 159, 40, },
++	{ 2, 1, 1, 3, 159, 40, },
++	{ 1, 1, 1, 3, 159, 63, },
++	{ 0, 1, 1, 6, 38, 32, },
++	{ 2, 1, 1, 6, 38, 32, },
++	{ 1, 1, 1, 6, 38, 32, },
++	{ 0, 1, 1, 6, 46, 36, },
++	{ 2, 1, 1, 6, 46, 36, },
++	{ 1, 1, 1, 6, 46, 36, },
++	{ 0, 1, 1, 6, 54, 36, },
++	{ 2, 1, 1, 6, 54, 36, },
++	{ 1, 1, 1, 6, 54, 36, },
++	{ 0, 1, 1, 6, 62, 32, },
++	{ 2, 1, 1, 6, 62, 32, },
++	{ 1, 1, 1, 6, 62, 32, },
++	{ 0, 1, 1, 6, 102, 30, },
++	{ 2, 1, 1, 6, 102, 30, },
++	{ 1, 1, 1, 6, 102, 30, },
++	{ 0, 1, 1, 6, 110, 32, },
++	{ 2, 1, 1, 6, 110, 32, },
++	{ 1, 1, 1, 6, 110, 32, },
++	{ 0, 1, 1, 6, 118, 32, },
++	{ 2, 1, 1, 6, 118, 32, },
++	{ 1, 1, 1, 6, 118, 32, },
++	{ 0, 1, 1, 6, 126, 32, },
++	{ 2, 1, 1, 6, 126, 32, },
++	{ 1, 1, 1, 6, 126, 32, },
++	{ 0, 1, 1, 6, 134, 36, },
++	{ 2, 1, 1, 6, 134, 36, },
++	{ 1, 1, 1, 6, 134, 36, },
++	{ 0, 1, 1, 6, 151, 36, },
++	{ 2, 1, 1, 6, 151, 36, },
++	{ 1, 1, 1, 6, 151, 63, },
++	{ 0, 1, 1, 6, 159, 40, },
++	{ 2, 1, 1, 6, 159, 40, },
++	{ 1, 1, 1, 6, 159, 63, },
++	{ 0, 1, 1, 7, 38, 32, },
++	{ 2, 1, 1, 7, 38, 32, },
++	{ 1, 1, 1, 7, 38, 32, },
++	{ 0, 1, 1, 7, 46, 36, },
++	{ 2, 1, 1, 7, 46, 36, },
++	{ 1, 1, 1, 7, 46, 36, },
++	{ 0, 1, 1, 7, 54, 36, },
++	{ 2, 1, 1, 7, 54, 36, },
++	{ 1, 1, 1, 7, 54, 36, },
++	{ 0, 1, 1, 7, 62, 32, },
++	{ 2, 1, 1, 7, 62, 32, },
++	{ 1, 1, 1, 7, 62, 32, },
++	{ 0, 1, 1, 7, 102, 30, },
++	{ 2, 1, 1, 7, 102, 30, },
++	{ 1, 1, 1, 7, 102, 30, },
++	{ 0, 1, 1, 7, 110, 32, },
++	{ 2, 1, 1, 7, 110, 32, },
++	{ 1, 1, 1, 7, 110, 32, },
++	{ 0, 1, 1, 7, 118, 32, },
++	{ 2, 1, 1, 7, 118, 32, },
++	{ 1, 1, 1, 7, 118, 32, },
++	{ 0, 1, 1, 7, 126, 32, },
++	{ 2, 1, 1, 7, 126, 32, },
++	{ 1, 1, 1, 7, 126, 32, },
++	{ 0, 1, 1, 7, 134, 36, },
++	{ 2, 1, 1, 7, 134, 36, },
++	{ 1, 1, 1, 7, 134, 36, },
++	{ 0, 1, 1, 7, 151, 36, },
++	{ 2, 1, 1, 7, 151, 36, },
++	{ 1, 1, 1, 7, 151, 63, },
++	{ 0, 1, 1, 7, 159, 40, },
++	{ 2, 1, 1, 7, 159, 40, },
++	{ 1, 1, 1, 7, 159, 63, },
++	{ 0, 1, 2, 4, 42, 34, },
++	{ 2, 1, 2, 4, 42, 34, },
++	{ 1, 1, 2, 4, 42, 34, },
++	{ 0, 1, 2, 4, 58, 34, },
++	{ 2, 1, 2, 4, 58, 34, },
++	{ 1, 1, 2, 4, 58, 34, },
++	{ 0, 1, 2, 4, 106, 32, },
++	{ 2, 1, 2, 4, 106, 32, },
++	{ 1, 1, 2, 4, 106, 32, },
++	{ 0, 1, 2, 4, 122, 34, },
++	{ 2, 1, 2, 4, 122, 34, },
++	{ 1, 1, 2, 4, 122, 34, },
++	{ 0, 1, 2, 4, 155, 34, },
++	{ 2, 1, 2, 4, 155, 34, },
++	{ 1, 1, 2, 4, 155, 63, },
++	{ 0, 1, 2, 5, 42, 34, },
++	{ 2, 1, 2, 5, 42, 34, },
++	{ 1, 1, 2, 5, 42, 34, },
++	{ 0, 1, 2, 5, 58, 34, },
++	{ 2, 1, 2, 5, 58, 34, },
++	{ 1, 1, 2, 5, 58, 34, },
++	{ 0, 1, 2, 5, 106, 32, },
++	{ 2, 1, 2, 5, 106, 32, },
++	{ 1, 1, 2, 5, 106, 32, },
++	{ 0, 1, 2, 5, 122, 34, },
++	{ 2, 1, 2, 5, 122, 34, },
++	{ 1, 1, 2, 5, 122, 34, },
++	{ 0, 1, 2, 5, 155, 34, },
++	{ 2, 1, 2, 5, 155, 34, },
++	{ 1, 1, 2, 5, 155, 63, },
++	{ 0, 1, 2, 8, 42, 34, },
++	{ 2, 1, 2, 8, 42, 34, },
++	{ 1, 1, 2, 8, 42, 34, },
++	{ 0, 1, 2, 8, 58, 34, },
++	{ 2, 1, 2, 8, 58, 34, },
++	{ 1, 1, 2, 8, 58, 34, },
++	{ 0, 1, 2, 8, 106, 32, },
++	{ 2, 1, 2, 8, 106, 32, },
++	{ 1, 1, 2, 8, 106, 32, },
++	{ 0, 1, 2, 8, 122, 34, },
++	{ 2, 1, 2, 8, 122, 34, },
++	{ 1, 1, 2, 8, 122, 34, },
++	{ 0, 1, 2, 8, 155, 34, },
++	{ 2, 1, 2, 8, 155, 34, },
++	{ 1, 1, 2, 8, 155, 63, },
++	{ 0, 1, 2, 9, 42, 34, },
++	{ 2, 1, 2, 9, 42, 34, },
++	{ 1, 1, 2, 9, 42, 34, },
++	{ 0, 1, 2, 9, 58, 34, },
++	{ 2, 1, 2, 9, 58, 34, },
++	{ 1, 1, 2, 9, 58, 34, },
++	{ 0, 1, 2, 9, 106, 32, },
++	{ 2, 1, 2, 9, 106, 32, },
++	{ 1, 1, 2, 9, 106, 32, },
++	{ 0, 1, 2, 9, 122, 34, },
++	{ 2, 1, 2, 9, 122, 34, },
++	{ 1, 1, 2, 9, 122, 34, },
++	{ 0, 1, 2, 9, 155, 34, },
++	{ 2, 1, 2, 9, 155, 34, },
++	{ 1, 1, 2, 9, 155, 63, },
++};
++
++RTW_DECL_TABLE_TXPWR_LMT(rtw8814a_txpwr_lmt_type2);
++
++static const struct rtw_txpwr_lmt_cfg_pair rtw8814a_txpwr_lmt_type3[] = {
++	{ 0, 0, 0, 0, 1, 46, },
++	{ 2, 0, 0, 0, 1, 40, },
++	{ 1, 0, 0, 0, 1, 40, },
++	{ 0, 0, 0, 0, 2, 46, },
++	{ 2, 0, 0, 0, 2, 40, },
++	{ 1, 0, 0, 0, 2, 40, },
++	{ 0, 0, 0, 0, 3, 46, },
++	{ 2, 0, 0, 0, 3, 40, },
++	{ 1, 0, 0, 0, 3, 40, },
++	{ 0, 0, 0, 0, 4, 46, },
++	{ 2, 0, 0, 0, 4, 40, },
++	{ 1, 0, 0, 0, 4, 40, },
++	{ 0, 0, 0, 0, 5, 46, },
++	{ 2, 0, 0, 0, 5, 40, },
++	{ 1, 0, 0, 0, 5, 40, },
++	{ 0, 0, 0, 0, 6, 46, },
++	{ 2, 0, 0, 0, 6, 40, },
++	{ 1, 0, 0, 0, 6, 40, },
++	{ 0, 0, 0, 0, 7, 46, },
++	{ 2, 0, 0, 0, 7, 40, },
++	{ 1, 0, 0, 0, 7, 40, },
++	{ 0, 0, 0, 0, 8, 46, },
++	{ 2, 0, 0, 0, 8, 40, },
++	{ 1, 0, 0, 0, 8, 40, },
++	{ 0, 0, 0, 0, 9, 46, },
++	{ 2, 0, 0, 0, 9, 40, },
++	{ 1, 0, 0, 0, 9, 40, },
++	{ 0, 0, 0, 0, 10, 46, },
++	{ 2, 0, 0, 0, 10, 40, },
++	{ 1, 0, 0, 0, 10, 40, },
++	{ 0, 0, 0, 0, 11, 46, },
++	{ 2, 0, 0, 0, 11, 40, },
++	{ 1, 0, 0, 0, 11, 40, },
++	{ 0, 0, 0, 0, 12, 63, },
++	{ 2, 0, 0, 0, 12, 40, },
++	{ 1, 0, 0, 0, 12, 40, },
++	{ 0, 0, 0, 0, 13, 63, },
++	{ 2, 0, 0, 0, 13, 40, },
++	{ 1, 0, 0, 0, 13, 40, },
++	{ 0, 0, 0, 0, 14, 63, },
++	{ 2, 0, 0, 0, 14, 63, },
++	{ 1, 0, 0, 0, 14, 40, },
++	{ 0, 0, 0, 1, 1, 46, },
++	{ 2, 0, 0, 1, 1, 40, },
++	{ 1, 0, 0, 1, 1, 40, },
++	{ 0, 0, 0, 1, 2, 46, },
++	{ 2, 0, 0, 1, 2, 40, },
++	{ 1, 0, 0, 1, 2, 40, },
++	{ 0, 0, 0, 1, 3, 46, },
++	{ 2, 0, 0, 1, 3, 40, },
++	{ 1, 0, 0, 1, 3, 40, },
++	{ 0, 0, 0, 1, 4, 46, },
++	{ 2, 0, 0, 1, 4, 40, },
++	{ 1, 0, 0, 1, 4, 40, },
++	{ 0, 0, 0, 1, 5, 46, },
++	{ 2, 0, 0, 1, 5, 40, },
++	{ 1, 0, 0, 1, 5, 40, },
++	{ 0, 0, 0, 1, 6, 46, },
++	{ 2, 0, 0, 1, 6, 40, },
++	{ 1, 0, 0, 1, 6, 40, },
++	{ 0, 0, 0, 1, 7, 46, },
++	{ 2, 0, 0, 1, 7, 40, },
++	{ 1, 0, 0, 1, 7, 40, },
++	{ 0, 0, 0, 1, 8, 46, },
++	{ 2, 0, 0, 1, 8, 40, },
++	{ 1, 0, 0, 1, 8, 40, },
++	{ 0, 0, 0, 1, 9, 46, },
++	{ 2, 0, 0, 1, 9, 40, },
++	{ 1, 0, 0, 1, 9, 40, },
++	{ 0, 0, 0, 1, 10, 46, },
++	{ 2, 0, 0, 1, 10, 40, },
++	{ 1, 0, 0, 1, 10, 40, },
++	{ 0, 0, 0, 1, 11, 46, },
++	{ 2, 0, 0, 1, 11, 40, },
++	{ 1, 0, 0, 1, 11, 40, },
++	{ 0, 0, 0, 1, 12, 63, },
++	{ 2, 0, 0, 1, 12, 40, },
++	{ 1, 0, 0, 1, 12, 40, },
++	{ 0, 0, 0, 1, 13, 63, },
++	{ 2, 0, 0, 1, 13, 40, },
++	{ 1, 0, 0, 1, 13, 40, },
++	{ 0, 0, 0, 1, 14, 63, },
++	{ 2, 0, 0, 1, 14, 63, },
++	{ 1, 0, 0, 1, 14, 63, },
++	{ 0, 0, 0, 2, 1, 46, },
++	{ 2, 0, 0, 2, 1, 40, },
++	{ 1, 0, 0, 2, 1, 40, },
++	{ 0, 0, 0, 2, 2, 46, },
++	{ 2, 0, 0, 2, 2, 40, },
++	{ 1, 0, 0, 2, 2, 40, },
++	{ 0, 0, 0, 2, 3, 46, },
++	{ 2, 0, 0, 2, 3, 40, },
++	{ 1, 0, 0, 2, 3, 40, },
++	{ 0, 0, 0, 2, 4, 46, },
++	{ 2, 0, 0, 2, 4, 40, },
++	{ 1, 0, 0, 2, 4, 40, },
++	{ 0, 0, 0, 2, 5, 46, },
++	{ 2, 0, 0, 2, 5, 40, },
++	{ 1, 0, 0, 2, 5, 40, },
++	{ 0, 0, 0, 2, 6, 46, },
++	{ 2, 0, 0, 2, 6, 40, },
++	{ 1, 0, 0, 2, 6, 40, },
++	{ 0, 0, 0, 2, 7, 46, },
++	{ 2, 0, 0, 2, 7, 40, },
++	{ 1, 0, 0, 2, 7, 40, },
++	{ 0, 0, 0, 2, 8, 46, },
++	{ 2, 0, 0, 2, 8, 40, },
++	{ 1, 0, 0, 2, 8, 40, },
++	{ 0, 0, 0, 2, 9, 46, },
++	{ 2, 0, 0, 2, 9, 40, },
++	{ 1, 0, 0, 2, 9, 40, },
++	{ 0, 0, 0, 2, 10, 46, },
++	{ 2, 0, 0, 2, 10, 40, },
++	{ 1, 0, 0, 2, 10, 40, },
++	{ 0, 0, 0, 2, 11, 46, },
++	{ 2, 0, 0, 2, 11, 40, },
++	{ 1, 0, 0, 2, 11, 40, },
++	{ 0, 0, 0, 2, 12, 63, },
++	{ 2, 0, 0, 2, 12, 40, },
++	{ 1, 0, 0, 2, 12, 40, },
++	{ 0, 0, 0, 2, 13, 63, },
++	{ 2, 0, 0, 2, 13, 40, },
++	{ 1, 0, 0, 2, 13, 40, },
++	{ 0, 0, 0, 2, 14, 63, },
++	{ 2, 0, 0, 2, 14, 63, },
++	{ 1, 0, 0, 2, 14, 63, },
++	{ 0, 0, 0, 3, 1, 46, },
++	{ 2, 0, 0, 3, 1, 40, },
++	{ 1, 0, 0, 3, 1, 40, },
++	{ 0, 0, 0, 3, 2, 46, },
++	{ 2, 0, 0, 3, 2, 40, },
++	{ 1, 0, 0, 3, 2, 40, },
++	{ 0, 0, 0, 3, 3, 46, },
++	{ 2, 0, 0, 3, 3, 40, },
++	{ 1, 0, 0, 3, 3, 40, },
++	{ 0, 0, 0, 3, 4, 46, },
++	{ 2, 0, 0, 3, 4, 40, },
++	{ 1, 0, 0, 3, 4, 40, },
++	{ 0, 0, 0, 3, 5, 46, },
++	{ 2, 0, 0, 3, 5, 40, },
++	{ 1, 0, 0, 3, 5, 40, },
++	{ 0, 0, 0, 3, 6, 46, },
++	{ 2, 0, 0, 3, 6, 40, },
++	{ 1, 0, 0, 3, 6, 40, },
++	{ 0, 0, 0, 3, 7, 46, },
++	{ 2, 0, 0, 3, 7, 40, },
++	{ 1, 0, 0, 3, 7, 40, },
++	{ 0, 0, 0, 3, 8, 46, },
++	{ 2, 0, 0, 3, 8, 40, },
++	{ 1, 0, 0, 3, 8, 40, },
++	{ 0, 0, 0, 3, 9, 46, },
++	{ 2, 0, 0, 3, 9, 40, },
++	{ 1, 0, 0, 3, 9, 40, },
++	{ 0, 0, 0, 3, 10, 46, },
++	{ 2, 0, 0, 3, 10, 40, },
++	{ 1, 0, 0, 3, 10, 40, },
++	{ 0, 0, 0, 3, 11, 46, },
++	{ 2, 0, 0, 3, 11, 40, },
++	{ 1, 0, 0, 3, 11, 40, },
++	{ 0, 0, 0, 3, 12, 63, },
++	{ 2, 0, 0, 3, 12, 40, },
++	{ 1, 0, 0, 3, 12, 40, },
++	{ 0, 0, 0, 3, 13, 63, },
++	{ 2, 0, 0, 3, 13, 40, },
++	{ 1, 0, 0, 3, 13, 40, },
++	{ 0, 0, 0, 3, 14, 63, },
++	{ 2, 0, 0, 3, 14, 63, },
++	{ 1, 0, 0, 3, 14, 63, },
++	{ 0, 0, 0, 6, 1, 46, },
++	{ 2, 0, 0, 6, 1, 40, },
++	{ 1, 0, 0, 6, 1, 40, },
++	{ 0, 0, 0, 6, 2, 46, },
++	{ 2, 0, 0, 6, 2, 40, },
++	{ 1, 0, 0, 6, 2, 40, },
++	{ 0, 0, 0, 6, 3, 46, },
++	{ 2, 0, 0, 6, 3, 40, },
++	{ 1, 0, 0, 6, 3, 40, },
++	{ 0, 0, 0, 6, 4, 46, },
++	{ 2, 0, 0, 6, 4, 40, },
++	{ 1, 0, 0, 6, 4, 40, },
++	{ 0, 0, 0, 6, 5, 46, },
++	{ 2, 0, 0, 6, 5, 40, },
++	{ 1, 0, 0, 6, 5, 40, },
++	{ 0, 0, 0, 6, 6, 46, },
++	{ 2, 0, 0, 6, 6, 40, },
++	{ 1, 0, 0, 6, 6, 40, },
++	{ 0, 0, 0, 6, 7, 46, },
++	{ 2, 0, 0, 6, 7, 40, },
++	{ 1, 0, 0, 6, 7, 40, },
++	{ 0, 0, 0, 6, 8, 46, },
++	{ 2, 0, 0, 6, 8, 40, },
++	{ 1, 0, 0, 6, 8, 40, },
++	{ 0, 0, 0, 6, 9, 46, },
++	{ 2, 0, 0, 6, 9, 40, },
++	{ 1, 0, 0, 6, 9, 40, },
++	{ 0, 0, 0, 6, 10, 46, },
++	{ 2, 0, 0, 6, 10, 40, },
++	{ 1, 0, 0, 6, 10, 40, },
++	{ 0, 0, 0, 6, 11, 46, },
++	{ 2, 0, 0, 6, 11, 40, },
++	{ 1, 0, 0, 6, 11, 40, },
++	{ 0, 0, 0, 6, 12, 63, },
++	{ 2, 0, 0, 6, 12, 40, },
++	{ 1, 0, 0, 6, 12, 40, },
++	{ 0, 0, 0, 6, 13, 63, },
++	{ 2, 0, 0, 6, 13, 40, },
++	{ 1, 0, 0, 6, 13, 40, },
++	{ 0, 0, 0, 6, 14, 63, },
++	{ 2, 0, 0, 6, 14, 63, },
++	{ 1, 0, 0, 6, 14, 63, },
++	{ 0, 0, 0, 7, 1, 46, },
++	{ 2, 0, 0, 7, 1, 40, },
++	{ 1, 0, 0, 7, 1, 40, },
++	{ 0, 0, 0, 7, 2, 46, },
++	{ 2, 0, 0, 7, 2, 40, },
++	{ 1, 0, 0, 7, 2, 40, },
++	{ 0, 0, 0, 7, 3, 46, },
++	{ 2, 0, 0, 7, 3, 40, },
++	{ 1, 0, 0, 7, 3, 40, },
++	{ 0, 0, 0, 7, 4, 46, },
++	{ 2, 0, 0, 7, 4, 40, },
++	{ 1, 0, 0, 7, 4, 40, },
++	{ 0, 0, 0, 7, 5, 46, },
++	{ 2, 0, 0, 7, 5, 40, },
++	{ 1, 0, 0, 7, 5, 40, },
++	{ 0, 0, 0, 7, 6, 46, },
++	{ 2, 0, 0, 7, 6, 40, },
++	{ 1, 0, 0, 7, 6, 40, },
++	{ 0, 0, 0, 7, 7, 46, },
++	{ 2, 0, 0, 7, 7, 40, },
++	{ 1, 0, 0, 7, 7, 40, },
++	{ 0, 0, 0, 7, 8, 46, },
++	{ 2, 0, 0, 7, 8, 40, },
++	{ 1, 0, 0, 7, 8, 40, },
++	{ 0, 0, 0, 7, 9, 46, },
++	{ 2, 0, 0, 7, 9, 40, },
++	{ 1, 0, 0, 7, 9, 40, },
++	{ 0, 0, 0, 7, 10, 46, },
++	{ 2, 0, 0, 7, 10, 40, },
++	{ 1, 0, 0, 7, 10, 40, },
++	{ 0, 0, 0, 7, 11, 46, },
++	{ 2, 0, 0, 7, 11, 40, },
++	{ 1, 0, 0, 7, 11, 40, },
++	{ 0, 0, 0, 7, 12, 63, },
++	{ 2, 0, 0, 7, 12, 40, },
++	{ 1, 0, 0, 7, 12, 40, },
++	{ 0, 0, 0, 7, 13, 63, },
++	{ 2, 0, 0, 7, 13, 40, },
++	{ 1, 0, 0, 7, 13, 40, },
++	{ 0, 0, 0, 7, 14, 63, },
++	{ 2, 0, 0, 7, 14, 63, },
++	{ 1, 0, 0, 7, 14, 63, },
++	{ 0, 0, 1, 2, 1, 63, },
++	{ 2, 0, 1, 2, 1, 63, },
++	{ 1, 0, 1, 2, 1, 63, },
++	{ 0, 0, 1, 2, 2, 63, },
++	{ 2, 0, 1, 2, 2, 63, },
++	{ 1, 0, 1, 2, 2, 63, },
++	{ 0, 0, 1, 2, 3, 46, },
++	{ 2, 0, 1, 2, 3, 40, },
++	{ 1, 0, 1, 2, 3, 40, },
++	{ 0, 0, 1, 2, 4, 46, },
++	{ 2, 0, 1, 2, 4, 40, },
++	{ 1, 0, 1, 2, 4, 40, },
++	{ 0, 0, 1, 2, 5, 46, },
++	{ 2, 0, 1, 2, 5, 40, },
++	{ 1, 0, 1, 2, 5, 40, },
++	{ 0, 0, 1, 2, 6, 46, },
++	{ 2, 0, 1, 2, 6, 40, },
++	{ 1, 0, 1, 2, 6, 40, },
++	{ 0, 0, 1, 2, 7, 46, },
++	{ 2, 0, 1, 2, 7, 40, },
++	{ 1, 0, 1, 2, 7, 40, },
++	{ 0, 0, 1, 2, 8, 46, },
++	{ 2, 0, 1, 2, 8, 40, },
++	{ 1, 0, 1, 2, 8, 40, },
++	{ 0, 0, 1, 2, 9, 46, },
++	{ 2, 0, 1, 2, 9, 40, },
++	{ 1, 0, 1, 2, 9, 40, },
++	{ 0, 0, 1, 2, 10, 46, },
++	{ 2, 0, 1, 2, 10, 40, },
++	{ 1, 0, 1, 2, 10, 40, },
++	{ 0, 0, 1, 2, 11, 46, },
++	{ 2, 0, 1, 2, 11, 40, },
++	{ 1, 0, 1, 2, 11, 40, },
++	{ 0, 0, 1, 2, 12, 63, },
++	{ 2, 0, 1, 2, 12, 40, },
++	{ 1, 0, 1, 2, 12, 40, },
++	{ 0, 0, 1, 2, 13, 63, },
++	{ 2, 0, 1, 2, 13, 40, },
++	{ 1, 0, 1, 2, 13, 40, },
++	{ 0, 0, 1, 2, 14, 63, },
++	{ 2, 0, 1, 2, 14, 63, },
++	{ 1, 0, 1, 2, 14, 63, },
++	{ 0, 0, 1, 3, 1, 63, },
++	{ 2, 0, 1, 3, 1, 63, },
++	{ 1, 0, 1, 3, 1, 63, },
++	{ 0, 0, 1, 3, 2, 63, },
++	{ 2, 0, 1, 3, 2, 63, },
++	{ 1, 0, 1, 3, 2, 63, },
++	{ 0, 0, 1, 3, 3, 46, },
++	{ 2, 0, 1, 3, 3, 40, },
++	{ 1, 0, 1, 3, 3, 40, },
++	{ 0, 0, 1, 3, 4, 46, },
++	{ 2, 0, 1, 3, 4, 40, },
++	{ 1, 0, 1, 3, 4, 40, },
++	{ 0, 0, 1, 3, 5, 46, },
++	{ 2, 0, 1, 3, 5, 40, },
++	{ 1, 0, 1, 3, 5, 40, },
++	{ 0, 0, 1, 3, 6, 46, },
++	{ 2, 0, 1, 3, 6, 40, },
++	{ 1, 0, 1, 3, 6, 40, },
++	{ 0, 0, 1, 3, 7, 46, },
++	{ 2, 0, 1, 3, 7, 40, },
++	{ 1, 0, 1, 3, 7, 40, },
++	{ 0, 0, 1, 3, 8, 46, },
++	{ 2, 0, 1, 3, 8, 40, },
++	{ 1, 0, 1, 3, 8, 40, },
++	{ 0, 0, 1, 3, 9, 46, },
++	{ 2, 0, 1, 3, 9, 40, },
++	{ 1, 0, 1, 3, 9, 40, },
++	{ 0, 0, 1, 3, 10, 46, },
++	{ 2, 0, 1, 3, 10, 40, },
++	{ 1, 0, 1, 3, 10, 40, },
++	{ 0, 0, 1, 3, 11, 46, },
++	{ 2, 0, 1, 3, 11, 40, },
++	{ 1, 0, 1, 3, 11, 40, },
++	{ 0, 0, 1, 3, 12, 63, },
++	{ 2, 0, 1, 3, 12, 40, },
++	{ 1, 0, 1, 3, 12, 40, },
++	{ 0, 0, 1, 3, 13, 63, },
++	{ 2, 0, 1, 3, 13, 40, },
++	{ 1, 0, 1, 3, 13, 40, },
++	{ 0, 0, 1, 3, 14, 63, },
++	{ 2, 0, 1, 3, 14, 63, },
++	{ 1, 0, 1, 3, 14, 63, },
++	{ 0, 0, 1, 6, 1, 63, },
++	{ 2, 0, 1, 6, 1, 63, },
++	{ 1, 0, 1, 6, 1, 63, },
++	{ 0, 0, 1, 6, 2, 63, },
++	{ 2, 0, 1, 6, 2, 63, },
++	{ 1, 0, 1, 6, 2, 63, },
++	{ 0, 0, 1, 6, 3, 46, },
++	{ 2, 0, 1, 6, 3, 40, },
++	{ 1, 0, 1, 6, 3, 40, },
++	{ 0, 0, 1, 6, 4, 46, },
++	{ 2, 0, 1, 6, 4, 40, },
++	{ 1, 0, 1, 6, 4, 40, },
++	{ 0, 0, 1, 6, 5, 46, },
++	{ 2, 0, 1, 6, 5, 40, },
++	{ 1, 0, 1, 6, 5, 40, },
++	{ 0, 0, 1, 6, 6, 46, },
++	{ 2, 0, 1, 6, 6, 40, },
++	{ 1, 0, 1, 6, 6, 40, },
++	{ 0, 0, 1, 6, 7, 46, },
++	{ 2, 0, 1, 6, 7, 40, },
++	{ 1, 0, 1, 6, 7, 40, },
++	{ 0, 0, 1, 6, 8, 46, },
++	{ 2, 0, 1, 6, 8, 40, },
++	{ 1, 0, 1, 6, 8, 40, },
++	{ 0, 0, 1, 6, 9, 46, },
++	{ 2, 0, 1, 6, 9, 40, },
++	{ 1, 0, 1, 6, 9, 40, },
++	{ 0, 0, 1, 6, 10, 46, },
++	{ 2, 0, 1, 6, 10, 40, },
++	{ 1, 0, 1, 6, 10, 40, },
++	{ 0, 0, 1, 6, 11, 46, },
++	{ 2, 0, 1, 6, 11, 40, },
++	{ 1, 0, 1, 6, 11, 40, },
++	{ 0, 0, 1, 6, 12, 63, },
++	{ 2, 0, 1, 6, 12, 40, },
++	{ 1, 0, 1, 6, 12, 40, },
++	{ 0, 0, 1, 6, 13, 63, },
++	{ 2, 0, 1, 6, 13, 40, },
++	{ 1, 0, 1, 6, 13, 40, },
++	{ 0, 0, 1, 6, 14, 63, },
++	{ 2, 0, 1, 6, 14, 63, },
++	{ 1, 0, 1, 6, 14, 63, },
++	{ 0, 0, 1, 7, 1, 63, },
++	{ 2, 0, 1, 7, 1, 63, },
++	{ 1, 0, 1, 7, 1, 63, },
++	{ 0, 0, 1, 7, 2, 63, },
++	{ 2, 0, 1, 7, 2, 63, },
++	{ 1, 0, 1, 7, 2, 63, },
++	{ 0, 0, 1, 7, 3, 46, },
++	{ 2, 0, 1, 7, 3, 40, },
++	{ 1, 0, 1, 7, 3, 40, },
++	{ 0, 0, 1, 7, 4, 46, },
++	{ 2, 0, 1, 7, 4, 40, },
++	{ 1, 0, 1, 7, 4, 40, },
++	{ 0, 0, 1, 7, 5, 46, },
++	{ 2, 0, 1, 7, 5, 40, },
++	{ 1, 0, 1, 7, 5, 40, },
++	{ 0, 0, 1, 7, 6, 46, },
++	{ 2, 0, 1, 7, 6, 40, },
++	{ 1, 0, 1, 7, 6, 40, },
++	{ 0, 0, 1, 7, 7, 46, },
++	{ 2, 0, 1, 7, 7, 40, },
++	{ 1, 0, 1, 7, 7, 40, },
++	{ 0, 0, 1, 7, 8, 46, },
++	{ 2, 0, 1, 7, 8, 40, },
++	{ 1, 0, 1, 7, 8, 40, },
++	{ 0, 0, 1, 7, 9, 46, },
++	{ 2, 0, 1, 7, 9, 40, },
++	{ 1, 0, 1, 7, 9, 40, },
++	{ 0, 0, 1, 7, 10, 46, },
++	{ 2, 0, 1, 7, 10, 40, },
++	{ 1, 0, 1, 7, 10, 40, },
++	{ 0, 0, 1, 7, 11, 46, },
++	{ 2, 0, 1, 7, 11, 40, },
++	{ 1, 0, 1, 7, 11, 40, },
++	{ 0, 0, 1, 7, 12, 63, },
++	{ 2, 0, 1, 7, 12, 40, },
++	{ 1, 0, 1, 7, 12, 40, },
++	{ 0, 0, 1, 7, 13, 63, },
++	{ 2, 0, 1, 7, 13, 40, },
++	{ 1, 0, 1, 7, 13, 40, },
++	{ 0, 0, 1, 7, 14, 63, },
++	{ 2, 0, 1, 7, 14, 63, },
++	{ 1, 0, 1, 7, 14, 63, },
++	{ 0, 1, 0, 1, 36, 46, },
++	{ 2, 1, 0, 1, 36, 40, },
++	{ 1, 1, 0, 1, 36, 40, },
++	{ 0, 1, 0, 1, 40, 46, },
++	{ 2, 1, 0, 1, 40, 40, },
++	{ 1, 1, 0, 1, 40, 40, },
++	{ 0, 1, 0, 1, 44, 46, },
++	{ 2, 1, 0, 1, 44, 40, },
++	{ 1, 1, 0, 1, 44, 40, },
++	{ 0, 1, 0, 1, 48, 46, },
++	{ 2, 1, 0, 1, 48, 40, },
++	{ 1, 1, 0, 1, 48, 40, },
++	{ 0, 1, 0, 1, 52, 46, },
++	{ 2, 1, 0, 1, 52, 40, },
++	{ 1, 1, 0, 1, 52, 40, },
++	{ 0, 1, 0, 1, 56, 46, },
++	{ 2, 1, 0, 1, 56, 40, },
++	{ 1, 1, 0, 1, 56, 40, },
++	{ 0, 1, 0, 1, 60, 46, },
++	{ 2, 1, 0, 1, 60, 40, },
++	{ 1, 1, 0, 1, 60, 40, },
++	{ 0, 1, 0, 1, 64, 46, },
++	{ 2, 1, 0, 1, 64, 40, },
++	{ 1, 1, 0, 1, 64, 40, },
++	{ 0, 1, 0, 1, 100, 46, },
++	{ 2, 1, 0, 1, 100, 40, },
++	{ 1, 1, 0, 1, 100, 40, },
++	{ 0, 1, 0, 1, 104, 46, },
++	{ 2, 1, 0, 1, 104, 40, },
++	{ 1, 1, 0, 1, 104, 40, },
++	{ 0, 1, 0, 1, 108, 46, },
++	{ 2, 1, 0, 1, 108, 40, },
++	{ 1, 1, 0, 1, 108, 40, },
++	{ 0, 1, 0, 1, 112, 46, },
++	{ 2, 1, 0, 1, 112, 40, },
++	{ 1, 1, 0, 1, 112, 40, },
++	{ 0, 1, 0, 1, 116, 46, },
++	{ 2, 1, 0, 1, 116, 40, },
++	{ 1, 1, 0, 1, 116, 40, },
++	{ 0, 1, 0, 1, 120, 46, },
++	{ 2, 1, 0, 1, 120, 40, },
++	{ 1, 1, 0, 1, 120, 40, },
++	{ 0, 1, 0, 1, 124, 46, },
++	{ 2, 1, 0, 1, 124, 40, },
++	{ 1, 1, 0, 1, 124, 40, },
++	{ 0, 1, 0, 1, 128, 46, },
++	{ 2, 1, 0, 1, 128, 40, },
++	{ 1, 1, 0, 1, 128, 40, },
++	{ 0, 1, 0, 1, 132, 46, },
++	{ 2, 1, 0, 1, 132, 40, },
++	{ 1, 1, 0, 1, 132, 40, },
++	{ 0, 1, 0, 1, 136, 46, },
++	{ 2, 1, 0, 1, 136, 40, },
++	{ 1, 1, 0, 1, 136, 40, },
++	{ 0, 1, 0, 1, 140, 46, },
++	{ 2, 1, 0, 1, 140, 40, },
++	{ 1, 1, 0, 1, 140, 40, },
++	{ 0, 1, 0, 1, 149, 46, },
++	{ 2, 1, 0, 1, 149, 40, },
++	{ 1, 1, 0, 1, 149, 63, },
++	{ 0, 1, 0, 1, 153, 46, },
++	{ 2, 1, 0, 1, 153, 40, },
++	{ 1, 1, 0, 1, 153, 63, },
++	{ 0, 1, 0, 1, 157, 46, },
++	{ 2, 1, 0, 1, 157, 40, },
++	{ 1, 1, 0, 1, 157, 63, },
++	{ 0, 1, 0, 1, 161, 46, },
++	{ 2, 1, 0, 1, 161, 40, },
++	{ 1, 1, 0, 1, 161, 63, },
++	{ 0, 1, 0, 1, 165, 46, },
++	{ 2, 1, 0, 1, 165, 40, },
++	{ 1, 1, 0, 1, 165, 63, },
++	{ 0, 1, 0, 2, 36, 46, },
++	{ 2, 1, 0, 2, 36, 40, },
++	{ 1, 1, 0, 2, 36, 40, },
++	{ 0, 1, 0, 2, 40, 46, },
++	{ 2, 1, 0, 2, 40, 40, },
++	{ 1, 1, 0, 2, 40, 40, },
++	{ 0, 1, 0, 2, 44, 46, },
++	{ 2, 1, 0, 2, 44, 40, },
++	{ 1, 1, 0, 2, 44, 40, },
++	{ 0, 1, 0, 2, 48, 46, },
++	{ 2, 1, 0, 2, 48, 40, },
++	{ 1, 1, 0, 2, 48, 40, },
++	{ 0, 1, 0, 2, 52, 46, },
++	{ 2, 1, 0, 2, 52, 40, },
++	{ 1, 1, 0, 2, 52, 40, },
++	{ 0, 1, 0, 2, 56, 46, },
++	{ 2, 1, 0, 2, 56, 40, },
++	{ 1, 1, 0, 2, 56, 40, },
++	{ 0, 1, 0, 2, 60, 46, },
++	{ 2, 1, 0, 2, 60, 40, },
++	{ 1, 1, 0, 2, 60, 40, },
++	{ 0, 1, 0, 2, 64, 46, },
++	{ 2, 1, 0, 2, 64, 40, },
++	{ 1, 1, 0, 2, 64, 40, },
++	{ 0, 1, 0, 2, 100, 46, },
++	{ 2, 1, 0, 2, 100, 40, },
++	{ 1, 1, 0, 2, 100, 40, },
++	{ 0, 1, 0, 2, 104, 46, },
++	{ 2, 1, 0, 2, 104, 40, },
++	{ 1, 1, 0, 2, 104, 40, },
++	{ 0, 1, 0, 2, 108, 46, },
++	{ 2, 1, 0, 2, 108, 40, },
++	{ 1, 1, 0, 2, 108, 40, },
++	{ 0, 1, 0, 2, 112, 46, },
++	{ 2, 1, 0, 2, 112, 40, },
++	{ 1, 1, 0, 2, 112, 40, },
++	{ 0, 1, 0, 2, 116, 46, },
++	{ 2, 1, 0, 2, 116, 40, },
++	{ 1, 1, 0, 2, 116, 40, },
++	{ 0, 1, 0, 2, 120, 46, },
++	{ 2, 1, 0, 2, 120, 40, },
++	{ 1, 1, 0, 2, 120, 40, },
++	{ 0, 1, 0, 2, 124, 46, },
++	{ 2, 1, 0, 2, 124, 40, },
++	{ 1, 1, 0, 2, 124, 40, },
++	{ 0, 1, 0, 2, 128, 46, },
++	{ 2, 1, 0, 2, 128, 40, },
++	{ 1, 1, 0, 2, 128, 40, },
++	{ 0, 1, 0, 2, 132, 46, },
++	{ 2, 1, 0, 2, 132, 40, },
++	{ 1, 1, 0, 2, 132, 40, },
++	{ 0, 1, 0, 2, 136, 46, },
++	{ 2, 1, 0, 2, 136, 40, },
++	{ 1, 1, 0, 2, 136, 40, },
++	{ 0, 1, 0, 2, 140, 46, },
++	{ 2, 1, 0, 2, 140, 40, },
++	{ 1, 1, 0, 2, 140, 40, },
++	{ 0, 1, 0, 2, 149, 46, },
++	{ 2, 1, 0, 2, 149, 40, },
++	{ 1, 1, 0, 2, 149, 63, },
++	{ 0, 1, 0, 2, 153, 46, },
++	{ 2, 1, 0, 2, 153, 40, },
++	{ 1, 1, 0, 2, 153, 63, },
++	{ 0, 1, 0, 2, 157, 46, },
++	{ 2, 1, 0, 2, 157, 40, },
++	{ 1, 1, 0, 2, 157, 63, },
++	{ 0, 1, 0, 2, 161, 46, },
++	{ 2, 1, 0, 2, 161, 40, },
++	{ 1, 1, 0, 2, 161, 63, },
++	{ 0, 1, 0, 2, 165, 46, },
++	{ 2, 1, 0, 2, 165, 40, },
++	{ 1, 1, 0, 2, 165, 63, },
++	{ 0, 1, 0, 3, 36, 46, },
++	{ 2, 1, 0, 3, 36, 40, },
++	{ 1, 1, 0, 3, 36, 40, },
++	{ 0, 1, 0, 3, 40, 46, },
++	{ 2, 1, 0, 3, 40, 40, },
++	{ 1, 1, 0, 3, 40, 40, },
++	{ 0, 1, 0, 3, 44, 46, },
++	{ 2, 1, 0, 3, 44, 40, },
++	{ 1, 1, 0, 3, 44, 40, },
++	{ 0, 1, 0, 3, 48, 46, },
++	{ 2, 1, 0, 3, 48, 40, },
++	{ 1, 1, 0, 3, 48, 40, },
++	{ 0, 1, 0, 3, 52, 46, },
++	{ 2, 1, 0, 3, 52, 40, },
++	{ 1, 1, 0, 3, 52, 40, },
++	{ 0, 1, 0, 3, 56, 46, },
++	{ 2, 1, 0, 3, 56, 40, },
++	{ 1, 1, 0, 3, 56, 40, },
++	{ 0, 1, 0, 3, 60, 46, },
++	{ 2, 1, 0, 3, 60, 40, },
++	{ 1, 1, 0, 3, 60, 40, },
++	{ 0, 1, 0, 3, 64, 46, },
++	{ 2, 1, 0, 3, 64, 40, },
++	{ 1, 1, 0, 3, 64, 40, },
++	{ 0, 1, 0, 3, 100, 46, },
++	{ 2, 1, 0, 3, 100, 40, },
++	{ 1, 1, 0, 3, 100, 40, },
++	{ 0, 1, 0, 3, 104, 46, },
++	{ 2, 1, 0, 3, 104, 40, },
++	{ 1, 1, 0, 3, 104, 40, },
++	{ 0, 1, 0, 3, 108, 46, },
++	{ 2, 1, 0, 3, 108, 40, },
++	{ 1, 1, 0, 3, 108, 40, },
++	{ 0, 1, 0, 3, 112, 46, },
++	{ 2, 1, 0, 3, 112, 40, },
++	{ 1, 1, 0, 3, 112, 40, },
++	{ 0, 1, 0, 3, 116, 46, },
++	{ 2, 1, 0, 3, 116, 40, },
++	{ 1, 1, 0, 3, 116, 40, },
++	{ 0, 1, 0, 3, 120, 46, },
++	{ 2, 1, 0, 3, 120, 40, },
++	{ 1, 1, 0, 3, 120, 40, },
++	{ 0, 1, 0, 3, 124, 46, },
++	{ 2, 1, 0, 3, 124, 40, },
++	{ 1, 1, 0, 3, 124, 40, },
++	{ 0, 1, 0, 3, 128, 46, },
++	{ 2, 1, 0, 3, 128, 40, },
++	{ 1, 1, 0, 3, 128, 40, },
++	{ 0, 1, 0, 3, 132, 46, },
++	{ 2, 1, 0, 3, 132, 40, },
++	{ 1, 1, 0, 3, 132, 40, },
++	{ 0, 1, 0, 3, 136, 46, },
++	{ 2, 1, 0, 3, 136, 40, },
++	{ 1, 1, 0, 3, 136, 40, },
++	{ 0, 1, 0, 3, 140, 46, },
++	{ 2, 1, 0, 3, 140, 40, },
++	{ 1, 1, 0, 3, 140, 40, },
++	{ 0, 1, 0, 3, 149, 46, },
++	{ 2, 1, 0, 3, 149, 40, },
++	{ 1, 1, 0, 3, 149, 63, },
++	{ 0, 1, 0, 3, 153, 46, },
++	{ 2, 1, 0, 3, 153, 40, },
++	{ 1, 1, 0, 3, 153, 63, },
++	{ 0, 1, 0, 3, 157, 46, },
++	{ 2, 1, 0, 3, 157, 40, },
++	{ 1, 1, 0, 3, 157, 63, },
++	{ 0, 1, 0, 3, 161, 46, },
++	{ 2, 1, 0, 3, 161, 40, },
++	{ 1, 1, 0, 3, 161, 63, },
++	{ 0, 1, 0, 3, 165, 46, },
++	{ 2, 1, 0, 3, 165, 40, },
++	{ 1, 1, 0, 3, 165, 63, },
++	{ 0, 1, 0, 6, 36, 46, },
++	{ 2, 1, 0, 6, 36, 40, },
++	{ 1, 1, 0, 6, 36, 40, },
++	{ 0, 1, 0, 6, 40, 46, },
++	{ 2, 1, 0, 6, 40, 40, },
++	{ 1, 1, 0, 6, 40, 40, },
++	{ 0, 1, 0, 6, 44, 46, },
++	{ 2, 1, 0, 6, 44, 40, },
++	{ 1, 1, 0, 6, 44, 40, },
++	{ 0, 1, 0, 6, 48, 46, },
++	{ 2, 1, 0, 6, 48, 40, },
++	{ 1, 1, 0, 6, 48, 40, },
++	{ 0, 1, 0, 6, 52, 46, },
++	{ 2, 1, 0, 6, 52, 40, },
++	{ 1, 1, 0, 6, 52, 40, },
++	{ 0, 1, 0, 6, 56, 46, },
++	{ 2, 1, 0, 6, 56, 40, },
++	{ 1, 1, 0, 6, 56, 40, },
++	{ 0, 1, 0, 6, 60, 46, },
++	{ 2, 1, 0, 6, 60, 40, },
++	{ 1, 1, 0, 6, 60, 40, },
++	{ 0, 1, 0, 6, 64, 46, },
++	{ 2, 1, 0, 6, 64, 40, },
++	{ 1, 1, 0, 6, 64, 40, },
++	{ 0, 1, 0, 6, 100, 46, },
++	{ 2, 1, 0, 6, 100, 40, },
++	{ 1, 1, 0, 6, 100, 40, },
++	{ 0, 1, 0, 6, 104, 46, },
++	{ 2, 1, 0, 6, 104, 40, },
++	{ 1, 1, 0, 6, 104, 40, },
++	{ 0, 1, 0, 6, 108, 46, },
++	{ 2, 1, 0, 6, 108, 40, },
++	{ 1, 1, 0, 6, 108, 40, },
++	{ 0, 1, 0, 6, 112, 46, },
++	{ 2, 1, 0, 6, 112, 40, },
++	{ 1, 1, 0, 6, 112, 40, },
++	{ 0, 1, 0, 6, 116, 46, },
++	{ 2, 1, 0, 6, 116, 40, },
++	{ 1, 1, 0, 6, 116, 40, },
++	{ 0, 1, 0, 6, 120, 46, },
++	{ 2, 1, 0, 6, 120, 40, },
++	{ 1, 1, 0, 6, 120, 40, },
++	{ 0, 1, 0, 6, 124, 46, },
++	{ 2, 1, 0, 6, 124, 40, },
++	{ 1, 1, 0, 6, 124, 40, },
++	{ 0, 1, 0, 6, 128, 46, },
++	{ 2, 1, 0, 6, 128, 40, },
++	{ 1, 1, 0, 6, 128, 40, },
++	{ 0, 1, 0, 6, 132, 46, },
++	{ 2, 1, 0, 6, 132, 40, },
++	{ 1, 1, 0, 6, 132, 40, },
++	{ 0, 1, 0, 6, 136, 46, },
++	{ 2, 1, 0, 6, 136, 40, },
++	{ 1, 1, 0, 6, 136, 40, },
++	{ 0, 1, 0, 6, 140, 46, },
++	{ 2, 1, 0, 6, 140, 40, },
++	{ 1, 1, 0, 6, 140, 40, },
++	{ 0, 1, 0, 6, 149, 46, },
++	{ 2, 1, 0, 6, 149, 40, },
++	{ 1, 1, 0, 6, 149, 63, },
++	{ 0, 1, 0, 6, 153, 46, },
++	{ 2, 1, 0, 6, 153, 40, },
++	{ 1, 1, 0, 6, 153, 63, },
++	{ 0, 1, 0, 6, 157, 46, },
++	{ 2, 1, 0, 6, 157, 40, },
++	{ 1, 1, 0, 6, 157, 63, },
++	{ 0, 1, 0, 6, 161, 46, },
++	{ 2, 1, 0, 6, 161, 40, },
++	{ 1, 1, 0, 6, 161, 63, },
++	{ 0, 1, 0, 6, 165, 46, },
++	{ 2, 1, 0, 6, 165, 40, },
++	{ 1, 1, 0, 6, 165, 63, },
++	{ 0, 1, 0, 7, 36, 46, },
++	{ 2, 1, 0, 7, 36, 40, },
++	{ 1, 1, 0, 7, 36, 40, },
++	{ 0, 1, 0, 7, 40, 46, },
++	{ 2, 1, 0, 7, 40, 40, },
++	{ 1, 1, 0, 7, 40, 40, },
++	{ 0, 1, 0, 7, 44, 46, },
++	{ 2, 1, 0, 7, 44, 40, },
++	{ 1, 1, 0, 7, 44, 40, },
++	{ 0, 1, 0, 7, 48, 46, },
++	{ 2, 1, 0, 7, 48, 40, },
++	{ 1, 1, 0, 7, 48, 40, },
++	{ 0, 1, 0, 7, 52, 46, },
++	{ 2, 1, 0, 7, 52, 40, },
++	{ 1, 1, 0, 7, 52, 40, },
++	{ 0, 1, 0, 7, 56, 46, },
++	{ 2, 1, 0, 7, 56, 40, },
++	{ 1, 1, 0, 7, 56, 40, },
++	{ 0, 1, 0, 7, 60, 46, },
++	{ 2, 1, 0, 7, 60, 40, },
++	{ 1, 1, 0, 7, 60, 40, },
++	{ 0, 1, 0, 7, 64, 46, },
++	{ 2, 1, 0, 7, 64, 40, },
++	{ 1, 1, 0, 7, 64, 40, },
++	{ 0, 1, 0, 7, 100, 46, },
++	{ 2, 1, 0, 7, 100, 40, },
++	{ 1, 1, 0, 7, 100, 40, },
++	{ 0, 1, 0, 7, 104, 46, },
++	{ 2, 1, 0, 7, 104, 40, },
++	{ 1, 1, 0, 7, 104, 40, },
++	{ 0, 1, 0, 7, 108, 46, },
++	{ 2, 1, 0, 7, 108, 40, },
++	{ 1, 1, 0, 7, 108, 40, },
++	{ 0, 1, 0, 7, 112, 46, },
++	{ 2, 1, 0, 7, 112, 40, },
++	{ 1, 1, 0, 7, 112, 40, },
++	{ 0, 1, 0, 7, 116, 46, },
++	{ 2, 1, 0, 7, 116, 40, },
++	{ 1, 1, 0, 7, 116, 40, },
++	{ 0, 1, 0, 7, 120, 46, },
++	{ 2, 1, 0, 7, 120, 40, },
++	{ 1, 1, 0, 7, 120, 40, },
++	{ 0, 1, 0, 7, 124, 46, },
++	{ 2, 1, 0, 7, 124, 40, },
++	{ 1, 1, 0, 7, 124, 40, },
++	{ 0, 1, 0, 7, 128, 46, },
++	{ 2, 1, 0, 7, 128, 40, },
++	{ 1, 1, 0, 7, 128, 40, },
++	{ 0, 1, 0, 7, 132, 46, },
++	{ 2, 1, 0, 7, 132, 40, },
++	{ 1, 1, 0, 7, 132, 40, },
++	{ 0, 1, 0, 7, 136, 46, },
++	{ 2, 1, 0, 7, 136, 40, },
++	{ 1, 1, 0, 7, 136, 40, },
++	{ 0, 1, 0, 7, 140, 46, },
++	{ 2, 1, 0, 7, 140, 40, },
++	{ 1, 1, 0, 7, 140, 40, },
++	{ 0, 1, 0, 7, 149, 46, },
++	{ 2, 1, 0, 7, 149, 40, },
++	{ 1, 1, 0, 7, 149, 63, },
++	{ 0, 1, 0, 7, 153, 46, },
++	{ 2, 1, 0, 7, 153, 40, },
++	{ 1, 1, 0, 7, 153, 63, },
++	{ 0, 1, 0, 7, 157, 46, },
++	{ 2, 1, 0, 7, 157, 40, },
++	{ 1, 1, 0, 7, 157, 63, },
++	{ 0, 1, 0, 7, 161, 46, },
++	{ 2, 1, 0, 7, 161, 40, },
++	{ 1, 1, 0, 7, 161, 63, },
++	{ 0, 1, 0, 7, 165, 46, },
++	{ 2, 1, 0, 7, 165, 40, },
++	{ 1, 1, 0, 7, 165, 63, },
++	{ 0, 1, 1, 2, 38, 46, },
++	{ 2, 1, 1, 2, 38, 40, },
++	{ 1, 1, 1, 2, 38, 40, },
++	{ 0, 1, 1, 2, 46, 46, },
++	{ 2, 1, 1, 2, 46, 40, },
++	{ 1, 1, 1, 2, 46, 40, },
++	{ 0, 1, 1, 2, 54, 46, },
++	{ 2, 1, 1, 2, 54, 40, },
++	{ 1, 1, 1, 2, 54, 40, },
++	{ 0, 1, 1, 2, 62, 46, },
++	{ 2, 1, 1, 2, 62, 40, },
++	{ 1, 1, 1, 2, 62, 40, },
++	{ 0, 1, 1, 2, 102, 46, },
++	{ 2, 1, 1, 2, 102, 40, },
++	{ 1, 1, 1, 2, 102, 40, },
++	{ 0, 1, 1, 2, 110, 46, },
++	{ 2, 1, 1, 2, 110, 40, },
++	{ 1, 1, 1, 2, 110, 40, },
++	{ 0, 1, 1, 2, 118, 46, },
++	{ 2, 1, 1, 2, 118, 40, },
++	{ 1, 1, 1, 2, 118, 40, },
++	{ 0, 1, 1, 2, 126, 46, },
++	{ 2, 1, 1, 2, 126, 40, },
++	{ 1, 1, 1, 2, 126, 40, },
++	{ 0, 1, 1, 2, 134, 46, },
++	{ 2, 1, 1, 2, 134, 40, },
++	{ 1, 1, 1, 2, 134, 40, },
++	{ 0, 1, 1, 2, 151, 46, },
++	{ 2, 1, 1, 2, 151, 40, },
++	{ 1, 1, 1, 2, 151, 63, },
++	{ 0, 1, 1, 2, 159, 46, },
++	{ 2, 1, 1, 2, 159, 40, },
++	{ 1, 1, 1, 2, 159, 63, },
++	{ 0, 1, 1, 3, 38, 46, },
++	{ 2, 1, 1, 3, 38, 40, },
++	{ 1, 1, 1, 3, 38, 40, },
++	{ 0, 1, 1, 3, 46, 46, },
++	{ 2, 1, 1, 3, 46, 40, },
++	{ 1, 1, 1, 3, 46, 40, },
++	{ 0, 1, 1, 3, 54, 46, },
++	{ 2, 1, 1, 3, 54, 40, },
++	{ 1, 1, 1, 3, 54, 40, },
++	{ 0, 1, 1, 3, 62, 46, },
++	{ 2, 1, 1, 3, 62, 40, },
++	{ 1, 1, 1, 3, 62, 40, },
++	{ 0, 1, 1, 3, 102, 46, },
++	{ 2, 1, 1, 3, 102, 40, },
++	{ 1, 1, 1, 3, 102, 40, },
++	{ 0, 1, 1, 3, 110, 46, },
++	{ 2, 1, 1, 3, 110, 40, },
++	{ 1, 1, 1, 3, 110, 40, },
++	{ 0, 1, 1, 3, 118, 46, },
++	{ 2, 1, 1, 3, 118, 40, },
++	{ 1, 1, 1, 3, 118, 40, },
++	{ 0, 1, 1, 3, 126, 46, },
++	{ 2, 1, 1, 3, 126, 40, },
++	{ 1, 1, 1, 3, 126, 40, },
++	{ 0, 1, 1, 3, 134, 46, },
++	{ 2, 1, 1, 3, 134, 40, },
++	{ 1, 1, 1, 3, 134, 40, },
++	{ 0, 1, 1, 3, 151, 46, },
++	{ 2, 1, 1, 3, 151, 40, },
++	{ 1, 1, 1, 3, 151, 63, },
++	{ 0, 1, 1, 3, 159, 46, },
++	{ 2, 1, 1, 3, 159, 40, },
++	{ 1, 1, 1, 3, 159, 63, },
++	{ 0, 1, 1, 6, 38, 46, },
++	{ 2, 1, 1, 6, 38, 40, },
++	{ 1, 1, 1, 6, 38, 40, },
++	{ 0, 1, 1, 6, 46, 46, },
++	{ 2, 1, 1, 6, 46, 40, },
++	{ 1, 1, 1, 6, 46, 40, },
++	{ 0, 1, 1, 6, 54, 46, },
++	{ 2, 1, 1, 6, 54, 40, },
++	{ 1, 1, 1, 6, 54, 40, },
++	{ 0, 1, 1, 6, 62, 46, },
++	{ 2, 1, 1, 6, 62, 40, },
++	{ 1, 1, 1, 6, 62, 40, },
++	{ 0, 1, 1, 6, 102, 46, },
++	{ 2, 1, 1, 6, 102, 40, },
++	{ 1, 1, 1, 6, 102, 40, },
++	{ 0, 1, 1, 6, 110, 46, },
++	{ 2, 1, 1, 6, 110, 40, },
++	{ 1, 1, 1, 6, 110, 40, },
++	{ 0, 1, 1, 6, 118, 46, },
++	{ 2, 1, 1, 6, 118, 40, },
++	{ 1, 1, 1, 6, 118, 40, },
++	{ 0, 1, 1, 6, 126, 46, },
++	{ 2, 1, 1, 6, 126, 40, },
++	{ 1, 1, 1, 6, 126, 40, },
++	{ 0, 1, 1, 6, 134, 46, },
++	{ 2, 1, 1, 6, 134, 40, },
++	{ 1, 1, 1, 6, 134, 40, },
++	{ 0, 1, 1, 6, 151, 46, },
++	{ 2, 1, 1, 6, 151, 40, },
++	{ 1, 1, 1, 6, 151, 63, },
++	{ 0, 1, 1, 6, 159, 46, },
++	{ 2, 1, 1, 6, 159, 40, },
++	{ 1, 1, 1, 6, 159, 63, },
++	{ 0, 1, 1, 7, 38, 46, },
++	{ 2, 1, 1, 7, 38, 40, },
++	{ 1, 1, 1, 7, 38, 40, },
++	{ 0, 1, 1, 7, 46, 46, },
++	{ 2, 1, 1, 7, 46, 40, },
++	{ 1, 1, 1, 7, 46, 40, },
++	{ 0, 1, 1, 7, 54, 46, },
++	{ 2, 1, 1, 7, 54, 40, },
++	{ 1, 1, 1, 7, 54, 40, },
++	{ 0, 1, 1, 7, 62, 46, },
++	{ 2, 1, 1, 7, 62, 40, },
++	{ 1, 1, 1, 7, 62, 40, },
++	{ 0, 1, 1, 7, 102, 46, },
++	{ 2, 1, 1, 7, 102, 40, },
++	{ 1, 1, 1, 7, 102, 40, },
++	{ 0, 1, 1, 7, 110, 46, },
++	{ 2, 1, 1, 7, 110, 40, },
++	{ 1, 1, 1, 7, 110, 40, },
++	{ 0, 1, 1, 7, 118, 46, },
++	{ 2, 1, 1, 7, 118, 40, },
++	{ 1, 1, 1, 7, 118, 40, },
++	{ 0, 1, 1, 7, 126, 46, },
++	{ 2, 1, 1, 7, 126, 40, },
++	{ 1, 1, 1, 7, 126, 40, },
++	{ 0, 1, 1, 7, 134, 46, },
++	{ 2, 1, 1, 7, 134, 40, },
++	{ 1, 1, 1, 7, 134, 40, },
++	{ 0, 1, 1, 7, 151, 46, },
++	{ 2, 1, 1, 7, 151, 40, },
++	{ 1, 1, 1, 7, 151, 63, },
++	{ 0, 1, 1, 7, 159, 46, },
++	{ 2, 1, 1, 7, 159, 40, },
++	{ 1, 1, 1, 7, 159, 63, },
++	{ 0, 1, 2, 4, 42, 46, },
++	{ 2, 1, 2, 4, 42, 40, },
++	{ 1, 1, 2, 4, 42, 40, },
++	{ 0, 1, 2, 4, 58, 46, },
++	{ 2, 1, 2, 4, 58, 40, },
++	{ 1, 1, 2, 4, 58, 40, },
++	{ 0, 1, 2, 4, 106, 46, },
++	{ 2, 1, 2, 4, 106, 40, },
++	{ 1, 1, 2, 4, 106, 40, },
++	{ 0, 1, 2, 4, 122, 46, },
++	{ 2, 1, 2, 4, 122, 40, },
++	{ 1, 1, 2, 4, 122, 40, },
++	{ 0, 1, 2, 4, 155, 46, },
++	{ 2, 1, 2, 4, 155, 40, },
++	{ 1, 1, 2, 4, 155, 63, },
++	{ 0, 1, 2, 5, 42, 46, },
++	{ 2, 1, 2, 5, 42, 40, },
++	{ 1, 1, 2, 5, 42, 40, },
++	{ 0, 1, 2, 5, 58, 46, },
++	{ 2, 1, 2, 5, 58, 40, },
++	{ 1, 1, 2, 5, 58, 40, },
++	{ 0, 1, 2, 5, 106, 46, },
++	{ 2, 1, 2, 5, 106, 40, },
++	{ 1, 1, 2, 5, 106, 40, },
++	{ 0, 1, 2, 5, 122, 46, },
++	{ 2, 1, 2, 5, 122, 40, },
++	{ 1, 1, 2, 5, 122, 40, },
++	{ 0, 1, 2, 5, 155, 46, },
++	{ 2, 1, 2, 5, 155, 40, },
++	{ 1, 1, 2, 5, 155, 63, },
++	{ 0, 1, 2, 8, 42, 46, },
++	{ 2, 1, 2, 8, 42, 40, },
++	{ 1, 1, 2, 8, 42, 40, },
++	{ 0, 1, 2, 8, 58, 46, },
++	{ 2, 1, 2, 8, 58, 40, },
++	{ 1, 1, 2, 8, 58, 40, },
++	{ 0, 1, 2, 8, 106, 46, },
++	{ 2, 1, 2, 8, 106, 40, },
++	{ 1, 1, 2, 8, 106, 40, },
++	{ 0, 1, 2, 8, 122, 46, },
++	{ 2, 1, 2, 8, 122, 40, },
++	{ 1, 1, 2, 8, 122, 40, },
++	{ 0, 1, 2, 8, 155, 46, },
++	{ 2, 1, 2, 8, 155, 40, },
++	{ 1, 1, 2, 8, 155, 63, },
++	{ 0, 1, 2, 9, 42, 46, },
++	{ 2, 1, 2, 9, 42, 40, },
++	{ 1, 1, 2, 9, 42, 40, },
++	{ 0, 1, 2, 9, 58, 46, },
++	{ 2, 1, 2, 9, 58, 40, },
++	{ 1, 1, 2, 9, 58, 40, },
++	{ 0, 1, 2, 9, 106, 46, },
++	{ 2, 1, 2, 9, 106, 40, },
++	{ 1, 1, 2, 9, 106, 40, },
++	{ 0, 1, 2, 9, 122, 46, },
++	{ 2, 1, 2, 9, 122, 40, },
++	{ 1, 1, 2, 9, 122, 40, },
++	{ 0, 1, 2, 9, 155, 46, },
++	{ 2, 1, 2, 9, 155, 40, },
++	{ 1, 1, 2, 9, 155, 63, },
++};
++
++RTW_DECL_TABLE_TXPWR_LMT(rtw8814a_txpwr_lmt_type3);
++
++static const struct rtw_txpwr_lmt_cfg_pair rtw8814a_txpwr_lmt_type5[] = {
++	{ 0, 0, 0, 0, 1, 46, },
++	{ 2, 0, 0, 0, 1, 40, },
++	{ 1, 0, 0, 0, 1, 40, },
++	{ 0, 0, 0, 0, 2, 46, },
++	{ 2, 0, 0, 0, 2, 40, },
++	{ 1, 0, 0, 0, 2, 40, },
++	{ 0, 0, 0, 0, 3, 46, },
++	{ 2, 0, 0, 0, 3, 40, },
++	{ 1, 0, 0, 0, 3, 40, },
++	{ 0, 0, 0, 0, 4, 46, },
++	{ 2, 0, 0, 0, 4, 40, },
++	{ 1, 0, 0, 0, 4, 40, },
++	{ 0, 0, 0, 0, 5, 46, },
++	{ 2, 0, 0, 0, 5, 40, },
++	{ 1, 0, 0, 0, 5, 40, },
++	{ 0, 0, 0, 0, 6, 46, },
++	{ 2, 0, 0, 0, 6, 40, },
++	{ 1, 0, 0, 0, 6, 40, },
++	{ 0, 0, 0, 0, 7, 46, },
++	{ 2, 0, 0, 0, 7, 40, },
++	{ 1, 0, 0, 0, 7, 40, },
++	{ 0, 0, 0, 0, 8, 46, },
++	{ 2, 0, 0, 0, 8, 40, },
++	{ 1, 0, 0, 0, 8, 40, },
++	{ 0, 0, 0, 0, 9, 46, },
++	{ 2, 0, 0, 0, 9, 40, },
++	{ 1, 0, 0, 0, 9, 40, },
++	{ 0, 0, 0, 0, 10, 46, },
++	{ 2, 0, 0, 0, 10, 40, },
++	{ 1, 0, 0, 0, 10, 40, },
++	{ 0, 0, 0, 0, 11, 46, },
++	{ 2, 0, 0, 0, 11, 40, },
++	{ 1, 0, 0, 0, 11, 40, },
++	{ 0, 0, 0, 0, 12, 63, },
++	{ 2, 0, 0, 0, 12, 40, },
++	{ 1, 0, 0, 0, 12, 40, },
++	{ 0, 0, 0, 0, 13, 63, },
++	{ 2, 0, 0, 0, 13, 40, },
++	{ 1, 0, 0, 0, 13, 40, },
++	{ 0, 0, 0, 0, 14, 63, },
++	{ 2, 0, 0, 0, 14, 63, },
++	{ 1, 0, 0, 0, 14, 40, },
++	{ 0, 0, 0, 1, 1, 46, },
++	{ 2, 0, 0, 1, 1, 40, },
++	{ 1, 0, 0, 1, 1, 40, },
++	{ 0, 0, 0, 1, 2, 46, },
++	{ 2, 0, 0, 1, 2, 40, },
++	{ 1, 0, 0, 1, 2, 40, },
++	{ 0, 0, 0, 1, 3, 46, },
++	{ 2, 0, 0, 1, 3, 40, },
++	{ 1, 0, 0, 1, 3, 40, },
++	{ 0, 0, 0, 1, 4, 46, },
++	{ 2, 0, 0, 1, 4, 40, },
++	{ 1, 0, 0, 1, 4, 40, },
++	{ 0, 0, 0, 1, 5, 46, },
++	{ 2, 0, 0, 1, 5, 40, },
++	{ 1, 0, 0, 1, 5, 40, },
++	{ 0, 0, 0, 1, 6, 46, },
++	{ 2, 0, 0, 1, 6, 40, },
++	{ 1, 0, 0, 1, 6, 40, },
++	{ 0, 0, 0, 1, 7, 46, },
++	{ 2, 0, 0, 1, 7, 40, },
++	{ 1, 0, 0, 1, 7, 40, },
++	{ 0, 0, 0, 1, 8, 46, },
++	{ 2, 0, 0, 1, 8, 40, },
++	{ 1, 0, 0, 1, 8, 40, },
++	{ 0, 0, 0, 1, 9, 46, },
++	{ 2, 0, 0, 1, 9, 40, },
++	{ 1, 0, 0, 1, 9, 40, },
++	{ 0, 0, 0, 1, 10, 46, },
++	{ 2, 0, 0, 1, 10, 40, },
++	{ 1, 0, 0, 1, 10, 40, },
++	{ 0, 0, 0, 1, 11, 46, },
++	{ 2, 0, 0, 1, 11, 40, },
++	{ 1, 0, 0, 1, 11, 40, },
++	{ 0, 0, 0, 1, 12, 63, },
++	{ 2, 0, 0, 1, 12, 40, },
++	{ 1, 0, 0, 1, 12, 40, },
++	{ 0, 0, 0, 1, 13, 63, },
++	{ 2, 0, 0, 1, 13, 40, },
++	{ 1, 0, 0, 1, 13, 40, },
++	{ 0, 0, 0, 1, 14, 63, },
++	{ 2, 0, 0, 1, 14, 63, },
++	{ 1, 0, 0, 1, 14, 63, },
++	{ 0, 0, 0, 2, 1, 46, },
++	{ 2, 0, 0, 2, 1, 40, },
++	{ 1, 0, 0, 2, 1, 40, },
++	{ 0, 0, 0, 2, 2, 46, },
++	{ 2, 0, 0, 2, 2, 40, },
++	{ 1, 0, 0, 2, 2, 40, },
++	{ 0, 0, 0, 2, 3, 46, },
++	{ 2, 0, 0, 2, 3, 40, },
++	{ 1, 0, 0, 2, 3, 40, },
++	{ 0, 0, 0, 2, 4, 46, },
++	{ 2, 0, 0, 2, 4, 40, },
++	{ 1, 0, 0, 2, 4, 40, },
++	{ 0, 0, 0, 2, 5, 46, },
++	{ 2, 0, 0, 2, 5, 40, },
++	{ 1, 0, 0, 2, 5, 40, },
++	{ 0, 0, 0, 2, 6, 46, },
++	{ 2, 0, 0, 2, 6, 40, },
++	{ 1, 0, 0, 2, 6, 40, },
++	{ 0, 0, 0, 2, 7, 46, },
++	{ 2, 0, 0, 2, 7, 40, },
++	{ 1, 0, 0, 2, 7, 40, },
++	{ 0, 0, 0, 2, 8, 46, },
++	{ 2, 0, 0, 2, 8, 40, },
++	{ 1, 0, 0, 2, 8, 40, },
++	{ 0, 0, 0, 2, 9, 46, },
++	{ 2, 0, 0, 2, 9, 40, },
++	{ 1, 0, 0, 2, 9, 40, },
++	{ 0, 0, 0, 2, 10, 46, },
++	{ 2, 0, 0, 2, 10, 40, },
++	{ 1, 0, 0, 2, 10, 40, },
++	{ 0, 0, 0, 2, 11, 46, },
++	{ 2, 0, 0, 2, 11, 40, },
++	{ 1, 0, 0, 2, 11, 40, },
++	{ 0, 0, 0, 2, 12, 63, },
++	{ 2, 0, 0, 2, 12, 40, },
++	{ 1, 0, 0, 2, 12, 40, },
++	{ 0, 0, 0, 2, 13, 63, },
++	{ 2, 0, 0, 2, 13, 40, },
++	{ 1, 0, 0, 2, 13, 40, },
++	{ 0, 0, 0, 2, 14, 63, },
++	{ 2, 0, 0, 2, 14, 63, },
++	{ 1, 0, 0, 2, 14, 63, },
++	{ 0, 0, 0, 3, 1, 46, },
++	{ 2, 0, 0, 3, 1, 40, },
++	{ 1, 0, 0, 3, 1, 40, },
++	{ 0, 0, 0, 3, 2, 46, },
++	{ 2, 0, 0, 3, 2, 40, },
++	{ 1, 0, 0, 3, 2, 40, },
++	{ 0, 0, 0, 3, 3, 46, },
++	{ 2, 0, 0, 3, 3, 40, },
++	{ 1, 0, 0, 3, 3, 40, },
++	{ 0, 0, 0, 3, 4, 46, },
++	{ 2, 0, 0, 3, 4, 40, },
++	{ 1, 0, 0, 3, 4, 40, },
++	{ 0, 0, 0, 3, 5, 46, },
++	{ 2, 0, 0, 3, 5, 40, },
++	{ 1, 0, 0, 3, 5, 40, },
++	{ 0, 0, 0, 3, 6, 46, },
++	{ 2, 0, 0, 3, 6, 40, },
++	{ 1, 0, 0, 3, 6, 40, },
++	{ 0, 0, 0, 3, 7, 46, },
++	{ 2, 0, 0, 3, 7, 40, },
++	{ 1, 0, 0, 3, 7, 40, },
++	{ 0, 0, 0, 3, 8, 46, },
++	{ 2, 0, 0, 3, 8, 40, },
++	{ 1, 0, 0, 3, 8, 40, },
++	{ 0, 0, 0, 3, 9, 46, },
++	{ 2, 0, 0, 3, 9, 40, },
++	{ 1, 0, 0, 3, 9, 40, },
++	{ 0, 0, 0, 3, 10, 46, },
++	{ 2, 0, 0, 3, 10, 40, },
++	{ 1, 0, 0, 3, 10, 40, },
++	{ 0, 0, 0, 3, 11, 46, },
++	{ 2, 0, 0, 3, 11, 40, },
++	{ 1, 0, 0, 3, 11, 40, },
++	{ 0, 0, 0, 3, 12, 63, },
++	{ 2, 0, 0, 3, 12, 40, },
++	{ 1, 0, 0, 3, 12, 40, },
++	{ 0, 0, 0, 3, 13, 63, },
++	{ 2, 0, 0, 3, 13, 40, },
++	{ 1, 0, 0, 3, 13, 40, },
++	{ 0, 0, 0, 3, 14, 63, },
++	{ 2, 0, 0, 3, 14, 63, },
++	{ 1, 0, 0, 3, 14, 63, },
++	{ 0, 0, 0, 6, 1, 46, },
++	{ 2, 0, 0, 6, 1, 40, },
++	{ 1, 0, 0, 6, 1, 40, },
++	{ 0, 0, 0, 6, 2, 46, },
++	{ 2, 0, 0, 6, 2, 40, },
++	{ 1, 0, 0, 6, 2, 40, },
++	{ 0, 0, 0, 6, 3, 46, },
++	{ 2, 0, 0, 6, 3, 40, },
++	{ 1, 0, 0, 6, 3, 40, },
++	{ 0, 0, 0, 6, 4, 46, },
++	{ 2, 0, 0, 6, 4, 40, },
++	{ 1, 0, 0, 6, 4, 40, },
++	{ 0, 0, 0, 6, 5, 46, },
++	{ 2, 0, 0, 6, 5, 40, },
++	{ 1, 0, 0, 6, 5, 40, },
++	{ 0, 0, 0, 6, 6, 46, },
++	{ 2, 0, 0, 6, 6, 40, },
++	{ 1, 0, 0, 6, 6, 40, },
++	{ 0, 0, 0, 6, 7, 46, },
++	{ 2, 0, 0, 6, 7, 40, },
++	{ 1, 0, 0, 6, 7, 40, },
++	{ 0, 0, 0, 6, 8, 46, },
++	{ 2, 0, 0, 6, 8, 40, },
++	{ 1, 0, 0, 6, 8, 40, },
++	{ 0, 0, 0, 6, 9, 46, },
++	{ 2, 0, 0, 6, 9, 40, },
++	{ 1, 0, 0, 6, 9, 40, },
++	{ 0, 0, 0, 6, 10, 46, },
++	{ 2, 0, 0, 6, 10, 40, },
++	{ 1, 0, 0, 6, 10, 40, },
++	{ 0, 0, 0, 6, 11, 46, },
++	{ 2, 0, 0, 6, 11, 40, },
++	{ 1, 0, 0, 6, 11, 40, },
++	{ 0, 0, 0, 6, 12, 63, },
++	{ 2, 0, 0, 6, 12, 40, },
++	{ 1, 0, 0, 6, 12, 40, },
++	{ 0, 0, 0, 6, 13, 63, },
++	{ 2, 0, 0, 6, 13, 40, },
++	{ 1, 0, 0, 6, 13, 40, },
++	{ 0, 0, 0, 6, 14, 63, },
++	{ 2, 0, 0, 6, 14, 63, },
++	{ 1, 0, 0, 6, 14, 63, },
++	{ 0, 0, 0, 7, 1, 46, },
++	{ 2, 0, 0, 7, 1, 40, },
++	{ 1, 0, 0, 7, 1, 40, },
++	{ 0, 0, 0, 7, 2, 46, },
++	{ 2, 0, 0, 7, 2, 40, },
++	{ 1, 0, 0, 7, 2, 40, },
++	{ 0, 0, 0, 7, 3, 46, },
++	{ 2, 0, 0, 7, 3, 40, },
++	{ 1, 0, 0, 7, 3, 40, },
++	{ 0, 0, 0, 7, 4, 46, },
++	{ 2, 0, 0, 7, 4, 40, },
++	{ 1, 0, 0, 7, 4, 40, },
++	{ 0, 0, 0, 7, 5, 46, },
++	{ 2, 0, 0, 7, 5, 40, },
++	{ 1, 0, 0, 7, 5, 40, },
++	{ 0, 0, 0, 7, 6, 46, },
++	{ 2, 0, 0, 7, 6, 40, },
++	{ 1, 0, 0, 7, 6, 40, },
++	{ 0, 0, 0, 7, 7, 46, },
++	{ 2, 0, 0, 7, 7, 40, },
++	{ 1, 0, 0, 7, 7, 40, },
++	{ 0, 0, 0, 7, 8, 46, },
++	{ 2, 0, 0, 7, 8, 40, },
++	{ 1, 0, 0, 7, 8, 40, },
++	{ 0, 0, 0, 7, 9, 46, },
++	{ 2, 0, 0, 7, 9, 40, },
++	{ 1, 0, 0, 7, 9, 40, },
++	{ 0, 0, 0, 7, 10, 46, },
++	{ 2, 0, 0, 7, 10, 40, },
++	{ 1, 0, 0, 7, 10, 40, },
++	{ 0, 0, 0, 7, 11, 46, },
++	{ 2, 0, 0, 7, 11, 40, },
++	{ 1, 0, 0, 7, 11, 40, },
++	{ 0, 0, 0, 7, 12, 63, },
++	{ 2, 0, 0, 7, 12, 40, },
++	{ 1, 0, 0, 7, 12, 40, },
++	{ 0, 0, 0, 7, 13, 63, },
++	{ 2, 0, 0, 7, 13, 40, },
++	{ 1, 0, 0, 7, 13, 40, },
++	{ 0, 0, 0, 7, 14, 63, },
++	{ 2, 0, 0, 7, 14, 63, },
++	{ 1, 0, 0, 7, 14, 63, },
++	{ 0, 0, 1, 2, 1, 63, },
++	{ 2, 0, 1, 2, 1, 63, },
++	{ 1, 0, 1, 2, 1, 63, },
++	{ 0, 0, 1, 2, 2, 63, },
++	{ 2, 0, 1, 2, 2, 63, },
++	{ 1, 0, 1, 2, 2, 63, },
++	{ 0, 0, 1, 2, 3, 46, },
++	{ 2, 0, 1, 2, 3, 40, },
++	{ 1, 0, 1, 2, 3, 40, },
++	{ 0, 0, 1, 2, 4, 46, },
++	{ 2, 0, 1, 2, 4, 40, },
++	{ 1, 0, 1, 2, 4, 40, },
++	{ 0, 0, 1, 2, 5, 46, },
++	{ 2, 0, 1, 2, 5, 40, },
++	{ 1, 0, 1, 2, 5, 40, },
++	{ 0, 0, 1, 2, 6, 46, },
++	{ 2, 0, 1, 2, 6, 40, },
++	{ 1, 0, 1, 2, 6, 40, },
++	{ 0, 0, 1, 2, 7, 46, },
++	{ 2, 0, 1, 2, 7, 40, },
++	{ 1, 0, 1, 2, 7, 40, },
++	{ 0, 0, 1, 2, 8, 46, },
++	{ 2, 0, 1, 2, 8, 40, },
++	{ 1, 0, 1, 2, 8, 40, },
++	{ 0, 0, 1, 2, 9, 46, },
++	{ 2, 0, 1, 2, 9, 40, },
++	{ 1, 0, 1, 2, 9, 40, },
++	{ 0, 0, 1, 2, 10, 46, },
++	{ 2, 0, 1, 2, 10, 40, },
++	{ 1, 0, 1, 2, 10, 40, },
++	{ 0, 0, 1, 2, 11, 46, },
++	{ 2, 0, 1, 2, 11, 40, },
++	{ 1, 0, 1, 2, 11, 40, },
++	{ 0, 0, 1, 2, 12, 63, },
++	{ 2, 0, 1, 2, 12, 40, },
++	{ 1, 0, 1, 2, 12, 40, },
++	{ 0, 0, 1, 2, 13, 63, },
++	{ 2, 0, 1, 2, 13, 40, },
++	{ 1, 0, 1, 2, 13, 40, },
++	{ 0, 0, 1, 2, 14, 63, },
++	{ 2, 0, 1, 2, 14, 63, },
++	{ 1, 0, 1, 2, 14, 63, },
++	{ 0, 0, 1, 3, 1, 63, },
++	{ 2, 0, 1, 3, 1, 63, },
++	{ 1, 0, 1, 3, 1, 63, },
++	{ 0, 0, 1, 3, 2, 63, },
++	{ 2, 0, 1, 3, 2, 63, },
++	{ 1, 0, 1, 3, 2, 63, },
++	{ 0, 0, 1, 3, 3, 46, },
++	{ 2, 0, 1, 3, 3, 40, },
++	{ 1, 0, 1, 3, 3, 40, },
++	{ 0, 0, 1, 3, 4, 46, },
++	{ 2, 0, 1, 3, 4, 40, },
++	{ 1, 0, 1, 3, 4, 40, },
++	{ 0, 0, 1, 3, 5, 46, },
++	{ 2, 0, 1, 3, 5, 40, },
++	{ 1, 0, 1, 3, 5, 40, },
++	{ 0, 0, 1, 3, 6, 46, },
++	{ 2, 0, 1, 3, 6, 40, },
++	{ 1, 0, 1, 3, 6, 40, },
++	{ 0, 0, 1, 3, 7, 46, },
++	{ 2, 0, 1, 3, 7, 40, },
++	{ 1, 0, 1, 3, 7, 40, },
++	{ 0, 0, 1, 3, 8, 46, },
++	{ 2, 0, 1, 3, 8, 40, },
++	{ 1, 0, 1, 3, 8, 40, },
++	{ 0, 0, 1, 3, 9, 46, },
++	{ 2, 0, 1, 3, 9, 40, },
++	{ 1, 0, 1, 3, 9, 40, },
++	{ 0, 0, 1, 3, 10, 46, },
++	{ 2, 0, 1, 3, 10, 40, },
++	{ 1, 0, 1, 3, 10, 40, },
++	{ 0, 0, 1, 3, 11, 46, },
++	{ 2, 0, 1, 3, 11, 40, },
++	{ 1, 0, 1, 3, 11, 40, },
++	{ 0, 0, 1, 3, 12, 63, },
++	{ 2, 0, 1, 3, 12, 40, },
++	{ 1, 0, 1, 3, 12, 40, },
++	{ 0, 0, 1, 3, 13, 63, },
++	{ 2, 0, 1, 3, 13, 40, },
++	{ 1, 0, 1, 3, 13, 40, },
++	{ 0, 0, 1, 3, 14, 63, },
++	{ 2, 0, 1, 3, 14, 63, },
++	{ 1, 0, 1, 3, 14, 63, },
++	{ 0, 0, 1, 6, 1, 63, },
++	{ 2, 0, 1, 6, 1, 63, },
++	{ 1, 0, 1, 6, 1, 63, },
++	{ 0, 0, 1, 6, 2, 63, },
++	{ 2, 0, 1, 6, 2, 63, },
++	{ 1, 0, 1, 6, 2, 63, },
++	{ 0, 0, 1, 6, 3, 46, },
++	{ 2, 0, 1, 6, 3, 40, },
++	{ 1, 0, 1, 6, 3, 40, },
++	{ 0, 0, 1, 6, 4, 46, },
++	{ 2, 0, 1, 6, 4, 40, },
++	{ 1, 0, 1, 6, 4, 40, },
++	{ 0, 0, 1, 6, 5, 46, },
++	{ 2, 0, 1, 6, 5, 40, },
++	{ 1, 0, 1, 6, 5, 40, },
++	{ 0, 0, 1, 6, 6, 46, },
++	{ 2, 0, 1, 6, 6, 40, },
++	{ 1, 0, 1, 6, 6, 40, },
++	{ 0, 0, 1, 6, 7, 46, },
++	{ 2, 0, 1, 6, 7, 40, },
++	{ 1, 0, 1, 6, 7, 40, },
++	{ 0, 0, 1, 6, 8, 46, },
++	{ 2, 0, 1, 6, 8, 40, },
++	{ 1, 0, 1, 6, 8, 40, },
++	{ 0, 0, 1, 6, 9, 46, },
++	{ 2, 0, 1, 6, 9, 40, },
++	{ 1, 0, 1, 6, 9, 40, },
++	{ 0, 0, 1, 6, 10, 46, },
++	{ 2, 0, 1, 6, 10, 40, },
++	{ 1, 0, 1, 6, 10, 40, },
++	{ 0, 0, 1, 6, 11, 46, },
++	{ 2, 0, 1, 6, 11, 40, },
++	{ 1, 0, 1, 6, 11, 40, },
++	{ 0, 0, 1, 6, 12, 63, },
++	{ 2, 0, 1, 6, 12, 40, },
++	{ 1, 0, 1, 6, 12, 40, },
++	{ 0, 0, 1, 6, 13, 63, },
++	{ 2, 0, 1, 6, 13, 40, },
++	{ 1, 0, 1, 6, 13, 40, },
++	{ 0, 0, 1, 6, 14, 63, },
++	{ 2, 0, 1, 6, 14, 63, },
++	{ 1, 0, 1, 6, 14, 63, },
++	{ 0, 0, 1, 7, 1, 63, },
++	{ 2, 0, 1, 7, 1, 63, },
++	{ 1, 0, 1, 7, 1, 63, },
++	{ 0, 0, 1, 7, 2, 63, },
++	{ 2, 0, 1, 7, 2, 63, },
++	{ 1, 0, 1, 7, 2, 63, },
++	{ 0, 0, 1, 7, 3, 46, },
++	{ 2, 0, 1, 7, 3, 40, },
++	{ 1, 0, 1, 7, 3, 40, },
++	{ 0, 0, 1, 7, 4, 46, },
++	{ 2, 0, 1, 7, 4, 40, },
++	{ 1, 0, 1, 7, 4, 40, },
++	{ 0, 0, 1, 7, 5, 46, },
++	{ 2, 0, 1, 7, 5, 40, },
++	{ 1, 0, 1, 7, 5, 40, },
++	{ 0, 0, 1, 7, 6, 46, },
++	{ 2, 0, 1, 7, 6, 40, },
++	{ 1, 0, 1, 7, 6, 40, },
++	{ 0, 0, 1, 7, 7, 46, },
++	{ 2, 0, 1, 7, 7, 40, },
++	{ 1, 0, 1, 7, 7, 40, },
++	{ 0, 0, 1, 7, 8, 46, },
++	{ 2, 0, 1, 7, 8, 40, },
++	{ 1, 0, 1, 7, 8, 40, },
++	{ 0, 0, 1, 7, 9, 46, },
++	{ 2, 0, 1, 7, 9, 40, },
++	{ 1, 0, 1, 7, 9, 40, },
++	{ 0, 0, 1, 7, 10, 46, },
++	{ 2, 0, 1, 7, 10, 40, },
++	{ 1, 0, 1, 7, 10, 40, },
++	{ 0, 0, 1, 7, 11, 46, },
++	{ 2, 0, 1, 7, 11, 40, },
++	{ 1, 0, 1, 7, 11, 40, },
++	{ 0, 0, 1, 7, 12, 63, },
++	{ 2, 0, 1, 7, 12, 40, },
++	{ 1, 0, 1, 7, 12, 40, },
++	{ 0, 0, 1, 7, 13, 63, },
++	{ 2, 0, 1, 7, 13, 40, },
++	{ 1, 0, 1, 7, 13, 40, },
++	{ 0, 0, 1, 7, 14, 63, },
++	{ 2, 0, 1, 7, 14, 63, },
++	{ 1, 0, 1, 7, 14, 63, },
++	{ 0, 1, 0, 1, 36, 46, },
++	{ 2, 1, 0, 1, 36, 40, },
++	{ 1, 1, 0, 1, 36, 40, },
++	{ 0, 1, 0, 1, 40, 46, },
++	{ 2, 1, 0, 1, 40, 40, },
++	{ 1, 1, 0, 1, 40, 40, },
++	{ 0, 1, 0, 1, 44, 46, },
++	{ 2, 1, 0, 1, 44, 40, },
++	{ 1, 1, 0, 1, 44, 40, },
++	{ 0, 1, 0, 1, 48, 46, },
++	{ 2, 1, 0, 1, 48, 40, },
++	{ 1, 1, 0, 1, 48, 40, },
++	{ 0, 1, 0, 1, 52, 46, },
++	{ 2, 1, 0, 1, 52, 40, },
++	{ 1, 1, 0, 1, 52, 40, },
++	{ 0, 1, 0, 1, 56, 46, },
++	{ 2, 1, 0, 1, 56, 40, },
++	{ 1, 1, 0, 1, 56, 40, },
++	{ 0, 1, 0, 1, 60, 46, },
++	{ 2, 1, 0, 1, 60, 40, },
++	{ 1, 1, 0, 1, 60, 40, },
++	{ 0, 1, 0, 1, 64, 46, },
++	{ 2, 1, 0, 1, 64, 40, },
++	{ 1, 1, 0, 1, 64, 40, },
++	{ 0, 1, 0, 1, 100, 46, },
++	{ 2, 1, 0, 1, 100, 40, },
++	{ 1, 1, 0, 1, 100, 40, },
++	{ 0, 1, 0, 1, 104, 46, },
++	{ 2, 1, 0, 1, 104, 40, },
++	{ 1, 1, 0, 1, 104, 40, },
++	{ 0, 1, 0, 1, 108, 46, },
++	{ 2, 1, 0, 1, 108, 40, },
++	{ 1, 1, 0, 1, 108, 40, },
++	{ 0, 1, 0, 1, 112, 46, },
++	{ 2, 1, 0, 1, 112, 40, },
++	{ 1, 1, 0, 1, 112, 40, },
++	{ 0, 1, 0, 1, 116, 46, },
++	{ 2, 1, 0, 1, 116, 40, },
++	{ 1, 1, 0, 1, 116, 40, },
++	{ 0, 1, 0, 1, 120, 46, },
++	{ 2, 1, 0, 1, 120, 40, },
++	{ 1, 1, 0, 1, 120, 40, },
++	{ 0, 1, 0, 1, 124, 46, },
++	{ 2, 1, 0, 1, 124, 40, },
++	{ 1, 1, 0, 1, 124, 40, },
++	{ 0, 1, 0, 1, 128, 46, },
++	{ 2, 1, 0, 1, 128, 40, },
++	{ 1, 1, 0, 1, 128, 40, },
++	{ 0, 1, 0, 1, 132, 46, },
++	{ 2, 1, 0, 1, 132, 40, },
++	{ 1, 1, 0, 1, 132, 40, },
++	{ 0, 1, 0, 1, 136, 46, },
++	{ 2, 1, 0, 1, 136, 40, },
++	{ 1, 1, 0, 1, 136, 40, },
++	{ 0, 1, 0, 1, 140, 46, },
++	{ 2, 1, 0, 1, 140, 40, },
++	{ 1, 1, 0, 1, 140, 40, },
++	{ 0, 1, 0, 1, 149, 46, },
++	{ 2, 1, 0, 1, 149, 40, },
++	{ 1, 1, 0, 1, 149, 63, },
++	{ 0, 1, 0, 1, 153, 46, },
++	{ 2, 1, 0, 1, 153, 40, },
++	{ 1, 1, 0, 1, 153, 63, },
++	{ 0, 1, 0, 1, 157, 46, },
++	{ 2, 1, 0, 1, 157, 40, },
++	{ 1, 1, 0, 1, 157, 63, },
++	{ 0, 1, 0, 1, 161, 46, },
++	{ 2, 1, 0, 1, 161, 40, },
++	{ 1, 1, 0, 1, 161, 63, },
++	{ 0, 1, 0, 1, 165, 46, },
++	{ 2, 1, 0, 1, 165, 40, },
++	{ 1, 1, 0, 1, 165, 63, },
++	{ 0, 1, 0, 2, 36, 46, },
++	{ 2, 1, 0, 2, 36, 40, },
++	{ 1, 1, 0, 2, 36, 40, },
++	{ 0, 1, 0, 2, 40, 46, },
++	{ 2, 1, 0, 2, 40, 40, },
++	{ 1, 1, 0, 2, 40, 40, },
++	{ 0, 1, 0, 2, 44, 46, },
++	{ 2, 1, 0, 2, 44, 40, },
++	{ 1, 1, 0, 2, 44, 40, },
++	{ 0, 1, 0, 2, 48, 46, },
++	{ 2, 1, 0, 2, 48, 40, },
++	{ 1, 1, 0, 2, 48, 40, },
++	{ 0, 1, 0, 2, 52, 46, },
++	{ 2, 1, 0, 2, 52, 40, },
++	{ 1, 1, 0, 2, 52, 40, },
++	{ 0, 1, 0, 2, 56, 46, },
++	{ 2, 1, 0, 2, 56, 40, },
++	{ 1, 1, 0, 2, 56, 40, },
++	{ 0, 1, 0, 2, 60, 46, },
++	{ 2, 1, 0, 2, 60, 40, },
++	{ 1, 1, 0, 2, 60, 40, },
++	{ 0, 1, 0, 2, 64, 46, },
++	{ 2, 1, 0, 2, 64, 40, },
++	{ 1, 1, 0, 2, 64, 40, },
++	{ 0, 1, 0, 2, 100, 46, },
++	{ 2, 1, 0, 2, 100, 40, },
++	{ 1, 1, 0, 2, 100, 40, },
++	{ 0, 1, 0, 2, 104, 46, },
++	{ 2, 1, 0, 2, 104, 40, },
++	{ 1, 1, 0, 2, 104, 40, },
++	{ 0, 1, 0, 2, 108, 46, },
++	{ 2, 1, 0, 2, 108, 40, },
++	{ 1, 1, 0, 2, 108, 40, },
++	{ 0, 1, 0, 2, 112, 46, },
++	{ 2, 1, 0, 2, 112, 40, },
++	{ 1, 1, 0, 2, 112, 40, },
++	{ 0, 1, 0, 2, 116, 46, },
++	{ 2, 1, 0, 2, 116, 40, },
++	{ 1, 1, 0, 2, 116, 40, },
++	{ 0, 1, 0, 2, 120, 46, },
++	{ 2, 1, 0, 2, 120, 40, },
++	{ 1, 1, 0, 2, 120, 40, },
++	{ 0, 1, 0, 2, 124, 46, },
++	{ 2, 1, 0, 2, 124, 40, },
++	{ 1, 1, 0, 2, 124, 40, },
++	{ 0, 1, 0, 2, 128, 46, },
++	{ 2, 1, 0, 2, 128, 40, },
++	{ 1, 1, 0, 2, 128, 40, },
++	{ 0, 1, 0, 2, 132, 46, },
++	{ 2, 1, 0, 2, 132, 40, },
++	{ 1, 1, 0, 2, 132, 40, },
++	{ 0, 1, 0, 2, 136, 46, },
++	{ 2, 1, 0, 2, 136, 40, },
++	{ 1, 1, 0, 2, 136, 40, },
++	{ 0, 1, 0, 2, 140, 46, },
++	{ 2, 1, 0, 2, 140, 40, },
++	{ 1, 1, 0, 2, 140, 40, },
++	{ 0, 1, 0, 2, 149, 46, },
++	{ 2, 1, 0, 2, 149, 40, },
++	{ 1, 1, 0, 2, 149, 63, },
++	{ 0, 1, 0, 2, 153, 46, },
++	{ 2, 1, 0, 2, 153, 40, },
++	{ 1, 1, 0, 2, 153, 63, },
++	{ 0, 1, 0, 2, 157, 46, },
++	{ 2, 1, 0, 2, 157, 40, },
++	{ 1, 1, 0, 2, 157, 63, },
++	{ 0, 1, 0, 2, 161, 46, },
++	{ 2, 1, 0, 2, 161, 40, },
++	{ 1, 1, 0, 2, 161, 63, },
++	{ 0, 1, 0, 2, 165, 46, },
++	{ 2, 1, 0, 2, 165, 40, },
++	{ 1, 1, 0, 2, 165, 63, },
++	{ 0, 1, 0, 3, 36, 46, },
++	{ 2, 1, 0, 3, 36, 40, },
++	{ 1, 1, 0, 3, 36, 40, },
++	{ 0, 1, 0, 3, 40, 46, },
++	{ 2, 1, 0, 3, 40, 40, },
++	{ 1, 1, 0, 3, 40, 40, },
++	{ 0, 1, 0, 3, 44, 46, },
++	{ 2, 1, 0, 3, 44, 40, },
++	{ 1, 1, 0, 3, 44, 40, },
++	{ 0, 1, 0, 3, 48, 46, },
++	{ 2, 1, 0, 3, 48, 40, },
++	{ 1, 1, 0, 3, 48, 40, },
++	{ 0, 1, 0, 3, 52, 46, },
++	{ 2, 1, 0, 3, 52, 40, },
++	{ 1, 1, 0, 3, 52, 40, },
++	{ 0, 1, 0, 3, 56, 46, },
++	{ 2, 1, 0, 3, 56, 40, },
++	{ 1, 1, 0, 3, 56, 40, },
++	{ 0, 1, 0, 3, 60, 46, },
++	{ 2, 1, 0, 3, 60, 40, },
++	{ 1, 1, 0, 3, 60, 40, },
++	{ 0, 1, 0, 3, 64, 46, },
++	{ 2, 1, 0, 3, 64, 40, },
++	{ 1, 1, 0, 3, 64, 40, },
++	{ 0, 1, 0, 3, 100, 46, },
++	{ 2, 1, 0, 3, 100, 40, },
++	{ 1, 1, 0, 3, 100, 40, },
++	{ 0, 1, 0, 3, 104, 46, },
++	{ 2, 1, 0, 3, 104, 40, },
++	{ 1, 1, 0, 3, 104, 40, },
++	{ 0, 1, 0, 3, 108, 46, },
++	{ 2, 1, 0, 3, 108, 40, },
++	{ 1, 1, 0, 3, 108, 40, },
++	{ 0, 1, 0, 3, 112, 46, },
++	{ 2, 1, 0, 3, 112, 40, },
++	{ 1, 1, 0, 3, 112, 40, },
++	{ 0, 1, 0, 3, 116, 46, },
++	{ 2, 1, 0, 3, 116, 40, },
++	{ 1, 1, 0, 3, 116, 40, },
++	{ 0, 1, 0, 3, 120, 46, },
++	{ 2, 1, 0, 3, 120, 40, },
++	{ 1, 1, 0, 3, 120, 40, },
++	{ 0, 1, 0, 3, 124, 46, },
++	{ 2, 1, 0, 3, 124, 40, },
++	{ 1, 1, 0, 3, 124, 40, },
++	{ 0, 1, 0, 3, 128, 46, },
++	{ 2, 1, 0, 3, 128, 40, },
++	{ 1, 1, 0, 3, 128, 40, },
++	{ 0, 1, 0, 3, 132, 46, },
++	{ 2, 1, 0, 3, 132, 40, },
++	{ 1, 1, 0, 3, 132, 40, },
++	{ 0, 1, 0, 3, 136, 46, },
++	{ 2, 1, 0, 3, 136, 40, },
++	{ 1, 1, 0, 3, 136, 40, },
++	{ 0, 1, 0, 3, 140, 46, },
++	{ 2, 1, 0, 3, 140, 40, },
++	{ 1, 1, 0, 3, 140, 40, },
++	{ 0, 1, 0, 3, 149, 46, },
++	{ 2, 1, 0, 3, 149, 40, },
++	{ 1, 1, 0, 3, 149, 63, },
++	{ 0, 1, 0, 3, 153, 46, },
++	{ 2, 1, 0, 3, 153, 40, },
++	{ 1, 1, 0, 3, 153, 63, },
++	{ 0, 1, 0, 3, 157, 46, },
++	{ 2, 1, 0, 3, 157, 40, },
++	{ 1, 1, 0, 3, 157, 63, },
++	{ 0, 1, 0, 3, 161, 46, },
++	{ 2, 1, 0, 3, 161, 40, },
++	{ 1, 1, 0, 3, 161, 63, },
++	{ 0, 1, 0, 3, 165, 46, },
++	{ 2, 1, 0, 3, 165, 40, },
++	{ 1, 1, 0, 3, 165, 63, },
++	{ 0, 1, 0, 6, 36, 46, },
++	{ 2, 1, 0, 6, 36, 40, },
++	{ 1, 1, 0, 6, 36, 40, },
++	{ 0, 1, 0, 6, 40, 46, },
++	{ 2, 1, 0, 6, 40, 40, },
++	{ 1, 1, 0, 6, 40, 40, },
++	{ 0, 1, 0, 6, 44, 46, },
++	{ 2, 1, 0, 6, 44, 40, },
++	{ 1, 1, 0, 6, 44, 40, },
++	{ 0, 1, 0, 6, 48, 46, },
++	{ 2, 1, 0, 6, 48, 40, },
++	{ 1, 1, 0, 6, 48, 40, },
++	{ 0, 1, 0, 6, 52, 46, },
++	{ 2, 1, 0, 6, 52, 40, },
++	{ 1, 1, 0, 6, 52, 40, },
++	{ 0, 1, 0, 6, 56, 46, },
++	{ 2, 1, 0, 6, 56, 40, },
++	{ 1, 1, 0, 6, 56, 40, },
++	{ 0, 1, 0, 6, 60, 46, },
++	{ 2, 1, 0, 6, 60, 40, },
++	{ 1, 1, 0, 6, 60, 40, },
++	{ 0, 1, 0, 6, 64, 46, },
++	{ 2, 1, 0, 6, 64, 40, },
++	{ 1, 1, 0, 6, 64, 40, },
++	{ 0, 1, 0, 6, 100, 46, },
++	{ 2, 1, 0, 6, 100, 40, },
++	{ 1, 1, 0, 6, 100, 40, },
++	{ 0, 1, 0, 6, 104, 46, },
++	{ 2, 1, 0, 6, 104, 40, },
++	{ 1, 1, 0, 6, 104, 40, },
++	{ 0, 1, 0, 6, 108, 46, },
++	{ 2, 1, 0, 6, 108, 40, },
++	{ 1, 1, 0, 6, 108, 40, },
++	{ 0, 1, 0, 6, 112, 46, },
++	{ 2, 1, 0, 6, 112, 40, },
++	{ 1, 1, 0, 6, 112, 40, },
++	{ 0, 1, 0, 6, 116, 46, },
++	{ 2, 1, 0, 6, 116, 40, },
++	{ 1, 1, 0, 6, 116, 40, },
++	{ 0, 1, 0, 6, 120, 46, },
++	{ 2, 1, 0, 6, 120, 40, },
++	{ 1, 1, 0, 6, 120, 40, },
++	{ 0, 1, 0, 6, 124, 46, },
++	{ 2, 1, 0, 6, 124, 40, },
++	{ 1, 1, 0, 6, 124, 40, },
++	{ 0, 1, 0, 6, 128, 46, },
++	{ 2, 1, 0, 6, 128, 40, },
++	{ 1, 1, 0, 6, 128, 40, },
++	{ 0, 1, 0, 6, 132, 46, },
++	{ 2, 1, 0, 6, 132, 40, },
++	{ 1, 1, 0, 6, 132, 40, },
++	{ 0, 1, 0, 6, 136, 46, },
++	{ 2, 1, 0, 6, 136, 40, },
++	{ 1, 1, 0, 6, 136, 40, },
++	{ 0, 1, 0, 6, 140, 46, },
++	{ 2, 1, 0, 6, 140, 40, },
++	{ 1, 1, 0, 6, 140, 40, },
++	{ 0, 1, 0, 6, 149, 46, },
++	{ 2, 1, 0, 6, 149, 40, },
++	{ 1, 1, 0, 6, 149, 63, },
++	{ 0, 1, 0, 6, 153, 46, },
++	{ 2, 1, 0, 6, 153, 40, },
++	{ 1, 1, 0, 6, 153, 63, },
++	{ 0, 1, 0, 6, 157, 46, },
++	{ 2, 1, 0, 6, 157, 40, },
++	{ 1, 1, 0, 6, 157, 63, },
++	{ 0, 1, 0, 6, 161, 46, },
++	{ 2, 1, 0, 6, 161, 40, },
++	{ 1, 1, 0, 6, 161, 63, },
++	{ 0, 1, 0, 6, 165, 46, },
++	{ 2, 1, 0, 6, 165, 40, },
++	{ 1, 1, 0, 6, 165, 63, },
++	{ 0, 1, 0, 7, 36, 46, },
++	{ 2, 1, 0, 7, 36, 40, },
++	{ 1, 1, 0, 7, 36, 40, },
++	{ 0, 1, 0, 7, 40, 46, },
++	{ 2, 1, 0, 7, 40, 40, },
++	{ 1, 1, 0, 7, 40, 40, },
++	{ 0, 1, 0, 7, 44, 46, },
++	{ 2, 1, 0, 7, 44, 40, },
++	{ 1, 1, 0, 7, 44, 40, },
++	{ 0, 1, 0, 7, 48, 46, },
++	{ 2, 1, 0, 7, 48, 40, },
++	{ 1, 1, 0, 7, 48, 40, },
++	{ 0, 1, 0, 7, 52, 46, },
++	{ 2, 1, 0, 7, 52, 40, },
++	{ 1, 1, 0, 7, 52, 40, },
++	{ 0, 1, 0, 7, 56, 46, },
++	{ 2, 1, 0, 7, 56, 40, },
++	{ 1, 1, 0, 7, 56, 40, },
++	{ 0, 1, 0, 7, 60, 46, },
++	{ 2, 1, 0, 7, 60, 40, },
++	{ 1, 1, 0, 7, 60, 40, },
++	{ 0, 1, 0, 7, 64, 46, },
++	{ 2, 1, 0, 7, 64, 40, },
++	{ 1, 1, 0, 7, 64, 40, },
++	{ 0, 1, 0, 7, 100, 46, },
++	{ 2, 1, 0, 7, 100, 40, },
++	{ 1, 1, 0, 7, 100, 40, },
++	{ 0, 1, 0, 7, 104, 46, },
++	{ 2, 1, 0, 7, 104, 40, },
++	{ 1, 1, 0, 7, 104, 40, },
++	{ 0, 1, 0, 7, 108, 46, },
++	{ 2, 1, 0, 7, 108, 40, },
++	{ 1, 1, 0, 7, 108, 40, },
++	{ 0, 1, 0, 7, 112, 46, },
++	{ 2, 1, 0, 7, 112, 40, },
++	{ 1, 1, 0, 7, 112, 40, },
++	{ 0, 1, 0, 7, 116, 46, },
++	{ 2, 1, 0, 7, 116, 40, },
++	{ 1, 1, 0, 7, 116, 40, },
++	{ 0, 1, 0, 7, 120, 46, },
++	{ 2, 1, 0, 7, 120, 40, },
++	{ 1, 1, 0, 7, 120, 40, },
++	{ 0, 1, 0, 7, 124, 46, },
++	{ 2, 1, 0, 7, 124, 40, },
++	{ 1, 1, 0, 7, 124, 40, },
++	{ 0, 1, 0, 7, 128, 46, },
++	{ 2, 1, 0, 7, 128, 40, },
++	{ 1, 1, 0, 7, 128, 40, },
++	{ 0, 1, 0, 7, 132, 46, },
++	{ 2, 1, 0, 7, 132, 40, },
++	{ 1, 1, 0, 7, 132, 40, },
++	{ 0, 1, 0, 7, 136, 46, },
++	{ 2, 1, 0, 7, 136, 40, },
++	{ 1, 1, 0, 7, 136, 40, },
++	{ 0, 1, 0, 7, 140, 46, },
++	{ 2, 1, 0, 7, 140, 40, },
++	{ 1, 1, 0, 7, 140, 40, },
++	{ 0, 1, 0, 7, 149, 46, },
++	{ 2, 1, 0, 7, 149, 40, },
++	{ 1, 1, 0, 7, 149, 63, },
++	{ 0, 1, 0, 7, 153, 46, },
++	{ 2, 1, 0, 7, 153, 40, },
++	{ 1, 1, 0, 7, 153, 63, },
++	{ 0, 1, 0, 7, 157, 46, },
++	{ 2, 1, 0, 7, 157, 40, },
++	{ 1, 1, 0, 7, 157, 63, },
++	{ 0, 1, 0, 7, 161, 46, },
++	{ 2, 1, 0, 7, 161, 40, },
++	{ 1, 1, 0, 7, 161, 63, },
++	{ 0, 1, 0, 7, 165, 46, },
++	{ 2, 1, 0, 7, 165, 40, },
++	{ 1, 1, 0, 7, 165, 63, },
++	{ 0, 1, 1, 2, 38, 46, },
++	{ 2, 1, 1, 2, 38, 40, },
++	{ 1, 1, 1, 2, 38, 40, },
++	{ 0, 1, 1, 2, 46, 46, },
++	{ 2, 1, 1, 2, 46, 40, },
++	{ 1, 1, 1, 2, 46, 40, },
++	{ 0, 1, 1, 2, 54, 46, },
++	{ 2, 1, 1, 2, 54, 40, },
++	{ 1, 1, 1, 2, 54, 40, },
++	{ 0, 1, 1, 2, 62, 46, },
++	{ 2, 1, 1, 2, 62, 40, },
++	{ 1, 1, 1, 2, 62, 40, },
++	{ 0, 1, 1, 2, 102, 46, },
++	{ 2, 1, 1, 2, 102, 40, },
++	{ 1, 1, 1, 2, 102, 40, },
++	{ 0, 1, 1, 2, 110, 46, },
++	{ 2, 1, 1, 2, 110, 40, },
++	{ 1, 1, 1, 2, 110, 40, },
++	{ 0, 1, 1, 2, 118, 46, },
++	{ 2, 1, 1, 2, 118, 40, },
++	{ 1, 1, 1, 2, 118, 40, },
++	{ 0, 1, 1, 2, 126, 46, },
++	{ 2, 1, 1, 2, 126, 40, },
++	{ 1, 1, 1, 2, 126, 40, },
++	{ 0, 1, 1, 2, 134, 46, },
++	{ 2, 1, 1, 2, 134, 40, },
++	{ 1, 1, 1, 2, 134, 40, },
++	{ 0, 1, 1, 2, 151, 46, },
++	{ 2, 1, 1, 2, 151, 40, },
++	{ 1, 1, 1, 2, 151, 63, },
++	{ 0, 1, 1, 2, 159, 46, },
++	{ 2, 1, 1, 2, 159, 40, },
++	{ 1, 1, 1, 2, 159, 63, },
++	{ 0, 1, 1, 3, 38, 46, },
++	{ 2, 1, 1, 3, 38, 40, },
++	{ 1, 1, 1, 3, 38, 40, },
++	{ 0, 1, 1, 3, 46, 46, },
++	{ 2, 1, 1, 3, 46, 40, },
++	{ 1, 1, 1, 3, 46, 40, },
++	{ 0, 1, 1, 3, 54, 46, },
++	{ 2, 1, 1, 3, 54, 40, },
++	{ 1, 1, 1, 3, 54, 40, },
++	{ 0, 1, 1, 3, 62, 46, },
++	{ 2, 1, 1, 3, 62, 40, },
++	{ 1, 1, 1, 3, 62, 40, },
++	{ 0, 1, 1, 3, 102, 46, },
++	{ 2, 1, 1, 3, 102, 40, },
++	{ 1, 1, 1, 3, 102, 40, },
++	{ 0, 1, 1, 3, 110, 46, },
++	{ 2, 1, 1, 3, 110, 40, },
++	{ 1, 1, 1, 3, 110, 40, },
++	{ 0, 1, 1, 3, 118, 46, },
++	{ 2, 1, 1, 3, 118, 40, },
++	{ 1, 1, 1, 3, 118, 40, },
++	{ 0, 1, 1, 3, 126, 46, },
++	{ 2, 1, 1, 3, 126, 40, },
++	{ 1, 1, 1, 3, 126, 40, },
++	{ 0, 1, 1, 3, 134, 46, },
++	{ 2, 1, 1, 3, 134, 40, },
++	{ 1, 1, 1, 3, 134, 40, },
++	{ 0, 1, 1, 3, 151, 46, },
++	{ 2, 1, 1, 3, 151, 40, },
++	{ 1, 1, 1, 3, 151, 63, },
++	{ 0, 1, 1, 3, 159, 46, },
++	{ 2, 1, 1, 3, 159, 40, },
++	{ 1, 1, 1, 3, 159, 63, },
++	{ 0, 1, 1, 6, 38, 46, },
++	{ 2, 1, 1, 6, 38, 40, },
++	{ 1, 1, 1, 6, 38, 40, },
++	{ 0, 1, 1, 6, 46, 46, },
++	{ 2, 1, 1, 6, 46, 40, },
++	{ 1, 1, 1, 6, 46, 40, },
++	{ 0, 1, 1, 6, 54, 46, },
++	{ 2, 1, 1, 6, 54, 40, },
++	{ 1, 1, 1, 6, 54, 40, },
++	{ 0, 1, 1, 6, 62, 46, },
++	{ 2, 1, 1, 6, 62, 40, },
++	{ 1, 1, 1, 6, 62, 40, },
++	{ 0, 1, 1, 6, 102, 46, },
++	{ 2, 1, 1, 6, 102, 40, },
++	{ 1, 1, 1, 6, 102, 40, },
++	{ 0, 1, 1, 6, 110, 46, },
++	{ 2, 1, 1, 6, 110, 40, },
++	{ 1, 1, 1, 6, 110, 40, },
++	{ 0, 1, 1, 6, 118, 46, },
++	{ 2, 1, 1, 6, 118, 40, },
++	{ 1, 1, 1, 6, 118, 40, },
++	{ 0, 1, 1, 6, 126, 46, },
++	{ 2, 1, 1, 6, 126, 40, },
++	{ 1, 1, 1, 6, 126, 40, },
++	{ 0, 1, 1, 6, 134, 46, },
++	{ 2, 1, 1, 6, 134, 40, },
++	{ 1, 1, 1, 6, 134, 40, },
++	{ 0, 1, 1, 6, 151, 46, },
++	{ 2, 1, 1, 6, 151, 40, },
++	{ 1, 1, 1, 6, 151, 63, },
++	{ 0, 1, 1, 6, 159, 46, },
++	{ 2, 1, 1, 6, 159, 40, },
++	{ 1, 1, 1, 6, 159, 63, },
++	{ 0, 1, 1, 7, 38, 46, },
++	{ 2, 1, 1, 7, 38, 40, },
++	{ 1, 1, 1, 7, 38, 40, },
++	{ 0, 1, 1, 7, 46, 46, },
++	{ 2, 1, 1, 7, 46, 40, },
++	{ 1, 1, 1, 7, 46, 40, },
++	{ 0, 1, 1, 7, 54, 46, },
++	{ 2, 1, 1, 7, 54, 40, },
++	{ 1, 1, 1, 7, 54, 40, },
++	{ 0, 1, 1, 7, 62, 46, },
++	{ 2, 1, 1, 7, 62, 40, },
++	{ 1, 1, 1, 7, 62, 40, },
++	{ 0, 1, 1, 7, 102, 46, },
++	{ 2, 1, 1, 7, 102, 40, },
++	{ 1, 1, 1, 7, 102, 40, },
++	{ 0, 1, 1, 7, 110, 46, },
++	{ 2, 1, 1, 7, 110, 40, },
++	{ 1, 1, 1, 7, 110, 40, },
++	{ 0, 1, 1, 7, 118, 46, },
++	{ 2, 1, 1, 7, 118, 40, },
++	{ 1, 1, 1, 7, 118, 40, },
++	{ 0, 1, 1, 7, 126, 46, },
++	{ 2, 1, 1, 7, 126, 40, },
++	{ 1, 1, 1, 7, 126, 40, },
++	{ 0, 1, 1, 7, 134, 46, },
++	{ 2, 1, 1, 7, 134, 40, },
++	{ 1, 1, 1, 7, 134, 40, },
++	{ 0, 1, 1, 7, 151, 46, },
++	{ 2, 1, 1, 7, 151, 40, },
++	{ 1, 1, 1, 7, 151, 63, },
++	{ 0, 1, 1, 7, 159, 46, },
++	{ 2, 1, 1, 7, 159, 40, },
++	{ 1, 1, 1, 7, 159, 63, },
++	{ 0, 1, 2, 4, 42, 46, },
++	{ 2, 1, 2, 4, 42, 40, },
++	{ 1, 1, 2, 4, 42, 40, },
++	{ 0, 1, 2, 4, 58, 46, },
++	{ 2, 1, 2, 4, 58, 40, },
++	{ 1, 1, 2, 4, 58, 40, },
++	{ 0, 1, 2, 4, 106, 46, },
++	{ 2, 1, 2, 4, 106, 40, },
++	{ 1, 1, 2, 4, 106, 40, },
++	{ 0, 1, 2, 4, 122, 46, },
++	{ 2, 1, 2, 4, 122, 40, },
++	{ 1, 1, 2, 4, 122, 40, },
++	{ 0, 1, 2, 4, 155, 46, },
++	{ 2, 1, 2, 4, 155, 40, },
++	{ 1, 1, 2, 4, 155, 63, },
++	{ 0, 1, 2, 5, 42, 46, },
++	{ 2, 1, 2, 5, 42, 40, },
++	{ 1, 1, 2, 5, 42, 40, },
++	{ 0, 1, 2, 5, 58, 46, },
++	{ 2, 1, 2, 5, 58, 40, },
++	{ 1, 1, 2, 5, 58, 40, },
++	{ 0, 1, 2, 5, 106, 46, },
++	{ 2, 1, 2, 5, 106, 40, },
++	{ 1, 1, 2, 5, 106, 40, },
++	{ 0, 1, 2, 5, 122, 46, },
++	{ 2, 1, 2, 5, 122, 40, },
++	{ 1, 1, 2, 5, 122, 40, },
++	{ 0, 1, 2, 5, 155, 46, },
++	{ 2, 1, 2, 5, 155, 40, },
++	{ 1, 1, 2, 5, 155, 63, },
++	{ 0, 1, 2, 8, 42, 46, },
++	{ 2, 1, 2, 8, 42, 40, },
++	{ 1, 1, 2, 8, 42, 40, },
++	{ 0, 1, 2, 8, 58, 46, },
++	{ 2, 1, 2, 8, 58, 40, },
++	{ 1, 1, 2, 8, 58, 40, },
++	{ 0, 1, 2, 8, 106, 46, },
++	{ 2, 1, 2, 8, 106, 40, },
++	{ 1, 1, 2, 8, 106, 40, },
++	{ 0, 1, 2, 8, 122, 46, },
++	{ 2, 1, 2, 8, 122, 40, },
++	{ 1, 1, 2, 8, 122, 40, },
++	{ 0, 1, 2, 8, 155, 46, },
++	{ 2, 1, 2, 8, 155, 40, },
++	{ 1, 1, 2, 8, 155, 63, },
++	{ 0, 1, 2, 9, 42, 46, },
++	{ 2, 1, 2, 9, 42, 40, },
++	{ 1, 1, 2, 9, 42, 40, },
++	{ 0, 1, 2, 9, 58, 46, },
++	{ 2, 1, 2, 9, 58, 40, },
++	{ 1, 1, 2, 9, 58, 40, },
++	{ 0, 1, 2, 9, 106, 46, },
++	{ 2, 1, 2, 9, 106, 40, },
++	{ 1, 1, 2, 9, 106, 40, },
++	{ 0, 1, 2, 9, 122, 46, },
++	{ 2, 1, 2, 9, 122, 40, },
++	{ 1, 1, 2, 9, 122, 40, },
++	{ 0, 1, 2, 9, 155, 46, },
++	{ 2, 1, 2, 9, 155, 40, },
++	{ 1, 1, 2, 9, 155, 63, },
++};
++
++RTW_DECL_TABLE_TXPWR_LMT(rtw8814a_txpwr_lmt_type5);
++
++static const struct rtw_txpwr_lmt_cfg_pair rtw8814a_txpwr_lmt_type7[] = {
++	{ 0, 0, 0, 0, 1, 44, },
++	{ 2, 0, 0, 0, 1, 32, },
++	{ 1, 0, 0, 0, 1, 32, },
++	{ 0, 0, 0, 0, 2, 52, },
++	{ 2, 0, 0, 0, 2, 32, },
++	{ 1, 0, 0, 0, 2, 32, },
++	{ 0, 0, 0, 0, 3, 52, },
++	{ 2, 0, 0, 0, 3, 32, },
++	{ 1, 0, 0, 0, 3, 32, },
++	{ 0, 0, 0, 0, 4, 52, },
++	{ 2, 0, 0, 0, 4, 32, },
++	{ 1, 0, 0, 0, 4, 32, },
++	{ 0, 0, 0, 0, 5, 52, },
++	{ 2, 0, 0, 0, 5, 32, },
++	{ 1, 0, 0, 0, 5, 32, },
++	{ 0, 0, 0, 0, 6, 52, },
++	{ 2, 0, 0, 0, 6, 32, },
++	{ 1, 0, 0, 0, 6, 32, },
++	{ 0, 0, 0, 0, 7, 52, },
++	{ 2, 0, 0, 0, 7, 32, },
++	{ 1, 0, 0, 0, 7, 32, },
++	{ 0, 0, 0, 0, 8, 52, },
++	{ 2, 0, 0, 0, 8, 32, },
++	{ 1, 0, 0, 0, 8, 32, },
++	{ 0, 0, 0, 0, 9, 52, },
++	{ 2, 0, 0, 0, 9, 32, },
++	{ 1, 0, 0, 0, 9, 32, },
++	{ 0, 0, 0, 0, 10, 52, },
++	{ 2, 0, 0, 0, 10, 32, },
++	{ 1, 0, 0, 0, 10, 32, },
++	{ 0, 0, 0, 0, 11, 44, },
++	{ 2, 0, 0, 0, 11, 32, },
++	{ 1, 0, 0, 0, 11, 32, },
++	{ 0, 0, 0, 0, 12, 63, },
++	{ 2, 0, 0, 0, 12, 32, },
++	{ 1, 0, 0, 0, 12, 32, },
++	{ 0, 0, 0, 0, 13, 63, },
++	{ 2, 0, 0, 0, 13, 32, },
++	{ 1, 0, 0, 0, 13, 32, },
++	{ 0, 0, 0, 0, 14, 63, },
++	{ 2, 0, 0, 0, 14, 63, },
++	{ 1, 0, 0, 0, 14, 32, },
++	{ 0, 0, 0, 1, 1, 38, },
++	{ 2, 0, 0, 1, 1, 32, },
++	{ 1, 0, 0, 1, 1, 32, },
++	{ 0, 0, 0, 1, 2, 46, },
++	{ 2, 0, 0, 1, 2, 32, },
++	{ 1, 0, 0, 1, 2, 32, },
++	{ 0, 0, 0, 1, 3, 46, },
++	{ 2, 0, 0, 1, 3, 32, },
++	{ 1, 0, 0, 1, 3, 32, },
++	{ 0, 0, 0, 1, 4, 46, },
++	{ 2, 0, 0, 1, 4, 32, },
++	{ 1, 0, 0, 1, 4, 32, },
++	{ 0, 0, 0, 1, 5, 46, },
++	{ 2, 0, 0, 1, 5, 32, },
++	{ 1, 0, 0, 1, 5, 32, },
++	{ 0, 0, 0, 1, 6, 46, },
++	{ 2, 0, 0, 1, 6, 32, },
++	{ 1, 0, 0, 1, 6, 32, },
++	{ 0, 0, 0, 1, 7, 46, },
++	{ 2, 0, 0, 1, 7, 32, },
++	{ 1, 0, 0, 1, 7, 32, },
++	{ 0, 0, 0, 1, 8, 46, },
++	{ 2, 0, 0, 1, 8, 32, },
++	{ 1, 0, 0, 1, 8, 32, },
++	{ 0, 0, 0, 1, 9, 46, },
++	{ 2, 0, 0, 1, 9, 32, },
++	{ 1, 0, 0, 1, 9, 32, },
++	{ 0, 0, 0, 1, 10, 46, },
++	{ 2, 0, 0, 1, 10, 32, },
++	{ 1, 0, 0, 1, 10, 32, },
++	{ 0, 0, 0, 1, 11, 38, },
++	{ 2, 0, 0, 1, 11, 32, },
++	{ 1, 0, 0, 1, 11, 32, },
++	{ 0, 0, 0, 1, 12, 63, },
++	{ 2, 0, 0, 1, 12, 32, },
++	{ 1, 0, 0, 1, 12, 32, },
++	{ 0, 0, 0, 1, 13, 63, },
++	{ 2, 0, 0, 1, 13, 32, },
++	{ 1, 0, 0, 1, 13, 32, },
++	{ 0, 0, 0, 1, 14, 63, },
++	{ 2, 0, 0, 1, 14, 63, },
++	{ 1, 0, 0, 1, 14, 63, },
++	{ 0, 0, 0, 2, 1, 34, },
++	{ 2, 0, 0, 2, 1, 32, },
++	{ 1, 0, 0, 2, 1, 32, },
++	{ 0, 0, 0, 2, 2, 46, },
++	{ 2, 0, 0, 2, 2, 32, },
++	{ 1, 0, 0, 2, 2, 32, },
++	{ 0, 0, 0, 2, 3, 46, },
++	{ 2, 0, 0, 2, 3, 32, },
++	{ 1, 0, 0, 2, 3, 32, },
++	{ 0, 0, 0, 2, 4, 46, },
++	{ 2, 0, 0, 2, 4, 32, },
++	{ 1, 0, 0, 2, 4, 32, },
++	{ 0, 0, 0, 2, 5, 46, },
++	{ 2, 0, 0, 2, 5, 32, },
++	{ 1, 0, 0, 2, 5, 32, },
++	{ 0, 0, 0, 2, 6, 46, },
++	{ 2, 0, 0, 2, 6, 32, },
++	{ 1, 0, 0, 2, 6, 32, },
++	{ 0, 0, 0, 2, 7, 46, },
++	{ 2, 0, 0, 2, 7, 32, },
++	{ 1, 0, 0, 2, 7, 32, },
++	{ 0, 0, 0, 2, 8, 46, },
++	{ 2, 0, 0, 2, 8, 32, },
++	{ 1, 0, 0, 2, 8, 32, },
++	{ 0, 0, 0, 2, 9, 46, },
++	{ 2, 0, 0, 2, 9, 32, },
++	{ 1, 0, 0, 2, 9, 32, },
++	{ 0, 0, 0, 2, 10, 46, },
++	{ 2, 0, 0, 2, 10, 32, },
++	{ 1, 0, 0, 2, 10, 32, },
++	{ 0, 0, 0, 2, 11, 34, },
++	{ 2, 0, 0, 2, 11, 32, },
++	{ 1, 0, 0, 2, 11, 32, },
++	{ 0, 0, 0, 2, 12, 63, },
++	{ 2, 0, 0, 2, 12, 32, },
++	{ 1, 0, 0, 2, 12, 32, },
++	{ 0, 0, 0, 2, 13, 63, },
++	{ 2, 0, 0, 2, 13, 32, },
++	{ 1, 0, 0, 2, 13, 32, },
++	{ 0, 0, 0, 2, 14, 63, },
++	{ 2, 0, 0, 2, 14, 63, },
++	{ 1, 0, 0, 2, 14, 63, },
++	{ 0, 0, 0, 3, 1, 32, },
++	{ 2, 0, 0, 3, 1, 30, },
++	{ 1, 0, 0, 3, 1, 30, },
++	{ 0, 0, 0, 3, 2, 44, },
++	{ 2, 0, 0, 3, 2, 30, },
++	{ 1, 0, 0, 3, 2, 30, },
++	{ 0, 0, 0, 3, 3, 44, },
++	{ 2, 0, 0, 3, 3, 30, },
++	{ 1, 0, 0, 3, 3, 30, },
++	{ 0, 0, 0, 3, 4, 44, },
++	{ 2, 0, 0, 3, 4, 30, },
++	{ 1, 0, 0, 3, 4, 30, },
++	{ 0, 0, 0, 3, 5, 44, },
++	{ 2, 0, 0, 3, 5, 30, },
++	{ 1, 0, 0, 3, 5, 30, },
++	{ 0, 0, 0, 3, 6, 44, },
++	{ 2, 0, 0, 3, 6, 30, },
++	{ 1, 0, 0, 3, 6, 30, },
++	{ 0, 0, 0, 3, 7, 44, },
++	{ 2, 0, 0, 3, 7, 30, },
++	{ 1, 0, 0, 3, 7, 30, },
++	{ 0, 0, 0, 3, 8, 44, },
++	{ 2, 0, 0, 3, 8, 30, },
++	{ 1, 0, 0, 3, 8, 30, },
++	{ 0, 0, 0, 3, 9, 44, },
++	{ 2, 0, 0, 3, 9, 30, },
++	{ 1, 0, 0, 3, 9, 30, },
++	{ 0, 0, 0, 3, 10, 44, },
++	{ 2, 0, 0, 3, 10, 30, },
++	{ 1, 0, 0, 3, 10, 30, },
++	{ 0, 0, 0, 3, 11, 32, },
++	{ 2, 0, 0, 3, 11, 30, },
++	{ 1, 0, 0, 3, 11, 30, },
++	{ 0, 0, 0, 3, 12, 63, },
++	{ 2, 0, 0, 3, 12, 30, },
++	{ 1, 0, 0, 3, 12, 30, },
++	{ 0, 0, 0, 3, 13, 63, },
++	{ 2, 0, 0, 3, 13, 30, },
++	{ 1, 0, 0, 3, 13, 30, },
++	{ 0, 0, 0, 3, 14, 63, },
++	{ 2, 0, 0, 3, 14, 63, },
++	{ 1, 0, 0, 3, 14, 63, },
++	{ 0, 0, 0, 6, 1, 30, },
++	{ 2, 0, 0, 6, 1, 28, },
++	{ 1, 0, 0, 6, 1, 28, },
++	{ 0, 0, 0, 6, 2, 42, },
++	{ 2, 0, 0, 6, 2, 28, },
++	{ 1, 0, 0, 6, 2, 28, },
++	{ 0, 0, 0, 6, 3, 42, },
++	{ 2, 0, 0, 6, 3, 28, },
++	{ 1, 0, 0, 6, 3, 28, },
++	{ 0, 0, 0, 6, 4, 42, },
++	{ 2, 0, 0, 6, 4, 28, },
++	{ 1, 0, 0, 6, 4, 28, },
++	{ 0, 0, 0, 6, 5, 42, },
++	{ 2, 0, 0, 6, 5, 28, },
++	{ 1, 0, 0, 6, 5, 28, },
++	{ 0, 0, 0, 6, 6, 42, },
++	{ 2, 0, 0, 6, 6, 28, },
++	{ 1, 0, 0, 6, 6, 28, },
++	{ 0, 0, 0, 6, 7, 42, },
++	{ 2, 0, 0, 6, 7, 28, },
++	{ 1, 0, 0, 6, 7, 28, },
++	{ 0, 0, 0, 6, 8, 42, },
++	{ 2, 0, 0, 6, 8, 28, },
++	{ 1, 0, 0, 6, 8, 28, },
++	{ 0, 0, 0, 6, 9, 42, },
++	{ 2, 0, 0, 6, 9, 28, },
++	{ 1, 0, 0, 6, 9, 28, },
++	{ 0, 0, 0, 6, 10, 42, },
++	{ 2, 0, 0, 6, 10, 28, },
++	{ 1, 0, 0, 6, 10, 28, },
++	{ 0, 0, 0, 6, 11, 30, },
++	{ 2, 0, 0, 6, 11, 28, },
++	{ 1, 0, 0, 6, 11, 28, },
++	{ 0, 0, 0, 6, 12, 63, },
++	{ 2, 0, 0, 6, 12, 28, },
++	{ 1, 0, 0, 6, 12, 28, },
++	{ 0, 0, 0, 6, 13, 63, },
++	{ 2, 0, 0, 6, 13, 28, },
++	{ 1, 0, 0, 6, 13, 28, },
++	{ 0, 0, 0, 6, 14, 63, },
++	{ 2, 0, 0, 6, 14, 63, },
++	{ 1, 0, 0, 6, 14, 63, },
++	{ 0, 0, 0, 7, 1, 28, },
++	{ 2, 0, 0, 7, 1, 26, },
++	{ 1, 0, 0, 7, 1, 26, },
++	{ 0, 0, 0, 7, 2, 40, },
++	{ 2, 0, 0, 7, 2, 26, },
++	{ 1, 0, 0, 7, 2, 26, },
++	{ 0, 0, 0, 7, 3, 40, },
++	{ 2, 0, 0, 7, 3, 26, },
++	{ 1, 0, 0, 7, 3, 26, },
++	{ 0, 0, 0, 7, 4, 40, },
++	{ 2, 0, 0, 7, 4, 26, },
++	{ 1, 0, 0, 7, 4, 26, },
++	{ 0, 0, 0, 7, 5, 40, },
++	{ 2, 0, 0, 7, 5, 26, },
++	{ 1, 0, 0, 7, 5, 26, },
++	{ 0, 0, 0, 7, 6, 40, },
++	{ 2, 0, 0, 7, 6, 26, },
++	{ 1, 0, 0, 7, 6, 26, },
++	{ 0, 0, 0, 7, 7, 40, },
++	{ 2, 0, 0, 7, 7, 26, },
++	{ 1, 0, 0, 7, 7, 26, },
++	{ 0, 0, 0, 7, 8, 40, },
++	{ 2, 0, 0, 7, 8, 26, },
++	{ 1, 0, 0, 7, 8, 26, },
++	{ 0, 0, 0, 7, 9, 40, },
++	{ 2, 0, 0, 7, 9, 26, },
++	{ 1, 0, 0, 7, 9, 26, },
++	{ 0, 0, 0, 7, 10, 40, },
++	{ 2, 0, 0, 7, 10, 26, },
++	{ 1, 0, 0, 7, 10, 26, },
++	{ 0, 0, 0, 7, 11, 28, },
++	{ 2, 0, 0, 7, 11, 26, },
++	{ 1, 0, 0, 7, 11, 26, },
++	{ 0, 0, 0, 7, 12, 63, },
++	{ 2, 0, 0, 7, 12, 26, },
++	{ 1, 0, 0, 7, 12, 26, },
++	{ 0, 0, 0, 7, 13, 63, },
++	{ 2, 0, 0, 7, 13, 26, },
++	{ 1, 0, 0, 7, 13, 26, },
++	{ 0, 0, 0, 7, 14, 63, },
++	{ 2, 0, 0, 7, 14, 63, },
++	{ 1, 0, 0, 7, 14, 63, },
++	{ 0, 0, 1, 2, 1, 63, },
++	{ 2, 0, 1, 2, 1, 63, },
++	{ 1, 0, 1, 2, 1, 63, },
++	{ 0, 0, 1, 2, 2, 63, },
++	{ 2, 0, 1, 2, 2, 63, },
++	{ 1, 0, 1, 2, 2, 63, },
++	{ 0, 0, 1, 2, 3, 36, },
++	{ 2, 0, 1, 2, 3, 32, },
++	{ 1, 0, 1, 2, 3, 32, },
++	{ 0, 0, 1, 2, 4, 40, },
++	{ 2, 0, 1, 2, 4, 32, },
++	{ 1, 0, 1, 2, 4, 32, },
++	{ 0, 0, 1, 2, 5, 40, },
++	{ 2, 0, 1, 2, 5, 32, },
++	{ 1, 0, 1, 2, 5, 32, },
++	{ 0, 0, 1, 2, 6, 40, },
++	{ 2, 0, 1, 2, 6, 32, },
++	{ 1, 0, 1, 2, 6, 32, },
++	{ 0, 0, 1, 2, 7, 40, },
++	{ 2, 0, 1, 2, 7, 32, },
++	{ 1, 0, 1, 2, 7, 32, },
++	{ 0, 0, 1, 2, 8, 40, },
++	{ 2, 0, 1, 2, 8, 32, },
++	{ 1, 0, 1, 2, 8, 32, },
++	{ 0, 0, 1, 2, 9, 40, },
++	{ 2, 0, 1, 2, 9, 32, },
++	{ 1, 0, 1, 2, 9, 32, },
++	{ 0, 0, 1, 2, 10, 40, },
++	{ 2, 0, 1, 2, 10, 32, },
++	{ 1, 0, 1, 2, 10, 32, },
++	{ 0, 0, 1, 2, 11, 34, },
++	{ 2, 0, 1, 2, 11, 32, },
++	{ 1, 0, 1, 2, 11, 32, },
++	{ 0, 0, 1, 2, 12, 63, },
++	{ 2, 0, 1, 2, 12, 32, },
++	{ 1, 0, 1, 2, 12, 32, },
++	{ 0, 0, 1, 2, 13, 63, },
++	{ 2, 0, 1, 2, 13, 32, },
++	{ 1, 0, 1, 2, 13, 32, },
++	{ 0, 0, 1, 2, 14, 63, },
++	{ 2, 0, 1, 2, 14, 63, },
++	{ 1, 0, 1, 2, 14, 63, },
++	{ 0, 0, 1, 3, 1, 63, },
++	{ 2, 0, 1, 3, 1, 63, },
++	{ 1, 0, 1, 3, 1, 63, },
++	{ 0, 0, 1, 3, 2, 63, },
++	{ 2, 0, 1, 3, 2, 63, },
++	{ 1, 0, 1, 3, 2, 63, },
++	{ 0, 0, 1, 3, 3, 34, },
++	{ 2, 0, 1, 3, 3, 30, },
++	{ 1, 0, 1, 3, 3, 30, },
++	{ 0, 0, 1, 3, 4, 38, },
++	{ 2, 0, 1, 3, 4, 30, },
++	{ 1, 0, 1, 3, 4, 30, },
++	{ 0, 0, 1, 3, 5, 38, },
++	{ 2, 0, 1, 3, 5, 30, },
++	{ 1, 0, 1, 3, 5, 30, },
++	{ 0, 0, 1, 3, 6, 38, },
++	{ 2, 0, 1, 3, 6, 30, },
++	{ 1, 0, 1, 3, 6, 30, },
++	{ 0, 0, 1, 3, 7, 38, },
++	{ 2, 0, 1, 3, 7, 30, },
++	{ 1, 0, 1, 3, 7, 30, },
++	{ 0, 0, 1, 3, 8, 38, },
++	{ 2, 0, 1, 3, 8, 30, },
++	{ 1, 0, 1, 3, 8, 30, },
++	{ 0, 0, 1, 3, 9, 38, },
++	{ 2, 0, 1, 3, 9, 30, },
++	{ 1, 0, 1, 3, 9, 30, },
++	{ 0, 0, 1, 3, 10, 38, },
++	{ 2, 0, 1, 3, 10, 30, },
++	{ 1, 0, 1, 3, 10, 30, },
++	{ 0, 0, 1, 3, 11, 32, },
++	{ 2, 0, 1, 3, 11, 30, },
++	{ 1, 0, 1, 3, 11, 30, },
++	{ 0, 0, 1, 3, 12, 63, },
++	{ 2, 0, 1, 3, 12, 30, },
++	{ 1, 0, 1, 3, 12, 30, },
++	{ 0, 0, 1, 3, 13, 63, },
++	{ 2, 0, 1, 3, 13, 30, },
++	{ 1, 0, 1, 3, 13, 30, },
++	{ 0, 0, 1, 3, 14, 63, },
++	{ 2, 0, 1, 3, 14, 63, },
++	{ 1, 0, 1, 3, 14, 63, },
++	{ 0, 0, 1, 6, 1, 63, },
++	{ 2, 0, 1, 6, 1, 63, },
++	{ 1, 0, 1, 6, 1, 63, },
++	{ 0, 0, 1, 6, 2, 63, },
++	{ 2, 0, 1, 6, 2, 63, },
++	{ 1, 0, 1, 6, 2, 63, },
++	{ 0, 0, 1, 6, 3, 32, },
++	{ 2, 0, 1, 6, 3, 28, },
++	{ 1, 0, 1, 6, 3, 28, },
++	{ 0, 0, 1, 6, 4, 36, },
++	{ 2, 0, 1, 6, 4, 28, },
++	{ 1, 0, 1, 6, 4, 28, },
++	{ 0, 0, 1, 6, 5, 36, },
++	{ 2, 0, 1, 6, 5, 28, },
++	{ 1, 0, 1, 6, 5, 28, },
++	{ 0, 0, 1, 6, 6, 36, },
++	{ 2, 0, 1, 6, 6, 28, },
++	{ 1, 0, 1, 6, 6, 28, },
++	{ 0, 0, 1, 6, 7, 36, },
++	{ 2, 0, 1, 6, 7, 28, },
++	{ 1, 0, 1, 6, 7, 28, },
++	{ 0, 0, 1, 6, 8, 36, },
++	{ 2, 0, 1, 6, 8, 28, },
++	{ 1, 0, 1, 6, 8, 28, },
++	{ 0, 0, 1, 6, 9, 36, },
++	{ 2, 0, 1, 6, 9, 28, },
++	{ 1, 0, 1, 6, 9, 28, },
++	{ 0, 0, 1, 6, 10, 36, },
++	{ 2, 0, 1, 6, 10, 28, },
++	{ 1, 0, 1, 6, 10, 28, },
++	{ 0, 0, 1, 6, 11, 30, },
++	{ 2, 0, 1, 6, 11, 28, },
++	{ 1, 0, 1, 6, 11, 28, },
++	{ 0, 0, 1, 6, 12, 63, },
++	{ 2, 0, 1, 6, 12, 28, },
++	{ 1, 0, 1, 6, 12, 28, },
++	{ 0, 0, 1, 6, 13, 63, },
++	{ 2, 0, 1, 6, 13, 28, },
++	{ 1, 0, 1, 6, 13, 28, },
++	{ 0, 0, 1, 6, 14, 63, },
++	{ 2, 0, 1, 6, 14, 63, },
++	{ 1, 0, 1, 6, 14, 63, },
++	{ 0, 0, 1, 7, 1, 63, },
++	{ 2, 0, 1, 7, 1, 63, },
++	{ 1, 0, 1, 7, 1, 63, },
++	{ 0, 0, 1, 7, 2, 63, },
++	{ 2, 0, 1, 7, 2, 63, },
++	{ 1, 0, 1, 7, 2, 63, },
++	{ 0, 0, 1, 7, 3, 32, },
++	{ 2, 0, 1, 7, 3, 26, },
++	{ 1, 0, 1, 7, 3, 26, },
++	{ 0, 0, 1, 7, 4, 36, },
++	{ 2, 0, 1, 7, 4, 26, },
++	{ 1, 0, 1, 7, 4, 26, },
++	{ 0, 0, 1, 7, 5, 36, },
++	{ 2, 0, 1, 7, 5, 26, },
++	{ 1, 0, 1, 7, 5, 26, },
++	{ 0, 0, 1, 7, 6, 36, },
++	{ 2, 0, 1, 7, 6, 26, },
++	{ 1, 0, 1, 7, 6, 26, },
++	{ 0, 0, 1, 7, 7, 36, },
++	{ 2, 0, 1, 7, 7, 26, },
++	{ 1, 0, 1, 7, 7, 26, },
++	{ 0, 0, 1, 7, 8, 36, },
++	{ 2, 0, 1, 7, 8, 26, },
++	{ 1, 0, 1, 7, 8, 26, },
++	{ 0, 0, 1, 7, 9, 36, },
++	{ 2, 0, 1, 7, 9, 26, },
++	{ 1, 0, 1, 7, 9, 26, },
++	{ 0, 0, 1, 7, 10, 36, },
++	{ 2, 0, 1, 7, 10, 26, },
++	{ 1, 0, 1, 7, 10, 26, },
++	{ 0, 0, 1, 7, 11, 30, },
++	{ 2, 0, 1, 7, 11, 26, },
++	{ 1, 0, 1, 7, 11, 26, },
++	{ 0, 0, 1, 7, 12, 63, },
++	{ 2, 0, 1, 7, 12, 26, },
++	{ 1, 0, 1, 7, 12, 26, },
++	{ 0, 0, 1, 7, 13, 63, },
++	{ 2, 0, 1, 7, 13, 26, },
++	{ 1, 0, 1, 7, 13, 26, },
++	{ 0, 0, 1, 7, 14, 63, },
++	{ 2, 0, 1, 7, 14, 63, },
++	{ 1, 0, 1, 7, 14, 63, },
++	{ 0, 1, 0, 1, 36, 38, },
++	{ 2, 1, 0, 1, 36, 32, },
++	{ 1, 1, 0, 1, 36, 32, },
++	{ 0, 1, 0, 1, 40, 38, },
++	{ 2, 1, 0, 1, 40, 32, },
++	{ 1, 1, 0, 1, 40, 32, },
++	{ 0, 1, 0, 1, 44, 38, },
++	{ 2, 1, 0, 1, 44, 32, },
++	{ 1, 1, 0, 1, 44, 32, },
++	{ 0, 1, 0, 1, 48, 38, },
++	{ 2, 1, 0, 1, 48, 32, },
++	{ 1, 1, 0, 1, 48, 32, },
++	{ 0, 1, 0, 1, 52, 38, },
++	{ 2, 1, 0, 1, 52, 32, },
++	{ 1, 1, 0, 1, 52, 32, },
++	{ 0, 1, 0, 1, 56, 38, },
++	{ 2, 1, 0, 1, 56, 32, },
++	{ 1, 1, 0, 1, 56, 32, },
++	{ 0, 1, 0, 1, 60, 38, },
++	{ 2, 1, 0, 1, 60, 32, },
++	{ 1, 1, 0, 1, 60, 32, },
++	{ 0, 1, 0, 1, 64, 38, },
++	{ 2, 1, 0, 1, 64, 32, },
++	{ 1, 1, 0, 1, 64, 32, },
++	{ 0, 1, 0, 1, 100, 36, },
++	{ 2, 1, 0, 1, 100, 32, },
++	{ 1, 1, 0, 1, 100, 32, },
++	{ 0, 1, 0, 1, 104, 36, },
++	{ 2, 1, 0, 1, 104, 32, },
++	{ 1, 1, 0, 1, 104, 32, },
++	{ 0, 1, 0, 1, 108, 36, },
++	{ 2, 1, 0, 1, 108, 32, },
++	{ 1, 1, 0, 1, 108, 32, },
++	{ 0, 1, 0, 1, 112, 36, },
++	{ 2, 1, 0, 1, 112, 32, },
++	{ 1, 1, 0, 1, 112, 32, },
++	{ 0, 1, 0, 1, 116, 36, },
++	{ 2, 1, 0, 1, 116, 32, },
++	{ 1, 1, 0, 1, 116, 32, },
++	{ 0, 1, 0, 1, 120, 36, },
++	{ 2, 1, 0, 1, 120, 32, },
++	{ 1, 1, 0, 1, 120, 32, },
++	{ 0, 1, 0, 1, 124, 36, },
++	{ 2, 1, 0, 1, 124, 32, },
++	{ 1, 1, 0, 1, 124, 32, },
++	{ 0, 1, 0, 1, 128, 36, },
++	{ 2, 1, 0, 1, 128, 32, },
++	{ 1, 1, 0, 1, 128, 32, },
++	{ 0, 1, 0, 1, 132, 36, },
++	{ 2, 1, 0, 1, 132, 32, },
++	{ 1, 1, 0, 1, 132, 32, },
++	{ 0, 1, 0, 1, 136, 36, },
++	{ 2, 1, 0, 1, 136, 32, },
++	{ 1, 1, 0, 1, 136, 32, },
++	{ 0, 1, 0, 1, 140, 36, },
++	{ 2, 1, 0, 1, 140, 32, },
++	{ 1, 1, 0, 1, 140, 32, },
++	{ 0, 1, 0, 1, 149, 36, },
++	{ 2, 1, 0, 1, 149, 32, },
++	{ 1, 1, 0, 1, 149, 63, },
++	{ 0, 1, 0, 1, 153, 36, },
++	{ 2, 1, 0, 1, 153, 32, },
++	{ 1, 1, 0, 1, 153, 63, },
++	{ 0, 1, 0, 1, 157, 36, },
++	{ 2, 1, 0, 1, 157, 32, },
++	{ 1, 1, 0, 1, 157, 63, },
++	{ 0, 1, 0, 1, 161, 36, },
++	{ 2, 1, 0, 1, 161, 32, },
++	{ 1, 1, 0, 1, 161, 63, },
++	{ 0, 1, 0, 1, 165, 36, },
++	{ 2, 1, 0, 1, 165, 32, },
++	{ 1, 1, 0, 1, 165, 63, },
++	{ 0, 1, 0, 2, 36, 36, },
++	{ 2, 1, 0, 2, 36, 32, },
++	{ 1, 1, 0, 2, 36, 32, },
++	{ 0, 1, 0, 2, 40, 36, },
++	{ 2, 1, 0, 2, 40, 32, },
++	{ 1, 1, 0, 2, 40, 32, },
++	{ 0, 1, 0, 2, 44, 36, },
++	{ 2, 1, 0, 2, 44, 32, },
++	{ 1, 1, 0, 2, 44, 32, },
++	{ 0, 1, 0, 2, 48, 36, },
++	{ 2, 1, 0, 2, 48, 32, },
++	{ 1, 1, 0, 2, 48, 32, },
++	{ 0, 1, 0, 2, 52, 36, },
++	{ 2, 1, 0, 2, 52, 32, },
++	{ 1, 1, 0, 2, 52, 32, },
++	{ 0, 1, 0, 2, 56, 36, },
++	{ 2, 1, 0, 2, 56, 32, },
++	{ 1, 1, 0, 2, 56, 32, },
++	{ 0, 1, 0, 2, 60, 36, },
++	{ 2, 1, 0, 2, 60, 32, },
++	{ 1, 1, 0, 2, 60, 32, },
++	{ 0, 1, 0, 2, 64, 36, },
++	{ 2, 1, 0, 2, 64, 32, },
++	{ 1, 1, 0, 2, 64, 32, },
++	{ 0, 1, 0, 2, 100, 36, },
++	{ 2, 1, 0, 2, 100, 32, },
++	{ 1, 1, 0, 2, 100, 32, },
++	{ 0, 1, 0, 2, 104, 36, },
++	{ 2, 1, 0, 2, 104, 32, },
++	{ 1, 1, 0, 2, 104, 32, },
++	{ 0, 1, 0, 2, 108, 36, },
++	{ 2, 1, 0, 2, 108, 32, },
++	{ 1, 1, 0, 2, 108, 32, },
++	{ 0, 1, 0, 2, 112, 36, },
++	{ 2, 1, 0, 2, 112, 32, },
++	{ 1, 1, 0, 2, 112, 32, },
++	{ 0, 1, 0, 2, 116, 36, },
++	{ 2, 1, 0, 2, 116, 32, },
++	{ 1, 1, 0, 2, 116, 32, },
++	{ 0, 1, 0, 2, 120, 36, },
++	{ 2, 1, 0, 2, 120, 32, },
++	{ 1, 1, 0, 2, 120, 32, },
++	{ 0, 1, 0, 2, 124, 36, },
++	{ 2, 1, 0, 2, 124, 32, },
++	{ 1, 1, 0, 2, 124, 32, },
++	{ 0, 1, 0, 2, 128, 36, },
++	{ 2, 1, 0, 2, 128, 32, },
++	{ 1, 1, 0, 2, 128, 32, },
++	{ 0, 1, 0, 2, 132, 36, },
++	{ 2, 1, 0, 2, 132, 32, },
++	{ 1, 1, 0, 2, 132, 32, },
++	{ 0, 1, 0, 2, 136, 36, },
++	{ 2, 1, 0, 2, 136, 32, },
++	{ 1, 1, 0, 2, 136, 32, },
++	{ 0, 1, 0, 2, 140, 34, },
++	{ 2, 1, 0, 2, 140, 32, },
++	{ 1, 1, 0, 2, 140, 32, },
++	{ 0, 1, 0, 2, 149, 32, },
++	{ 2, 1, 0, 2, 149, 32, },
++	{ 1, 1, 0, 2, 149, 63, },
++	{ 0, 1, 0, 2, 153, 38, },
++	{ 2, 1, 0, 2, 153, 32, },
++	{ 1, 1, 0, 2, 153, 63, },
++	{ 0, 1, 0, 2, 157, 38, },
++	{ 2, 1, 0, 2, 157, 32, },
++	{ 1, 1, 0, 2, 157, 63, },
++	{ 0, 1, 0, 2, 161, 38, },
++	{ 2, 1, 0, 2, 161, 32, },
++	{ 1, 1, 0, 2, 161, 63, },
++	{ 0, 1, 0, 2, 165, 38, },
++	{ 2, 1, 0, 2, 165, 32, },
++	{ 1, 1, 0, 2, 165, 63, },
++	{ 0, 1, 0, 3, 36, 34, },
++	{ 2, 1, 0, 3, 36, 30, },
++	{ 1, 1, 0, 3, 36, 30, },
++	{ 0, 1, 0, 3, 40, 34, },
++	{ 2, 1, 0, 3, 40, 30, },
++	{ 1, 1, 0, 3, 40, 30, },
++	{ 0, 1, 0, 3, 44, 34, },
++	{ 2, 1, 0, 3, 44, 30, },
++	{ 1, 1, 0, 3, 44, 30, },
++	{ 0, 1, 0, 3, 48, 34, },
++	{ 2, 1, 0, 3, 48, 30, },
++	{ 1, 1, 0, 3, 48, 30, },
++	{ 0, 1, 0, 3, 52, 34, },
++	{ 2, 1, 0, 3, 52, 30, },
++	{ 1, 1, 0, 3, 52, 30, },
++	{ 0, 1, 0, 3, 56, 34, },
++	{ 2, 1, 0, 3, 56, 30, },
++	{ 1, 1, 0, 3, 56, 30, },
++	{ 0, 1, 0, 3, 60, 34, },
++	{ 2, 1, 0, 3, 60, 30, },
++	{ 1, 1, 0, 3, 60, 30, },
++	{ 0, 1, 0, 3, 64, 34, },
++	{ 2, 1, 0, 3, 64, 30, },
++	{ 1, 1, 0, 3, 64, 30, },
++	{ 0, 1, 0, 3, 100, 34, },
++	{ 2, 1, 0, 3, 100, 30, },
++	{ 1, 1, 0, 3, 100, 30, },
++	{ 0, 1, 0, 3, 104, 34, },
++	{ 2, 1, 0, 3, 104, 30, },
++	{ 1, 1, 0, 3, 104, 30, },
++	{ 0, 1, 0, 3, 108, 34, },
++	{ 2, 1, 0, 3, 108, 30, },
++	{ 1, 1, 0, 3, 108, 30, },
++	{ 0, 1, 0, 3, 112, 34, },
++	{ 2, 1, 0, 3, 112, 30, },
++	{ 1, 1, 0, 3, 112, 30, },
++	{ 0, 1, 0, 3, 116, 34, },
++	{ 2, 1, 0, 3, 116, 30, },
++	{ 1, 1, 0, 3, 116, 30, },
++	{ 0, 1, 0, 3, 120, 34, },
++	{ 2, 1, 0, 3, 120, 30, },
++	{ 1, 1, 0, 3, 120, 30, },
++	{ 0, 1, 0, 3, 124, 34, },
++	{ 2, 1, 0, 3, 124, 30, },
++	{ 1, 1, 0, 3, 124, 30, },
++	{ 0, 1, 0, 3, 128, 34, },
++	{ 2, 1, 0, 3, 128, 30, },
++	{ 1, 1, 0, 3, 128, 30, },
++	{ 0, 1, 0, 3, 132, 34, },
++	{ 2, 1, 0, 3, 132, 30, },
++	{ 1, 1, 0, 3, 132, 30, },
++	{ 0, 1, 0, 3, 136, 34, },
++	{ 2, 1, 0, 3, 136, 30, },
++	{ 1, 1, 0, 3, 136, 30, },
++	{ 0, 1, 0, 3, 140, 32, },
++	{ 2, 1, 0, 3, 140, 30, },
++	{ 1, 1, 0, 3, 140, 30, },
++	{ 0, 1, 0, 3, 149, 30, },
++	{ 2, 1, 0, 3, 149, 30, },
++	{ 1, 1, 0, 3, 149, 63, },
++	{ 0, 1, 0, 3, 153, 36, },
++	{ 2, 1, 0, 3, 153, 30, },
++	{ 1, 1, 0, 3, 153, 63, },
++	{ 0, 1, 0, 3, 157, 36, },
++	{ 2, 1, 0, 3, 157, 30, },
++	{ 1, 1, 0, 3, 157, 63, },
++	{ 0, 1, 0, 3, 161, 36, },
++	{ 2, 1, 0, 3, 161, 30, },
++	{ 1, 1, 0, 3, 161, 63, },
++	{ 0, 1, 0, 3, 165, 36, },
++	{ 2, 1, 0, 3, 165, 30, },
++	{ 1, 1, 0, 3, 165, 63, },
++	{ 0, 1, 0, 6, 36, 32, },
++	{ 2, 1, 0, 6, 36, 28, },
++	{ 1, 1, 0, 6, 36, 28, },
++	{ 0, 1, 0, 6, 40, 32, },
++	{ 2, 1, 0, 6, 40, 28, },
++	{ 1, 1, 0, 6, 40, 28, },
++	{ 0, 1, 0, 6, 44, 32, },
++	{ 2, 1, 0, 6, 44, 28, },
++	{ 1, 1, 0, 6, 44, 28, },
++	{ 0, 1, 0, 6, 48, 32, },
++	{ 2, 1, 0, 6, 48, 28, },
++	{ 1, 1, 0, 6, 48, 28, },
++	{ 0, 1, 0, 6, 52, 32, },
++	{ 2, 1, 0, 6, 52, 28, },
++	{ 1, 1, 0, 6, 52, 28, },
++	{ 0, 1, 0, 6, 56, 32, },
++	{ 2, 1, 0, 6, 56, 28, },
++	{ 1, 1, 0, 6, 56, 28, },
++	{ 0, 1, 0, 6, 60, 32, },
++	{ 2, 1, 0, 6, 60, 28, },
++	{ 1, 1, 0, 6, 60, 28, },
++	{ 0, 1, 0, 6, 64, 32, },
++	{ 2, 1, 0, 6, 64, 28, },
++	{ 1, 1, 0, 6, 64, 28, },
++	{ 0, 1, 0, 6, 100, 32, },
++	{ 2, 1, 0, 6, 100, 28, },
++	{ 1, 1, 0, 6, 100, 28, },
++	{ 0, 1, 0, 6, 104, 32, },
++	{ 2, 1, 0, 6, 104, 28, },
++	{ 1, 1, 0, 6, 104, 28, },
++	{ 0, 1, 0, 6, 108, 32, },
++	{ 2, 1, 0, 6, 108, 28, },
++	{ 1, 1, 0, 6, 108, 28, },
++	{ 0, 1, 0, 6, 112, 32, },
++	{ 2, 1, 0, 6, 112, 28, },
++	{ 1, 1, 0, 6, 112, 28, },
++	{ 0, 1, 0, 6, 116, 32, },
++	{ 2, 1, 0, 6, 116, 28, },
++	{ 1, 1, 0, 6, 116, 28, },
++	{ 0, 1, 0, 6, 120, 32, },
++	{ 2, 1, 0, 6, 120, 28, },
++	{ 1, 1, 0, 6, 120, 28, },
++	{ 0, 1, 0, 6, 124, 32, },
++	{ 2, 1, 0, 6, 124, 28, },
++	{ 1, 1, 0, 6, 124, 28, },
++	{ 0, 1, 0, 6, 128, 32, },
++	{ 2, 1, 0, 6, 128, 28, },
++	{ 1, 1, 0, 6, 128, 28, },
++	{ 0, 1, 0, 6, 132, 32, },
++	{ 2, 1, 0, 6, 132, 28, },
++	{ 1, 1, 0, 6, 132, 28, },
++	{ 0, 1, 0, 6, 136, 32, },
++	{ 2, 1, 0, 6, 136, 28, },
++	{ 1, 1, 0, 6, 136, 28, },
++	{ 0, 1, 0, 6, 140, 30, },
++	{ 2, 1, 0, 6, 140, 28, },
++	{ 1, 1, 0, 6, 140, 28, },
++	{ 0, 1, 0, 6, 149, 28, },
++	{ 2, 1, 0, 6, 149, 28, },
++	{ 1, 1, 0, 6, 149, 63, },
++	{ 0, 1, 0, 6, 153, 34, },
++	{ 2, 1, 0, 6, 153, 28, },
++	{ 1, 1, 0, 6, 153, 63, },
++	{ 0, 1, 0, 6, 157, 34, },
++	{ 2, 1, 0, 6, 157, 28, },
++	{ 1, 1, 0, 6, 157, 63, },
++	{ 0, 1, 0, 6, 161, 34, },
++	{ 2, 1, 0, 6, 161, 28, },
++	{ 1, 1, 0, 6, 161, 63, },
++	{ 0, 1, 0, 6, 165, 34, },
++	{ 2, 1, 0, 6, 165, 28, },
++	{ 1, 1, 0, 6, 165, 63, },
++	{ 0, 1, 0, 7, 36, 30, },
++	{ 2, 1, 0, 7, 36, 26, },
++	{ 1, 1, 0, 7, 36, 26, },
++	{ 0, 1, 0, 7, 40, 30, },
++	{ 2, 1, 0, 7, 40, 26, },
++	{ 1, 1, 0, 7, 40, 26, },
++	{ 0, 1, 0, 7, 44, 30, },
++	{ 2, 1, 0, 7, 44, 26, },
++	{ 1, 1, 0, 7, 44, 26, },
++	{ 0, 1, 0, 7, 48, 30, },
++	{ 2, 1, 0, 7, 48, 26, },
++	{ 1, 1, 0, 7, 48, 26, },
++	{ 0, 1, 0, 7, 52, 30, },
++	{ 2, 1, 0, 7, 52, 26, },
++	{ 1, 1, 0, 7, 52, 26, },
++	{ 0, 1, 0, 7, 56, 30, },
++	{ 2, 1, 0, 7, 56, 26, },
++	{ 1, 1, 0, 7, 56, 26, },
++	{ 0, 1, 0, 7, 60, 30, },
++	{ 2, 1, 0, 7, 60, 26, },
++	{ 1, 1, 0, 7, 60, 26, },
++	{ 0, 1, 0, 7, 64, 30, },
++	{ 2, 1, 0, 7, 64, 26, },
++	{ 1, 1, 0, 7, 64, 26, },
++	{ 0, 1, 0, 7, 100, 30, },
++	{ 2, 1, 0, 7, 100, 26, },
++	{ 1, 1, 0, 7, 100, 26, },
++	{ 0, 1, 0, 7, 104, 30, },
++	{ 2, 1, 0, 7, 104, 26, },
++	{ 1, 1, 0, 7, 104, 26, },
++	{ 0, 1, 0, 7, 108, 30, },
++	{ 2, 1, 0, 7, 108, 26, },
++	{ 1, 1, 0, 7, 108, 26, },
++	{ 0, 1, 0, 7, 112, 30, },
++	{ 2, 1, 0, 7, 112, 26, },
++	{ 1, 1, 0, 7, 112, 26, },
++	{ 0, 1, 0, 7, 116, 30, },
++	{ 2, 1, 0, 7, 116, 26, },
++	{ 1, 1, 0, 7, 116, 26, },
++	{ 0, 1, 0, 7, 120, 30, },
++	{ 2, 1, 0, 7, 120, 26, },
++	{ 1, 1, 0, 7, 120, 26, },
++	{ 0, 1, 0, 7, 124, 30, },
++	{ 2, 1, 0, 7, 124, 26, },
++	{ 1, 1, 0, 7, 124, 26, },
++	{ 0, 1, 0, 7, 128, 30, },
++	{ 2, 1, 0, 7, 128, 26, },
++	{ 1, 1, 0, 7, 128, 26, },
++	{ 0, 1, 0, 7, 132, 30, },
++	{ 2, 1, 0, 7, 132, 26, },
++	{ 1, 1, 0, 7, 132, 26, },
++	{ 0, 1, 0, 7, 136, 30, },
++	{ 2, 1, 0, 7, 136, 26, },
++	{ 1, 1, 0, 7, 136, 26, },
++	{ 0, 1, 0, 7, 140, 28, },
++	{ 2, 1, 0, 7, 140, 26, },
++	{ 1, 1, 0, 7, 140, 26, },
++	{ 0, 1, 0, 7, 149, 26, },
++	{ 2, 1, 0, 7, 149, 26, },
++	{ 1, 1, 0, 7, 149, 63, },
++	{ 0, 1, 0, 7, 153, 32, },
++	{ 2, 1, 0, 7, 153, 26, },
++	{ 1, 1, 0, 7, 153, 63, },
++	{ 0, 1, 0, 7, 157, 32, },
++	{ 2, 1, 0, 7, 157, 26, },
++	{ 1, 1, 0, 7, 157, 63, },
++	{ 0, 1, 0, 7, 161, 32, },
++	{ 2, 1, 0, 7, 161, 26, },
++	{ 1, 1, 0, 7, 161, 63, },
++	{ 0, 1, 0, 7, 165, 32, },
++	{ 2, 1, 0, 7, 165, 26, },
++	{ 1, 1, 0, 7, 165, 63, },
++	{ 0, 1, 1, 2, 38, 32, },
++	{ 2, 1, 1, 2, 38, 32, },
++	{ 1, 1, 1, 2, 38, 32, },
++	{ 0, 1, 1, 2, 46, 32, },
++	{ 2, 1, 1, 2, 46, 32, },
++	{ 1, 1, 1, 2, 46, 32, },
++	{ 0, 1, 1, 2, 54, 32, },
++	{ 2, 1, 1, 2, 54, 32, },
++	{ 1, 1, 1, 2, 54, 32, },
++	{ 0, 1, 1, 2, 62, 30, },
++	{ 2, 1, 1, 2, 62, 32, },
++	{ 1, 1, 1, 2, 62, 32, },
++	{ 0, 1, 1, 2, 102, 30, },
++	{ 2, 1, 1, 2, 102, 32, },
++	{ 1, 1, 1, 2, 102, 32, },
++	{ 0, 1, 1, 2, 110, 38, },
++	{ 2, 1, 1, 2, 110, 32, },
++	{ 1, 1, 1, 2, 110, 32, },
++	{ 0, 1, 1, 2, 118, 38, },
++	{ 2, 1, 1, 2, 118, 32, },
++	{ 1, 1, 1, 2, 118, 32, },
++	{ 0, 1, 1, 2, 126, 38, },
++	{ 2, 1, 1, 2, 126, 32, },
++	{ 1, 1, 1, 2, 126, 32, },
++	{ 0, 1, 1, 2, 134, 38, },
++	{ 2, 1, 1, 2, 134, 32, },
++	{ 1, 1, 1, 2, 134, 32, },
++	{ 0, 1, 1, 2, 151, 32, },
++	{ 2, 1, 1, 2, 151, 32, },
++	{ 1, 1, 1, 2, 151, 63, },
++	{ 0, 1, 1, 2, 159, 32, },
++	{ 2, 1, 1, 2, 159, 32, },
++	{ 1, 1, 1, 2, 159, 63, },
++	{ 0, 1, 1, 3, 38, 30, },
++	{ 2, 1, 1, 3, 38, 30, },
++	{ 1, 1, 1, 3, 38, 30, },
++	{ 0, 1, 1, 3, 46, 30, },
++	{ 2, 1, 1, 3, 46, 30, },
++	{ 1, 1, 1, 3, 46, 30, },
++	{ 0, 1, 1, 3, 54, 30, },
++	{ 2, 1, 1, 3, 54, 30, },
++	{ 1, 1, 1, 3, 54, 30, },
++	{ 0, 1, 1, 3, 62, 28, },
++	{ 2, 1, 1, 3, 62, 30, },
++	{ 1, 1, 1, 3, 62, 30, },
++	{ 0, 1, 1, 3, 102, 28, },
++	{ 2, 1, 1, 3, 102, 30, },
++	{ 1, 1, 1, 3, 102, 30, },
++	{ 0, 1, 1, 3, 110, 36, },
++	{ 2, 1, 1, 3, 110, 30, },
++	{ 1, 1, 1, 3, 110, 30, },
++	{ 0, 1, 1, 3, 118, 36, },
++	{ 2, 1, 1, 3, 118, 30, },
++	{ 1, 1, 1, 3, 118, 30, },
++	{ 0, 1, 1, 3, 126, 36, },
++	{ 2, 1, 1, 3, 126, 30, },
++	{ 1, 1, 1, 3, 126, 30, },
++	{ 0, 1, 1, 3, 134, 36, },
++	{ 2, 1, 1, 3, 134, 30, },
++	{ 1, 1, 1, 3, 134, 30, },
++	{ 0, 1, 1, 3, 151, 30, },
++	{ 2, 1, 1, 3, 151, 30, },
++	{ 1, 1, 1, 3, 151, 63, },
++	{ 0, 1, 1, 3, 159, 30, },
++	{ 2, 1, 1, 3, 159, 30, },
++	{ 1, 1, 1, 3, 159, 63, },
++	{ 0, 1, 1, 6, 38, 28, },
++	{ 2, 1, 1, 6, 38, 28, },
++	{ 1, 1, 1, 6, 38, 28, },
++	{ 0, 1, 1, 6, 46, 28, },
++	{ 2, 1, 1, 6, 46, 28, },
++	{ 1, 1, 1, 6, 46, 28, },
++	{ 0, 1, 1, 6, 54, 28, },
++	{ 2, 1, 1, 6, 54, 28, },
++	{ 1, 1, 1, 6, 54, 28, },
++	{ 0, 1, 1, 6, 62, 26, },
++	{ 2, 1, 1, 6, 62, 28, },
++	{ 1, 1, 1, 6, 62, 28, },
++	{ 0, 1, 1, 6, 102, 26, },
++	{ 2, 1, 1, 6, 102, 28, },
++	{ 1, 1, 1, 6, 102, 28, },
++	{ 0, 1, 1, 6, 110, 34, },
++	{ 2, 1, 1, 6, 110, 28, },
++	{ 1, 1, 1, 6, 110, 28, },
++	{ 0, 1, 1, 6, 118, 34, },
++	{ 2, 1, 1, 6, 118, 28, },
++	{ 1, 1, 1, 6, 118, 28, },
++	{ 0, 1, 1, 6, 126, 34, },
++	{ 2, 1, 1, 6, 126, 28, },
++	{ 1, 1, 1, 6, 126, 28, },
++	{ 0, 1, 1, 6, 134, 34, },
++	{ 2, 1, 1, 6, 134, 28, },
++	{ 1, 1, 1, 6, 134, 28, },
++	{ 0, 1, 1, 6, 151, 28, },
++	{ 2, 1, 1, 6, 151, 28, },
++	{ 1, 1, 1, 6, 151, 63, },
++	{ 0, 1, 1, 6, 159, 28, },
++	{ 2, 1, 1, 6, 159, 28, },
++	{ 1, 1, 1, 6, 159, 63, },
++	{ 0, 1, 1, 7, 38, 26, },
++	{ 2, 1, 1, 7, 38, 26, },
++	{ 1, 1, 1, 7, 38, 26, },
++	{ 0, 1, 1, 7, 46, 26, },
++	{ 2, 1, 1, 7, 46, 26, },
++	{ 1, 1, 1, 7, 46, 26, },
++	{ 0, 1, 1, 7, 54, 26, },
++	{ 2, 1, 1, 7, 54, 26, },
++	{ 1, 1, 1, 7, 54, 26, },
++	{ 0, 1, 1, 7, 62, 24, },
++	{ 2, 1, 1, 7, 62, 26, },
++	{ 1, 1, 1, 7, 62, 26, },
++	{ 0, 1, 1, 7, 102, 24, },
++	{ 2, 1, 1, 7, 102, 26, },
++	{ 1, 1, 1, 7, 102, 26, },
++	{ 0, 1, 1, 7, 110, 32, },
++	{ 2, 1, 1, 7, 110, 26, },
++	{ 1, 1, 1, 7, 110, 26, },
++	{ 0, 1, 1, 7, 118, 32, },
++	{ 2, 1, 1, 7, 118, 26, },
++	{ 1, 1, 1, 7, 118, 26, },
++	{ 0, 1, 1, 7, 126, 32, },
++	{ 2, 1, 1, 7, 126, 26, },
++	{ 1, 1, 1, 7, 126, 26, },
++	{ 0, 1, 1, 7, 134, 32, },
++	{ 2, 1, 1, 7, 134, 26, },
++	{ 1, 1, 1, 7, 134, 26, },
++	{ 0, 1, 1, 7, 151, 26, },
++	{ 2, 1, 1, 7, 151, 26, },
++	{ 1, 1, 1, 7, 151, 63, },
++	{ 0, 1, 1, 7, 159, 26, },
++	{ 2, 1, 1, 7, 159, 26, },
++	{ 1, 1, 1, 7, 159, 63, },
++	{ 0, 1, 2, 4, 42, 26, },
++	{ 2, 1, 2, 4, 42, 32, },
++	{ 1, 1, 2, 4, 42, 32, },
++	{ 0, 1, 2, 4, 58, 26, },
++	{ 2, 1, 2, 4, 58, 32, },
++	{ 1, 1, 2, 4, 58, 32, },
++	{ 0, 1, 2, 4, 106, 28, },
++	{ 2, 1, 2, 4, 106, 32, },
++	{ 1, 1, 2, 4, 106, 32, },
++	{ 0, 1, 2, 4, 122, 28, },
++	{ 2, 1, 2, 4, 122, 32, },
++	{ 1, 1, 2, 4, 122, 32, },
++	{ 0, 1, 2, 4, 155, 28, },
++	{ 2, 1, 2, 4, 155, 32, },
++	{ 1, 1, 2, 4, 155, 63, },
++	{ 0, 1, 2, 5, 42, 24, },
++	{ 2, 1, 2, 5, 42, 30, },
++	{ 1, 1, 2, 5, 42, 30, },
++	{ 0, 1, 2, 5, 58, 24, },
++	{ 2, 1, 2, 5, 58, 30, },
++	{ 1, 1, 2, 5, 58, 30, },
++	{ 0, 1, 2, 5, 106, 26, },
++	{ 2, 1, 2, 5, 106, 30, },
++	{ 1, 1, 2, 5, 106, 30, },
++	{ 0, 1, 2, 5, 122, 26, },
++	{ 2, 1, 2, 5, 122, 30, },
++	{ 1, 1, 2, 5, 122, 30, },
++	{ 0, 1, 2, 5, 155, 26, },
++	{ 2, 1, 2, 5, 155, 30, },
++	{ 1, 1, 2, 5, 155, 63, },
++	{ 0, 1, 2, 8, 42, 22, },
++	{ 2, 1, 2, 8, 42, 28, },
++	{ 1, 1, 2, 8, 42, 28, },
++	{ 0, 1, 2, 8, 58, 22, },
++	{ 2, 1, 2, 8, 58, 28, },
++	{ 1, 1, 2, 8, 58, 28, },
++	{ 0, 1, 2, 8, 106, 24, },
++	{ 2, 1, 2, 8, 106, 28, },
++	{ 1, 1, 2, 8, 106, 28, },
++	{ 0, 1, 2, 8, 122, 24, },
++	{ 2, 1, 2, 8, 122, 28, },
++	{ 1, 1, 2, 8, 122, 28, },
++	{ 0, 1, 2, 8, 155, 24, },
++	{ 2, 1, 2, 8, 155, 28, },
++	{ 1, 1, 2, 8, 155, 63, },
++	{ 0, 1, 2, 9, 42, 20, },
++	{ 2, 1, 2, 9, 42, 26, },
++	{ 1, 1, 2, 9, 42, 26, },
++	{ 0, 1, 2, 9, 58, 20, },
++	{ 2, 1, 2, 9, 58, 26, },
++	{ 1, 1, 2, 9, 58, 26, },
++	{ 0, 1, 2, 9, 106, 22, },
++	{ 2, 1, 2, 9, 106, 26, },
++	{ 1, 1, 2, 9, 106, 26, },
++	{ 0, 1, 2, 9, 122, 22, },
++	{ 2, 1, 2, 9, 122, 26, },
++	{ 1, 1, 2, 9, 122, 26, },
++	{ 0, 1, 2, 9, 155, 22, },
++	{ 2, 1, 2, 9, 155, 26, },
++	{ 1, 1, 2, 9, 155, 63, },
++};
++
++RTW_DECL_TABLE_TXPWR_LMT(rtw8814a_txpwr_lmt_type7);
++
++static const struct rtw_txpwr_lmt_cfg_pair rtw8814a_txpwr_lmt_type8[] = {
++	{ 0, 0, 0, 0, 1, 46, },
++	{ 2, 0, 0, 0, 1, 46, },
++	{ 1, 0, 0, 0, 1, 46, },
++	{ 0, 0, 0, 0, 2, 46, },
++	{ 2, 0, 0, 0, 2, 46, },
++	{ 1, 0, 0, 0, 2, 46, },
++	{ 0, 0, 0, 0, 3, 46, },
++	{ 2, 0, 0, 0, 3, 46, },
++	{ 1, 0, 0, 0, 3, 46, },
++	{ 0, 0, 0, 0, 4, 46, },
++	{ 2, 0, 0, 0, 4, 46, },
++	{ 1, 0, 0, 0, 4, 46, },
++	{ 0, 0, 0, 0, 5, 46, },
++	{ 2, 0, 0, 0, 5, 46, },
++	{ 1, 0, 0, 0, 5, 46, },
++	{ 0, 0, 0, 0, 6, 46, },
++	{ 2, 0, 0, 0, 6, 46, },
++	{ 1, 0, 0, 0, 6, 46, },
++	{ 0, 0, 0, 0, 7, 46, },
++	{ 2, 0, 0, 0, 7, 46, },
++	{ 1, 0, 0, 0, 7, 46, },
++	{ 0, 0, 0, 0, 8, 46, },
++	{ 2, 0, 0, 0, 8, 46, },
++	{ 1, 0, 0, 0, 8, 46, },
++	{ 0, 0, 0, 0, 9, 46, },
++	{ 2, 0, 0, 0, 9, 46, },
++	{ 1, 0, 0, 0, 9, 46, },
++	{ 0, 0, 0, 0, 10, 46, },
++	{ 2, 0, 0, 0, 10, 46, },
++	{ 1, 0, 0, 0, 10, 46, },
++	{ 0, 0, 0, 0, 11, 46, },
++	{ 2, 0, 0, 0, 11, 46, },
++	{ 1, 0, 0, 0, 11, 46, },
++	{ 0, 0, 0, 0, 12, 63, },
++	{ 2, 0, 0, 0, 12, 46, },
++	{ 1, 0, 0, 0, 12, 46, },
++	{ 0, 0, 0, 0, 13, 63, },
++	{ 2, 0, 0, 0, 13, 46, },
++	{ 1, 0, 0, 0, 13, 46, },
++	{ 0, 0, 0, 0, 14, 63, },
++	{ 2, 0, 0, 0, 14, 63, },
++	{ 1, 0, 0, 0, 14, 46, },
++	{ 0, 0, 0, 1, 1, 46, },
++	{ 2, 0, 0, 1, 1, 46, },
++	{ 1, 0, 0, 1, 1, 46, },
++	{ 0, 0, 0, 1, 2, 46, },
++	{ 2, 0, 0, 1, 2, 46, },
++	{ 1, 0, 0, 1, 2, 46, },
++	{ 0, 0, 0, 1, 3, 46, },
++	{ 2, 0, 0, 1, 3, 46, },
++	{ 1, 0, 0, 1, 3, 46, },
++	{ 0, 0, 0, 1, 4, 46, },
++	{ 2, 0, 0, 1, 4, 46, },
++	{ 1, 0, 0, 1, 4, 46, },
++	{ 0, 0, 0, 1, 5, 46, },
++	{ 2, 0, 0, 1, 5, 46, },
++	{ 1, 0, 0, 1, 5, 46, },
++	{ 0, 0, 0, 1, 6, 46, },
++	{ 2, 0, 0, 1, 6, 46, },
++	{ 1, 0, 0, 1, 6, 46, },
++	{ 0, 0, 0, 1, 7, 46, },
++	{ 2, 0, 0, 1, 7, 46, },
++	{ 1, 0, 0, 1, 7, 46, },
++	{ 0, 0, 0, 1, 8, 46, },
++	{ 2, 0, 0, 1, 8, 46, },
++	{ 1, 0, 0, 1, 8, 46, },
++	{ 0, 0, 0, 1, 9, 46, },
++	{ 2, 0, 0, 1, 9, 46, },
++	{ 1, 0, 0, 1, 9, 46, },
++	{ 0, 0, 0, 1, 10, 46, },
++	{ 2, 0, 0, 1, 10, 46, },
++	{ 1, 0, 0, 1, 10, 46, },
++	{ 0, 0, 0, 1, 11, 46, },
++	{ 2, 0, 0, 1, 11, 46, },
++	{ 1, 0, 0, 1, 11, 46, },
++	{ 0, 0, 0, 1, 12, 63, },
++	{ 2, 0, 0, 1, 12, 46, },
++	{ 1, 0, 0, 1, 12, 46, },
++	{ 0, 0, 0, 1, 13, 63, },
++	{ 2, 0, 0, 1, 13, 46, },
++	{ 1, 0, 0, 1, 13, 46, },
++	{ 0, 0, 0, 1, 14, 63, },
++	{ 2, 0, 0, 1, 14, 63, },
++	{ 1, 0, 0, 1, 14, 46, },
++	{ 0, 0, 0, 2, 1, 46, },
++	{ 2, 0, 0, 2, 1, 46, },
++	{ 1, 0, 0, 2, 1, 46, },
++	{ 0, 0, 0, 2, 2, 46, },
++	{ 2, 0, 0, 2, 2, 46, },
++	{ 1, 0, 0, 2, 2, 46, },
++	{ 0, 0, 0, 2, 3, 46, },
++	{ 2, 0, 0, 2, 3, 46, },
++	{ 1, 0, 0, 2, 3, 46, },
++	{ 0, 0, 0, 2, 4, 46, },
++	{ 2, 0, 0, 2, 4, 46, },
++	{ 1, 0, 0, 2, 4, 46, },
++	{ 0, 0, 0, 2, 5, 46, },
++	{ 2, 0, 0, 2, 5, 46, },
++	{ 1, 0, 0, 2, 5, 46, },
++	{ 0, 0, 0, 2, 6, 46, },
++	{ 2, 0, 0, 2, 6, 46, },
++	{ 1, 0, 0, 2, 6, 46, },
++	{ 0, 0, 0, 2, 7, 46, },
++	{ 2, 0, 0, 2, 7, 46, },
++	{ 1, 0, 0, 2, 7, 46, },
++	{ 0, 0, 0, 2, 8, 46, },
++	{ 2, 0, 0, 2, 8, 46, },
++	{ 1, 0, 0, 2, 8, 46, },
++	{ 0, 0, 0, 2, 9, 46, },
++	{ 2, 0, 0, 2, 9, 46, },
++	{ 1, 0, 0, 2, 9, 46, },
++	{ 0, 0, 0, 2, 10, 46, },
++	{ 2, 0, 0, 2, 10, 46, },
++	{ 1, 0, 0, 2, 10, 46, },
++	{ 0, 0, 0, 2, 11, 46, },
++	{ 2, 0, 0, 2, 11, 46, },
++	{ 1, 0, 0, 2, 11, 46, },
++	{ 0, 0, 0, 2, 12, 63, },
++	{ 2, 0, 0, 2, 12, 46, },
++	{ 1, 0, 0, 2, 12, 46, },
++	{ 0, 0, 0, 2, 13, 63, },
++	{ 2, 0, 0, 2, 13, 46, },
++	{ 1, 0, 0, 2, 13, 46, },
++	{ 0, 0, 0, 2, 14, 63, },
++	{ 2, 0, 0, 2, 14, 63, },
++	{ 1, 0, 0, 2, 14, 46, },
++	{ 0, 0, 0, 3, 1, 46, },
++	{ 2, 0, 0, 3, 1, 46, },
++	{ 1, 0, 0, 3, 1, 46, },
++	{ 0, 0, 0, 3, 2, 46, },
++	{ 2, 0, 0, 3, 2, 46, },
++	{ 1, 0, 0, 3, 2, 46, },
++	{ 0, 0, 0, 3, 3, 46, },
++	{ 2, 0, 0, 3, 3, 46, },
++	{ 1, 0, 0, 3, 3, 46, },
++	{ 0, 0, 0, 3, 4, 46, },
++	{ 2, 0, 0, 3, 4, 46, },
++	{ 1, 0, 0, 3, 4, 46, },
++	{ 0, 0, 0, 3, 5, 46, },
++	{ 2, 0, 0, 3, 5, 46, },
++	{ 1, 0, 0, 3, 5, 46, },
++	{ 0, 0, 0, 3, 6, 46, },
++	{ 2, 0, 0, 3, 6, 46, },
++	{ 1, 0, 0, 3, 6, 46, },
++	{ 0, 0, 0, 3, 7, 46, },
++	{ 2, 0, 0, 3, 7, 46, },
++	{ 1, 0, 0, 3, 7, 46, },
++	{ 0, 0, 0, 3, 8, 46, },
++	{ 2, 0, 0, 3, 8, 46, },
++	{ 1, 0, 0, 3, 8, 46, },
++	{ 0, 0, 0, 3, 9, 46, },
++	{ 2, 0, 0, 3, 9, 46, },
++	{ 1, 0, 0, 3, 9, 46, },
++	{ 0, 0, 0, 3, 10, 46, },
++	{ 2, 0, 0, 3, 10, 46, },
++	{ 1, 0, 0, 3, 10, 46, },
++	{ 0, 0, 0, 3, 11, 46, },
++	{ 2, 0, 0, 3, 11, 46, },
++	{ 1, 0, 0, 3, 11, 46, },
++	{ 0, 0, 0, 3, 12, 63, },
++	{ 2, 0, 0, 3, 12, 46, },
++	{ 1, 0, 0, 3, 12, 46, },
++	{ 0, 0, 0, 3, 13, 63, },
++	{ 2, 0, 0, 3, 13, 46, },
++	{ 1, 0, 0, 3, 13, 46, },
++	{ 0, 0, 0, 3, 14, 63, },
++	{ 2, 0, 0, 3, 14, 63, },
++	{ 1, 0, 0, 3, 14, 46, },
++	{ 0, 0, 0, 6, 1, 46, },
++	{ 2, 0, 0, 6, 1, 46, },
++	{ 1, 0, 0, 6, 1, 46, },
++	{ 0, 0, 0, 6, 2, 46, },
++	{ 2, 0, 0, 6, 2, 46, },
++	{ 1, 0, 0, 6, 2, 46, },
++	{ 0, 0, 0, 6, 3, 46, },
++	{ 2, 0, 0, 6, 3, 46, },
++	{ 1, 0, 0, 6, 3, 46, },
++	{ 0, 0, 0, 6, 4, 46, },
++	{ 2, 0, 0, 6, 4, 46, },
++	{ 1, 0, 0, 6, 4, 46, },
++	{ 0, 0, 0, 6, 5, 46, },
++	{ 2, 0, 0, 6, 5, 46, },
++	{ 1, 0, 0, 6, 5, 46, },
++	{ 0, 0, 0, 6, 6, 46, },
++	{ 2, 0, 0, 6, 6, 46, },
++	{ 1, 0, 0, 6, 6, 46, },
++	{ 0, 0, 0, 6, 7, 46, },
++	{ 2, 0, 0, 6, 7, 46, },
++	{ 1, 0, 0, 6, 7, 46, },
++	{ 0, 0, 0, 6, 8, 46, },
++	{ 2, 0, 0, 6, 8, 46, },
++	{ 1, 0, 0, 6, 8, 46, },
++	{ 0, 0, 0, 6, 9, 46, },
++	{ 2, 0, 0, 6, 9, 46, },
++	{ 1, 0, 0, 6, 9, 46, },
++	{ 0, 0, 0, 6, 10, 46, },
++	{ 2, 0, 0, 6, 10, 46, },
++	{ 1, 0, 0, 6, 10, 46, },
++	{ 0, 0, 0, 6, 11, 46, },
++	{ 2, 0, 0, 6, 11, 46, },
++	{ 1, 0, 0, 6, 11, 46, },
++	{ 0, 0, 0, 6, 12, 63, },
++	{ 2, 0, 0, 6, 12, 46, },
++	{ 1, 0, 0, 6, 12, 46, },
++	{ 0, 0, 0, 6, 13, 63, },
++	{ 2, 0, 0, 6, 13, 46, },
++	{ 1, 0, 0, 6, 13, 46, },
++	{ 0, 0, 0, 6, 14, 63, },
++	{ 2, 0, 0, 6, 14, 63, },
++	{ 1, 0, 0, 6, 14, 46, },
++	{ 0, 0, 0, 7, 1, 46, },
++	{ 2, 0, 0, 7, 1, 46, },
++	{ 1, 0, 0, 7, 1, 46, },
++	{ 0, 0, 0, 7, 2, 46, },
++	{ 2, 0, 0, 7, 2, 46, },
++	{ 1, 0, 0, 7, 2, 46, },
++	{ 0, 0, 0, 7, 3, 46, },
++	{ 2, 0, 0, 7, 3, 46, },
++	{ 1, 0, 0, 7, 3, 46, },
++	{ 0, 0, 0, 7, 4, 46, },
++	{ 2, 0, 0, 7, 4, 46, },
++	{ 1, 0, 0, 7, 4, 46, },
++	{ 0, 0, 0, 7, 5, 46, },
++	{ 2, 0, 0, 7, 5, 46, },
++	{ 1, 0, 0, 7, 5, 46, },
++	{ 0, 0, 0, 7, 6, 46, },
++	{ 2, 0, 0, 7, 6, 46, },
++	{ 1, 0, 0, 7, 6, 46, },
++	{ 0, 0, 0, 7, 7, 46, },
++	{ 2, 0, 0, 7, 7, 46, },
++	{ 1, 0, 0, 7, 7, 46, },
++	{ 0, 0, 0, 7, 8, 46, },
++	{ 2, 0, 0, 7, 8, 46, },
++	{ 1, 0, 0, 7, 8, 46, },
++	{ 0, 0, 0, 7, 9, 46, },
++	{ 2, 0, 0, 7, 9, 46, },
++	{ 1, 0, 0, 7, 9, 46, },
++	{ 0, 0, 0, 7, 10, 46, },
++	{ 2, 0, 0, 7, 10, 46, },
++	{ 1, 0, 0, 7, 10, 46, },
++	{ 0, 0, 0, 7, 11, 46, },
++	{ 2, 0, 0, 7, 11, 46, },
++	{ 1, 0, 0, 7, 11, 46, },
++	{ 0, 0, 0, 7, 12, 63, },
++	{ 2, 0, 0, 7, 12, 46, },
++	{ 1, 0, 0, 7, 12, 46, },
++	{ 0, 0, 0, 7, 13, 63, },
++	{ 2, 0, 0, 7, 13, 46, },
++	{ 1, 0, 0, 7, 13, 46, },
++	{ 0, 0, 0, 7, 14, 63, },
++	{ 2, 0, 0, 7, 14, 63, },
++	{ 1, 0, 0, 7, 14, 46, },
++	{ 0, 0, 1, 2, 1, 63, },
++	{ 2, 0, 1, 2, 1, 63, },
++	{ 1, 0, 1, 2, 1, 63, },
++	{ 0, 0, 1, 2, 2, 63, },
++	{ 2, 0, 1, 2, 2, 63, },
++	{ 1, 0, 1, 2, 2, 63, },
++	{ 0, 0, 1, 2, 3, 30, },
++	{ 2, 0, 1, 2, 3, 34, },
++	{ 1, 0, 1, 2, 3, 34, },
++	{ 0, 0, 1, 2, 4, 34, },
++	{ 2, 0, 1, 2, 4, 34, },
++	{ 1, 0, 1, 2, 4, 34, },
++	{ 0, 0, 1, 2, 5, 34, },
++	{ 2, 0, 1, 2, 5, 34, },
++	{ 1, 0, 1, 2, 5, 34, },
++	{ 0, 0, 1, 2, 6, 34, },
++	{ 2, 0, 1, 2, 6, 34, },
++	{ 1, 0, 1, 2, 6, 34, },
++	{ 0, 0, 1, 2, 7, 34, },
++	{ 2, 0, 1, 2, 7, 34, },
++	{ 1, 0, 1, 2, 7, 34, },
++	{ 0, 0, 1, 2, 8, 34, },
++	{ 2, 0, 1, 2, 8, 34, },
++	{ 1, 0, 1, 2, 8, 34, },
++	{ 0, 0, 1, 2, 9, 34, },
++	{ 2, 0, 1, 2, 9, 34, },
++	{ 1, 0, 1, 2, 9, 34, },
++	{ 0, 0, 1, 2, 10, 34, },
++	{ 2, 0, 1, 2, 10, 34, },
++	{ 1, 0, 1, 2, 10, 34, },
++	{ 0, 0, 1, 2, 11, 28, },
++	{ 2, 0, 1, 2, 11, 34, },
++	{ 1, 0, 1, 2, 11, 34, },
++	{ 0, 0, 1, 2, 12, 63, },
++	{ 2, 0, 1, 2, 12, 34, },
++	{ 1, 0, 1, 2, 12, 34, },
++	{ 0, 0, 1, 2, 13, 63, },
++	{ 2, 0, 1, 2, 13, 34, },
++	{ 1, 0, 1, 2, 13, 34, },
++	{ 0, 0, 1, 2, 14, 63, },
++	{ 2, 0, 1, 2, 14, 63, },
++	{ 1, 0, 1, 2, 14, 63, },
++	{ 0, 0, 1, 3, 1, 63, },
++	{ 2, 0, 1, 3, 1, 63, },
++	{ 1, 0, 1, 3, 1, 63, },
++	{ 0, 0, 1, 3, 2, 63, },
++	{ 2, 0, 1, 3, 2, 63, },
++	{ 1, 0, 1, 3, 2, 63, },
++	{ 0, 0, 1, 3, 3, 30, },
++	{ 2, 0, 1, 3, 3, 34, },
++	{ 1, 0, 1, 3, 3, 34, },
++	{ 0, 0, 1, 3, 4, 34, },
++	{ 2, 0, 1, 3, 4, 34, },
++	{ 1, 0, 1, 3, 4, 34, },
++	{ 0, 0, 1, 3, 5, 34, },
++	{ 2, 0, 1, 3, 5, 34, },
++	{ 1, 0, 1, 3, 5, 34, },
++	{ 0, 0, 1, 3, 6, 34, },
++	{ 2, 0, 1, 3, 6, 34, },
++	{ 1, 0, 1, 3, 6, 34, },
++	{ 0, 0, 1, 3, 7, 34, },
++	{ 2, 0, 1, 3, 7, 34, },
++	{ 1, 0, 1, 3, 7, 34, },
++	{ 0, 0, 1, 3, 8, 34, },
++	{ 2, 0, 1, 3, 8, 34, },
++	{ 1, 0, 1, 3, 8, 34, },
++	{ 0, 0, 1, 3, 9, 34, },
++	{ 2, 0, 1, 3, 9, 34, },
++	{ 1, 0, 1, 3, 9, 34, },
++	{ 0, 0, 1, 3, 10, 34, },
++	{ 2, 0, 1, 3, 10, 34, },
++	{ 1, 0, 1, 3, 10, 34, },
++	{ 0, 0, 1, 3, 11, 28, },
++	{ 2, 0, 1, 3, 11, 34, },
++	{ 1, 0, 1, 3, 11, 34, },
++	{ 0, 0, 1, 3, 12, 63, },
++	{ 2, 0, 1, 3, 12, 34, },
++	{ 1, 0, 1, 3, 12, 34, },
++	{ 0, 0, 1, 3, 13, 63, },
++	{ 2, 0, 1, 3, 13, 34, },
++	{ 1, 0, 1, 3, 13, 34, },
++	{ 0, 0, 1, 3, 14, 63, },
++	{ 2, 0, 1, 3, 14, 63, },
++	{ 1, 0, 1, 3, 14, 63, },
++	{ 0, 0, 1, 6, 1, 63, },
++	{ 2, 0, 1, 6, 1, 63, },
++	{ 1, 0, 1, 6, 1, 63, },
++	{ 0, 0, 1, 6, 2, 63, },
++	{ 2, 0, 1, 6, 2, 63, },
++	{ 1, 0, 1, 6, 2, 63, },
++	{ 0, 0, 1, 6, 3, 30, },
++	{ 2, 0, 1, 6, 3, 34, },
++	{ 1, 0, 1, 6, 3, 34, },
++	{ 0, 0, 1, 6, 4, 34, },
++	{ 2, 0, 1, 6, 4, 34, },
++	{ 1, 0, 1, 6, 4, 34, },
++	{ 0, 0, 1, 6, 5, 34, },
++	{ 2, 0, 1, 6, 5, 34, },
++	{ 1, 0, 1, 6, 5, 34, },
++	{ 0, 0, 1, 6, 6, 34, },
++	{ 2, 0, 1, 6, 6, 34, },
++	{ 1, 0, 1, 6, 6, 34, },
++	{ 0, 0, 1, 6, 7, 34, },
++	{ 2, 0, 1, 6, 7, 34, },
++	{ 1, 0, 1, 6, 7, 34, },
++	{ 0, 0, 1, 6, 8, 34, },
++	{ 2, 0, 1, 6, 8, 34, },
++	{ 1, 0, 1, 6, 8, 34, },
++	{ 0, 0, 1, 6, 9, 34, },
++	{ 2, 0, 1, 6, 9, 34, },
++	{ 1, 0, 1, 6, 9, 34, },
++	{ 0, 0, 1, 6, 10, 34, },
++	{ 2, 0, 1, 6, 10, 34, },
++	{ 1, 0, 1, 6, 10, 34, },
++	{ 0, 0, 1, 6, 11, 28, },
++	{ 2, 0, 1, 6, 11, 34, },
++	{ 1, 0, 1, 6, 11, 34, },
++	{ 0, 0, 1, 6, 12, 63, },
++	{ 2, 0, 1, 6, 12, 34, },
++	{ 1, 0, 1, 6, 12, 34, },
++	{ 0, 0, 1, 6, 13, 63, },
++	{ 2, 0, 1, 6, 13, 34, },
++	{ 1, 0, 1, 6, 13, 34, },
++	{ 0, 0, 1, 6, 14, 63, },
++	{ 2, 0, 1, 6, 14, 63, },
++	{ 1, 0, 1, 6, 14, 63, },
++	{ 0, 0, 1, 7, 1, 63, },
++	{ 2, 0, 1, 7, 1, 63, },
++	{ 1, 0, 1, 7, 1, 63, },
++	{ 0, 0, 1, 7, 2, 63, },
++	{ 2, 0, 1, 7, 2, 63, },
++	{ 1, 0, 1, 7, 2, 63, },
++	{ 0, 0, 1, 7, 3, 30, },
++	{ 2, 0, 1, 7, 3, 34, },
++	{ 1, 0, 1, 7, 3, 34, },
++	{ 0, 0, 1, 7, 4, 34, },
++	{ 2, 0, 1, 7, 4, 34, },
++	{ 1, 0, 1, 7, 4, 34, },
++	{ 0, 0, 1, 7, 5, 34, },
++	{ 2, 0, 1, 7, 5, 34, },
++	{ 1, 0, 1, 7, 5, 34, },
++	{ 0, 0, 1, 7, 6, 34, },
++	{ 2, 0, 1, 7, 6, 34, },
++	{ 1, 0, 1, 7, 6, 34, },
++	{ 0, 0, 1, 7, 7, 34, },
++	{ 2, 0, 1, 7, 7, 34, },
++	{ 1, 0, 1, 7, 7, 34, },
++	{ 0, 0, 1, 7, 8, 34, },
++	{ 2, 0, 1, 7, 8, 34, },
++	{ 1, 0, 1, 7, 8, 34, },
++	{ 0, 0, 1, 7, 9, 34, },
++	{ 2, 0, 1, 7, 9, 34, },
++	{ 1, 0, 1, 7, 9, 34, },
++	{ 0, 0, 1, 7, 10, 34, },
++	{ 2, 0, 1, 7, 10, 34, },
++	{ 1, 0, 1, 7, 10, 34, },
++	{ 0, 0, 1, 7, 11, 28, },
++	{ 2, 0, 1, 7, 11, 34, },
++	{ 1, 0, 1, 7, 11, 34, },
++	{ 0, 0, 1, 7, 12, 63, },
++	{ 2, 0, 1, 7, 12, 34, },
++	{ 1, 0, 1, 7, 12, 34, },
++	{ 0, 0, 1, 7, 13, 63, },
++	{ 2, 0, 1, 7, 13, 34, },
++	{ 1, 0, 1, 7, 13, 34, },
++	{ 0, 0, 1, 7, 14, 63, },
++	{ 2, 0, 1, 7, 14, 63, },
++	{ 1, 0, 1, 7, 14, 63, },
++	{ 0, 1, 0, 1, 36, 46, },
++	{ 2, 1, 0, 1, 36, 46, },
++	{ 1, 1, 0, 1, 36, 46, },
++	{ 0, 1, 0, 1, 40, 46, },
++	{ 2, 1, 0, 1, 40, 46, },
++	{ 1, 1, 0, 1, 40, 46, },
++	{ 0, 1, 0, 1, 44, 46, },
++	{ 2, 1, 0, 1, 44, 46, },
++	{ 1, 1, 0, 1, 44, 46, },
++	{ 0, 1, 0, 1, 48, 46, },
++	{ 2, 1, 0, 1, 48, 46, },
++	{ 1, 1, 0, 1, 48, 46, },
++	{ 0, 1, 0, 1, 52, 46, },
++	{ 2, 1, 0, 1, 52, 46, },
++	{ 1, 1, 0, 1, 52, 46, },
++	{ 0, 1, 0, 1, 56, 46, },
++	{ 2, 1, 0, 1, 56, 46, },
++	{ 1, 1, 0, 1, 56, 46, },
++	{ 0, 1, 0, 1, 60, 46, },
++	{ 2, 1, 0, 1, 60, 46, },
++	{ 1, 1, 0, 1, 60, 46, },
++	{ 0, 1, 0, 1, 64, 46, },
++	{ 2, 1, 0, 1, 64, 46, },
++	{ 1, 1, 0, 1, 64, 46, },
++	{ 0, 1, 0, 1, 100, 46, },
++	{ 2, 1, 0, 1, 100, 46, },
++	{ 1, 1, 0, 1, 100, 46, },
++	{ 0, 1, 0, 1, 104, 46, },
++	{ 2, 1, 0, 1, 104, 46, },
++	{ 1, 1, 0, 1, 104, 46, },
++	{ 0, 1, 0, 1, 108, 46, },
++	{ 2, 1, 0, 1, 108, 46, },
++	{ 1, 1, 0, 1, 108, 46, },
++	{ 0, 1, 0, 1, 112, 46, },
++	{ 2, 1, 0, 1, 112, 46, },
++	{ 1, 1, 0, 1, 112, 46, },
++	{ 0, 1, 0, 1, 116, 46, },
++	{ 2, 1, 0, 1, 116, 46, },
++	{ 1, 1, 0, 1, 116, 46, },
++	{ 0, 1, 0, 1, 120, 46, },
++	{ 2, 1, 0, 1, 120, 46, },
++	{ 1, 1, 0, 1, 120, 46, },
++	{ 0, 1, 0, 1, 124, 46, },
++	{ 2, 1, 0, 1, 124, 46, },
++	{ 1, 1, 0, 1, 124, 46, },
++	{ 0, 1, 0, 1, 128, 46, },
++	{ 2, 1, 0, 1, 128, 46, },
++	{ 1, 1, 0, 1, 128, 46, },
++	{ 0, 1, 0, 1, 132, 46, },
++	{ 2, 1, 0, 1, 132, 46, },
++	{ 1, 1, 0, 1, 132, 46, },
++	{ 0, 1, 0, 1, 136, 46, },
++	{ 2, 1, 0, 1, 136, 46, },
++	{ 1, 1, 0, 1, 136, 46, },
++	{ 0, 1, 0, 1, 140, 46, },
++	{ 2, 1, 0, 1, 140, 46, },
++	{ 1, 1, 0, 1, 140, 46, },
++	{ 0, 1, 0, 1, 149, 46, },
++	{ 2, 1, 0, 1, 149, 46, },
++	{ 1, 1, 0, 1, 149, 63, },
++	{ 0, 1, 0, 1, 153, 46, },
++	{ 2, 1, 0, 1, 153, 46, },
++	{ 1, 1, 0, 1, 153, 63, },
++	{ 0, 1, 0, 1, 157, 46, },
++	{ 2, 1, 0, 1, 157, 46, },
++	{ 1, 1, 0, 1, 157, 63, },
++	{ 0, 1, 0, 1, 161, 46, },
++	{ 2, 1, 0, 1, 161, 46, },
++	{ 1, 1, 0, 1, 161, 63, },
++	{ 0, 1, 0, 1, 165, 46, },
++	{ 2, 1, 0, 1, 165, 46, },
++	{ 1, 1, 0, 1, 165, 63, },
++	{ 0, 1, 0, 2, 36, 46, },
++	{ 2, 1, 0, 2, 36, 46, },
++	{ 1, 1, 0, 2, 36, 46, },
++	{ 0, 1, 0, 2, 40, 46, },
++	{ 2, 1, 0, 2, 40, 46, },
++	{ 1, 1, 0, 2, 40, 46, },
++	{ 0, 1, 0, 2, 44, 46, },
++	{ 2, 1, 0, 2, 44, 46, },
++	{ 1, 1, 0, 2, 44, 46, },
++	{ 0, 1, 0, 2, 48, 46, },
++	{ 2, 1, 0, 2, 48, 46, },
++	{ 1, 1, 0, 2, 48, 46, },
++	{ 0, 1, 0, 2, 52, 46, },
++	{ 2, 1, 0, 2, 52, 46, },
++	{ 1, 1, 0, 2, 52, 46, },
++	{ 0, 1, 0, 2, 56, 46, },
++	{ 2, 1, 0, 2, 56, 46, },
++	{ 1, 1, 0, 2, 56, 46, },
++	{ 0, 1, 0, 2, 60, 46, },
++	{ 2, 1, 0, 2, 60, 46, },
++	{ 1, 1, 0, 2, 60, 46, },
++	{ 0, 1, 0, 2, 64, 46, },
++	{ 2, 1, 0, 2, 64, 46, },
++	{ 1, 1, 0, 2, 64, 46, },
++	{ 0, 1, 0, 2, 100, 46, },
++	{ 2, 1, 0, 2, 100, 46, },
++	{ 1, 1, 0, 2, 100, 46, },
++	{ 0, 1, 0, 2, 104, 46, },
++	{ 2, 1, 0, 2, 104, 46, },
++	{ 1, 1, 0, 2, 104, 46, },
++	{ 0, 1, 0, 2, 108, 46, },
++	{ 2, 1, 0, 2, 108, 46, },
++	{ 1, 1, 0, 2, 108, 46, },
++	{ 0, 1, 0, 2, 112, 46, },
++	{ 2, 1, 0, 2, 112, 46, },
++	{ 1, 1, 0, 2, 112, 46, },
++	{ 0, 1, 0, 2, 116, 46, },
++	{ 2, 1, 0, 2, 116, 46, },
++	{ 1, 1, 0, 2, 116, 46, },
++	{ 0, 1, 0, 2, 120, 46, },
++	{ 2, 1, 0, 2, 120, 46, },
++	{ 1, 1, 0, 2, 120, 46, },
++	{ 0, 1, 0, 2, 124, 46, },
++	{ 2, 1, 0, 2, 124, 46, },
++	{ 1, 1, 0, 2, 124, 46, },
++	{ 0, 1, 0, 2, 128, 46, },
++	{ 2, 1, 0, 2, 128, 46, },
++	{ 1, 1, 0, 2, 128, 46, },
++	{ 0, 1, 0, 2, 132, 46, },
++	{ 2, 1, 0, 2, 132, 46, },
++	{ 1, 1, 0, 2, 132, 46, },
++	{ 0, 1, 0, 2, 136, 46, },
++	{ 2, 1, 0, 2, 136, 46, },
++	{ 1, 1, 0, 2, 136, 46, },
++	{ 0, 1, 0, 2, 140, 46, },
++	{ 2, 1, 0, 2, 140, 46, },
++	{ 1, 1, 0, 2, 140, 46, },
++	{ 0, 1, 0, 2, 149, 46, },
++	{ 2, 1, 0, 2, 149, 46, },
++	{ 1, 1, 0, 2, 149, 63, },
++	{ 0, 1, 0, 2, 153, 46, },
++	{ 2, 1, 0, 2, 153, 46, },
++	{ 1, 1, 0, 2, 153, 63, },
++	{ 0, 1, 0, 2, 157, 46, },
++	{ 2, 1, 0, 2, 157, 46, },
++	{ 1, 1, 0, 2, 157, 63, },
++	{ 0, 1, 0, 2, 161, 46, },
++	{ 2, 1, 0, 2, 161, 46, },
++	{ 1, 1, 0, 2, 161, 63, },
++	{ 0, 1, 0, 2, 165, 46, },
++	{ 2, 1, 0, 2, 165, 46, },
++	{ 1, 1, 0, 2, 165, 63, },
++	{ 0, 1, 0, 3, 36, 46, },
++	{ 2, 1, 0, 3, 36, 46, },
++	{ 1, 1, 0, 3, 36, 46, },
++	{ 0, 1, 0, 3, 40, 46, },
++	{ 2, 1, 0, 3, 40, 46, },
++	{ 1, 1, 0, 3, 40, 46, },
++	{ 0, 1, 0, 3, 44, 46, },
++	{ 2, 1, 0, 3, 44, 46, },
++	{ 1, 1, 0, 3, 44, 46, },
++	{ 0, 1, 0, 3, 48, 46, },
++	{ 2, 1, 0, 3, 48, 46, },
++	{ 1, 1, 0, 3, 48, 46, },
++	{ 0, 1, 0, 3, 52, 46, },
++	{ 2, 1, 0, 3, 52, 46, },
++	{ 1, 1, 0, 3, 52, 46, },
++	{ 0, 1, 0, 3, 56, 46, },
++	{ 2, 1, 0, 3, 56, 46, },
++	{ 1, 1, 0, 3, 56, 46, },
++	{ 0, 1, 0, 3, 60, 46, },
++	{ 2, 1, 0, 3, 60, 46, },
++	{ 1, 1, 0, 3, 60, 46, },
++	{ 0, 1, 0, 3, 64, 46, },
++	{ 2, 1, 0, 3, 64, 46, },
++	{ 1, 1, 0, 3, 64, 46, },
++	{ 0, 1, 0, 3, 100, 46, },
++	{ 2, 1, 0, 3, 100, 46, },
++	{ 1, 1, 0, 3, 100, 46, },
++	{ 0, 1, 0, 3, 104, 46, },
++	{ 2, 1, 0, 3, 104, 46, },
++	{ 1, 1, 0, 3, 104, 46, },
++	{ 0, 1, 0, 3, 108, 46, },
++	{ 2, 1, 0, 3, 108, 46, },
++	{ 1, 1, 0, 3, 108, 46, },
++	{ 0, 1, 0, 3, 112, 46, },
++	{ 2, 1, 0, 3, 112, 46, },
++	{ 1, 1, 0, 3, 112, 46, },
++	{ 0, 1, 0, 3, 116, 46, },
++	{ 2, 1, 0, 3, 116, 46, },
++	{ 1, 1, 0, 3, 116, 46, },
++	{ 0, 1, 0, 3, 120, 46, },
++	{ 2, 1, 0, 3, 120, 46, },
++	{ 1, 1, 0, 3, 120, 46, },
++	{ 0, 1, 0, 3, 124, 46, },
++	{ 2, 1, 0, 3, 124, 46, },
++	{ 1, 1, 0, 3, 124, 46, },
++	{ 0, 1, 0, 3, 128, 46, },
++	{ 2, 1, 0, 3, 128, 46, },
++	{ 1, 1, 0, 3, 128, 46, },
++	{ 0, 1, 0, 3, 132, 46, },
++	{ 2, 1, 0, 3, 132, 46, },
++	{ 1, 1, 0, 3, 132, 46, },
++	{ 0, 1, 0, 3, 136, 46, },
++	{ 2, 1, 0, 3, 136, 46, },
++	{ 1, 1, 0, 3, 136, 46, },
++	{ 0, 1, 0, 3, 140, 46, },
++	{ 2, 1, 0, 3, 140, 46, },
++	{ 1, 1, 0, 3, 140, 46, },
++	{ 0, 1, 0, 3, 149, 46, },
++	{ 2, 1, 0, 3, 149, 46, },
++	{ 1, 1, 0, 3, 149, 63, },
++	{ 0, 1, 0, 3, 153, 46, },
++	{ 2, 1, 0, 3, 153, 46, },
++	{ 1, 1, 0, 3, 153, 63, },
++	{ 0, 1, 0, 3, 157, 46, },
++	{ 2, 1, 0, 3, 157, 46, },
++	{ 1, 1, 0, 3, 157, 63, },
++	{ 0, 1, 0, 3, 161, 46, },
++	{ 2, 1, 0, 3, 161, 46, },
++	{ 1, 1, 0, 3, 161, 63, },
++	{ 0, 1, 0, 3, 165, 46, },
++	{ 2, 1, 0, 3, 165, 46, },
++	{ 1, 1, 0, 3, 165, 63, },
++	{ 0, 1, 0, 6, 36, 46, },
++	{ 2, 1, 0, 6, 36, 46, },
++	{ 1, 1, 0, 6, 36, 46, },
++	{ 0, 1, 0, 6, 40, 46, },
++	{ 2, 1, 0, 6, 40, 46, },
++	{ 1, 1, 0, 6, 40, 46, },
++	{ 0, 1, 0, 6, 44, 46, },
++	{ 2, 1, 0, 6, 44, 46, },
++	{ 1, 1, 0, 6, 44, 46, },
++	{ 0, 1, 0, 6, 48, 46, },
++	{ 2, 1, 0, 6, 48, 46, },
++	{ 1, 1, 0, 6, 48, 46, },
++	{ 0, 1, 0, 6, 52, 46, },
++	{ 2, 1, 0, 6, 52, 46, },
++	{ 1, 1, 0, 6, 52, 46, },
++	{ 0, 1, 0, 6, 56, 46, },
++	{ 2, 1, 0, 6, 56, 46, },
++	{ 1, 1, 0, 6, 56, 46, },
++	{ 0, 1, 0, 6, 60, 46, },
++	{ 2, 1, 0, 6, 60, 46, },
++	{ 1, 1, 0, 6, 60, 46, },
++	{ 0, 1, 0, 6, 64, 46, },
++	{ 2, 1, 0, 6, 64, 46, },
++	{ 1, 1, 0, 6, 64, 46, },
++	{ 0, 1, 0, 6, 100, 46, },
++	{ 2, 1, 0, 6, 100, 46, },
++	{ 1, 1, 0, 6, 100, 46, },
++	{ 0, 1, 0, 6, 104, 46, },
++	{ 2, 1, 0, 6, 104, 46, },
++	{ 1, 1, 0, 6, 104, 46, },
++	{ 0, 1, 0, 6, 108, 46, },
++	{ 2, 1, 0, 6, 108, 46, },
++	{ 1, 1, 0, 6, 108, 46, },
++	{ 0, 1, 0, 6, 112, 46, },
++	{ 2, 1, 0, 6, 112, 46, },
++	{ 1, 1, 0, 6, 112, 46, },
++	{ 0, 1, 0, 6, 116, 46, },
++	{ 2, 1, 0, 6, 116, 46, },
++	{ 1, 1, 0, 6, 116, 46, },
++	{ 0, 1, 0, 6, 120, 46, },
++	{ 2, 1, 0, 6, 120, 46, },
++	{ 1, 1, 0, 6, 120, 46, },
++	{ 0, 1, 0, 6, 124, 46, },
++	{ 2, 1, 0, 6, 124, 46, },
++	{ 1, 1, 0, 6, 124, 46, },
++	{ 0, 1, 0, 6, 128, 46, },
++	{ 2, 1, 0, 6, 128, 46, },
++	{ 1, 1, 0, 6, 128, 46, },
++	{ 0, 1, 0, 6, 132, 46, },
++	{ 2, 1, 0, 6, 132, 46, },
++	{ 1, 1, 0, 6, 132, 46, },
++	{ 0, 1, 0, 6, 136, 46, },
++	{ 2, 1, 0, 6, 136, 46, },
++	{ 1, 1, 0, 6, 136, 46, },
++	{ 0, 1, 0, 6, 140, 46, },
++	{ 2, 1, 0, 6, 140, 46, },
++	{ 1, 1, 0, 6, 140, 46, },
++	{ 0, 1, 0, 6, 149, 46, },
++	{ 2, 1, 0, 6, 149, 46, },
++	{ 1, 1, 0, 6, 149, 63, },
++	{ 0, 1, 0, 6, 153, 46, },
++	{ 2, 1, 0, 6, 153, 46, },
++	{ 1, 1, 0, 6, 153, 63, },
++	{ 0, 1, 0, 6, 157, 46, },
++	{ 2, 1, 0, 6, 157, 46, },
++	{ 1, 1, 0, 6, 157, 63, },
++	{ 0, 1, 0, 6, 161, 46, },
++	{ 2, 1, 0, 6, 161, 46, },
++	{ 1, 1, 0, 6, 161, 63, },
++	{ 0, 1, 0, 6, 165, 46, },
++	{ 2, 1, 0, 6, 165, 46, },
++	{ 1, 1, 0, 6, 165, 63, },
++	{ 0, 1, 0, 7, 36, 46, },
++	{ 2, 1, 0, 7, 36, 46, },
++	{ 1, 1, 0, 7, 36, 46, },
++	{ 0, 1, 0, 7, 40, 46, },
++	{ 2, 1, 0, 7, 40, 46, },
++	{ 1, 1, 0, 7, 40, 46, },
++	{ 0, 1, 0, 7, 44, 46, },
++	{ 2, 1, 0, 7, 44, 46, },
++	{ 1, 1, 0, 7, 44, 46, },
++	{ 0, 1, 0, 7, 48, 46, },
++	{ 2, 1, 0, 7, 48, 46, },
++	{ 1, 1, 0, 7, 48, 46, },
++	{ 0, 1, 0, 7, 52, 46, },
++	{ 2, 1, 0, 7, 52, 46, },
++	{ 1, 1, 0, 7, 52, 46, },
++	{ 0, 1, 0, 7, 56, 46, },
++	{ 2, 1, 0, 7, 56, 46, },
++	{ 1, 1, 0, 7, 56, 46, },
++	{ 0, 1, 0, 7, 60, 46, },
++	{ 2, 1, 0, 7, 60, 46, },
++	{ 1, 1, 0, 7, 60, 46, },
++	{ 0, 1, 0, 7, 64, 46, },
++	{ 2, 1, 0, 7, 64, 46, },
++	{ 1, 1, 0, 7, 64, 46, },
++	{ 0, 1, 0, 7, 100, 46, },
++	{ 2, 1, 0, 7, 100, 46, },
++	{ 1, 1, 0, 7, 100, 46, },
++	{ 0, 1, 0, 7, 104, 46, },
++	{ 2, 1, 0, 7, 104, 46, },
++	{ 1, 1, 0, 7, 104, 46, },
++	{ 0, 1, 0, 7, 108, 46, },
++	{ 2, 1, 0, 7, 108, 46, },
++	{ 1, 1, 0, 7, 108, 46, },
++	{ 0, 1, 0, 7, 112, 46, },
++	{ 2, 1, 0, 7, 112, 46, },
++	{ 1, 1, 0, 7, 112, 46, },
++	{ 0, 1, 0, 7, 116, 46, },
++	{ 2, 1, 0, 7, 116, 46, },
++	{ 1, 1, 0, 7, 116, 46, },
++	{ 0, 1, 0, 7, 120, 46, },
++	{ 2, 1, 0, 7, 120, 46, },
++	{ 1, 1, 0, 7, 120, 46, },
++	{ 0, 1, 0, 7, 124, 46, },
++	{ 2, 1, 0, 7, 124, 46, },
++	{ 1, 1, 0, 7, 124, 46, },
++	{ 0, 1, 0, 7, 128, 46, },
++	{ 2, 1, 0, 7, 128, 46, },
++	{ 1, 1, 0, 7, 128, 46, },
++	{ 0, 1, 0, 7, 132, 46, },
++	{ 2, 1, 0, 7, 132, 46, },
++	{ 1, 1, 0, 7, 132, 46, },
++	{ 0, 1, 0, 7, 136, 46, },
++	{ 2, 1, 0, 7, 136, 46, },
++	{ 1, 1, 0, 7, 136, 46, },
++	{ 0, 1, 0, 7, 140, 46, },
++	{ 2, 1, 0, 7, 140, 46, },
++	{ 1, 1, 0, 7, 140, 46, },
++	{ 0, 1, 0, 7, 149, 46, },
++	{ 2, 1, 0, 7, 149, 46, },
++	{ 1, 1, 0, 7, 149, 63, },
++	{ 0, 1, 0, 7, 153, 46, },
++	{ 2, 1, 0, 7, 153, 46, },
++	{ 1, 1, 0, 7, 153, 63, },
++	{ 0, 1, 0, 7, 157, 46, },
++	{ 2, 1, 0, 7, 157, 46, },
++	{ 1, 1, 0, 7, 157, 63, },
++	{ 0, 1, 0, 7, 161, 46, },
++	{ 2, 1, 0, 7, 161, 46, },
++	{ 1, 1, 0, 7, 161, 63, },
++	{ 0, 1, 0, 7, 165, 46, },
++	{ 2, 1, 0, 7, 165, 46, },
++	{ 1, 1, 0, 7, 165, 63, },
++	{ 0, 1, 1, 2, 38, 46, },
++	{ 2, 1, 1, 2, 38, 46, },
++	{ 1, 1, 1, 2, 38, 46, },
++	{ 0, 1, 1, 2, 46, 46, },
++	{ 2, 1, 1, 2, 46, 46, },
++	{ 1, 1, 1, 2, 46, 46, },
++	{ 0, 1, 1, 2, 54, 46, },
++	{ 2, 1, 1, 2, 54, 46, },
++	{ 1, 1, 1, 2, 54, 46, },
++	{ 0, 1, 1, 2, 62, 46, },
++	{ 2, 1, 1, 2, 62, 46, },
++	{ 1, 1, 1, 2, 62, 46, },
++	{ 0, 1, 1, 2, 102, 46, },
++	{ 2, 1, 1, 2, 102, 46, },
++	{ 1, 1, 1, 2, 102, 46, },
++	{ 0, 1, 1, 2, 110, 46, },
++	{ 2, 1, 1, 2, 110, 46, },
++	{ 1, 1, 1, 2, 110, 46, },
++	{ 0, 1, 1, 2, 118, 46, },
++	{ 2, 1, 1, 2, 118, 46, },
++	{ 1, 1, 1, 2, 118, 46, },
++	{ 0, 1, 1, 2, 126, 46, },
++	{ 2, 1, 1, 2, 126, 46, },
++	{ 1, 1, 1, 2, 126, 46, },
++	{ 0, 1, 1, 2, 134, 46, },
++	{ 2, 1, 1, 2, 134, 46, },
++	{ 1, 1, 1, 2, 134, 46, },
++	{ 0, 1, 1, 2, 151, 46, },
++	{ 2, 1, 1, 2, 151, 46, },
++	{ 1, 1, 1, 2, 151, 63, },
++	{ 0, 1, 1, 2, 159, 46, },
++	{ 2, 1, 1, 2, 159, 46, },
++	{ 1, 1, 1, 2, 159, 63, },
++	{ 0, 1, 1, 3, 38, 46, },
++	{ 2, 1, 1, 3, 38, 46, },
++	{ 1, 1, 1, 3, 38, 46, },
++	{ 0, 1, 1, 3, 46, 46, },
++	{ 2, 1, 1, 3, 46, 46, },
++	{ 1, 1, 1, 3, 46, 46, },
++	{ 0, 1, 1, 3, 54, 46, },
++	{ 2, 1, 1, 3, 54, 46, },
++	{ 1, 1, 1, 3, 54, 46, },
++	{ 0, 1, 1, 3, 62, 46, },
++	{ 2, 1, 1, 3, 62, 46, },
++	{ 1, 1, 1, 3, 62, 46, },
++	{ 0, 1, 1, 3, 102, 46, },
++	{ 2, 1, 1, 3, 102, 46, },
++	{ 1, 1, 1, 3, 102, 46, },
++	{ 0, 1, 1, 3, 110, 46, },
++	{ 2, 1, 1, 3, 110, 46, },
++	{ 1, 1, 1, 3, 110, 46, },
++	{ 0, 1, 1, 3, 118, 46, },
++	{ 2, 1, 1, 3, 118, 46, },
++	{ 1, 1, 1, 3, 118, 46, },
++	{ 0, 1, 1, 3, 126, 46, },
++	{ 2, 1, 1, 3, 126, 46, },
++	{ 1, 1, 1, 3, 126, 46, },
++	{ 0, 1, 1, 3, 134, 46, },
++	{ 2, 1, 1, 3, 134, 46, },
++	{ 1, 1, 1, 3, 134, 46, },
++	{ 0, 1, 1, 3, 151, 46, },
++	{ 2, 1, 1, 3, 151, 46, },
++	{ 1, 1, 1, 3, 151, 63, },
++	{ 0, 1, 1, 3, 159, 46, },
++	{ 2, 1, 1, 3, 159, 46, },
++	{ 1, 1, 1, 3, 159, 63, },
++	{ 0, 1, 1, 6, 38, 46, },
++	{ 2, 1, 1, 6, 38, 46, },
++	{ 1, 1, 1, 6, 38, 46, },
++	{ 0, 1, 1, 6, 46, 46, },
++	{ 2, 1, 1, 6, 46, 46, },
++	{ 1, 1, 1, 6, 46, 46, },
++	{ 0, 1, 1, 6, 54, 46, },
++	{ 2, 1, 1, 6, 54, 46, },
++	{ 1, 1, 1, 6, 54, 46, },
++	{ 0, 1, 1, 6, 62, 46, },
++	{ 2, 1, 1, 6, 62, 46, },
++	{ 1, 1, 1, 6, 62, 46, },
++	{ 0, 1, 1, 6, 102, 46, },
++	{ 2, 1, 1, 6, 102, 46, },
++	{ 1, 1, 1, 6, 102, 46, },
++	{ 0, 1, 1, 6, 110, 46, },
++	{ 2, 1, 1, 6, 110, 46, },
++	{ 1, 1, 1, 6, 110, 46, },
++	{ 0, 1, 1, 6, 118, 46, },
++	{ 2, 1, 1, 6, 118, 46, },
++	{ 1, 1, 1, 6, 118, 46, },
++	{ 0, 1, 1, 6, 126, 46, },
++	{ 2, 1, 1, 6, 126, 46, },
++	{ 1, 1, 1, 6, 126, 46, },
++	{ 0, 1, 1, 6, 134, 46, },
++	{ 2, 1, 1, 6, 134, 46, },
++	{ 1, 1, 1, 6, 134, 46, },
++	{ 0, 1, 1, 6, 151, 46, },
++	{ 2, 1, 1, 6, 151, 46, },
++	{ 1, 1, 1, 6, 151, 63, },
++	{ 0, 1, 1, 6, 159, 46, },
++	{ 2, 1, 1, 6, 159, 46, },
++	{ 1, 1, 1, 6, 159, 63, },
++	{ 0, 1, 1, 7, 38, 46, },
++	{ 2, 1, 1, 7, 38, 46, },
++	{ 1, 1, 1, 7, 38, 46, },
++	{ 0, 1, 1, 7, 46, 46, },
++	{ 2, 1, 1, 7, 46, 46, },
++	{ 1, 1, 1, 7, 46, 46, },
++	{ 0, 1, 1, 7, 54, 46, },
++	{ 2, 1, 1, 7, 54, 46, },
++	{ 1, 1, 1, 7, 54, 46, },
++	{ 0, 1, 1, 7, 62, 46, },
++	{ 2, 1, 1, 7, 62, 46, },
++	{ 1, 1, 1, 7, 62, 46, },
++	{ 0, 1, 1, 7, 102, 46, },
++	{ 2, 1, 1, 7, 102, 46, },
++	{ 1, 1, 1, 7, 102, 46, },
++	{ 0, 1, 1, 7, 110, 46, },
++	{ 2, 1, 1, 7, 110, 46, },
++	{ 1, 1, 1, 7, 110, 46, },
++	{ 0, 1, 1, 7, 118, 46, },
++	{ 2, 1, 1, 7, 118, 46, },
++	{ 1, 1, 1, 7, 118, 46, },
++	{ 0, 1, 1, 7, 126, 46, },
++	{ 2, 1, 1, 7, 126, 46, },
++	{ 1, 1, 1, 7, 126, 46, },
++	{ 0, 1, 1, 7, 134, 46, },
++	{ 2, 1, 1, 7, 134, 46, },
++	{ 1, 1, 1, 7, 134, 46, },
++	{ 0, 1, 1, 7, 151, 46, },
++	{ 2, 1, 1, 7, 151, 46, },
++	{ 1, 1, 1, 7, 151, 63, },
++	{ 0, 1, 1, 7, 159, 46, },
++	{ 2, 1, 1, 7, 159, 46, },
++	{ 1, 1, 1, 7, 159, 63, },
++	{ 0, 1, 2, 4, 42, 46, },
++	{ 2, 1, 2, 4, 42, 46, },
++	{ 1, 1, 2, 4, 42, 46, },
++	{ 0, 1, 2, 4, 58, 46, },
++	{ 2, 1, 2, 4, 58, 46, },
++	{ 1, 1, 2, 4, 58, 46, },
++	{ 0, 1, 2, 4, 106, 46, },
++	{ 2, 1, 2, 4, 106, 46, },
++	{ 1, 1, 2, 4, 106, 46, },
++	{ 0, 1, 2, 4, 122, 46, },
++	{ 2, 1, 2, 4, 122, 46, },
++	{ 1, 1, 2, 4, 122, 46, },
++	{ 0, 1, 2, 4, 155, 46, },
++	{ 2, 1, 2, 4, 155, 46, },
++	{ 1, 1, 2, 4, 155, 63, },
++	{ 0, 1, 2, 5, 42, 46, },
++	{ 2, 1, 2, 5, 42, 46, },
++	{ 1, 1, 2, 5, 42, 46, },
++	{ 0, 1, 2, 5, 58, 46, },
++	{ 2, 1, 2, 5, 58, 46, },
++	{ 1, 1, 2, 5, 58, 46, },
++	{ 0, 1, 2, 5, 106, 46, },
++	{ 2, 1, 2, 5, 106, 46, },
++	{ 1, 1, 2, 5, 106, 46, },
++	{ 0, 1, 2, 5, 122, 46, },
++	{ 2, 1, 2, 5, 122, 46, },
++	{ 1, 1, 2, 5, 122, 46, },
++	{ 0, 1, 2, 5, 155, 46, },
++	{ 2, 1, 2, 5, 155, 46, },
++	{ 1, 1, 2, 5, 155, 63, },
++	{ 0, 1, 2, 8, 42, 46, },
++	{ 2, 1, 2, 8, 42, 46, },
++	{ 1, 1, 2, 8, 42, 46, },
++	{ 0, 1, 2, 8, 58, 46, },
++	{ 2, 1, 2, 8, 58, 46, },
++	{ 1, 1, 2, 8, 58, 46, },
++	{ 0, 1, 2, 8, 106, 46, },
++	{ 2, 1, 2, 8, 106, 46, },
++	{ 1, 1, 2, 8, 106, 46, },
++	{ 0, 1, 2, 8, 122, 46, },
++	{ 2, 1, 2, 8, 122, 46, },
++	{ 1, 1, 2, 8, 122, 46, },
++	{ 0, 1, 2, 8, 155, 46, },
++	{ 2, 1, 2, 8, 155, 46, },
++	{ 1, 1, 2, 8, 155, 63, },
++	{ 0, 1, 2, 9, 42, 46, },
++	{ 2, 1, 2, 9, 42, 46, },
++	{ 1, 1, 2, 9, 42, 46, },
++	{ 0, 1, 2, 9, 58, 46, },
++	{ 2, 1, 2, 9, 58, 46, },
++	{ 1, 1, 2, 9, 58, 46, },
++	{ 0, 1, 2, 9, 106, 46, },
++	{ 2, 1, 2, 9, 106, 46, },
++	{ 1, 1, 2, 9, 106, 46, },
++	{ 0, 1, 2, 9, 122, 46, },
++	{ 2, 1, 2, 9, 122, 46, },
++	{ 1, 1, 2, 9, 122, 46, },
++	{ 0, 1, 2, 9, 155, 46, },
++	{ 2, 1, 2, 9, 155, 46, },
++	{ 1, 1, 2, 9, 155, 63, },
++};
++
++RTW_DECL_TABLE_TXPWR_LMT(rtw8814a_txpwr_lmt_type8);
++
++static const u8
++rtw8814a_pwrtrk_5gd_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 11,
++	 11, 12, 13, 13, 14, 15, 15, 16, 17, 17, 18, 19, 19},
++	{0, 1, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10,
++	 11, 12, 12, 13, 13, 14, 15, 15, 16, 17, 17, 18},
++	{0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 17, 18, 19},
++};
++
++static const u8
++rtw8814a_pwrtrk_5gd_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
++	 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 25, 25, 25},
++	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
++	 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 25, 25},
++	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
++	 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 25, 25},
++};
++
++static const u8
++rtw8814a_pwrtrk_5gc_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 9, 10, 10,
++	 11, 12, 13, 14, 15, 15, 15, 15, 16, 16, 17, 18},
++	{0, 1, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11,
++	 12, 12, 13, 14, 15, 15, 16, 17, 17, 18, 19, 19, 20},
++	{0, 1, 1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 11, 11,
++	 12, 13, 13, 14, 14, 15, 16, 17, 18, 18, 19, 20, 20},
++};
++
++static const u8
++rtw8814a_pwrtrk_5gc_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
++	 16, 16, 17, 18, 19, 20, 21, 21, 22, 23, 24, 25, 25},
++	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
++	 17, 17, 18, 19, 20, 21, 22, 23, 24, 24, 25, 25, 25},
++	{0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
++	 16, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25, 25},
++};
++
++static const u8
++rtw8814a_pwrtrk_5gb_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 13, 13, 14, 14, 15, 15, 16, 17, 17},
++	{0, 1, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11,
++	 12, 12, 13, 14, 15, 15, 16, 17, 17, 18, 19, 19, 20},
++	{0, 1, 1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 11, 11,
++	 12, 13, 13, 14, 14, 15, 16, 17, 18, 18, 19, 20, 20},
++};
++
++static const u8
++rtw8814a_pwrtrk_5gb_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 2, 3, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14,
++	 15, 15, 16, 17, 18, 18, 19, 20, 21, 22, 23, 23, 24},
++	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
++	 17, 18, 18, 19, 20, 21, 22, 23, 24, 25, 25, 25, 25},
++	{0, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
++	 16, 16, 17, 18, 19, 20, 20, 21, 22, 23, 24, 25, 25},
++};
++
++static const u8
++rtw8814a_pwrtrk_5ga_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8,
++	 8, 9, 9, 10, 11, 11, 11, 11, 12, 12, 13, 13, 14},
++	{0, 1, 1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 11,
++	 12, 13, 14, 14, 15, 16, 16, 17, 18, 19, 19, 20, 21},
++	{0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 17, 18, 19},
++};
++
++static const u8
++rtw8814a_pwrtrk_5ga_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 2, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11, 12, 12, 13,
++	 14, 15, 16, 16, 17, 18, 19, 20, 21, 21, 22, 23, 24},
++	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
++	 17, 18, 19, 20, 21, 22, 23, 23, 24, 25, 25, 25, 25},
++	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
++	 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 25, 25},
++};
++
++static const u8 rtw8814a_pwrtrk_2gd_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7,
++	 7, 8, 8, 9, 9, 9, 10, 10, 11, 11, 12, 12, 12
++};
++
++static const u8 rtw8814a_pwrtrk_2gd_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7,
++	 8, 8, 9, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13
++};
++
++static const u8 rtw8814a_pwrtrk_2gc_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7,
++	 7, 7, 8, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12
++};
++
++static const u8 rtw8814a_pwrtrk_2gc_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7,
++	 8, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 13
++};
++
++static const u8 rtw8814a_pwrtrk_2gb_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7,
++	 7, 8, 8, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12
++};
++
++static const u8 rtw8814a_pwrtrk_2gb_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7,
++	 8, 8, 9, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13
++};
++
++static const u8 rtw8814a_pwrtrk_2ga_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7,
++	 7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 13
++};
++
++static const u8 rtw8814a_pwrtrk_2ga_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8,
++	 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
++};
++
++static const u8 rtw8814a_pwrtrk_2g_cck_d_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7,
++	 7, 8, 8, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12
++};
++
++static const u8 rtw8814a_pwrtrk_2g_cck_d_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7,
++	 8, 8, 9, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13
++};
++
++static const u8 rtw8814a_pwrtrk_2g_cck_c_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6,
++	 7, 7, 8, 8, 8, 9, 9, 10, 10, 10, 11, 11, 12
++};
++
++static const u8 rtw8814a_pwrtrk_2g_cck_c_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7,
++	 7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 13
++};
++
++static const u8 rtw8814a_pwrtrk_2g_cck_b_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6,
++	 6, 6, 7, 7, 8, 8, 8, 9, 9, 10, 10, 10, 11, 11
++};
++
++static const u8 rtw8814a_pwrtrk_2g_cck_b_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7,
++	 7, 8, 8, 9, 9, 9, 10, 10, 11, 11, 12, 12, 12
++};
++
++static const u8 rtw8814a_pwrtrk_2g_cck_a_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7,
++	 7, 8, 8, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12
++};
++
++static const u8 rtw8814a_pwrtrk_2g_cck_a_p[RTW_PWR_TRK_TBL_SZ] = {
++	 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 7,
++	 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14
++};
++
++const struct rtw_pwr_track_tbl rtw8814a_rtw_pwrtrk_tbl = {
++	.pwrtrk_5gd_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_5gd_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gd_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_5gd_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gd_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_5gd_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gd_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_5gd_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gd_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_5gd_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gd_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_5gd_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gc_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_5gc_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gc_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_5gc_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gc_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_5gc_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gc_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_5gc_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gc_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_5gc_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gc_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_5gc_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_5gb_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_5gb_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_5gb_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gb_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_5gb_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gb_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_5gb_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gb_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_5gb_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5ga_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_5ga_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5ga_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_5ga_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5ga_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_5ga_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5ga_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_5ga_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5ga_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_5ga_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5ga_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_5ga_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_2gd_n = rtw8814a_pwrtrk_2gd_n,
++	.pwrtrk_2gd_p = rtw8814a_pwrtrk_2gd_p,
++	.pwrtrk_2gc_n = rtw8814a_pwrtrk_2gc_n,
++	.pwrtrk_2gc_p = rtw8814a_pwrtrk_2gc_p,
++	.pwrtrk_2gb_n = rtw8814a_pwrtrk_2gb_n,
++	.pwrtrk_2gb_p = rtw8814a_pwrtrk_2gb_p,
++	.pwrtrk_2ga_n = rtw8814a_pwrtrk_2ga_n,
++	.pwrtrk_2ga_p = rtw8814a_pwrtrk_2ga_p,
++	.pwrtrk_2g_cckd_n = rtw8814a_pwrtrk_2g_cck_d_n,
++	.pwrtrk_2g_cckd_p = rtw8814a_pwrtrk_2g_cck_d_p,
++	.pwrtrk_2g_cckc_n = rtw8814a_pwrtrk_2g_cck_c_n,
++	.pwrtrk_2g_cckc_p = rtw8814a_pwrtrk_2g_cck_c_p,
++	.pwrtrk_2g_cckb_n = rtw8814a_pwrtrk_2g_cck_b_n,
++	.pwrtrk_2g_cckb_p = rtw8814a_pwrtrk_2g_cck_b_p,
++	.pwrtrk_2g_ccka_n = rtw8814a_pwrtrk_2g_cck_a_n,
++	.pwrtrk_2g_ccka_p = rtw8814a_pwrtrk_2g_cck_a_p,
++};
++
++static const u8
++rtw8814a_pwrtrk_type0_5gd_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++};
++
++static const u8
++rtw8814a_pwrtrk_type0_5gd_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++};
++
++static const u8
++rtw8814a_pwrtrk_type0_5gc_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++};
++
++static const u8
++rtw8814a_pwrtrk_type0_5gc_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++};
++
++static const u8
++rtw8814a_pwrtrk_type0_5gb_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++};
++
++static const u8
++rtw8814a_pwrtrk_type0_5gb_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++};
++
++static const u8
++rtw8814a_pwrtrk_type0_5ga_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++};
++
++static const u8
++rtw8814a_pwrtrk_type0_5ga_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++};
++
++static const u8 rtw8814a_pwrtrk_type0_2gd_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7,
++	 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type0_2gd_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
++	 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type0_2gc_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7,
++	 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type0_2gc_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
++	 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type0_2gb_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7,
++	 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type0_2gb_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
++	 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type0_2ga_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7,
++	 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type0_2ga_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
++	 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type0_2g_cck_d_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7,
++	 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type0_2g_cck_d_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
++	 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type0_2g_cck_c_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7,
++	 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type0_2g_cck_c_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
++	 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type0_2g_cck_b_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7,
++	 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type0_2g_cck_b_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
++	 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type0_2g_cck_a_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7,
++	 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type0_2g_cck_a_p[RTW_PWR_TRK_TBL_SZ] = {
++	 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
++	 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++const struct rtw_pwr_track_tbl rtw8814a_rtw_pwrtrk_type0_tbl = {
++	.pwrtrk_5gd_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type0_5gd_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gd_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type0_5gd_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gd_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type0_5gd_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gd_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type0_5gd_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gd_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type0_5gd_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gd_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type0_5gd_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gc_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type0_5gc_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gc_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type0_5gc_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gc_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type0_5gc_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gc_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type0_5gc_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gc_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type0_5gc_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gc_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type0_5gc_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type0_5gb_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type0_5gb_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type0_5gb_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gb_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type0_5gb_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gb_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type0_5gb_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gb_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type0_5gb_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5ga_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type0_5ga_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5ga_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type0_5ga_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5ga_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type0_5ga_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5ga_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type0_5ga_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5ga_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type0_5ga_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5ga_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type0_5ga_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_2gd_n = rtw8814a_pwrtrk_type0_2gd_n,
++	.pwrtrk_2gd_p = rtw8814a_pwrtrk_type0_2gd_p,
++	.pwrtrk_2gc_n = rtw8814a_pwrtrk_type0_2gc_n,
++	.pwrtrk_2gc_p = rtw8814a_pwrtrk_type0_2gc_p,
++	.pwrtrk_2gb_n = rtw8814a_pwrtrk_type0_2gb_n,
++	.pwrtrk_2gb_p = rtw8814a_pwrtrk_type0_2gb_p,
++	.pwrtrk_2ga_n = rtw8814a_pwrtrk_type0_2ga_n,
++	.pwrtrk_2ga_p = rtw8814a_pwrtrk_type0_2ga_p,
++	.pwrtrk_2g_cckd_n = rtw8814a_pwrtrk_type0_2g_cck_d_n,
++	.pwrtrk_2g_cckd_p = rtw8814a_pwrtrk_type0_2g_cck_d_p,
++	.pwrtrk_2g_cckc_n = rtw8814a_pwrtrk_type0_2g_cck_c_n,
++	.pwrtrk_2g_cckc_p = rtw8814a_pwrtrk_type0_2g_cck_c_p,
++	.pwrtrk_2g_cckb_n = rtw8814a_pwrtrk_type0_2g_cck_b_n,
++	.pwrtrk_2g_cckb_p = rtw8814a_pwrtrk_type0_2g_cck_b_p,
++	.pwrtrk_2g_ccka_n = rtw8814a_pwrtrk_type0_2g_cck_a_n,
++	.pwrtrk_2g_ccka_p = rtw8814a_pwrtrk_type0_2g_cck_a_p,
++};
++
++static const u8
++rtw8814a_pwrtrk_type2_5gd_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 10, 11, 11, 12, 12,
++	 12, 13, 14, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16},
++	{0, 1, 2, 3, 4, 5, 5, 6, 6, 7, 8, 9, 9, 10, 10, 10, 10,
++	 11, 11, 12, 12, 13, 14, 15, 16, 16, 16, 16, 16, 16},
++	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10, 10, 11, 11, 11, 12,
++	 12, 13, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15},
++};
++
++static const u8
++rtw8814a_pwrtrk_type2_5gd_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14,
++	 15, 16, 17, 18, 19, 20, 21, 22, 22, 22, 22, 22, 22},
++	{0, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9, 10, 11, 12, 13, 14,
++	 15, 16, 17, 18, 19, 20, 21, 22, 22, 22, 22, 22, 22},
++	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
++	 17, 18, 19, 20, 21, 22, 23, 23, 23, 23, 23, 23, 23},
++};
++
++static const u8
++rtw8814a_pwrtrk_type2_5gc_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 2, 3, 3, 4, 5, 6, 7, 7, 8, 9, 10, 10, 11, 11, 12,
++	 12, 13, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
++	{0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9, 10, 10, 11, 11, 12,
++	 13, 13, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15},
++	{0, 1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11,
++	 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14},
++};
++
++static const u8
++rtw8814a_pwrtrk_type2_5gc_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14,
++	 15, 16, 17, 18, 19, 20, 21, 21, 21, 21, 21, 21, 21},
++	{0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14,
++	 15, 16, 17, 18, 19, 20, 20, 20, 21, 21, 21, 21, 21},
++	{0, 1, 2, 3, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11, 12, 13, 14,
++	 15, 16, 17, 18, 19, 20, 21, 21, 21, 21, 21, 21, 21},
++};
++
++static const u8
++rtw8814a_pwrtrk_type2_5gb_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13,
++	 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15},
++	{0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9, 10, 10, 11, 11, 12,
++	 13, 13, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15},
++	{0, 1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11,
++	 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14},
++};
++
++static const u8
++rtw8814a_pwrtrk_type2_5gb_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15,
++	 16, 17, 18, 19, 20, 21, 21, 21, 21, 21, 21, 21, 21},
++	{0, 0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13,
++	 14, 15, 16, 17, 18, 19, 20, 20, 20, 20, 20, 20, 20},
++	{0, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14,
++	 15, 16, 17, 18, 19, 20, 21, 21, 21, 21, 21, 21, 21},
++};
++
++static const u8
++rtw8814a_pwrtrk_type2_5ga_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 9, 10, 10, 11, 11, 11,
++	 12, 13, 13, 13, 13, 14, 15, 15, 15, 15, 15, 15, 15},
++	{0, 1, 2, 3, 3, 4, 5, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12,
++	 12, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14},
++	{0, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9, 10, 11, 11, 11, 12,
++	 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13},
++};
++
++static const u8
++rtw8814a_pwrtrk_type2_5ga_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14,
++	 15, 15, 16, 17, 18, 18, 19, 19, 20, 20, 20, 20, 20},
++	{0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14,
++	 15, 16, 16, 17, 18, 19, 20, 20, 20, 20, 20, 20, 20},
++	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15,
++	 15, 16, 17, 18, 19, 19, 20, 20, 20, 20, 20, 20, 20},
++};
++
++static const u8 rtw8814a_pwrtrk_type2_2gd_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5,
++	 6, 6, 7, 8, 9, 10, 11, 11, 11, 11, 11, 11, 11
++};
++
++static const u8 rtw8814a_pwrtrk_type2_2gd_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10,
++	 10, 11, 12, 12, 13, 14, 14, 14, 14, 14, 14, 14
++};
++
++static const u8 rtw8814a_pwrtrk_type2_2gc_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 2, 3, 3, 4, 5, 6, 6, 6, 7, 7, 8, 8, 9, 10,
++	 10, 11, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14
++};
++
++static const u8 rtw8814a_pwrtrk_type2_2gc_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 3, 3, 4, 4, 4, 5, 5, 6, 7, 8, 8, 9, 10, 10,
++	 11, 12, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14
++};
++
++static const u8 rtw8814a_pwrtrk_type2_2gb_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 8,
++	 9, 9, 10, 10, 11, 11, 12, 12, 12, 13, 14, 14, 14
++};
++
++static const u8 rtw8814a_pwrtrk_type2_2gb_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 10,
++	 10, 11, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14
++};
++
++static const u8 rtw8814a_pwrtrk_type2_2ga_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 9, 9, 9,
++	 10, 11, 11, 12, 12, 13, 13, 13, 13, 13, 13, 13
++};
++
++static const u8 rtw8814a_pwrtrk_type2_2ga_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 3, 3, 4, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 10,
++	 11, 12, 12, 13, 13, 14, 14, 14, 14, 14, 14, 14
++};
++
++static const u8 rtw8814a_pwrtrk_type2_2g_cck_d_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 7, 8,
++	 9, 9, 9, 9, 9, 9, 10, 10, 11, 11, 12, 12, 12
++};
++
++static const u8 rtw8814a_pwrtrk_type2_2g_cck_d_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 1, 2, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 10, 11, 12, 12, 13, 14, 14, 14, 14, 14, 14, 14
++};
++
++static const u8 rtw8814a_pwrtrk_type2_2g_cck_c_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 6, 6, 6, 7, 8, 9, 9, 10,
++	 10, 11, 11, 11, 12, 13, 13, 13, 13, 13, 13, 13
++};
++
++static const u8 rtw8814a_pwrtrk_type2_2g_cck_c_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10,
++	 10, 11, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13
++};
++
++static const u8 rtw8814a_pwrtrk_type2_2g_cck_b_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 2, 2, 3, 3, 4, 5, 6, 6, 7, 7, 8, 8, 9, 10,
++	 10, 10, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12
++};
++
++static const u8 rtw8814a_pwrtrk_type2_2g_cck_b_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 8, 9, 9, 10,
++	 10, 11, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13
++};
++
++static const u8 rtw8814a_pwrtrk_type2_2g_cck_a_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 7, 8, 9, 9, 9, 9,
++	 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12
++};
++
++static const u8 rtw8814a_pwrtrk_type2_2g_cck_a_p[RTW_PWR_TRK_TBL_SZ] = {
++	 0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9, 9, 10, 10,
++	 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13
++};
++
++const struct rtw_pwr_track_tbl rtw8814a_rtw_pwrtrk_type2_tbl = {
++	.pwrtrk_5gd_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type2_5gd_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gd_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type2_5gd_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gd_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type2_5gd_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gd_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type2_5gd_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gd_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type2_5gd_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gd_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type2_5gd_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gc_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type2_5gc_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gc_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type2_5gc_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gc_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type2_5gc_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gc_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type2_5gc_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gc_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type2_5gc_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gc_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type2_5gc_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type2_5gb_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type2_5gb_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type2_5gb_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gb_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type2_5gb_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gb_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type2_5gb_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gb_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type2_5gb_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5ga_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type2_5ga_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5ga_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type2_5ga_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5ga_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type2_5ga_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5ga_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type2_5ga_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5ga_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type2_5ga_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5ga_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type2_5ga_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_2gd_n = rtw8814a_pwrtrk_type2_2gd_n,
++	.pwrtrk_2gd_p = rtw8814a_pwrtrk_type2_2gd_p,
++	.pwrtrk_2gc_n = rtw8814a_pwrtrk_type2_2gc_n,
++	.pwrtrk_2gc_p = rtw8814a_pwrtrk_type2_2gc_p,
++	.pwrtrk_2gb_n = rtw8814a_pwrtrk_type2_2gb_n,
++	.pwrtrk_2gb_p = rtw8814a_pwrtrk_type2_2gb_p,
++	.pwrtrk_2ga_n = rtw8814a_pwrtrk_type2_2ga_n,
++	.pwrtrk_2ga_p = rtw8814a_pwrtrk_type2_2ga_p,
++	.pwrtrk_2g_cckd_n = rtw8814a_pwrtrk_type2_2g_cck_d_n,
++	.pwrtrk_2g_cckd_p = rtw8814a_pwrtrk_type2_2g_cck_d_p,
++	.pwrtrk_2g_cckc_n = rtw8814a_pwrtrk_type2_2g_cck_c_n,
++	.pwrtrk_2g_cckc_p = rtw8814a_pwrtrk_type2_2g_cck_c_p,
++	.pwrtrk_2g_cckb_n = rtw8814a_pwrtrk_type2_2g_cck_b_n,
++	.pwrtrk_2g_cckb_p = rtw8814a_pwrtrk_type2_2g_cck_b_p,
++	.pwrtrk_2g_ccka_n = rtw8814a_pwrtrk_type2_2g_cck_a_n,
++	.pwrtrk_2g_ccka_p = rtw8814a_pwrtrk_type2_2g_cck_a_p,
++};
++
++static const u8
++rtw8814a_pwrtrk_type5_5gd_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 3, 3, 3, 4, 6, 6, 7, 7, 8, 9, 10, 11, 12, 13, 13, 14,
++	 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15},
++	{0, 4, 5, 6, 7, 7, 8, 7, 8, 10, 11, 12, 12, 13, 13, 14, 14,
++	 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
++	{0, 5, 5, 6, 7, 8, 9, 9, 10, 11, 12, 13, 13, 14, 15, 15, 16,
++	 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
++};
++
++static const u8
++rtw8814a_pwrtrk_type5_5gd_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 9, 10, 10, 11, 12,
++	 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
++	{0, 0, 0, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 11, 12,
++	 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14},
++	{0, 0, 0, 1, 1, 2, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 13,
++	 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14},
++};
++
++static const u8
++rtw8814a_pwrtrk_type5_5gc_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 1, 2, 3, 3, 4, 6, 7, 7, 8, 9, 9, 9, 10, 10, 10,
++	 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12},
++	{0, 1, 2, 3, 3, 7, 7, 8, 8, 9, 11, 12, 12, 13, 14, 14, 15,
++	 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
++	{0, 0, 1, 2, 3, 4, 5, 7, 8, 8, 10, 11, 12, 12, 13, 13, 14,
++	 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
++};
++
++static const u8
++rtw8814a_pwrtrk_type5_5gc_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 0, 1, 1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 11, 11,
++	 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13},
++	{0, 0, 1, 2, 3, 3, 5, 5, 6, 8, 8, 9, 10, 11, 13, 13, 13,
++	 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14},
++	{0, 0, 1, 2, 3, 4, 4, 5, 7, 8, 9, 9, 10, 11, 12, 12, 12,
++	 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14},
++};
++
++static const u8
++rtw8814a_pwrtrk_type5_5gb_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 1, 2, 2, 2, 3, 4, 5, 6, 7, 9, 10, 10, 10, 10, 10,
++	 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12},
++	{0, 1, 2, 3, 3, 7, 7, 8, 8, 9, 11, 12, 12, 13, 14, 14, 15,
++	 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
++	{0, 0, 1, 2, 3, 4, 5, 7, 8, 8, 10, 11, 12, 12, 13, 13, 14,
++	 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
++};
++
++static const u8
++rtw8814a_pwrtrk_type5_5gb_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 1, 1, 2, 2, 4, 5, 6, 6, 7, 8, 9, 10, 11, 11, 11,
++	 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++	{0, 0, 0, 2, 3, 4, 5, 6, 8, 8, 9, 9, 11, 12, 13, 13, 13,
++	 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
++	{0, 0, 0, 1, 2, 3, 3, 4, 6, 7, 8, 9, 10, 11, 12, 12, 12,
++	 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14},
++};
++
++static const u8
++rtw8814a_pwrtrk_type5_5ga_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 0, 1, 2, 3, 3, 3, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12},
++	{0, 2, 3, 4, 5, 7, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 17,
++	 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
++	{0, 1, 2, 3, 3, 4, 6, 7, 8, 8, 10, 11, 11, 12, 13, 13, 13,
++	 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14},
++};
++
++static const u8
++rtw8814a_pwrtrk_type5_5ga_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 1, 3, 3, 3, 5, 5, 6, 6, 8, 8, 9, 10, 11, 11, 11,
++	 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++	{0, 1, 2, 3, 4, 4, 5, 6, 7, 8, 8, 9, 11, 12, 13, 14, 15,
++	 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
++	{0, 0, 1, 3, 3, 4, 5, 5, 6, 7, 7, 8, 10, 10, 11, 11, 11,
++	 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13},
++};
++
++static const u8 rtw8814a_pwrtrk_type5_2gd_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 7, 8, 9, 9, 9,
++	 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11
++};
++
++static const u8 rtw8814a_pwrtrk_type5_2gd_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8,
++	 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10
++};
++
++static const u8 rtw8814a_pwrtrk_type5_2gc_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 10,
++	 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12
++};
++
++static const u8 rtw8814a_pwrtrk_type5_2gc_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 8, 8, 9, 9, 9,
++	 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11
++};
++
++static const u8 rtw8814a_pwrtrk_type5_2gb_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 10, 10, 10,
++	 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12
++};
++
++static const u8 rtw8814a_pwrtrk_type5_2gb_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 8, 9, 9, 9, 9,
++	 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11
++};
++
++static const u8 rtw8814a_pwrtrk_type5_2ga_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 10, 10, 10,
++	 10, 11, 11, 11, 11, 111, 12, 12, 12, 12, 12, 12, 12
++};
++
++static const u8 rtw8814a_pwrtrk_type5_2ga_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7, 8, 8, 9, 9, 9,
++	 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11
++};
++
++static const u8 rtw8814a_pwrtrk_type5_2g_cck_d_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 8, 9, 9, 9, 9,
++	 10, 10, 10, 10, 10, 11, 11, 10, 11, 11, 11, 11
++};
++
++static const u8 rtw8814a_pwrtrk_type5_2g_cck_d_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 8,
++	 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10
++};
++
++static const u8 rtw8814a_pwrtrk_type5_2g_cck_c_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 8, 8, 9, 10, 10, 10,
++	 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12
++};
++
++static const u8 rtw8814a_pwrtrk_type5_2g_cck_c_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 8,
++	 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
++};
++
++static const u8 rtw8814a_pwrtrk_type5_2g_cck_b_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 2, 3, 4, 4, 5, 6, 6, 6, 7, 7, 8, 8, 9, 10, 10, 10,
++	 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11
++};
++
++static const u8 rtw8814a_pwrtrk_type5_2g_cck_b_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 8,
++	 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
++};
++
++static const u8 rtw8814a_pwrtrk_type5_2g_cck_a_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 9, 9, 9, 10,
++	 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
++};
++
++static const u8 rtw8814a_pwrtrk_type5_2g_cck_a_p[RTW_PWR_TRK_TBL_SZ] = {
++	 0, 1, 1, 2, 2, 2, 3, 4, 4, 5, 6, 7, 8, 8, 9, 9, 9,
++	 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10
++};
++
++const struct rtw_pwr_track_tbl rtw8814a_rtw_pwrtrk_type5_tbl = {
++	.pwrtrk_5gd_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type5_5gd_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gd_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type5_5gd_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gd_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type5_5gd_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gd_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type5_5gd_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gd_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type5_5gd_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gd_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type5_5gd_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gc_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type5_5gc_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gc_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type5_5gc_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gc_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type5_5gc_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gc_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type5_5gc_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gc_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type5_5gc_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gc_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type5_5gc_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type5_5gb_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type5_5gb_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type5_5gb_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gb_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type5_5gb_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gb_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type5_5gb_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gb_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type5_5gb_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5ga_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type5_5ga_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5ga_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type5_5ga_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5ga_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type5_5ga_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5ga_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type5_5ga_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5ga_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type5_5ga_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5ga_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type5_5ga_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_2gd_n = rtw8814a_pwrtrk_type5_2gd_n,
++	.pwrtrk_2gd_p = rtw8814a_pwrtrk_type5_2gd_p,
++	.pwrtrk_2gc_n = rtw8814a_pwrtrk_type5_2gc_n,
++	.pwrtrk_2gc_p = rtw8814a_pwrtrk_type5_2gc_p,
++	.pwrtrk_2gb_n = rtw8814a_pwrtrk_type5_2gb_n,
++	.pwrtrk_2gb_p = rtw8814a_pwrtrk_type5_2gb_p,
++	.pwrtrk_2ga_n = rtw8814a_pwrtrk_type5_2ga_n,
++	.pwrtrk_2ga_p = rtw8814a_pwrtrk_type5_2ga_p,
++	.pwrtrk_2g_cckd_n = rtw8814a_pwrtrk_type5_2g_cck_d_n,
++	.pwrtrk_2g_cckd_p = rtw8814a_pwrtrk_type5_2g_cck_d_p,
++	.pwrtrk_2g_cckc_n = rtw8814a_pwrtrk_type5_2g_cck_c_n,
++	.pwrtrk_2g_cckc_p = rtw8814a_pwrtrk_type5_2g_cck_c_p,
++	.pwrtrk_2g_cckb_n = rtw8814a_pwrtrk_type5_2g_cck_b_n,
++	.pwrtrk_2g_cckb_p = rtw8814a_pwrtrk_type5_2g_cck_b_p,
++	.pwrtrk_2g_ccka_n = rtw8814a_pwrtrk_type5_2g_cck_a_n,
++	.pwrtrk_2g_ccka_p = rtw8814a_pwrtrk_type5_2g_cck_a_p,
++};
++
++static const u8
++rtw8814a_pwrtrk_type7_5gd_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++};
++
++static const u8
++rtw8814a_pwrtrk_type7_5gd_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++};
++
++static const u8
++rtw8814a_pwrtrk_type7_5gc_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++};
++
++static const u8
++rtw8814a_pwrtrk_type7_5gc_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++};
++
++static const u8
++rtw8814a_pwrtrk_type7_5gb_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++};
++
++static const u8
++rtw8814a_pwrtrk_type7_5gb_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++};
++
++static const u8
++rtw8814a_pwrtrk_type7_5ga_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++	{0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
++	 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
++};
++
++static const u8
++rtw8814a_pwrtrk_type7_5ga_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++	{0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++};
++
++static const u8 rtw8814a_pwrtrk_type7_2gd_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7,
++	 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type7_2gd_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
++	 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type7_2gc_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7,
++	 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type7_2gc_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
++	 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type7_2gb_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7,
++	 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type7_2gb_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
++	 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type7_2ga_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7,
++	 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type7_2ga_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
++	 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type7_2g_cck_d_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7,
++	 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type7_2g_cck_d_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
++	 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type7_2g_cck_c_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7,
++	 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type7_2g_cck_c_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
++	 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type7_2g_cck_b_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7,
++	 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type7_2g_cck_b_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
++	 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type7_2g_cck_a_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7,
++	 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++static const u8 rtw8814a_pwrtrk_type7_2g_cck_a_p[RTW_PWR_TRK_TBL_SZ] = {
++	 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
++	 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
++};
++
++const struct rtw_pwr_track_tbl rtw8814a_rtw_pwrtrk_type7_tbl = {
++	.pwrtrk_5gd_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type7_5gd_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gd_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type7_5gd_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gd_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type7_5gd_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gd_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type7_5gd_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gd_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type7_5gd_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gd_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type7_5gd_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gc_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type7_5gc_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gc_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type7_5gc_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gc_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type7_5gc_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gc_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type7_5gc_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gc_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type7_5gc_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gc_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type7_5gc_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type7_5gb_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type7_5gb_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type7_5gb_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gb_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type7_5gb_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gb_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type7_5gb_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gb_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type7_5gb_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5ga_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type7_5ga_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5ga_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type7_5ga_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5ga_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type7_5ga_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5ga_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type7_5ga_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5ga_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type7_5ga_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5ga_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type7_5ga_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_2gd_n = rtw8814a_pwrtrk_type7_2gd_n,
++	.pwrtrk_2gd_p = rtw8814a_pwrtrk_type7_2gd_p,
++	.pwrtrk_2gc_n = rtw8814a_pwrtrk_type7_2gc_n,
++	.pwrtrk_2gc_p = rtw8814a_pwrtrk_type7_2gc_p,
++	.pwrtrk_2gb_n = rtw8814a_pwrtrk_type7_2gb_n,
++	.pwrtrk_2gb_p = rtw8814a_pwrtrk_type7_2gb_p,
++	.pwrtrk_2ga_n = rtw8814a_pwrtrk_type7_2ga_n,
++	.pwrtrk_2ga_p = rtw8814a_pwrtrk_type7_2ga_p,
++	.pwrtrk_2g_cckd_n = rtw8814a_pwrtrk_type7_2g_cck_d_n,
++	.pwrtrk_2g_cckd_p = rtw8814a_pwrtrk_type7_2g_cck_d_p,
++	.pwrtrk_2g_cckc_n = rtw8814a_pwrtrk_type7_2g_cck_c_n,
++	.pwrtrk_2g_cckc_p = rtw8814a_pwrtrk_type7_2g_cck_c_p,
++	.pwrtrk_2g_cckb_n = rtw8814a_pwrtrk_type7_2g_cck_b_n,
++	.pwrtrk_2g_cckb_p = rtw8814a_pwrtrk_type7_2g_cck_b_p,
++	.pwrtrk_2g_ccka_n = rtw8814a_pwrtrk_type7_2g_cck_a_n,
++	.pwrtrk_2g_ccka_p = rtw8814a_pwrtrk_type7_2g_cck_a_p,
++};
++
++static const u8
++rtw8814a_pwrtrk_type8_5gd_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 2, 3, 4, 4, 6, 7, 7, 8, 8, 9, 10, 10, 11, 11, 12,
++	 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
++	{0, 1, 2, 3, 4, 4, 6, 7, 7, 8, 9, 9, 10, 10, 11, 11, 12,
++	 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
++	{0, 1, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 8, 9, 10, 10,
++	 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
++};
++
++static const u8
++rtw8814a_pwrtrk_type8_5gd_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 2, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 14,
++	 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
++	{0, 0, 1, 2, 3, 5, 5, 6, 6, 7, 8, 9, 10, 11, 12, 13, 14,
++	 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
++	{0, 0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 12, 13, 14,
++	 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
++};
++
++static const u8
++rtw8814a_pwrtrk_type8_5gc_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 2, 4, 4, 5, 6, 7, 7, 8, 8, 9, 9, 10, 11, 11, 12,
++	 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
++	{0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 9, 10, 10, 10, 11, 11,
++	 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
++	{0, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 8, 9, 10, 10, 11, 11,
++	 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++};
++
++static const u8
++rtw8814a_pwrtrk_type8_5gc_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 2, 4, 4, 5, 6, 7, 7, 8, 9, 10, 11, 12, 13, 14,
++	 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
++	{0, 0, 1, 3, 4, 4, 5, 6, 7, 7, 8, 10, 11, 12, 13, 14,
++	 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
++	{0, 0, 1, 2, 4, 5, 5, 6, 6, 7, 7, 9, 10, 11, 12, 13, 14,
++	 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
++};
++
++static const u8
++rtw8814a_pwrtrk_type8_5gb_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 8, 9, 9, 10, 11, 11,
++	 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++	{0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 9, 10, 10, 10, 11, 11,
++	 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
++	{0, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 8, 9, 10, 10, 11, 11,
++	 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++};
++
++static const u8
++rtw8814a_pwrtrk_type8_5gb_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
++	 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
++	{0, 0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 10, 11, 11, 13, 13,
++	 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
++	{0, 0, 1, 2, 3, 4, 4, 5, 6, 7, 8, 10, 10, 11, 13, 13,
++	 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
++};
++
++static const u8
++rtw8814a_pwrtrk_type8_5ga_n[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11,
++	 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
++	{0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9, 10, 10, 10, 11, 11,
++	 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
++	{0, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9, 10, 10, 10, 11, 12,
++	 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
++};
++
++static const u8
++rtw8814a_pwrtrk_type8_5ga_p[RTW_PWR_TRK_5G_NUM][RTW_PWR_TRK_TBL_SZ] = {
++	{0, 0, 1, 2, 3, 3, 4, 5, 6, 7, 7, 9, 10, 11, 12, 13, 14,
++	 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
++	{0, 0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 13,
++	 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
++	{0, 0, 1, 2, 3, 3, 4, 4, 6, 7, 7, 9, 10, 11, 12, 13, 14,
++	 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
++};
++
++static const u8 rtw8814a_pwrtrk_type8_2gd_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5,
++	 6, 6, 7, 8, 9, 10, 11, 11, 11, 11, 11, 11, 11
++};
++
++static const u8 rtw8814a_pwrtrk_type8_2gd_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10,
++	 10, 11, 12, 12, 13, 14, 14, 14, 14, 14, 14, 14
++};
++
++static const u8 rtw8814a_pwrtrk_type8_2gc_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 2, 3, 3, 4, 5, 6, 6, 6, 7, 7, 8, 8, 9, 10,
++	 10, 11, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14
++};
++
++static const u8 rtw8814a_pwrtrk_type8_2gc_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 3, 3, 4, 4, 4, 5, 5, 6, 7, 8, 8, 9, 10, 10,
++	 11, 12, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14
++};
++
++static const u8 rtw8814a_pwrtrk_type8_2gb_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 8,
++	 9, 9, 10, 10, 11, 11, 12, 12, 12, 13, 14, 14, 14
++};
++
++static const u8 rtw8814a_pwrtrk_type8_2gb_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 10,
++	 10, 11, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14
++};
++
++static const u8 rtw8814a_pwrtrk_type8_2ga_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 9, 9, 9,
++	 10, 11, 11, 12, 12, 13, 13, 13, 13, 13, 13, 13
++};
++
++static const u8 rtw8814a_pwrtrk_type8_2ga_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 3, 3, 4, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 10,
++	 11, 12, 12, 13, 13, 14, 14, 14, 14, 14, 14, 14
++};
++
++static const u8 rtw8814a_pwrtrk_type8_2g_cck_d_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 7, 8,
++	 9, 9, 9, 9, 9, 9, 10, 10, 11, 11, 12, 12, 12
++};
++
++static const u8 rtw8814a_pwrtrk_type8_2g_cck_d_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 1, 2, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10,
++	 10, 11, 12, 12, 13, 14, 14, 14, 14, 14, 14, 14
++};
++
++static const u8 rtw8814a_pwrtrk_type8_2g_cck_c_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 6, 6, 6, 7, 8, 9, 9, 10,
++	 10, 11, 11, 11, 12, 13, 13, 13, 13, 13, 13, 13
++};
++
++static const u8 rtw8814a_pwrtrk_type8_2g_cck_c_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 0, 1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10,
++	 10, 11, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13
++};
++
++static const u8 rtw8814a_pwrtrk_type8_2g_cck_b_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 2, 2, 2, 3, 3, 4, 5, 6, 6, 7, 7, 8, 8, 9, 10,
++	 10, 10, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12
++};
++
++static const u8 rtw8814a_pwrtrk_type8_2g_cck_b_p[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 8, 9, 9, 10,
++	 10, 11, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13
++};
++
++static const u8 rtw8814a_pwrtrk_type8_2g_cck_a_n[RTW_PWR_TRK_TBL_SZ] = {
++	0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 7, 8, 9, 9, 9, 9,
++	 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12
++};
++
++static const u8 rtw8814a_pwrtrk_type8_2g_cck_a_p[RTW_PWR_TRK_TBL_SZ] = {
++	 0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9, 9, 10, 10,
++	 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13
++};
++
++const struct rtw_pwr_track_tbl rtw8814a_rtw_pwrtrk_type8_tbl = {
++	.pwrtrk_5gd_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type8_5gd_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gd_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type8_5gd_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gd_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type8_5gd_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gd_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type8_5gd_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gd_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type8_5gd_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gd_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type8_5gd_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gc_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type8_5gc_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gc_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type8_5gc_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gc_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type8_5gc_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gc_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type8_5gc_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gc_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type8_5gc_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gc_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type8_5gc_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type8_5gb_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type8_5gb_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gb_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type8_5gb_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5gb_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type8_5gb_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5gb_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type8_5gb_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5gb_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type8_5gb_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5ga_n[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type8_5ga_n[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5ga_n[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type8_5ga_n[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5ga_n[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type8_5ga_n[RTW_PWR_TRK_5G_3],
++	.pwrtrk_5ga_p[RTW_PWR_TRK_5G_1] = rtw8814a_pwrtrk_type8_5ga_p[RTW_PWR_TRK_5G_1],
++	.pwrtrk_5ga_p[RTW_PWR_TRK_5G_2] = rtw8814a_pwrtrk_type8_5ga_p[RTW_PWR_TRK_5G_2],
++	.pwrtrk_5ga_p[RTW_PWR_TRK_5G_3] = rtw8814a_pwrtrk_type8_5ga_p[RTW_PWR_TRK_5G_3],
++	.pwrtrk_2gd_n = rtw8814a_pwrtrk_type8_2gd_n,
++	.pwrtrk_2gd_p = rtw8814a_pwrtrk_type8_2gd_p,
++	.pwrtrk_2gc_n = rtw8814a_pwrtrk_type8_2gc_n,
++	.pwrtrk_2gc_p = rtw8814a_pwrtrk_type8_2gc_p,
++	.pwrtrk_2gb_n = rtw8814a_pwrtrk_type8_2gb_n,
++	.pwrtrk_2gb_p = rtw8814a_pwrtrk_type8_2gb_p,
++	.pwrtrk_2ga_n = rtw8814a_pwrtrk_type8_2ga_n,
++	.pwrtrk_2ga_p = rtw8814a_pwrtrk_type8_2ga_p,
++	.pwrtrk_2g_cckd_n = rtw8814a_pwrtrk_type8_2g_cck_d_n,
++	.pwrtrk_2g_cckd_p = rtw8814a_pwrtrk_type8_2g_cck_d_p,
++	.pwrtrk_2g_cckc_n = rtw8814a_pwrtrk_type8_2g_cck_c_n,
++	.pwrtrk_2g_cckc_p = rtw8814a_pwrtrk_type8_2g_cck_c_p,
++	.pwrtrk_2g_cckb_n = rtw8814a_pwrtrk_type8_2g_cck_b_n,
++	.pwrtrk_2g_cckb_p = rtw8814a_pwrtrk_type8_2g_cck_b_p,
++	.pwrtrk_2g_ccka_n = rtw8814a_pwrtrk_type8_2g_cck_a_n,
++	.pwrtrk_2g_ccka_p = rtw8814a_pwrtrk_type8_2g_cck_a_p,
++};
++
++static const struct rtw_pwr_seq_cmd init_power_on_8814a[] = {
++	{0x10c2,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_USB_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(1), BIT(1)},
++	{0xFFFF,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 0,
++	 RTW_PWR_CMD_END, 0, 0},
++};
++
++static const struct rtw_pwr_seq_cmd trans_carddis_to_cardemu_8814a[] = {
++	{0x0012,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(6), BIT(6)},
++	{0x0015,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(5), 0},
++	{0x0015,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(6), 0},
++	{0x0023,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(4), 0},
++	{0x0046,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, 0xFF, 0x00},
++	{0x0062,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, 0xFF, 0x00},
++	{0x0005,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_PCI_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(2), 0},
++	{0x0005,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(3), 0},
++	{0x0301,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_PCI_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, 0xFF, 0},
++	{0x0071,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_PCI_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(2), 0},
++	{0xFFFF,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 0,
++	 RTW_PWR_CMD_END, 0, 0},
++};
++
++static const struct rtw_pwr_seq_cmd trans_cardemu_to_act_8814a[] = {
++	{0x0005,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(2), 0},
++	{0x0006,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_POLLING, BIT(1), BIT(1)},
++	{0x0005,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(3), 0},
++	{0x00F0,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(7), 0},
++	{0x0081,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, 0x30, 0x20},
++	{0x0005,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(0), BIT(0)},
++	{0x0005,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_POLLING, BIT(0), 0},
++	{0xFFFF,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 0,
++	 RTW_PWR_CMD_END, 0, 0},
++};
++
++static const struct rtw_pwr_seq_cmd trans_act_to_cardemu_8814a[] = {
++	{0x0c00,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, 0xFF, 0x04},
++	{0x0e00,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, 0xFF, 0x04},
++	{0x1002,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(0), 0},
++	{0x0002,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_DELAY, 1, RTW_PWR_DELAY_US},
++	{0x1002,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_PCI_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(1), 0},
++	{0x001F,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, 0xFF, 0},
++	{0x0007,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, 0xFF, 0x28},
++	{0x0008,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_USB_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, 0x02, 0},
++	{0x0066,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_USB_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(7), 0},
++	{0x0041,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_USB_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(4), 0},
++	{0x0042,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_USB_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(1), 0},
++	{0x004e,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_USB_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(5), BIT(5)},
++	{0x0041,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_USB_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(0), 0},
++	{0x0005,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(1), BIT(1)},
++	{0x0005,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_POLLING, BIT(1), 0},
++	{0xFFFF,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 0,
++	 RTW_PWR_CMD_END, 0, 0},
++};
++
++static const struct rtw_pwr_seq_cmd trans_cardemu_to_carddis_8814a[] = {
++	{0x0003,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(2), 0},
++	{0x0080,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, 0xFF, 0x01},
++	{0x0081,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, 0xFF, 0x30},
++	{0x0045,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, 0xFF, 0x00},
++	{0x0046,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, 0xFF, 0xff},
++	{0x0047,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, 0xFF, 0},
++	{0x0015,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(6), BIT(6)},
++	{0x0015,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(5), BIT(5)},
++	{0x0012,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(6), 0},
++	{0x0023,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(4), BIT(4)},
++	{0x0008,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(1), 0},
++	{0x0007,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, 0xFF, 0x20},
++	{0x001f,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(1), 0},
++	{0x0020,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(1), 0},
++	{0x0021,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(1), 0},
++	{0x0076,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(1), 0},
++	{0x0091,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, 0xA0, 0xA0},
++	{0x0070,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(3), BIT(3)},
++	{0x0005,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 RTW_PWR_ADDR_MAC,
++	 RTW_PWR_CMD_WRITE, BIT(3), BIT(3)},
++	{0xFFFF,
++	 RTW_PWR_CUT_ALL_MSK,
++	 RTW_PWR_INTF_ALL_MSK,
++	 0,
++	 RTW_PWR_CMD_END, 0, 0},
++};
++
++const struct rtw_pwr_seq_cmd * const card_enable_flow_8814a[] = {
++	init_power_on_8814a,
++	trans_carddis_to_cardemu_8814a,
++	trans_cardemu_to_act_8814a,
++	NULL
++};
++
++const struct rtw_pwr_seq_cmd * const card_disable_flow_8814a[] = {
++	trans_act_to_cardemu_8814a,
++	trans_cardemu_to_carddis_8814a,
++	NULL
++};
+--- /dev/null
++++ b/drivers/net/wireless/realtek/rtw88/rtw8814a_table.h
+@@ -0,0 +1,40 @@
++/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
++/* Copyright(c) 2025  Realtek Corporation
++ */
++
++#ifndef __RTW8814A_TABLE_H__
++#define __RTW8814A_TABLE_H__
++
++extern const struct rtw_table rtw8814a_mac_tbl;
++extern const struct rtw_table rtw8814a_agc_tbl;
++extern const struct rtw_table rtw8814a_bb_tbl;
++extern const struct rtw_table rtw8814a_bb_pg_tbl;
++extern const struct rtw_table rtw8814a_bb_pg_type0_tbl;
++extern const struct rtw_table rtw8814a_bb_pg_type2_tbl;
++extern const struct rtw_table rtw8814a_bb_pg_type3_tbl;
++extern const struct rtw_table rtw8814a_bb_pg_type4_tbl;
++extern const struct rtw_table rtw8814a_bb_pg_type5_tbl;
++extern const struct rtw_table rtw8814a_bb_pg_type7_tbl;
++extern const struct rtw_table rtw8814a_bb_pg_type8_tbl;
++extern const struct rtw_table rtw8814a_rf_a_tbl;
++extern const struct rtw_table rtw8814a_rf_b_tbl;
++extern const struct rtw_table rtw8814a_rf_c_tbl;
++extern const struct rtw_table rtw8814a_rf_d_tbl;
++extern const struct rtw_table rtw8814a_txpwr_lmt_tbl;
++extern const struct rtw_table rtw8814a_txpwr_lmt_type0_tbl;
++extern const struct rtw_table rtw8814a_txpwr_lmt_type1_tbl;
++extern const struct rtw_table rtw8814a_txpwr_lmt_type2_tbl;
++extern const struct rtw_table rtw8814a_txpwr_lmt_type3_tbl;
++extern const struct rtw_table rtw8814a_txpwr_lmt_type5_tbl;
++extern const struct rtw_table rtw8814a_txpwr_lmt_type7_tbl;
++extern const struct rtw_table rtw8814a_txpwr_lmt_type8_tbl;
++extern const struct rtw_pwr_track_tbl rtw8814a_rtw_pwrtrk_tbl;
++extern const struct rtw_pwr_track_tbl rtw8814a_rtw_pwrtrk_type0_tbl;
++extern const struct rtw_pwr_track_tbl rtw8814a_rtw_pwrtrk_type2_tbl;
++extern const struct rtw_pwr_track_tbl rtw8814a_rtw_pwrtrk_type5_tbl;
++extern const struct rtw_pwr_track_tbl rtw8814a_rtw_pwrtrk_type7_tbl;
++extern const struct rtw_pwr_track_tbl rtw8814a_rtw_pwrtrk_type8_tbl;
++extern const struct rtw_pwr_seq_cmd * const card_disable_flow_8814a[];
++extern const struct rtw_pwr_seq_cmd * const card_enable_flow_8814a[];
++
++#endif
diff --git a/package/kernel/mac80211/patches/rtl/088-v6.15-wifi-rtw88-Add-rtw8814a.-c-h.patch b/package/kernel/mac80211/patches/rtl/088-v6.15-wifi-rtw88-Add-rtw8814a.-c-h.patch
new file mode 100644
index 0000000000..3d8ccd8d28
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/088-v6.15-wifi-rtw88-Add-rtw8814a.-c-h.patch
@@ -0,0 +1,2343 @@
+From 1a75457846424b77978d0ba1feb836913ed60637 Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Fri, 7 Mar 2025 02:24:40 +0200
+Subject: [PATCH] wifi: rtw88: Add rtw8814a.{c,h}
+
+These contain all the logic for the RTL8814A chip.
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/5d3b8c03-63c1-4f20-860a-89d424badad8@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/rtw8814a.c | 2257 +++++++++++++++++
+ drivers/net/wireless/realtek/rtw88/rtw8814a.h |   62 +
+ 2 files changed, 2319 insertions(+)
+ create mode 100644 drivers/net/wireless/realtek/rtw88/rtw8814a.c
+ create mode 100644 drivers/net/wireless/realtek/rtw88/rtw8814a.h
+
+--- /dev/null
++++ b/drivers/net/wireless/realtek/rtw88/rtw8814a.c
+@@ -0,0 +1,2257 @@
++// SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause
++/* Copyright(c) 2025  Realtek Corporation
++ */
++
++#include <linux/usb.h>
++#include "main.h"
++#include "coex.h"
++#include "tx.h"
++#include "phy.h"
++#include "rtw8814a.h"
++#include "rtw8814a_table.h"
++#include "rtw88xxa.h"
++#include "reg.h"
++#include "debug.h"
++#include "efuse.h"
++#include "regd.h"
++#include "usb.h"
++
++static void rtw8814a_efuse_grant(struct rtw_dev *rtwdev, bool on)
++{
++	if (on) {
++		rtw_write8(rtwdev, REG_EFUSE_ACCESS, EFUSE_ACCESS_ON);
++
++		rtw_write16_set(rtwdev, REG_SYS_FUNC_EN, BIT_FEN_ELDR);
++		rtw_write16_set(rtwdev, REG_SYS_CLKR,
++				BIT_LOADER_CLK_EN | BIT_ANA8M);
++	} else {
++		rtw_write8(rtwdev, REG_EFUSE_ACCESS, EFUSE_ACCESS_OFF);
++	}
++}
++
++static void rtw8814a_read_rfe_type(struct rtw_dev *rtwdev)
++{
++	struct rtw_efuse *efuse = &rtwdev->efuse;
++
++	if (!(efuse->rfe_option & BIT(7)))
++		return;
++
++	if (rtw_hci_type(rtwdev) == RTW_HCI_TYPE_PCIE)
++		efuse->rfe_option = 0;
++	else if (rtw_hci_type(rtwdev) == RTW_HCI_TYPE_USB)
++		efuse->rfe_option = 1;
++}
++
++static void rtw8814a_read_amplifier_type(struct rtw_dev *rtwdev)
++{
++	struct rtw_efuse *efuse = &rtwdev->efuse;
++
++	switch (efuse->rfe_option) {
++	case 1:
++		/* Internal 2G */
++		efuse->pa_type_2g = 0;
++		efuse->lna_type_2g = 0;
++		/* External 5G */
++		efuse->pa_type_5g = BIT(0);
++		efuse->lna_type_5g = BIT(3);
++		break;
++	case 2 ... 5:
++		/* External everything */
++		efuse->pa_type_2g = BIT(4);
++		efuse->lna_type_2g = BIT(3);
++		efuse->pa_type_5g = BIT(0);
++		efuse->lna_type_5g = BIT(3);
++		break;
++	case 6:
++		efuse->lna_type_5g = BIT(3);
++		break;
++	default:
++		break;
++	}
++}
++
++static void rtw8814a_read_rf_type(struct rtw_dev *rtwdev,
++				  struct rtw8814a_efuse *map)
++{
++	struct rtw_usb *rtwusb = rtw_get_usb_priv(rtwdev);
++	struct rtw_hal *hal = &rtwdev->hal;
++
++	switch (map->trx_antenna_option) {
++	case 0xff: /* 4T4R */
++	case 0xee: /* 3T3R */
++		if (rtw_hci_type(rtwdev) == RTW_HCI_TYPE_USB &&
++		    rtwusb->udev->speed != USB_SPEED_SUPER)
++			hal->rf_type = RF_2T2R;
++		else
++			hal->rf_type = RF_3T3R;
++
++		break;
++	case 0x66: /* 2T2R */
++	case 0x6f: /* 2T4R */
++	default:
++		hal->rf_type = RF_2T2R;
++		break;
++	}
++
++	hal->rf_path_num = 4;
++	hal->rf_phy_num = 4;
++
++	if (hal->rf_type == RF_3T3R) {
++		hal->antenna_rx = BB_PATH_ABC;
++		hal->antenna_tx = BB_PATH_ABC;
++	} else {
++		hal->antenna_rx = BB_PATH_AB;
++		hal->antenna_tx = BB_PATH_AB;
++	}
++}
++
++static void rtw8814a_init_hwcap(struct rtw_dev *rtwdev)
++{
++	struct rtw_efuse *efuse = &rtwdev->efuse;
++	struct rtw_hal *hal = &rtwdev->hal;
++
++	efuse->hw_cap.bw = BIT(RTW_CHANNEL_WIDTH_20) |
++			   BIT(RTW_CHANNEL_WIDTH_40) |
++			   BIT(RTW_CHANNEL_WIDTH_80);
++	efuse->hw_cap.ptcl = EFUSE_HW_CAP_PTCL_VHT;
++
++	if (hal->rf_type == RF_3T3R)
++		efuse->hw_cap.nss = 3;
++	else
++		efuse->hw_cap.nss = 2;
++
++	rtw_dbg(rtwdev, RTW_DBG_EFUSE,
++		"hw cap: hci=0x%02x, bw=0x%02x, ptcl=0x%02x, ant_num=%d, nss=%d\n",
++		efuse->hw_cap.hci, efuse->hw_cap.bw, efuse->hw_cap.ptcl,
++		efuse->hw_cap.ant_num, efuse->hw_cap.nss);
++}
++
++static int rtw8814a_read_efuse(struct rtw_dev *rtwdev, u8 *log_map)
++{
++	struct rtw_efuse *efuse = &rtwdev->efuse;
++	struct rtw8814a_efuse *map;
++	int i;
++
++	if (rtw_dbg_is_enabled(rtwdev, RTW_DBG_EFUSE))
++		print_hex_dump(KERN_INFO, "", DUMP_PREFIX_OFFSET, 16, 1,
++			       log_map, rtwdev->chip->log_efuse_size, true);
++
++	map = (struct rtw8814a_efuse *)log_map;
++
++	efuse->usb_mode_switch = u8_get_bits(map->usb_mode, BIT(4));
++	efuse->rfe_option = map->rfe_option;
++	efuse->rf_board_option = map->rf_board_option;
++	efuse->crystal_cap = map->xtal_k;
++	efuse->channel_plan = map->channel_plan;
++	efuse->country_code[0] = map->country_code[0];
++	efuse->country_code[1] = map->country_code[1];
++	efuse->bt_setting = map->rf_bt_setting;
++	efuse->regd = map->rf_board_option & 0x7;
++	efuse->thermal_meter[RF_PATH_A] = map->thermal_meter;
++	efuse->thermal_meter_k = map->thermal_meter;
++	efuse->tx_bb_swing_setting_2g = map->tx_bb_swing_setting_2g;
++	efuse->tx_bb_swing_setting_5g = map->tx_bb_swing_setting_5g;
++
++	rtw8814a_read_rfe_type(rtwdev);
++	rtw8814a_read_amplifier_type(rtwdev);
++
++	/* Override rtw_chip_parameter_setup() */
++	rtw8814a_read_rf_type(rtwdev, map);
++
++	rtw8814a_init_hwcap(rtwdev);
++
++	for (i = 0; i < 4; i++)
++		efuse->txpwr_idx_table[i] = map->txpwr_idx_table[i];
++
++	switch (rtw_hci_type(rtwdev)) {
++	case RTW_HCI_TYPE_USB:
++		ether_addr_copy(efuse->addr, map->u.mac_addr);
++		break;
++	case RTW_HCI_TYPE_PCIE:
++		ether_addr_copy(efuse->addr, map->e.mac_addr);
++		break;
++	case RTW_HCI_TYPE_SDIO:
++	default:
++		/* unsupported now */
++		return -EOPNOTSUPP;
++	}
++
++	return 0;
++}
++
++static void rtw8814a_init_rfe_reg(struct rtw_dev *rtwdev)
++{
++	u8 rfe_option = rtwdev->efuse.rfe_option;
++
++	if (rfe_option == 2 || rfe_option == 1) {
++		rtw_write32_mask(rtwdev, 0x1994, 0xf, 0xf);
++		rtw_write8_set(rtwdev, REG_GPIO_MUXCFG + 2, 0xf0);
++	} else if (rfe_option == 0) {
++		rtw_write32_mask(rtwdev, 0x1994, 0xf, 0xf);
++		rtw_write8_set(rtwdev, REG_GPIO_MUXCFG + 2, 0xc0);
++	}
++}
++
++#define RTW_TXSCALE_SIZE 37
++static const u32 rtw8814a_txscale_tbl[RTW_TXSCALE_SIZE] = {
++	0x081, 0x088, 0x090, 0x099, 0x0a2, 0x0ac, 0x0b6, 0x0c0, 0x0cc, 0x0d8,
++	0x0e5, 0x0f2, 0x101, 0x110, 0x120, 0x131, 0x143, 0x156, 0x16a, 0x180,
++	0x197, 0x1af, 0x1c8, 0x1e3, 0x200, 0x21e, 0x23e, 0x261, 0x285, 0x2ab,
++	0x2d3, 0x2fe, 0x32b, 0x35c, 0x38e, 0x3c4, 0x3fe
++};
++
++static u32 rtw8814a_get_bb_swing(struct rtw_dev *rtwdev, u8 band, u8 rf_path)
++{
++	static const u32 swing2setting[4] = {0x200, 0x16a, 0x101, 0x0b6};
++	struct rtw_efuse *efuse = &rtwdev->efuse;
++	u8 tx_bb_swing;
++
++	if (band == RTW_BAND_2G)
++		tx_bb_swing = efuse->tx_bb_swing_setting_2g;
++	else
++		tx_bb_swing = efuse->tx_bb_swing_setting_5g;
++
++	tx_bb_swing >>= 2 * rf_path;
++	tx_bb_swing &= 0x3;
++
++	return swing2setting[tx_bb_swing];
++}
++
++static u8 rtw8814a_get_swing_index(struct rtw_dev *rtwdev)
++{
++	u32 swing, table_value;
++	u8 i;
++
++	swing = rtw8814a_get_bb_swing(rtwdev, rtwdev->hal.current_band_type,
++				      RF_PATH_A);
++
++	for (i = 0; i < ARRAY_SIZE(rtw8814a_txscale_tbl); i++) {
++		table_value = rtw8814a_txscale_tbl[i];
++		if (swing == table_value)
++			return i;
++	}
++
++	return 24;
++}
++
++static void rtw8814a_pwrtrack_init(struct rtw_dev *rtwdev)
++{
++	struct rtw_dm_info *dm_info = &rtwdev->dm_info;
++	u8 path;
++
++	dm_info->default_ofdm_index = rtw8814a_get_swing_index(rtwdev);
++
++	for (path = RF_PATH_A; path < rtwdev->hal.rf_path_num; path++) {
++		ewma_thermal_init(&dm_info->avg_thermal[path]);
++		dm_info->delta_power_index[path] = 0;
++		dm_info->delta_power_index_last[path] = 0;
++	}
++	dm_info->pwr_trk_triggered = false;
++	dm_info->pwr_trk_init_trigger = true;
++	dm_info->thermal_meter_k = rtwdev->efuse.thermal_meter_k;
++}
++
++static void rtw8814a_config_trx_path(struct rtw_dev *rtwdev)
++{
++	/* RX CCK disable 2R CCA */
++	rtw_write32_clr(rtwdev, REG_CCK0_FAREPORT,
++			BIT_CCK0_2RX | BIT_CCK0_MRC);
++	/* pathB tx on, path A/C/D tx off */
++	rtw_write32_mask(rtwdev, REG_CCK_RX, 0xf0000000, 0x4);
++	/* pathB rx */
++	rtw_write32_mask(rtwdev, REG_CCK_RX, 0x0f000000, 0x5);
++}
++
++static void rtw8814a_config_cck_rx_antenna_init(struct rtw_dev *rtwdev)
++{
++	/* CCK 2R CCA parameters */
++
++	/* Disable Ant diversity */
++	rtw_write32_mask(rtwdev, REG_RXSB, BIT_RXSB_ANA_DIV, 0x0);
++	/* Concurrent CCA at LSB & USB */
++	rtw_write32_mask(rtwdev, REG_CCA, BIT_CCA_CO, 0);
++	/* RX path diversity enable */
++	rtw_write32_mask(rtwdev, REG_ANTSEL, BIT_ANT_BYCO, 0);
++	/* r_en_mrc_antsel */
++	rtw_write32_mask(rtwdev, REG_PRECTRL, BIT_DIS_CO_PATHSEL, 0);
++	/* MBC weighting */
++	rtw_write32_mask(rtwdev, REG_CCA_MF, BIT_MBC_WIN, 1);
++	/* 2R CCA only */
++	rtw_write32_mask(rtwdev, REG_CCKTX, BIT_CMB_CCA_2R, 1);
++}
++
++static void rtw8814a_phy_set_param(struct rtw_dev *rtwdev)
++{
++	u32 crystal_cap, val32;
++	u8 val8, rf_path;
++
++	/* power on BB/RF domain */
++	if (rtw_hci_type(rtwdev) == RTW_HCI_TYPE_USB)
++		rtw_write8_set(rtwdev, REG_SYS_FUNC_EN, BIT_FEN_USBA);
++	else if (rtw_hci_type(rtwdev) == RTW_HCI_TYPE_PCIE)
++		rtw_write8_set(rtwdev, REG_SYS_FUNC_EN, BIT_FEN_PCIEA);
++
++	rtw_write8_set(rtwdev, REG_SYS_CFG3_8814A + 2,
++		       BIT_FEN_BB_GLB_RST | BIT_FEN_BB_RSTB);
++
++	/* Power on RF paths A..D */
++	val8 = BIT_RF_EN | BIT_RF_RSTB | BIT_RF_SDM_RSTB;
++	rtw_write8(rtwdev, REG_RF_CTRL, val8);
++	rtw_write8(rtwdev, REG_RF_CTRL1, val8);
++	rtw_write8(rtwdev, REG_RF_CTRL2, val8);
++	rtw_write8(rtwdev, REG_RF_CTRL3, val8);
++
++	rtw_load_table(rtwdev, rtwdev->chip->bb_tbl);
++	rtw_load_table(rtwdev, rtwdev->chip->agc_tbl);
++
++	crystal_cap = rtwdev->efuse.crystal_cap & 0x3F;
++	crystal_cap |= crystal_cap << 6;
++	rtw_write32_mask(rtwdev, REG_AFE_CTRL3, 0x07ff8000, crystal_cap);
++
++	rtw8814a_config_trx_path(rtwdev);
++
++	for (rf_path = 0; rf_path < rtwdev->hal.rf_path_num; rf_path++)
++		rtw_load_table(rtwdev, rtwdev->chip->rf_tbl[rf_path]);
++
++	val32 = rtw_read_rf(rtwdev, RF_PATH_A, RF_RCK1_V1, RFREG_MASK);
++	rtw_write_rf(rtwdev, RF_PATH_B, RF_RCK1_V1, RFREG_MASK, val32);
++	rtw_write_rf(rtwdev, RF_PATH_C, RF_RCK1_V1, RFREG_MASK, val32);
++	rtw_write_rf(rtwdev, RF_PATH_D, RF_RCK1_V1, RFREG_MASK, val32);
++
++	rtw_write32_set(rtwdev, REG_RXPSEL, BIT_RX_PSEL_RST);
++
++	rtw_write8(rtwdev, REG_HWSEQ_CTRL, 0xFF);
++
++	rtw_write32(rtwdev, REG_BAR_MODE_CTRL, 0x0201ffff);
++
++	rtw_write8(rtwdev, REG_MISC_CTRL, BIT_DIS_SECOND_CCA);
++
++	rtw_write8(rtwdev, REG_NAV_CTRL + 2, 0);
++
++	rtw_write8_clr(rtwdev, REG_GPIO_MUXCFG, BIT(5));
++
++	rtw8814a_config_cck_rx_antenna_init(rtwdev);
++
++	rtw_phy_init(rtwdev);
++	rtw8814a_pwrtrack_init(rtwdev);
++
++	rtw8814a_init_rfe_reg(rtwdev);
++
++	rtw_write8_clr(rtwdev, REG_QUEUE_CTRL, BIT(3));
++
++	rtw_write8(rtwdev, REG_NAV_CTRL + 2, 235);
++
++	/* enable Tx report. */
++	rtw_write8(rtwdev,  REG_FWHW_TXQ_CTRL + 1, 0x1F);
++
++	if (rtw_hci_type(rtwdev) == RTW_HCI_TYPE_USB) {
++		/* Reset USB mode switch setting */
++		rtw_write8(rtwdev, REG_SYS_SDIO_CTRL, 0x0);
++		rtw_write8(rtwdev, REG_ACLK_MON, 0x0);
++	}
++}
++
++static void rtw8814ae_enable_rf_1_2v(struct rtw_dev *rtwdev)
++{
++	/* This is for fullsize card, because GPIO7 there is floating.
++	 * We should pull GPIO7 high to enable RF 1.2V Switch Power Supply
++	 */
++
++	/* 1. set 0x40[1:0] to 0, BIT_GPIOSEL=0, select pin as GPIO */
++	rtw_write8_clr(rtwdev, REG_GPIO_MUXCFG, BIT(1) | BIT(0));
++
++	/* 2. set 0x44[31] to 0
++	 * mode=0: data port;
++	 * mode=1 and BIT_GPIO_IO_SEL=0: interrupt mode;
++	 */
++	rtw_write8_clr(rtwdev, REG_GPIO_PIN_CTRL + 3, BIT(7));
++
++	/* 3. data mode
++	 * 3.1 set 0x44[23] to 1
++	 * sel=0: input;
++	 * sel=1: output;
++	 */
++	rtw_write8_set(rtwdev, REG_GPIO_PIN_CTRL + 2, BIT(7));
++
++	/* 3.2 set 0x44[15] to 1
++	 * output high value;
++	 */
++	rtw_write8_set(rtwdev, REG_GPIO_PIN_CTRL + 1, BIT(7));
++}
++
++static int rtw8814a_mac_init(struct rtw_dev *rtwdev)
++{
++	struct rtw_usb *rtwusb = rtw_get_usb_priv(rtwdev);
++
++	rtw_write16(rtwdev, REG_CR,
++		    MAC_TRX_ENABLE | BIT_MAC_SEC_EN | BIT_32K_CAL_TMR_EN);
++
++	rtw_load_table(rtwdev, rtwdev->chip->mac_tbl);
++
++	if (rtw_hci_type(rtwdev) == RTW_HCI_TYPE_USB)
++		rtw_write8(rtwdev, REG_AUTO_LLT_V1 + 3,
++			   rtwdev->chip->usb_tx_agg_desc_num << 1);
++
++	rtw_write32(rtwdev, REG_HIMR0, 0);
++	rtw_write32(rtwdev, REG_HIMR1, 0);
++
++	rtw_write32_mask(rtwdev, REG_RRSR, 0xfffff, 0xfffff);
++
++	rtw_write16(rtwdev, REG_RETRY_LIMIT, 0x3030);
++
++	rtw_write16(rtwdev, REG_RXFLTMAP0, 0xffff);
++	rtw_write16(rtwdev, REG_RXFLTMAP1, 0x0400);
++	rtw_write16(rtwdev, REG_RXFLTMAP2, 0xffff);
++
++	rtw_write8(rtwdev, REG_MAX_AGGR_NUM, 0x36);
++	rtw_write8(rtwdev, REG_MAX_AGGR_NUM + 1, 0x36);
++
++	/* Set Spec SIFS (used in NAV) */
++	rtw_write16(rtwdev, REG_SPEC_SIFS, 0x100a);
++	rtw_write16(rtwdev, REG_MAC_SPEC_SIFS, 0x100a);
++
++	/* Set SIFS for CCK */
++	rtw_write16(rtwdev, REG_SIFS, 0x100a);
++
++	/* Set SIFS for OFDM */
++	rtw_write16(rtwdev, REG_SIFS + 2, 0x100a);
++
++	/* TXOP */
++	rtw_write32(rtwdev, REG_EDCA_BE_PARAM, 0x005EA42B);
++	rtw_write32(rtwdev, REG_EDCA_BK_PARAM, 0x0000A44F);
++	rtw_write32(rtwdev, REG_EDCA_VI_PARAM, 0x005EA324);
++	rtw_write32(rtwdev, REG_EDCA_VO_PARAM, 0x002FA226);
++
++	rtw_write8_set(rtwdev, REG_FWHW_TXQ_CTRL, BIT(7));
++
++	rtw_write8(rtwdev, REG_ACKTO, 0x80);
++
++	rtw_write16(rtwdev, REG_BCN_CTRL,
++		    BIT_DIS_TSF_UDT | (BIT_DIS_TSF_UDT << 8));
++	rtw_write32_mask(rtwdev, REG_TBTT_PROHIBIT, 0xfffff, WLAN_TBTT_TIME);
++	rtw_write8(rtwdev, REG_DRVERLYINT, 0x05);
++	rtw_write8(rtwdev, REG_BCNDMATIM, WLAN_BCN_DMA_TIME);
++	rtw_write16(rtwdev, REG_BCNTCFG, 0x4413);
++	rtw_write8(rtwdev, REG_BCN_MAX_ERR, 0xFF);
++
++	rtw_write32(rtwdev, REG_FAST_EDCA_VOVI_SETTING, 0x08070807);
++	rtw_write32(rtwdev, REG_FAST_EDCA_BEBK_SETTING, 0x08070807);
++
++	if (rtw_hci_type(rtwdev) == RTW_HCI_TYPE_USB &&
++	    rtwusb->udev->speed == USB_SPEED_SUPER) {
++		/* Disable U1/U2 Mode to avoid 2.5G spur in USB3.0. */
++		rtw_write8_clr(rtwdev, REG_USB_MOD, BIT(4) | BIT(3));
++		/* To avoid usb 3.0 H2C fail. */
++		rtw_write16(rtwdev, 0xf002, 0);
++
++		rtw_write8_clr(rtwdev, REG_SW_AMPDU_BURST_MODE_CTRL,
++			       BIT_PRE_TX_CMD);
++	} else if (rtw_hci_type(rtwdev) == RTW_HCI_TYPE_PCIE) {
++		rtw8814ae_enable_rf_1_2v(rtwdev);
++
++		/* Force the antenna b to wifi. */
++		rtw_write8_set(rtwdev, REG_PAD_CTRL1, BIT(2));
++		rtw_write8_set(rtwdev, REG_PAD_CTRL1 + 1, BIT(0));
++		rtw_write8_set(rtwdev, REG_LED_CFG + 3,
++			       (BIT(27) | BIT_DPDT_WL_SEL) >> 24);
++	}
++
++	return 0;
++}
++
++static void rtw8814a_set_rfe_reg_24g(struct rtw_dev *rtwdev)
++{
++	switch (rtwdev->efuse.rfe_option) {
++	case 2:
++		rtw_write32(rtwdev, REG_RFE_PINMUX_A, 0x72707270);
++		rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x72707270);
++		rtw_write32(rtwdev, REG_RFE_PINMUX_C, 0x72707270);
++		rtw_write32(rtwdev, REG_RFE_PINMUX_D, 0x77707770);
++
++		rtw_write32_mask(rtwdev, REG_RFE_INVSEL_D,
++				 BIT_RFE_SELSW0_D, 0x72);
++
++		break;
++	case 1:
++		rtw_write32(rtwdev, REG_RFE_PINMUX_A, 0x77777777);
++		rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x77777777);
++		rtw_write32(rtwdev, REG_RFE_PINMUX_C, 0x77777777);
++		rtw_write32(rtwdev, REG_RFE_PINMUX_D, 0x77777777);
++
++		rtw_write32_mask(rtwdev, REG_RFE_INVSEL_D,
++				 BIT_RFE_SELSW0_D, 0x77);
++
++		break;
++	case 0:
++	default:
++		rtw_write32(rtwdev, REG_RFE_PINMUX_A, 0x77777777);
++		rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x77777777);
++		rtw_write32(rtwdev, REG_RFE_PINMUX_C, 0x77777777);
++		/* Is it not necessary to set REG_RFE_PINMUX_D ? */
++
++		rtw_write32_mask(rtwdev, REG_RFE_INVSEL_D,
++				 BIT_RFE_SELSW0_D, 0x77);
++
++		break;
++	}
++}
++
++static void rtw8814a_set_rfe_reg_5g(struct rtw_dev *rtwdev)
++{
++	switch (rtwdev->efuse.rfe_option) {
++	case 2:
++		rtw_write32(rtwdev, REG_RFE_PINMUX_A, 0x37173717);
++		rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x37173717);
++		rtw_write32(rtwdev, REG_RFE_PINMUX_C, 0x37173717);
++		rtw_write32(rtwdev, REG_RFE_PINMUX_D, 0x77177717);
++
++		rtw_write32_mask(rtwdev, REG_RFE_INVSEL_D,
++				 BIT_RFE_SELSW0_D, 0x37);
++
++		break;
++	case 1:
++		rtw_write32(rtwdev, REG_RFE_PINMUX_A, 0x33173317);
++		rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x33173317);
++		rtw_write32(rtwdev, REG_RFE_PINMUX_C, 0x33173317);
++		rtw_write32(rtwdev, REG_RFE_PINMUX_D, 0x77177717);
++
++		rtw_write32_mask(rtwdev, REG_RFE_INVSEL_D,
++				 BIT_RFE_SELSW0_D, 0x33);
++
++		break;
++	case 0:
++	default:
++		rtw_write32(rtwdev, REG_RFE_PINMUX_A, 0x54775477);
++		rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x54775477);
++		rtw_write32(rtwdev, REG_RFE_PINMUX_C, 0x54775477);
++		rtw_write32(rtwdev, REG_RFE_PINMUX_D, 0x54775477);
++
++		rtw_write32_mask(rtwdev, REG_RFE_INVSEL_D,
++				 BIT_RFE_SELSW0_D, 0x54);
++
++		break;
++	}
++}
++
++static void rtw8814a_set_channel_bb_swing(struct rtw_dev *rtwdev, u8 band)
++{
++	rtw_write32_mask(rtwdev, REG_TXSCALE_A, BB_SWING_MASK,
++			 rtw8814a_get_bb_swing(rtwdev, band, RF_PATH_A));
++	rtw_write32_mask(rtwdev, REG_TXSCALE_B, BB_SWING_MASK,
++			 rtw8814a_get_bb_swing(rtwdev, band, RF_PATH_B));
++	rtw_write32_mask(rtwdev, REG_TXSCALE_C, BB_SWING_MASK,
++			 rtw8814a_get_bb_swing(rtwdev, band, RF_PATH_C));
++	rtw_write32_mask(rtwdev, REG_TXSCALE_D, BB_SWING_MASK,
++			 rtw8814a_get_bb_swing(rtwdev, band, RF_PATH_D));
++	rtw8814a_pwrtrack_init(rtwdev);
++}
++
++static void rtw8814a_set_bw_reg_adc(struct rtw_dev *rtwdev, u8 bw)
++{
++	u32 adc = 0;
++
++	if (bw == RTW_CHANNEL_WIDTH_20)
++		adc = 0;
++	else if (bw == RTW_CHANNEL_WIDTH_40)
++		adc = 1;
++	else if (bw == RTW_CHANNEL_WIDTH_80)
++		adc = 2;
++
++	rtw_write32_mask(rtwdev, REG_ADCCLK, BIT(1) | BIT(0), adc);
++}
++
++static void rtw8814a_set_bw_reg_agc(struct rtw_dev *rtwdev, u8 new_band, u8 bw)
++{
++	u32 agc = 7;
++
++	if (bw == RTW_CHANNEL_WIDTH_20) {
++		agc = 6;
++	} else if (bw == RTW_CHANNEL_WIDTH_40) {
++		if (new_band == RTW_BAND_5G)
++			agc = 8;
++		else
++			agc = 7;
++	} else if (bw == RTW_CHANNEL_WIDTH_80) {
++		agc = 3;
++	}
++
++	rtw_write32_mask(rtwdev, REG_CCASEL, 0xf000, agc);
++}
++
++static void rtw8814a_switch_band(struct rtw_dev *rtwdev, u8 new_band, u8 bw)
++{
++	/* Clear 0x1000[16], When this bit is set to 0, CCK and OFDM
++	 * are disabled, and clock are gated. Otherwise, CCK and OFDM
++	 * are enabled.
++	 */
++	rtw_write8_clr(rtwdev, REG_SYS_CFG3_8814A + 2, BIT_FEN_BB_RSTB);
++
++	if (new_band == RTW_BAND_2G) {
++		rtw_write32_mask(rtwdev, REG_AGC_TABLE, 0x1f, 0);
++
++		rtw8814a_set_rfe_reg_24g(rtwdev);
++
++		rtw_write32_mask(rtwdev, REG_TXPSEL, 0xf0, 0x2);
++		rtw_write32_mask(rtwdev, REG_CCK_RX, 0x0f000000, 0x5);
++
++		rtw_write32_mask(rtwdev, REG_RXPSEL, BIT_RX_PSEL_RST, 0x3);
++
++		rtw_write8(rtwdev, REG_CCK_CHECK, 0);
++
++		rtw_write32_mask(rtwdev, 0xa80, BIT(18), 0);
++	} else {
++		rtw_write8(rtwdev, REG_CCK_CHECK, BIT_CHECK_CCK_EN);
++
++		/* Enable CCK Tx function, even when CCK is off */
++		rtw_write32_mask(rtwdev, 0xa80, BIT(18), 1);
++
++		rtw8814a_set_rfe_reg_5g(rtwdev);
++
++		rtw_write32_mask(rtwdev, REG_TXPSEL, 0xf0, 0x0);
++		rtw_write32_mask(rtwdev, REG_CCK_RX, 0x0f000000, 0xf);
++
++		rtw_write32_mask(rtwdev, REG_RXPSEL, BIT_RX_PSEL_RST, 0x2);
++	}
++
++	rtw8814a_set_channel_bb_swing(rtwdev, new_band);
++
++	rtw8814a_set_bw_reg_adc(rtwdev, bw);
++	rtw8814a_set_bw_reg_agc(rtwdev, new_band, bw);
++
++	rtw_write8_set(rtwdev, REG_SYS_CFG3_8814A + 2, BIT_FEN_BB_RSTB);
++}
++
++static void rtw8814a_switch_channel(struct rtw_dev *rtwdev, u8 channel)
++{
++	struct rtw_hal *hal = &rtwdev->hal;
++	u32 fc_area, rf_mod_ag, cfgch;
++	u8 path;
++
++	switch (channel) {
++	case 36 ... 48:
++		fc_area = 0x494;
++		break;
++	case 50 ... 64:
++		fc_area = 0x453;
++		break;
++	case 100 ... 116:
++		fc_area = 0x452;
++		break;
++	default:
++		if (channel >= 118)
++			fc_area = 0x412;
++		else
++			fc_area = 0x96a;
++		break;
++	}
++
++	rtw_write32_mask(rtwdev, REG_CLKTRK, 0x1ffe0000, fc_area);
++
++	for (path = 0; path < hal->rf_path_num; path++) {
++		switch (channel) {
++		case 36 ... 64:
++			rf_mod_ag = 0x101;
++			break;
++		case 100 ... 140:
++			rf_mod_ag = 0x301;
++			break;
++		default:
++			if (channel > 140)
++				rf_mod_ag = 0x501;
++			else
++				rf_mod_ag = 0x000;
++			break;
++		}
++
++		cfgch = (rf_mod_ag << 8) | channel;
++
++		rtw_write_rf(rtwdev, path, RF_CFGCH,
++			     RF18_RFSI_MASK | RF18_BAND_MASK | RF18_CHANNEL_MASK, cfgch);
++	}
++
++	switch (channel) {
++	case 36 ... 64:
++		rtw_write32_mask(rtwdev, REG_AGC_TABLE, 0x1f, 1);
++		break;
++	case 100 ... 144:
++		rtw_write32_mask(rtwdev, REG_AGC_TABLE, 0x1f, 2);
++		break;
++	default:
++		if (channel >= 149)
++			rtw_write32_mask(rtwdev, REG_AGC_TABLE, 0x1f, 3);
++
++		break;
++	}
++}
++
++static void rtw8814a_24g_cck_tx_dfir(struct rtw_dev *rtwdev, u8 channel)
++{
++	if (channel >= 1 && channel <= 11) {
++		rtw_write32(rtwdev, REG_CCK0_TX_FILTER1, 0x1a1b0030);
++		rtw_write32(rtwdev, REG_CCK0_TX_FILTER2, 0x090e1317);
++		rtw_write32(rtwdev, REG_CCK0_DEBUG_PORT, 0x00000204);
++	} else if (channel >= 12 && channel <= 13) {
++		rtw_write32(rtwdev, REG_CCK0_TX_FILTER1, 0x1a1b0030);
++		rtw_write32(rtwdev, REG_CCK0_TX_FILTER2, 0x090e1217);
++		rtw_write32(rtwdev, REG_CCK0_DEBUG_PORT, 0x00000305);
++	} else if (channel == 14) {
++		rtw_write32(rtwdev, REG_CCK0_TX_FILTER1, 0x1a1b0030);
++		rtw_write32(rtwdev, REG_CCK0_TX_FILTER2, 0x00000E17);
++		rtw_write32(rtwdev, REG_CCK0_DEBUG_PORT, 0x00000000);
++	}
++}
++
++static void rtw8814a_set_bw_reg_mac(struct rtw_dev *rtwdev, u8 bw)
++{
++	u16 val16 = rtw_read16(rtwdev, REG_WMAC_TRXPTCL_CTL);
++
++	val16 &= ~BIT_RFMOD;
++	if (bw == RTW_CHANNEL_WIDTH_80)
++		val16 |= BIT_RFMOD_80M;
++	else if (bw == RTW_CHANNEL_WIDTH_40)
++		val16 |= BIT_RFMOD_40M;
++
++	rtw_write16(rtwdev, REG_WMAC_TRXPTCL_CTL, val16);
++}
++
++static void rtw8814a_set_bw_rf(struct rtw_dev *rtwdev, u8 bw)
++{
++	u8 path;
++
++	for (path = RF_PATH_A; path < rtwdev->hal.rf_path_num; path++) {
++		switch (bw) {
++		case RTW_CHANNEL_WIDTH_5:
++		case RTW_CHANNEL_WIDTH_10:
++		case RTW_CHANNEL_WIDTH_20:
++		default:
++			rtw_write_rf(rtwdev, path, RF_CFGCH, RF18_BW_MASK, 3);
++			break;
++		case RTW_CHANNEL_WIDTH_40:
++			rtw_write_rf(rtwdev, path, RF_CFGCH, RF18_BW_MASK, 1);
++			break;
++		case RTW_CHANNEL_WIDTH_80:
++			rtw_write_rf(rtwdev, path, RF_CFGCH, RF18_BW_MASK, 0);
++			break;
++		}
++	}
++}
++
++static void rtw8814a_adc_clk(struct rtw_dev *rtwdev)
++{
++	static const u32 rxiqc_reg[2][4] = {
++		{ REG_RX_IQC_AB_A, REG_RX_IQC_AB_B,
++		  REG_RX_IQC_AB_C, REG_RX_IQC_AB_D },
++		{ REG_RX_IQC_CD_A, REG_RX_IQC_CD_B,
++		  REG_RX_IQC_CD_C, REG_RX_IQC_CD_D }
++	};
++	u32 bb_reg_8fc, bb_reg_808, rxiqc[4];
++	u32 i = 0, mac_active = 1;
++	u8 mac_reg_522;
++
++	if (rtwdev->hal.cut_version != RTW_CHIP_VER_CUT_A)
++		return;
++
++	/* 1 Step1. MAC TX pause */
++	mac_reg_522 = rtw_read8(rtwdev, REG_TXPAUSE);
++	bb_reg_8fc = rtw_read32(rtwdev, REG_DBGSEL);
++	bb_reg_808 = rtw_read32(rtwdev, REG_RXPSEL);
++	rtw_write8(rtwdev, REG_TXPAUSE, 0x3f);
++
++	/* 1 Step 2. Backup rxiqc & rxiqc = 0 */
++	for (i = 0; i < 4; i++) {
++		rxiqc[i] = rtw_read32(rtwdev, rxiqc_reg[0][i]);
++		rtw_write32(rtwdev, rxiqc_reg[0][i], 0x0);
++		rtw_write32(rtwdev, rxiqc_reg[1][i], 0x0);
++	}
++	rtw_write32_mask(rtwdev, REG_PRECTRL, BIT_IQ_WGT, 0x3);
++	i = 0;
++
++	/* 1 Step 3. Monitor MAC IDLE */
++	rtw_write32(rtwdev, REG_DBGSEL, 0x0);
++	while (mac_active) {
++		mac_active = rtw_read32(rtwdev, REG_DBGRPT) & 0x803e0008;
++		i++;
++		if (i > 1000)
++			break;
++	}
++
++	/* 1 Step 4. ADC clk flow */
++	rtw_write8(rtwdev, REG_RXPSEL, 0x11);
++	rtw_write32_mask(rtwdev, REG_DAC_RSTB, BIT(13), 0x1);
++	rtw_write8_mask(rtwdev, REG_GNT_BT, BIT(2) | BIT(1), 0x3);
++	rtw_write32_mask(rtwdev, REG_CCK_RPT_FORMAT, BIT(2), 0x1);
++
++	/* 0xc1c/0xe1c/0x181c/0x1a1c[4] must=1 to ensure table can be
++	 * written when bbrstb=0
++	 * 0xc60/0xe60/0x1860/0x1a60[15] always = 1 after this line
++	 * 0xc60/0xe60/0x1860/0x1a60[14] always = 0 bcz its error in A-cut
++	 */
++
++	/* power_off/clk_off @ anapar_state=idle mode */
++	rtw_write32(rtwdev, REG_AFE_PWR1_A, 0x15800002);
++	rtw_write32(rtwdev, REG_AFE_PWR1_A, 0x01808003);
++	rtw_write32(rtwdev, REG_AFE_PWR1_B, 0x15800002);
++	rtw_write32(rtwdev, REG_AFE_PWR1_B, 0x01808003);
++	rtw_write32(rtwdev, REG_AFE_PWR1_C, 0x15800002);
++	rtw_write32(rtwdev, REG_AFE_PWR1_C, 0x01808003);
++	rtw_write32(rtwdev, REG_AFE_PWR1_D, 0x15800002);
++	rtw_write32(rtwdev, REG_AFE_PWR1_D, 0x01808003);
++
++	rtw_write8_mask(rtwdev, REG_GNT_BT, BIT(2), 0x0);
++	rtw_write32_mask(rtwdev, REG_CCK_RPT_FORMAT, BIT(2), 0x0);
++	/* [19] = 1 to turn off ADC */
++	rtw_write32(rtwdev, REG_CK_MONHA, 0x0D080058);
++	rtw_write32(rtwdev, REG_CK_MONHB, 0x0D080058);
++	rtw_write32(rtwdev, REG_CK_MONHC, 0x0D080058);
++	rtw_write32(rtwdev, REG_CK_MONHD, 0x0D080058);
++
++	/* power_on/clk_off */
++	/* [19] = 0 to turn on ADC */
++	rtw_write32(rtwdev, REG_CK_MONHA, 0x0D000058);
++	rtw_write32(rtwdev, REG_CK_MONHB, 0x0D000058);
++	rtw_write32(rtwdev, REG_CK_MONHC, 0x0D000058);
++	rtw_write32(rtwdev, REG_CK_MONHD, 0x0D000058);
++
++	/* power_on/clk_on @ anapar_state=BT mode */
++	rtw_write32(rtwdev, REG_AFE_PWR1_A, 0x05808032);
++	rtw_write32(rtwdev, REG_AFE_PWR1_B, 0x05808032);
++	rtw_write32(rtwdev, REG_AFE_PWR1_C, 0x05808032);
++	rtw_write32(rtwdev, REG_AFE_PWR1_D, 0x05808032);
++	rtw_write8_mask(rtwdev, REG_GNT_BT, BIT(2), 0x1);
++	rtw_write32_mask(rtwdev, REG_CCK_RPT_FORMAT, BIT(2), 0x1);
++
++	/* recover original setting @ anapar_state=BT mode */
++	rtw_write32(rtwdev, REG_AFE_PWR1_A, 0x05808032);
++	rtw_write32(rtwdev, REG_AFE_PWR1_B, 0x05808032);
++	rtw_write32(rtwdev, REG_AFE_PWR1_C, 0x05808032);
++	rtw_write32(rtwdev, REG_AFE_PWR1_D, 0x05808032);
++
++	rtw_write32(rtwdev, REG_AFE_PWR1_A, 0x05800002);
++	rtw_write32(rtwdev, REG_AFE_PWR1_A, 0x07808003);
++	rtw_write32(rtwdev, REG_AFE_PWR1_B, 0x05800002);
++	rtw_write32(rtwdev, REG_AFE_PWR1_B, 0x07808003);
++	rtw_write32(rtwdev, REG_AFE_PWR1_C, 0x05800002);
++	rtw_write32(rtwdev, REG_AFE_PWR1_C, 0x07808003);
++	rtw_write32(rtwdev, REG_AFE_PWR1_D, 0x05800002);
++	rtw_write32(rtwdev, REG_AFE_PWR1_D, 0x07808003);
++
++	rtw_write8_mask(rtwdev, REG_GNT_BT, BIT(2) | BIT(1), 0x0);
++	rtw_write32_mask(rtwdev, REG_CCK_RPT_FORMAT, BIT(2), 0x0);
++	rtw_write32_mask(rtwdev, REG_DAC_RSTB, BIT(13), 0x0);
++
++	/* 1 Step 5. Recover MAC TX & IQC */
++	rtw_write8(rtwdev, REG_TXPAUSE, mac_reg_522);
++	rtw_write32(rtwdev, REG_DBGSEL, bb_reg_8fc);
++	rtw_write32(rtwdev, REG_RXPSEL, bb_reg_808);
++	for (i = 0; i < 4; i++) {
++		rtw_write32(rtwdev, rxiqc_reg[0][i], rxiqc[i]);
++		rtw_write32(rtwdev, rxiqc_reg[1][i], 0x01000000);
++	}
++	rtw_write32_mask(rtwdev, REG_PRECTRL, BIT_IQ_WGT, 0x0);
++}
++
++static void rtw8814a_spur_calibration_ch140(struct rtw_dev *rtwdev, u8 channel)
++{
++	struct rtw_hal *hal = &rtwdev->hal;
++
++	/* Add for 8814AE module ch140 MP Rx */
++	if (channel == 140) {
++		if (hal->ch_param[0] == 0)
++			hal->ch_param[0] = rtw_read32(rtwdev, REG_CCASEL);
++		if (hal->ch_param[1] == 0)
++			hal->ch_param[1] = rtw_read32(rtwdev, REG_PDMFTH);
++
++		rtw_write32(rtwdev, REG_CCASEL, 0x75438170);
++		rtw_write32(rtwdev, REG_PDMFTH, 0x79a18a0a);
++	} else {
++		if (rtw_read32(rtwdev, REG_CCASEL) == 0x75438170 &&
++		    hal->ch_param[0] != 0)
++			rtw_write32(rtwdev, REG_CCASEL, hal->ch_param[0]);
++
++		if (rtw_read32(rtwdev, REG_PDMFTH) == 0x79a18a0a &&
++		    hal->ch_param[1] != 0)
++			rtw_write32(rtwdev, REG_PDMFTH, hal->ch_param[1]);
++
++		hal->ch_param[0] = rtw_read32(rtwdev, REG_CCASEL);
++		hal->ch_param[1] = rtw_read32(rtwdev, REG_PDMFTH);
++	}
++}
++
++static void rtw8814a_set_nbi_reg(struct rtw_dev *rtwdev, u32 tone_idx)
++{
++	/* tone_idx X 10 */
++	static const u32 nbi_128[] = {
++		25, 55, 85, 115, 135,
++		155, 185, 205, 225, 245,
++		265, 285, 305, 335, 355,
++		375, 395, 415, 435, 455,
++		485, 505, 525, 555, 585, 615, 635
++	};
++	u32 reg_idx = 0;
++	u32 i;
++
++	for (i = 0; i < ARRAY_SIZE(nbi_128); i++) {
++		if (tone_idx < nbi_128[i]) {
++			reg_idx = i + 1;
++			break;
++		}
++	}
++
++	rtw_write32_mask(rtwdev, REG_NBI_SETTING, 0xfc000, reg_idx);
++}
++
++static void rtw8814a_nbi_setting(struct rtw_dev *rtwdev, u32 ch, u32 f_intf)
++{
++	u32 fc, int_distance, tone_idx;
++
++	fc = 2412 + (ch - 1) * 5;
++	int_distance = abs_diff(fc, f_intf);
++
++	/* 10 * (int_distance / 0.3125) */
++	tone_idx = int_distance << 5;
++
++	rtw8814a_set_nbi_reg(rtwdev, tone_idx);
++
++	rtw_write32_mask(rtwdev, REG_NBI_SETTING, BIT_NBI_ENABLE, 1);
++}
++
++static void rtw8814a_spur_nbi_setting(struct rtw_dev *rtwdev)
++{
++	u8 primary_channel = rtwdev->hal.primary_channel;
++	u8 rfe_type = rtwdev->efuse.rfe_option;
++
++	if (rfe_type != 0 && rfe_type != 1 && rfe_type != 6 && rfe_type != 7)
++		return;
++
++	if (primary_channel == 14)
++		rtw8814a_nbi_setting(rtwdev, primary_channel, 2480);
++	else if (primary_channel >= 4 && primary_channel <= 8)
++		rtw8814a_nbi_setting(rtwdev, primary_channel, 2440);
++	else
++		rtw_write32_mask(rtwdev, REG_NBI_SETTING, BIT_NBI_ENABLE, 0);
++}
++
++/* A workaround to eliminate the 5280 MHz & 5600 MHz & 5760 MHz spur of 8814A */
++static void rtw8814a_spur_calibration(struct rtw_dev *rtwdev, u8 channel, u8 bw)
++{
++	u8 rfe_type = rtwdev->efuse.rfe_option;
++	bool reset_nbi_csi = true;
++
++	if (rfe_type == 0) {
++		switch (bw) {
++		case RTW_CHANNEL_WIDTH_40:
++			if (channel == 54 || channel == 118) {
++				rtw_write32_mask(rtwdev, REG_NBI_SETTING,
++						 0x000fe000, 0x3e >> 1);
++				rtw_write32_mask(rtwdev, REG_CSI_MASK_SETTING1,
++						 BIT(0), 1);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK0, 0);
++				rtw_write32_mask(rtwdev, REG_CSI_FIX_MASK1,
++						 BIT(0), 1);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK6, 0);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK7, 0);
++
++				reset_nbi_csi = false;
++			} else if (channel == 151) {
++				rtw_write32_mask(rtwdev, REG_NBI_SETTING,
++						 0x000fe000, 0x1e >> 1);
++				rtw_write32_mask(rtwdev, REG_CSI_MASK_SETTING1,
++						 BIT(0), 1);
++				rtw_write32_mask(rtwdev, REG_CSI_FIX_MASK0,
++						 BIT(16), 1);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK1, 0);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK6, 0);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK7, 0);
++
++				reset_nbi_csi = false;
++			}
++			break;
++		case RTW_CHANNEL_WIDTH_80:
++			if (channel == 58 || channel == 122) {
++				rtw_write32_mask(rtwdev, REG_NBI_SETTING,
++						 0x000fe000, 0x3a >> 1);
++				rtw_write32_mask(rtwdev, REG_CSI_MASK_SETTING1,
++						 BIT(0), 1);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK0, 0);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK1, 0);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK6, 0);
++				rtw_write32_mask(rtwdev, REG_CSI_FIX_MASK7,
++						 BIT(0), 1);
++
++				reset_nbi_csi = false;
++			} else if (channel == 155) {
++				rtw_write32_mask(rtwdev, REG_NBI_SETTING,
++						 0x000fe000, 0x5a >> 1);
++				rtw_write32_mask(rtwdev, REG_CSI_MASK_SETTING1,
++						 BIT(0), 1);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK0, 0);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK1, 0);
++				rtw_write32_mask(rtwdev, REG_CSI_FIX_MASK6,
++						 BIT(16), 1);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK7, 0);
++
++				reset_nbi_csi = false;
++			}
++			break;
++		case RTW_CHANNEL_WIDTH_20:
++			if (channel == 153) {
++				rtw_write32_mask(rtwdev, REG_NBI_SETTING,
++						 0x000fe000, 0x1e >> 1);
++				rtw_write32_mask(rtwdev, REG_CSI_MASK_SETTING1,
++						 BIT(0), 1);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK0, 0);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK1, 0);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK6, 0);
++				rtw_write32_mask(rtwdev, REG_CSI_FIX_MASK7,
++						 BIT(16), 1);
++
++				reset_nbi_csi = false;
++			}
++
++			rtw8814a_spur_calibration_ch140(rtwdev, channel);
++			break;
++		default:
++			break;
++		}
++	} else if (rfe_type == 1 || rfe_type == 2) {
++		switch (bw) {
++		case RTW_CHANNEL_WIDTH_20:
++			if (channel == 153) {
++				rtw_write32_mask(rtwdev, REG_NBI_SETTING,
++						 0x000fe000, 0x1E >> 1);
++				rtw_write32_mask(rtwdev, REG_CSI_MASK_SETTING1,
++						 BIT(0), 1);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK0, 0);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK1, 0);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK6, 0);
++				rtw_write32_mask(rtwdev, REG_CSI_FIX_MASK7,
++						 BIT(16), 1);
++
++				reset_nbi_csi = false;
++			}
++			break;
++		case RTW_CHANNEL_WIDTH_40:
++			if (channel == 151) {
++				rtw_write32_mask(rtwdev, REG_NBI_SETTING,
++						 0x000fe000, 0x1e >> 1);
++				rtw_write32_mask(rtwdev, REG_CSI_MASK_SETTING1,
++						 BIT(0), 1);
++				rtw_write32_mask(rtwdev, REG_CSI_FIX_MASK0,
++						 BIT(16), 1);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK1, 0);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK6, 0);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK7, 0);
++
++				reset_nbi_csi = false;
++			}
++			break;
++		case RTW_CHANNEL_WIDTH_80:
++			if (channel == 155) {
++				rtw_write32_mask(rtwdev, REG_NBI_SETTING,
++						 0x000fe000, 0x5a >> 1);
++				rtw_write32_mask(rtwdev, REG_CSI_MASK_SETTING1,
++						 BIT(0), 1);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK0, 0);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK1, 0);
++				rtw_write32_mask(rtwdev, REG_CSI_FIX_MASK6,
++						 BIT(16), 1);
++				rtw_write32(rtwdev, REG_CSI_FIX_MASK7, 0);
++
++				reset_nbi_csi = false;
++			}
++			break;
++		default:
++			break;
++		}
++	}
++
++	if (reset_nbi_csi) {
++		rtw_write32_mask(rtwdev, REG_NBI_SETTING,
++				 0x000fe000, 0xfc >> 1);
++		rtw_write32_mask(rtwdev, REG_CSI_MASK_SETTING1, BIT(0), 0);
++		rtw_write32(rtwdev, REG_CSI_FIX_MASK0, 0);
++		rtw_write32(rtwdev, REG_CSI_FIX_MASK1, 0);
++		rtw_write32(rtwdev, REG_CSI_FIX_MASK6, 0);
++		rtw_write32(rtwdev, REG_CSI_FIX_MASK7, 0);
++	}
++
++	rtw8814a_spur_nbi_setting(rtwdev);
++}
++
++static void rtw8814a_set_bw_mode(struct rtw_dev *rtwdev, u8 new_band,
++				 u8 channel, u8 bw, u8 primary_chan_idx)
++{
++	u8 txsc40 = 0, txsc20, txsc;
++
++	rtw8814a_set_bw_reg_mac(rtwdev, bw);
++
++	txsc20 = primary_chan_idx;
++	if (bw == RTW_CHANNEL_WIDTH_80) {
++		if (txsc20 == RTW_SC_20_UPPER || txsc20 == RTW_SC_20_UPMOST)
++			txsc40 = RTW_SC_40_UPPER;
++		else
++			txsc40 = RTW_SC_40_LOWER;
++	}
++
++	txsc = BIT_TXSC_20M(txsc20) | BIT_TXSC_40M(txsc40);
++	rtw_write8(rtwdev, REG_DATA_SC, txsc);
++
++	rtw8814a_set_bw_reg_adc(rtwdev, bw);
++	rtw8814a_set_bw_reg_agc(rtwdev, new_band, bw);
++
++	if (bw == RTW_CHANNEL_WIDTH_80) {
++		rtw_write32_mask(rtwdev, REG_ADCCLK, 0x3c, txsc);
++	} else if (bw == RTW_CHANNEL_WIDTH_40) {
++		rtw_write32_mask(rtwdev, REG_ADCCLK, 0x3c, txsc);
++
++		if (txsc == RTW_SC_20_UPPER)
++			rtw_write32_set(rtwdev, REG_RXSB, BIT(4));
++		else
++			rtw_write32_clr(rtwdev, REG_RXSB, BIT(4));
++	}
++
++	rtw8814a_set_bw_rf(rtwdev, bw);
++
++	rtw8814a_adc_clk(rtwdev);
++
++	rtw8814a_spur_calibration(rtwdev, channel, bw);
++}
++
++static void rtw8814a_set_channel(struct rtw_dev *rtwdev, u8 channel, u8 bw,
++				 u8 primary_chan_idx)
++{
++	u8 old_band, new_band;
++
++	if (rtw_read8(rtwdev, REG_CCK_CHECK) & BIT_CHECK_CCK_EN)
++		old_band = RTW_BAND_5G;
++	else
++		old_band = RTW_BAND_2G;
++
++	if (channel > 14)
++		new_band = RTW_BAND_5G;
++	else
++		new_band = RTW_BAND_2G;
++
++	if (new_band != old_band)
++		rtw8814a_switch_band(rtwdev, new_band, bw);
++
++	rtw8814a_switch_channel(rtwdev, channel);
++
++	rtw8814a_24g_cck_tx_dfir(rtwdev, channel);
++
++	rtw8814a_set_bw_mode(rtwdev, new_band, channel, bw, primary_chan_idx);
++}
++
++static s8 rtw8814a_cck_rx_pwr(u8 lna_idx, u8 vga_idx)
++{
++	s8 rx_pwr_all = 0;
++
++	switch (lna_idx) {
++	case 7:
++		rx_pwr_all = -38 - 2 * vga_idx;
++		break;
++	case 5:
++		rx_pwr_all = -28 - 2 * vga_idx;
++		break;
++	case 3:
++		rx_pwr_all = -8 - 2 * vga_idx;
++		break;
++	case 2:
++		rx_pwr_all = -1 - 2 * vga_idx;
++		break;
++	default:
++		break;
++	}
++
++	return rx_pwr_all;
++}
++
++static void rtw8814a_query_phy_status(struct rtw_dev *rtwdev, u8 *phy_status,
++				      struct rtw_rx_pkt_stat *pkt_stat)
++{
++	struct rtw_dm_info *dm_info = &rtwdev->dm_info;
++	struct rtw_jaguar_phy_status_rpt *rpt;
++	u8 gain[RTW_RF_PATH_MAX], rssi, i;
++	s8 rx_pwr_db, middle1, middle2;
++	s8 snr[RTW_RF_PATH_MAX];
++	s8 evm[RTW_RF_PATH_MAX];
++	u8 rfmode, subchannel;
++	u8 lna, vga;
++	s8 cfo[2];
++
++	rpt = (struct rtw_jaguar_phy_status_rpt *)phy_status;
++
++	pkt_stat->bw = RTW_CHANNEL_WIDTH_20;
++
++	if (pkt_stat->rate <= DESC_RATE11M) {
++		lna = le32_get_bits(rpt->w1, RTW_JGRPHY_W1_AGC_RPT_LNA_IDX);
++		vga = le32_get_bits(rpt->w1, RTW_JGRPHY_W1_AGC_RPT_VGA_IDX);
++
++		rx_pwr_db = rtw8814a_cck_rx_pwr(lna, vga);
++
++		pkt_stat->rx_power[RF_PATH_A] = rx_pwr_db;
++		pkt_stat->rssi = rtw_phy_rf_power_2_rssi(pkt_stat->rx_power, 1);
++		dm_info->rssi[RF_PATH_A] = pkt_stat->rssi;
++		pkt_stat->signal_power = rx_pwr_db;
++	} else { /* OFDM rate */
++		gain[RF_PATH_A] = le32_get_bits(rpt->w0, RTW_JGRPHY_W0_GAIN_A);
++		gain[RF_PATH_B] = le32_get_bits(rpt->w0, RTW_JGRPHY_W0_GAIN_B);
++		gain[RF_PATH_C] = le32_get_bits(rpt->w5, RTW_JGRPHY_W5_GAIN_C);
++		gain[RF_PATH_D] = le32_get_bits(rpt->w6, RTW_JGRPHY_W6_GAIN_D);
++
++		snr[RF_PATH_A] = le32_get_bits(rpt->w3, RTW_JGRPHY_W3_RXSNR_A);
++		snr[RF_PATH_B] = le32_get_bits(rpt->w4, RTW_JGRPHY_W4_RXSNR_B);
++		snr[RF_PATH_C] = le32_get_bits(rpt->w5, RTW_JGRPHY_W5_RXSNR_C);
++		snr[RF_PATH_D] = le32_get_bits(rpt->w5, RTW_JGRPHY_W5_RXSNR_D);
++
++		evm[RF_PATH_A] = le32_get_bits(rpt->w3, RTW_JGRPHY_W3_RXEVM_1);
++		evm[RF_PATH_B] = le32_get_bits(rpt->w3, RTW_JGRPHY_W3_RXEVM_2);
++		evm[RF_PATH_C] = le32_get_bits(rpt->w4, RTW_JGRPHY_W4_RXEVM_3);
++		evm[RF_PATH_D] = le32_get_bits(rpt->w5, RTW_JGRPHY_W5_RXEVM_4);
++
++		if (pkt_stat->rate <= DESC_RATE54M)
++			evm[RF_PATH_A] = le32_get_bits(rpt->w6,
++						       RTW_JGRPHY_W6_SIGEVM);
++
++		for (i = RF_PATH_A; i < RTW_RF_PATH_MAX; i++) {
++			pkt_stat->rx_power[i] = gain[i] - 110;
++
++			rssi = rtw_phy_rf_power_2_rssi(&pkt_stat->rx_power[i], 1);
++			dm_info->rssi[i] = rssi;
++
++			pkt_stat->rx_snr[i] = snr[i];
++			dm_info->rx_snr[i] = snr[i] >> 1;
++
++			pkt_stat->rx_evm[i] = evm[i];
++			evm[i] = max_t(s8, -127, evm[i]);
++			dm_info->rx_evm_dbm[i] = abs(evm[i]) >> 1;
++		}
++
++		rssi = rtw_phy_rf_power_2_rssi(pkt_stat->rx_power,
++					       RTW_RF_PATH_MAX);
++		pkt_stat->rssi = rssi;
++
++		/* When power saving is enabled the hardware sometimes
++		 * reports unbelievably high gain for paths A and C
++		 * (e.g. one frame 64 68 68 72, the next frame 106 66 88 72,
++		 * the next 66 66 68 72), so use the second lowest gain
++		 * instead of the highest.
++		 */
++		middle1 = max(min(gain[RF_PATH_A], gain[RF_PATH_B]),
++			      min(gain[RF_PATH_C], gain[RF_PATH_D]));
++		middle2 = min(max(gain[RF_PATH_A], gain[RF_PATH_B]),
++			      max(gain[RF_PATH_C], gain[RF_PATH_D]));
++		rx_pwr_db = min(middle1, middle2);
++		rx_pwr_db -= 110;
++		pkt_stat->signal_power = rx_pwr_db;
++
++		rfmode = le32_get_bits(rpt->w0, RTW_JGRPHY_W0_R_RFMOD);
++		subchannel = le32_get_bits(rpt->w0, RTW_JGRPHY_W0_SUB_CHNL);
++
++		if (rfmode == 1 && subchannel == 0) {
++			pkt_stat->bw = RTW_CHANNEL_WIDTH_40;
++		} else if (rfmode == 2) {
++			if (subchannel == 0)
++				pkt_stat->bw = RTW_CHANNEL_WIDTH_80;
++			else if (subchannel == 9 || subchannel == 10)
++				pkt_stat->bw = RTW_CHANNEL_WIDTH_40;
++		}
++
++		cfo[RF_PATH_A] = le32_get_bits(rpt->w2, RTW_JGRPHY_W2_CFO_TAIL_A);
++		cfo[RF_PATH_B] = le32_get_bits(rpt->w2, RTW_JGRPHY_W2_CFO_TAIL_B);
++
++		for (i = RF_PATH_A; i < 2; i++) {
++			pkt_stat->cfo_tail[i] = cfo[i];
++			dm_info->cfo_tail[i] = (cfo[i] * 5) >> 1;
++		}
++	}
++}
++
++static void
++rtw8814a_set_tx_power_index_by_rate(struct rtw_dev *rtwdev, u8 path, u8 rs)
++{
++	struct rtw_hal *hal = &rtwdev->hal;
++	u32 txagc_table_wd;
++	u8 rate, pwr_index;
++	int j;
++
++	for (j = 0; j < rtw_rate_size[rs]; j++) {
++		rate = rtw_rate_section[rs][j];
++
++		pwr_index = hal->tx_pwr_tbl[path][rate] + 2;
++		if (pwr_index > rtwdev->chip->max_power_index)
++			pwr_index = rtwdev->chip->max_power_index;
++
++		txagc_table_wd = 0x00801000;
++		txagc_table_wd |= (pwr_index << 24) | (path << 8) | rate;
++
++		rtw_write32(rtwdev, REG_AGC_TBL, txagc_table_wd);
++
++		/* first time to turn on the txagc table
++		 * second to write the addr0
++		 */
++		if (rate == DESC_RATE1M)
++			rtw_write32(rtwdev, REG_AGC_TBL, txagc_table_wd);
++	}
++}
++
++static void rtw8814a_set_tx_power_index(struct rtw_dev *rtwdev)
++{
++	struct rtw_hal *hal = &rtwdev->hal;
++	int path;
++
++	for (path = 0; path < hal->rf_path_num; path++) {
++		if (hal->current_band_type == RTW_BAND_2G)
++			rtw8814a_set_tx_power_index_by_rate(rtwdev, path,
++							    RTW_RATE_SECTION_CCK);
++
++		rtw8814a_set_tx_power_index_by_rate(rtwdev, path,
++						    RTW_RATE_SECTION_OFDM);
++
++		if (test_bit(RTW_FLAG_SCANNING, rtwdev->flags))
++			continue;
++
++		rtw8814a_set_tx_power_index_by_rate(rtwdev, path,
++						    RTW_RATE_SECTION_HT_1S);
++		rtw8814a_set_tx_power_index_by_rate(rtwdev, path,
++						    RTW_RATE_SECTION_VHT_1S);
++
++		rtw8814a_set_tx_power_index_by_rate(rtwdev, path,
++						    RTW_RATE_SECTION_HT_2S);
++		rtw8814a_set_tx_power_index_by_rate(rtwdev, path,
++						    RTW_RATE_SECTION_VHT_2S);
++
++		rtw8814a_set_tx_power_index_by_rate(rtwdev, path,
++						    RTW_RATE_SECTION_HT_3S);
++		rtw8814a_set_tx_power_index_by_rate(rtwdev, path,
++						    RTW_RATE_SECTION_VHT_3S);
++	}
++}
++
++static void rtw8814a_cfg_ldo25(struct rtw_dev *rtwdev, bool enable)
++{
++}
++
++static void rtw8814a_false_alarm_statistics(struct rtw_dev *rtwdev)
++{
++	struct rtw_dm_info *dm_info = &rtwdev->dm_info;
++	u32 cck_fa_cnt, ofdm_fa_cnt;
++	u32 crc32_cnt, cca32_cnt;
++	u32 cck_enable;
++
++	cck_enable = rtw_read32(rtwdev, REG_RXPSEL) & BIT(28);
++	cck_fa_cnt = rtw_read16(rtwdev, REG_FA_CCK);
++	ofdm_fa_cnt = rtw_read16(rtwdev, REG_FA_OFDM);
++
++	dm_info->cck_fa_cnt = cck_fa_cnt;
++	dm_info->ofdm_fa_cnt = ofdm_fa_cnt;
++	dm_info->total_fa_cnt = ofdm_fa_cnt;
++	if (cck_enable)
++		dm_info->total_fa_cnt += cck_fa_cnt;
++
++	crc32_cnt = rtw_read32(rtwdev, REG_CRC_CCK);
++	dm_info->cck_ok_cnt = u32_get_bits(crc32_cnt, MASKLWORD);
++	dm_info->cck_err_cnt = u32_get_bits(crc32_cnt, MASKHWORD);
++
++	crc32_cnt = rtw_read32(rtwdev, REG_CRC_OFDM);
++	dm_info->ofdm_ok_cnt = u32_get_bits(crc32_cnt, MASKLWORD);
++	dm_info->ofdm_err_cnt = u32_get_bits(crc32_cnt, MASKHWORD);
++
++	crc32_cnt = rtw_read32(rtwdev, REG_CRC_HT);
++	dm_info->ht_ok_cnt = u32_get_bits(crc32_cnt, MASKLWORD);
++	dm_info->ht_err_cnt = u32_get_bits(crc32_cnt, MASKHWORD);
++
++	crc32_cnt = rtw_read32(rtwdev, REG_CRC_VHT);
++	dm_info->vht_ok_cnt = u32_get_bits(crc32_cnt, MASKLWORD);
++	dm_info->vht_err_cnt = u32_get_bits(crc32_cnt, MASKHWORD);
++
++	cca32_cnt = rtw_read32(rtwdev, REG_CCA_OFDM);
++	dm_info->ofdm_cca_cnt = u32_get_bits(cca32_cnt, MASKHWORD);
++	dm_info->total_cca_cnt = dm_info->ofdm_cca_cnt;
++	if (cck_enable) {
++		cca32_cnt = rtw_read32(rtwdev, REG_CCA_CCK);
++		dm_info->cck_cca_cnt = u32_get_bits(cca32_cnt, MASKLWORD);
++		dm_info->total_cca_cnt += dm_info->cck_cca_cnt;
++	}
++
++	rtw_write32_set(rtwdev, REG_FAS, BIT(17));
++	rtw_write32_clr(rtwdev, REG_FAS, BIT(17));
++	rtw_write32_clr(rtwdev, REG_CCK0_FAREPORT, BIT(15));
++	rtw_write32_set(rtwdev, REG_CCK0_FAREPORT, BIT(15));
++	rtw_write32_set(rtwdev, REG_CNTRST, BIT(0));
++	rtw_write32_clr(rtwdev, REG_CNTRST, BIT(0));
++}
++
++#define MAC_REG_NUM_8814 2
++#define BB_REG_NUM_8814 14
++#define RF_REG_NUM_8814 1
++
++static void rtw8814a_iqk_backup_mac_bb(struct rtw_dev *rtwdev,
++				       u32 *mac_backup, u32 *bb_backup,
++				       const u32 *mac_regs,
++				       const u32 *bb_regs)
++{
++	u32 i;
++
++	/* save MACBB default value */
++	for (i = 0; i < MAC_REG_NUM_8814; i++)
++		mac_backup[i] = rtw_read32(rtwdev, mac_regs[i]);
++
++	for (i = 0; i < BB_REG_NUM_8814; i++)
++		bb_backup[i] = rtw_read32(rtwdev, bb_regs[i]);
++}
++
++static void rtw8814a_iqk_backup_rf(struct rtw_dev *rtwdev,
++				   u32 rf_backup[][4], const u32 *rf_regs)
++{
++	u32 i;
++
++	/* Save RF Parameters */
++	for (i = 0; i < RF_REG_NUM_8814; i++) {
++		rf_backup[i][RF_PATH_A] = rtw_read_rf(rtwdev, RF_PATH_A,
++						      rf_regs[i], RFREG_MASK);
++		rf_backup[i][RF_PATH_B] = rtw_read_rf(rtwdev, RF_PATH_B,
++						      rf_regs[i], RFREG_MASK);
++		rf_backup[i][RF_PATH_C] = rtw_read_rf(rtwdev, RF_PATH_C,
++						      rf_regs[i], RFREG_MASK);
++		rf_backup[i][RF_PATH_D] = rtw_read_rf(rtwdev, RF_PATH_D,
++						      rf_regs[i], RFREG_MASK);
++	}
++}
++
++static void rtw8814a_iqk_afe_setting(struct rtw_dev *rtwdev, bool do_iqk)
++{
++	if (do_iqk) {
++		/* IQK AFE setting RX_WAIT_CCA mode */
++		rtw_write32(rtwdev, REG_AFE_PWR1_A, 0x0e808003);
++		rtw_write32(rtwdev, REG_AFE_PWR1_B, 0x0e808003);
++		rtw_write32(rtwdev, REG_AFE_PWR1_C, 0x0e808003);
++		rtw_write32(rtwdev, REG_AFE_PWR1_D, 0x0e808003);
++	} else {
++		rtw_write32(rtwdev, REG_AFE_PWR1_A, 0x07808003);
++		rtw_write32(rtwdev, REG_AFE_PWR1_B, 0x07808003);
++		rtw_write32(rtwdev, REG_AFE_PWR1_C, 0x07808003);
++		rtw_write32(rtwdev, REG_AFE_PWR1_D, 0x07808003);
++	}
++
++	rtw_write32_mask(rtwdev, REG_DAC_RSTB, BIT(13), 0x1);
++
++	rtw_write8_set(rtwdev, REG_GNT_BT, BIT(2) | BIT(1));
++	rtw_write8_clr(rtwdev, REG_GNT_BT, BIT(2) | BIT(1));
++
++	rtw_write32_set(rtwdev, REG_CCK_RPT_FORMAT, BIT(2));
++	rtw_write32_clr(rtwdev, REG_CCK_RPT_FORMAT, BIT(2));
++}
++
++static void rtw8814a_iqk_restore_mac_bb(struct rtw_dev *rtwdev,
++					u32 *mac_backup, u32 *bb_backup,
++					const u32 *mac_regs,
++					const u32 *bb_regs)
++{
++	u32 i;
++
++	/* Reload MacBB Parameters */
++	for (i = 0; i < MAC_REG_NUM_8814; i++)
++		rtw_write32(rtwdev, mac_regs[i], mac_backup[i]);
++
++	for (i = 0; i < BB_REG_NUM_8814; i++)
++		rtw_write32(rtwdev, bb_regs[i], bb_backup[i]);
++}
++
++static void rtw8814a_iqk_restore_rf(struct rtw_dev *rtwdev,
++				    const u32 rf_backup[][4],
++				    const u32 *rf_regs)
++{
++	u32 i;
++
++	rtw_write_rf(rtwdev, RF_PATH_A, RF_LUTWE, RFREG_MASK, 0x0);
++	rtw_write_rf(rtwdev, RF_PATH_B, RF_LUTWE, RFREG_MASK, 0x0);
++	rtw_write_rf(rtwdev, RF_PATH_C, RF_LUTWE, RFREG_MASK, 0x0);
++	rtw_write_rf(rtwdev, RF_PATH_D, RF_LUTWE, RFREG_MASK, 0x0);
++
++	rtw_write_rf(rtwdev, RF_PATH_A, RF_RXBB2, RFREG_MASK, 0x88001);
++	rtw_write_rf(rtwdev, RF_PATH_B, RF_RXBB2, RFREG_MASK, 0x88001);
++	rtw_write_rf(rtwdev, RF_PATH_C, RF_RXBB2, RFREG_MASK, 0x88001);
++	rtw_write_rf(rtwdev, RF_PATH_D, RF_RXBB2, RFREG_MASK, 0x88001);
++
++	for (i = 0; i < RF_REG_NUM_8814; i++) {
++		rtw_write_rf(rtwdev, RF_PATH_A, rf_regs[i],
++			     RFREG_MASK, rf_backup[i][RF_PATH_A]);
++		rtw_write_rf(rtwdev, RF_PATH_B, rf_regs[i],
++			     RFREG_MASK, rf_backup[i][RF_PATH_B]);
++		rtw_write_rf(rtwdev, RF_PATH_C, rf_regs[i],
++			     RFREG_MASK, rf_backup[i][RF_PATH_C]);
++		rtw_write_rf(rtwdev, RF_PATH_D, rf_regs[i],
++			     RFREG_MASK, rf_backup[i][RF_PATH_D]);
++	}
++}
++
++static void rtw8814a_iqk_reset_nctl(struct rtw_dev *rtwdev)
++{
++	rtw_write32(rtwdev, 0x1b00, 0xf8000000);
++	rtw_write32(rtwdev, 0x1b80, 0x00000006);
++
++	rtw_write32(rtwdev, 0x1b00, 0xf8000000);
++	rtw_write32(rtwdev, 0x1b80, 0x00000002);
++}
++
++static void rtw8814a_iqk_configure_mac(struct rtw_dev *rtwdev)
++{
++	rtw_write8(rtwdev, REG_TXPAUSE, 0x3f);
++	rtw_write32_clr(rtwdev, REG_BCN_CTRL,
++			(BIT_EN_BCN_FUNCTION << 8) | BIT_EN_BCN_FUNCTION);
++
++	/* RX ante off */
++	rtw_write8(rtwdev, REG_RXPSEL, 0x00);
++	/* CCA off */
++	rtw_write32_mask(rtwdev, REG_CCA2ND, 0xf, 0xe);
++	/* CCK RX path off */
++	rtw_write32_set(rtwdev, REG_PRECTRL, BIT_IQ_WGT);
++	rtw_write32(rtwdev, REG_RFE_PINMUX_A, 0x77777777);
++	rtw_write32(rtwdev, REG_RFE_PINMUX_B, 0x77777777);
++	rtw_write32(rtwdev, REG_RFE_PINMUX_C, 0x77777777);
++	rtw_write32(rtwdev, REG_RFE_PINMUX_D, 0x77777777);
++	rtw_write32_mask(rtwdev, REG_RFE_INVSEL_D, BIT_RFE_SELSW0_D, 0x77);
++	rtw_write32_mask(rtwdev, REG_PSD, BIT_PSD_INI, 0x0);
++
++	rtw_write32_mask(rtwdev, REG_RFE_INV0, 0xf, 0x0);
++}
++
++static void rtw8814a_lok_one_shot(struct rtw_dev *rtwdev, u8 path)
++{
++	u32 lok_temp1, lok_temp2;
++	bool lok_ready;
++	u8 ii;
++
++	/* ADC Clock source */
++	rtw_write32_mask(rtwdev, REG_FAS, BIT(21) | BIT(20), path);
++	/* LOK: CMD ID = 0
++	 * {0xf8000011, 0xf8000021, 0xf8000041, 0xf8000081}
++	 */
++	rtw_write32(rtwdev, 0x1b00, 0xf8000001 | (BIT(path) << 4));
++
++	usleep_range(1000, 1100);
++
++	if (read_poll_timeout(!rtw_read32_mask, lok_ready, lok_ready,
++			      1000, 10000, false,
++			      rtwdev, 0x1b00, BIT(0))) {
++		rtw_dbg(rtwdev, RTW_DBG_RFK, "==>S%d LOK timed out\n", path);
++
++		rtw8814a_iqk_reset_nctl(rtwdev);
++
++		rtw_write_rf(rtwdev, path, RF_DTXLOK, RFREG_MASK, 0x08400);
++
++		return;
++	}
++
++	rtw_write32(rtwdev, 0x1b00, 0xf8000000 | (path << 1));
++	rtw_write32(rtwdev, 0x1bd4, 0x003f0001);
++
++	lok_temp2 = rtw_read32_mask(rtwdev, 0x1bfc, 0x003e0000);
++	lok_temp2 = (lok_temp2 + 0x10) & 0x1f;
++
++	lok_temp1 = rtw_read32_mask(rtwdev, 0x1bfc, 0x0000003e);
++	lok_temp1 = (lok_temp1 + 0x10) & 0x1f;
++
++	for (ii = 1; ii < 5; ii++) {
++		lok_temp1 += (lok_temp1 & BIT(4 - ii)) << (ii * 2);
++		lok_temp2 += (lok_temp2 & BIT(4 - ii)) << (ii * 2);
++	}
++
++	rtw_dbg(rtwdev, RTW_DBG_RFK,
++		"path %d lok_temp1 = %#x, lok_temp2 = %#x\n",
++		path, lok_temp1 >> 4, lok_temp2 >> 4);
++
++	rtw_write_rf(rtwdev, path, RF_DTXLOK, 0x07c00, lok_temp1 >> 4);
++	rtw_write_rf(rtwdev, path, RF_DTXLOK, 0xf8000, lok_temp2 >> 4);
++}
++
++static void rtw8814a_iqk_tx_one_shot(struct rtw_dev *rtwdev, u8 path,
++				     u32 *tx_matrix, bool *tx_ok)
++{
++	u8 bw = rtwdev->hal.current_band_width;
++	u8 cal_retry;
++	u32 iqk_cmd;
++
++	for (cal_retry = 0; cal_retry < 4; cal_retry++) {
++		rtw_write32_mask(rtwdev, REG_FAS, BIT(21) | BIT(20), path);
++
++		iqk_cmd = 0xf8000001 | ((bw + 3) << 8) | (BIT(path) << 4);
++
++		rtw_dbg(rtwdev, RTW_DBG_RFK, "TXK_Trigger = %#x\n", iqk_cmd);
++
++		rtw_write32(rtwdev, 0x1b00, iqk_cmd);
++
++		usleep_range(10000, 11000);
++
++		if (read_poll_timeout(!rtw_read32_mask, *tx_ok, *tx_ok,
++				      1000, 20000, false,
++				      rtwdev, 0x1b00, BIT(0))) {
++			rtw_dbg(rtwdev, RTW_DBG_RFK,
++				"tx iqk S%d timed out\n", path);
++
++			rtw8814a_iqk_reset_nctl(rtwdev);
++		} else {
++			*tx_ok = !rtw_read32_mask(rtwdev, 0x1b08, BIT(26));
++
++			if (*tx_ok)
++				break;
++		}
++	}
++
++	rtw_dbg(rtwdev, RTW_DBG_RFK, "S%d tx ==> 0x1b00 = 0x%x\n",
++		path, rtw_read32(rtwdev, 0x1b00));
++	rtw_dbg(rtwdev, RTW_DBG_RFK, "S%d tx ==> 0x1b08 = 0x%x\n",
++		path, rtw_read32(rtwdev, 0x1b08));
++	rtw_dbg(rtwdev, RTW_DBG_RFK, "S%d tx ==> cal_retry = %x\n",
++		path, cal_retry);
++
++	rtw_write32(rtwdev, 0x1b00, 0xf8000000 | (path << 1));
++
++	if (*tx_ok) {
++		*tx_matrix = rtw_read32(rtwdev, 0x1b38);
++
++		rtw_dbg(rtwdev, RTW_DBG_RFK, "S%d_IQC = 0x%x\n",
++			path, *tx_matrix);
++	}
++}
++
++static void rtw8814a_iqk_rx_one_shot(struct rtw_dev *rtwdev, u8 path,
++				     u32 *tx_matrix, bool *tx_ok)
++{
++	static const u16 iqk_apply[RTW_RF_PATH_MAX] = {
++		REG_TXAGCIDX, REG_TX_AGC_B, REG_TX_AGC_C, REG_TX_AGC_D
++	};
++	u8 band = rtwdev->hal.current_band_type;
++	u8 bw = rtwdev->hal.current_band_width;
++	u32 rx_matrix;
++	u8 cal_retry;
++	u32 iqk_cmd;
++	bool rx_ok;
++
++	for (cal_retry = 0; cal_retry < 4; cal_retry++) {
++		rtw_write32_mask(rtwdev, REG_FAS, BIT(21) | BIT(20), path);
++
++		if (band == RTW_BAND_2G) {
++			rtw_write_rf(rtwdev, path, RF_LUTDBG, BIT(11), 0x1);
++			rtw_write_rf(rtwdev, path, RF_GAINTX, 0xfffff, 0x51ce1);
++
++			switch (path) {
++			case 0:
++			case 1:
++				rtw_write32(rtwdev, REG_RFE_PINMUX_B,
++					    0x54775477);
++				break;
++			case 2:
++				rtw_write32(rtwdev, REG_RFE_PINMUX_C,
++					    0x54775477);
++				break;
++			case 3:
++				rtw_write32(rtwdev, REG_RFE_INVSEL_D, 0x75400000);
++				rtw_write32(rtwdev, REG_RFE_PINMUX_D,
++					    0x77777777);
++				break;
++			}
++		}
++
++		iqk_cmd = 0xf8000001 | ((9 - bw) << 8) | (BIT(path) << 4);
++
++		rtw_dbg(rtwdev, RTW_DBG_RFK, "RXK_Trigger = 0x%x\n", iqk_cmd);
++
++		rtw_write32(rtwdev, 0x1b00, iqk_cmd);
++
++		usleep_range(10000, 11000);
++
++		if (read_poll_timeout(!rtw_read32_mask, rx_ok, rx_ok,
++				      1000, 20000, false,
++				      rtwdev, 0x1b00, BIT(0))) {
++			rtw_dbg(rtwdev, RTW_DBG_RFK,
++				"rx iqk S%d timed out\n", path);
++
++			rtw8814a_iqk_reset_nctl(rtwdev);
++		} else {
++			rx_ok = !rtw_read32_mask(rtwdev, 0x1b08, BIT(26));
++
++			if (rx_ok)
++				break;
++		}
++	}
++
++	rtw_dbg(rtwdev, RTW_DBG_RFK, "S%d rx ==> 0x1b00 = 0x%x\n",
++		path, rtw_read32(rtwdev, 0x1b00));
++	rtw_dbg(rtwdev, RTW_DBG_RFK, "S%d rx ==> 0x1b08 = 0x%x\n",
++		path, rtw_read32(rtwdev, 0x1b08));
++	rtw_dbg(rtwdev, RTW_DBG_RFK, "S%d rx ==> cal_retry = %x\n",
++		path, cal_retry);
++
++	rtw_write32(rtwdev, 0x1b00, 0xf8000000 | (path << 1));
++
++	if (rx_ok) {
++		rtw_write32(rtwdev, 0x1b3c, 0x20000000);
++		rx_matrix = rtw_read32(rtwdev, 0x1b3c);
++
++		rtw_dbg(rtwdev, RTW_DBG_RFK, "S%d_IQC = 0x%x\n",
++			path, rx_matrix);
++	}
++
++	if (*tx_ok)
++		rtw_write32(rtwdev, 0x1b38, *tx_matrix);
++	else
++		rtw_write32_mask(rtwdev, iqk_apply[path], BIT(0), 0x0);
++
++	if (!rx_ok)
++		rtw_write32_mask(rtwdev, iqk_apply[path],
++				 BIT(11) | BIT(10), 0x0);
++
++	if (band == RTW_BAND_2G)
++		rtw_write_rf(rtwdev, path, RF_LUTDBG, BIT(11), 0x0);
++}
++
++static void rtw8814a_iqk(struct rtw_dev *rtwdev)
++{
++	u8 band = rtwdev->hal.current_band_type;
++	u8 bw = rtwdev->hal.current_band_width;
++	u32 tx_matrix[RTW_RF_PATH_MAX];
++	bool tx_ok[RTW_RF_PATH_MAX];
++	u8 path;
++
++	rtw_dbg(rtwdev, RTW_DBG_RFK, "IQK band = %d GHz bw = %d MHz\n",
++		band == RTW_BAND_2G ? 2 : 5, (1 << (bw + 1)) * 10);
++
++	rtw_write_rf(rtwdev, RF_PATH_A, RF_TXMOD, BIT(19), 0x1);
++	rtw_write_rf(rtwdev, RF_PATH_B, RF_TXMOD, BIT(19), 0x1);
++	rtw_write_rf(rtwdev, RF_PATH_C, RF_TXMOD, BIT(19), 0x1);
++	rtw_write_rf(rtwdev, RF_PATH_D, RF_TXMOD, BIT(19), 0x1);
++
++	rtw_write32_mask(rtwdev, REG_TXAGCIDX,
++			 (BIT(11) | BIT(10) | BIT(0)), 0x401);
++	rtw_write32_mask(rtwdev, REG_TX_AGC_B,
++			 (BIT(11) | BIT(10) | BIT(0)), 0x401);
++	rtw_write32_mask(rtwdev, REG_TX_AGC_C,
++			 (BIT(11) | BIT(10) | BIT(0)), 0x401);
++	rtw_write32_mask(rtwdev, REG_TX_AGC_D,
++			 (BIT(11) | BIT(10) | BIT(0)), 0x401);
++
++	if (band == RTW_BAND_5G)
++		rtw_write32(rtwdev, 0x1b00, 0xf8000ff1);
++	else
++		rtw_write32(rtwdev, 0x1b00, 0xf8000ef1);
++
++	usleep_range(1000, 1100);
++
++	rtw_write32(rtwdev, 0x810, 0x20101063);
++	rtw_write32(rtwdev, REG_DAC_RSTB, 0x0B00C000);
++
++	for (path = RF_PATH_A; path < RTW_RF_PATH_MAX; path++)
++		rtw8814a_lok_one_shot(rtwdev, path);
++
++	for (path = RF_PATH_A; path < RTW_RF_PATH_MAX; path++)
++		rtw8814a_iqk_tx_one_shot(rtwdev, path,
++					 &tx_matrix[path], &tx_ok[path]);
++
++	for (path = RF_PATH_A; path < RTW_RF_PATH_MAX; path++)
++		rtw8814a_iqk_rx_one_shot(rtwdev, path,
++					 &tx_matrix[path], &tx_ok[path]);
++}
++
++static void rtw8814a_do_iqk(struct rtw_dev *rtwdev)
++{
++	static const u32 backup_mac_reg[MAC_REG_NUM_8814] = {0x520, 0x550};
++	static const u32 backup_bb_reg[BB_REG_NUM_8814] = {
++		0xa14, 0x808, 0x838, 0x90c, 0x810, 0xcb0, 0xeb0,
++		0x18b4, 0x1ab4, 0x1abc, 0x9a4, 0x764, 0xcbc, 0x910
++	};
++	static const u32 backup_rf_reg[RF_REG_NUM_8814] = {0x0};
++	u32 rf_backup[RF_REG_NUM_8814][RTW_RF_PATH_MAX];
++	u32 mac_backup[MAC_REG_NUM_8814];
++	u32 bb_backup[BB_REG_NUM_8814];
++
++	rtw8814a_iqk_backup_mac_bb(rtwdev, mac_backup, bb_backup,
++				   backup_mac_reg, backup_bb_reg);
++	rtw8814a_iqk_afe_setting(rtwdev, true);
++	rtw8814a_iqk_backup_rf(rtwdev, rf_backup, backup_rf_reg);
++	rtw8814a_iqk_configure_mac(rtwdev);
++	rtw8814a_iqk(rtwdev);
++	rtw8814a_iqk_reset_nctl(rtwdev); /* for 3-wire to BB use */
++	rtw8814a_iqk_afe_setting(rtwdev, false);
++	rtw8814a_iqk_restore_mac_bb(rtwdev, mac_backup, bb_backup,
++				    backup_mac_reg, backup_bb_reg);
++	rtw8814a_iqk_restore_rf(rtwdev, rf_backup, backup_rf_reg);
++}
++
++static void rtw8814a_phy_calibration(struct rtw_dev *rtwdev)
++{
++	rtw8814a_do_iqk(rtwdev);
++}
++
++static void rtw8814a_coex_cfg_init(struct rtw_dev *rtwdev)
++{
++}
++
++static void rtw8814a_coex_cfg_ant_switch(struct rtw_dev *rtwdev, u8 ctrl_type,
++					 u8 pos_type)
++{
++	/* Override rtw_coex_coex_ctrl_owner(). RF path C does not
++	 * function when BIT_LTE_MUX_CTRL_PATH is set.
++	 */
++	rtw_write8_clr(rtwdev, REG_SYS_SDIO_CTRL + 3,
++		       BIT_LTE_MUX_CTRL_PATH >> 24);
++}
++
++static void rtw8814a_coex_cfg_gnt_fix(struct rtw_dev *rtwdev)
++{
++}
++
++static void rtw8814a_coex_cfg_gnt_debug(struct rtw_dev *rtwdev)
++{
++}
++
++static void rtw8814a_coex_cfg_rfe_type(struct rtw_dev *rtwdev)
++{
++	struct rtw_coex *coex = &rtwdev->coex;
++	struct rtw_coex_rfe *coex_rfe = &coex->rfe;
++
++	/* Only needed to make rtw8814a_coex_cfg_ant_switch() run. */
++	coex_rfe->ant_switch_exist = true;
++}
++
++static void rtw8814a_coex_cfg_wl_tx_power(struct rtw_dev *rtwdev, u8 wl_pwr)
++{
++}
++
++static void rtw8814a_coex_cfg_wl_rx_gain(struct rtw_dev *rtwdev, bool low_gain)
++{
++}
++
++static void rtw8814a_txagc_swing_offset(struct rtw_dev *rtwdev, u8 path,
++					u8 tx_pwr_idx_offset,
++					s8 *txagc_idx, u8 *swing_idx)
++{
++	struct rtw_dm_info *dm_info = &rtwdev->dm_info;
++	u8 swing_upper_bound = dm_info->default_ofdm_index + 10;
++	s8 delta_pwr_idx = dm_info->delta_power_index[path];
++	u8 swing_index = dm_info->default_ofdm_index;
++	u8 max_tx_pwr_idx_offset = 0xf;
++	u8 swing_lower_bound = 0;
++	s8 agc_index = 0;
++
++	tx_pwr_idx_offset = min_t(u8, tx_pwr_idx_offset, max_tx_pwr_idx_offset);
++
++	if (delta_pwr_idx >= 0) {
++		if (delta_pwr_idx <= tx_pwr_idx_offset) {
++			agc_index = delta_pwr_idx;
++			swing_index = dm_info->default_ofdm_index;
++		} else if (delta_pwr_idx > tx_pwr_idx_offset) {
++			agc_index = tx_pwr_idx_offset;
++			swing_index = dm_info->default_ofdm_index +
++					delta_pwr_idx - tx_pwr_idx_offset;
++			swing_index = min_t(u8, swing_index, swing_upper_bound);
++		}
++	} else {
++		if (dm_info->default_ofdm_index > abs(delta_pwr_idx))
++			swing_index =
++				dm_info->default_ofdm_index + delta_pwr_idx;
++		else
++			swing_index = swing_lower_bound;
++		swing_index = max_t(u8, swing_index, swing_lower_bound);
++
++		agc_index = 0;
++	}
++
++	if (swing_index >= RTW_TXSCALE_SIZE) {
++		rtw_warn(rtwdev, "swing index overflow\n");
++		swing_index = RTW_TXSCALE_SIZE - 1;
++	}
++	*txagc_idx = agc_index;
++	*swing_idx = swing_index;
++}
++
++static void rtw8814a_pwrtrack_set_pwr(struct rtw_dev *rtwdev, u8 path,
++				      u8 pwr_idx_offset)
++{
++	static const u32 txagc_reg[RTW_RF_PATH_MAX] = {
++		REG_TX_AGC_A, REG_TX_AGC_B, REG_TX_AGC_C, REG_TX_AGC_D
++	};
++	static const u32 txscale_reg[RTW_RF_PATH_MAX] = {
++		REG_TXSCALE_A, REG_TXSCALE_B, REG_TXSCALE_C, REG_TXSCALE_D
++	};
++	s8 txagc_idx;
++	u8 swing_idx;
++
++	rtw8814a_txagc_swing_offset(rtwdev, path, pwr_idx_offset,
++				    &txagc_idx, &swing_idx);
++	rtw_write32_mask(rtwdev, txagc_reg[path], GENMASK(29, 25),
++			 txagc_idx);
++	rtw_write32_mask(rtwdev, txscale_reg[path], BB_SWING_MASK,
++			 rtw8814a_txscale_tbl[swing_idx]);
++}
++
++static void rtw8814a_pwrtrack_set(struct rtw_dev *rtwdev, u8 path)
++{
++	u8 max_pwr_idx = rtwdev->chip->max_power_index;
++	u8 band_width = rtwdev->hal.current_band_width;
++	u8 channel = rtwdev->hal.current_channel;
++	u8 tx_rate = rtwdev->dm_info.tx_rate;
++	u8 regd = rtw_regd_get(rtwdev);
++	u8 pwr_idx_offset, tx_pwr_idx;
++
++	tx_pwr_idx = rtw_phy_get_tx_power_index(rtwdev, path, tx_rate,
++						band_width, channel, regd);
++
++	tx_pwr_idx = min_t(u8, tx_pwr_idx, max_pwr_idx);
++
++	pwr_idx_offset = max_pwr_idx - tx_pwr_idx;
++
++	rtw8814a_pwrtrack_set_pwr(rtwdev, path, pwr_idx_offset);
++}
++
++static void rtw8814a_phy_pwrtrack_path(struct rtw_dev *rtwdev,
++				       struct rtw_swing_table *swing_table,
++				       u8 path)
++{
++	struct rtw_dm_info *dm_info = &rtwdev->dm_info;
++	u8 power_idx_cur, power_idx_last;
++	u8 delta;
++
++	/* 8814A only has one thermal meter at PATH A */
++	delta = rtw_phy_pwrtrack_get_delta(rtwdev, RF_PATH_A);
++
++	power_idx_last = dm_info->delta_power_index[path];
++	power_idx_cur = rtw_phy_pwrtrack_get_pwridx(rtwdev, swing_table,
++						    path, RF_PATH_A, delta);
++
++	/* if delta of power indexes are the same, just skip */
++	if (power_idx_cur == power_idx_last)
++		return;
++
++	dm_info->delta_power_index[path] = power_idx_cur;
++	rtw8814a_pwrtrack_set(rtwdev, path);
++}
++
++static void rtw8814a_phy_pwrtrack(struct rtw_dev *rtwdev)
++{
++	struct rtw_dm_info *dm_info = &rtwdev->dm_info;
++	struct rtw_swing_table swing_table;
++	u8 thermal_value, path;
++
++	rtw_phy_config_swing_table(rtwdev, &swing_table);
++
++	if (rtwdev->efuse.thermal_meter[RF_PATH_A] == 0xff)
++		return;
++
++	thermal_value = rtw_read_rf(rtwdev, RF_PATH_A, RF_T_METER, 0xfc00);
++
++	rtw_phy_pwrtrack_avg(rtwdev, thermal_value, RF_PATH_A);
++
++	if (dm_info->pwr_trk_init_trigger)
++		dm_info->pwr_trk_init_trigger = false;
++	else if (!rtw_phy_pwrtrack_thermal_changed(rtwdev, thermal_value,
++						   RF_PATH_A))
++		goto iqk;
++
++	for (path = RF_PATH_A; path < rtwdev->hal.rf_path_num; path++)
++		rtw8814a_phy_pwrtrack_path(rtwdev, &swing_table, path);
++
++iqk:
++	if (rtw_phy_pwrtrack_need_iqk(rtwdev))
++		rtw8814a_do_iqk(rtwdev);
++}
++
++static void rtw8814a_pwr_track(struct rtw_dev *rtwdev)
++{
++	struct rtw_dm_info *dm_info = &rtwdev->dm_info;
++
++	if (!dm_info->pwr_trk_triggered) {
++		rtw_write_rf(rtwdev, RF_PATH_A, RF_T_METER,
++			     GENMASK(17, 16), 0x03);
++		dm_info->pwr_trk_triggered = true;
++		return;
++	}
++
++	rtw8814a_phy_pwrtrack(rtwdev);
++	dm_info->pwr_trk_triggered = false;
++}
++
++static void rtw8814a_phy_cck_pd_set(struct rtw_dev *rtwdev, u8 new_lvl)
++{
++	static const u8 pd[CCK_PD_LV_MAX] = {0x40, 0x83, 0xcd, 0xdd, 0xed};
++	struct rtw_dm_info *dm_info = &rtwdev->dm_info;
++
++	/* Override rtw_phy_cck_pd_lv_link(). It implements something
++	 * like type 2/3/4. We need type 1 here.
++	 */
++	if (rtw_is_assoc(rtwdev)) {
++		if (dm_info->min_rssi > 60) {
++			new_lvl = CCK_PD_LV3;
++		} else if (dm_info->min_rssi > 35) {
++			new_lvl = CCK_PD_LV2;
++		} else if (dm_info->min_rssi > 20) {
++			if (dm_info->cck_fa_avg > 500)
++				new_lvl = CCK_PD_LV2;
++			else if (dm_info->cck_fa_avg < 250)
++				new_lvl = CCK_PD_LV1;
++			else
++				return;
++		} else {
++			new_lvl = CCK_PD_LV1;
++		}
++	}
++
++	rtw_dbg(rtwdev, RTW_DBG_PHY, "lv: (%d) -> (%d)\n",
++		dm_info->cck_pd_lv[RTW_CHANNEL_WIDTH_20][RF_PATH_A], new_lvl);
++
++	if (dm_info->cck_pd_lv[RTW_CHANNEL_WIDTH_20][RF_PATH_A] == new_lvl)
++		return;
++
++	dm_info->cck_fa_avg = CCK_FA_AVG_RESET;
++	dm_info->cck_pd_lv[RTW_CHANNEL_WIDTH_20][RF_PATH_A] = new_lvl;
++
++	rtw_write8(rtwdev, REG_CCK_PD_TH, pd[new_lvl]);
++}
++
++static void rtw8814a_led_set(struct led_classdev *led,
++			     enum led_brightness brightness)
++{
++	struct rtw_dev *rtwdev = container_of(led, struct rtw_dev, led_cdev);
++	u32 led_gpio_cfg;
++
++	led_gpio_cfg = rtw_read32(rtwdev, REG_GPIO_PIN_CTRL_2);
++	led_gpio_cfg |= BIT(16) | BIT(17) | BIT(21) | BIT(22);
++
++	if (brightness == LED_OFF) {
++		led_gpio_cfg |= BIT(8) | BIT(9) | BIT(13) | BIT(14);
++	} else {
++		led_gpio_cfg &= ~(BIT(8) | BIT(9) | BIT(13) | BIT(14));
++		led_gpio_cfg &= ~(BIT(0) | BIT(1) | BIT(5) | BIT(6));
++	}
++
++	rtw_write32(rtwdev, REG_GPIO_PIN_CTRL_2, led_gpio_cfg);
++}
++
++static void rtw8814a_fill_txdesc_checksum(struct rtw_dev *rtwdev,
++					  struct rtw_tx_pkt_info *pkt_info,
++					  u8 *txdesc)
++{
++	size_t words = 32 / 2; /* calculate the first 32 bytes (16 words) */
++
++	fill_txdesc_checksum_common(txdesc, words);
++}
++
++static const struct rtw_chip_ops rtw8814a_ops = {
++	.power_on		= rtw_power_on,
++	.power_off		= rtw_power_off,
++	.phy_set_param		= rtw8814a_phy_set_param,
++	.read_efuse		= rtw8814a_read_efuse,
++	.query_phy_status	= rtw8814a_query_phy_status,
++	.set_channel		= rtw8814a_set_channel,
++	.mac_init		= rtw8814a_mac_init,
++	.read_rf		= rtw_phy_read_rf,
++	.write_rf		= rtw_phy_write_rf_reg_sipi,
++	.set_tx_power_index	= rtw8814a_set_tx_power_index,
++	.set_antenna		= NULL,
++	.cfg_ldo25		= rtw8814a_cfg_ldo25,
++	.efuse_grant		= rtw8814a_efuse_grant,
++	.false_alarm_statistics	= rtw8814a_false_alarm_statistics,
++	.phy_calibration	= rtw8814a_phy_calibration,
++	.cck_pd_set		= rtw8814a_phy_cck_pd_set,
++	.pwr_track		= rtw8814a_pwr_track,
++	.config_bfee		= NULL,
++	.set_gid_table		= NULL,
++	.cfg_csi_rate		= NULL,
++	.led_set		= rtw8814a_led_set,
++	.fill_txdesc_checksum	= rtw8814a_fill_txdesc_checksum,
++
++	.coex_set_init		= rtw8814a_coex_cfg_init,
++	.coex_set_ant_switch	= rtw8814a_coex_cfg_ant_switch,
++	.coex_set_gnt_fix	= rtw8814a_coex_cfg_gnt_fix,
++	.coex_set_gnt_debug	= rtw8814a_coex_cfg_gnt_debug,
++	.coex_set_rfe_type	= rtw8814a_coex_cfg_rfe_type,
++	.coex_set_wl_tx_power	= rtw8814a_coex_cfg_wl_tx_power,
++	.coex_set_wl_rx_gain	= rtw8814a_coex_cfg_wl_rx_gain,
++};
++
++static const struct rtw_rqpn rqpn_table_8814a[] = {
++	/* SDIO */
++	{RTW_DMA_MAPPING_NORMAL, RTW_DMA_MAPPING_NORMAL, /* vo vi */
++	 RTW_DMA_MAPPING_LOW, RTW_DMA_MAPPING_LOW,	 /* be bk */
++	 RTW_DMA_MAPPING_EXTRA, RTW_DMA_MAPPING_HIGH},	 /* mg hi */
++	/* PCIE */
++	{RTW_DMA_MAPPING_HIGH, RTW_DMA_MAPPING_NORMAL,
++	 RTW_DMA_MAPPING_LOW, RTW_DMA_MAPPING_LOW,
++	 RTW_DMA_MAPPING_HIGH, RTW_DMA_MAPPING_HIGH},
++	/* USB, 2 bulk out */
++	{RTW_DMA_MAPPING_HIGH, RTW_DMA_MAPPING_HIGH,
++	 RTW_DMA_MAPPING_NORMAL, RTW_DMA_MAPPING_NORMAL,
++	 RTW_DMA_MAPPING_HIGH, RTW_DMA_MAPPING_HIGH},
++	/* USB, 3 bulk out */
++	{RTW_DMA_MAPPING_HIGH, RTW_DMA_MAPPING_NORMAL,
++	 RTW_DMA_MAPPING_LOW, RTW_DMA_MAPPING_LOW,
++	 RTW_DMA_MAPPING_HIGH, RTW_DMA_MAPPING_HIGH},
++	/* USB, 4 bulk out */
++	{RTW_DMA_MAPPING_HIGH, RTW_DMA_MAPPING_NORMAL,
++	 RTW_DMA_MAPPING_LOW, RTW_DMA_MAPPING_LOW,
++	 RTW_DMA_MAPPING_HIGH, RTW_DMA_MAPPING_HIGH},
++};
++
++static const struct rtw_prioq_addrs prioq_addrs_8814a = {
++	.prio[RTW_DMA_MAPPING_EXTRA] = {
++		.rsvd = REG_FIFOPAGE_INFO_4, .avail = REG_FIFOPAGE_INFO_4 + 2,
++	},
++	.prio[RTW_DMA_MAPPING_LOW] = {
++		.rsvd = REG_FIFOPAGE_INFO_2, .avail = REG_FIFOPAGE_INFO_2 + 2,
++	},
++	.prio[RTW_DMA_MAPPING_NORMAL] = {
++		.rsvd = REG_FIFOPAGE_INFO_3, .avail = REG_FIFOPAGE_INFO_3 + 2,
++	},
++	.prio[RTW_DMA_MAPPING_HIGH] = {
++		.rsvd = REG_FIFOPAGE_INFO_1, .avail = REG_FIFOPAGE_INFO_1 + 2,
++	},
++	.wsize = true,
++};
++
++static const struct rtw_page_table page_table_8814a[] = {
++	/* SDIO */
++	{0, 0, 0, 0, 0},	/* hq nq lq exq gapq */
++	/* PCIE */
++	{32, 32, 32, 32, 0},
++	/* USB, 2 bulk out */
++	{32, 32, 32, 32, 0},
++	/* USB, 3 bulk out */
++	{32, 32, 32, 32, 0},
++	/* USB, 4 bulk out */
++	{32, 32, 32, 32, 0},
++};
++
++static const struct rtw_intf_phy_para_table phy_para_table_8814a = {};
++
++static const struct rtw_hw_reg rtw8814a_dig[] = {
++	[0] = { .addr = 0xc50, .mask = 0x7f },
++	[1] = { .addr = 0xe50, .mask = 0x7f },
++	[2] = { .addr = 0x1850, .mask = 0x7f },
++	[3] = { .addr = 0x1a50, .mask = 0x7f },
++};
++
++static const struct rtw_rfe_def rtw8814a_rfe_defs[] = {
++	[0] = { .phy_pg_tbl	= &rtw8814a_bb_pg_type0_tbl,
++		.txpwr_lmt_tbl	= &rtw8814a_txpwr_lmt_type0_tbl,
++		.pwr_track_tbl	= &rtw8814a_rtw_pwrtrk_type0_tbl },
++	[1] = { .phy_pg_tbl	= &rtw8814a_bb_pg_tbl,
++		.txpwr_lmt_tbl	= &rtw8814a_txpwr_lmt_type1_tbl,
++		.pwr_track_tbl	= &rtw8814a_rtw_pwrtrk_tbl },
++};
++
++/* rssi in percentage % (dbm = % - 100) */
++static const u8 wl_rssi_step_8814a[] = {60, 50, 44, 30};
++static const u8 bt_rssi_step_8814a[] = {30, 30, 30, 30};
++
++/* wl_tx_dec_power, bt_tx_dec_power, wl_rx_gain, bt_rx_lna_constrain */
++static const struct coex_rf_para rf_para_tx_8814a[] = {
++	{0, 0, false, 7},  /* for normal */
++	{0, 16, false, 7}, /* for WL-CPT */
++	{4, 0, true, 1},
++	{3, 6, true, 1},
++	{2, 9, true, 1},
++	{1, 13, true, 1}
++};
++
++static const struct coex_rf_para rf_para_rx_8814a[] = {
++	{0, 0, false, 7},  /* for normal */
++	{0, 16, false, 7}, /* for WL-CPT */
++	{4, 0, true, 1},
++	{3, 6, true, 1},
++	{2, 9, true, 1},
++	{1, 13, true, 1}
++};
++
++static_assert(ARRAY_SIZE(rf_para_tx_8814a) == ARRAY_SIZE(rf_para_rx_8814a));
++
++const struct rtw_chip_info rtw8814a_hw_spec = {
++	.ops = &rtw8814a_ops,
++	.id = RTW_CHIP_TYPE_8814A,
++	.fw_name = "rtw88/rtw8814a_fw.bin",
++	.wlan_cpu = RTW_WCPU_11AC,
++	.tx_pkt_desc_sz = 40,
++	.tx_buf_desc_sz = 16,
++	.rx_pkt_desc_sz = 24,
++	.rx_buf_desc_sz = 8,
++	.phy_efuse_size = 1024,
++	.log_efuse_size = 512,
++	.ptct_efuse_size = 0,
++	.txff_size = (2048 - 10) * TX_PAGE_SIZE,
++	.rxff_size = 23552,
++	.rsvd_drv_pg_num = 8,
++	.band = RTW_BAND_2G | RTW_BAND_5G,
++	.page_size = TX_PAGE_SIZE,
++	.csi_buf_pg_num = 0,
++	.dig_min = 0x1c,
++	.txgi_factor = 1,
++	.is_pwr_by_rate_dec = true,
++	.rx_ldpc = true,
++	.max_power_index = 0x3f,
++	.ampdu_density = IEEE80211_HT_MPDU_DENSITY_2,
++	.usb_tx_agg_desc_num = 3,
++	.hw_feature_report = false,
++	.c2h_ra_report_size = 6,
++	.old_datarate_fb_limit = false,
++	.ht_supported = true,
++	.vht_supported = true,
++	.lps_deep_mode_supported = BIT(LPS_DEEP_MODE_LCLK),
++	.sys_func_en = 0xDC,
++	.pwr_on_seq = card_enable_flow_8814a,
++	.pwr_off_seq = card_disable_flow_8814a,
++	.rqpn_table = rqpn_table_8814a,
++	.prioq_addrs = &prioq_addrs_8814a,
++	.page_table = page_table_8814a,
++	.intf_table = &phy_para_table_8814a,
++	.dig = rtw8814a_dig,
++	.dig_cck = NULL,
++	.rf_base_addr = {0x2800, 0x2c00, 0x3800, 0x3c00},
++	.rf_sipi_addr = {0xc90, 0xe90, 0x1890, 0x1a90},
++	.ltecoex_addr = NULL,
++	.mac_tbl = &rtw8814a_mac_tbl,
++	.agc_tbl = &rtw8814a_agc_tbl,
++	.bb_tbl = &rtw8814a_bb_tbl,
++	.rf_tbl = {&rtw8814a_rf_a_tbl, &rtw8814a_rf_b_tbl,
++		   &rtw8814a_rf_c_tbl, &rtw8814a_rf_d_tbl},
++	.rfe_defs = rtw8814a_rfe_defs,
++	.rfe_defs_size = ARRAY_SIZE(rtw8814a_rfe_defs),
++	.iqk_threshold = 8,
++	.max_scan_ie_len = IEEE80211_MAX_DATA_LEN,
++
++	.coex_para_ver = 0,
++	.bt_desired_ver = 0,
++	.scbd_support = false,
++	.new_scbd10_def = false,
++	.ble_hid_profile_support = false,
++	.wl_mimo_ps_support = false,
++	.pstdma_type = COEX_PSTDMA_FORCE_LPSOFF,
++	.bt_rssi_type = COEX_BTRSSI_RATIO,
++	.ant_isolation = 15,
++	.rssi_tolerance = 2,
++	.wl_rssi_step = wl_rssi_step_8814a,
++	.bt_rssi_step = bt_rssi_step_8814a,
++	.table_sant_num = 0,
++	.table_sant = NULL,
++	.table_nsant_num = 0,
++	.table_nsant = NULL,
++	.tdma_sant_num = 0,
++	.tdma_sant = NULL,
++	.tdma_nsant_num = 0,
++	.tdma_nsant = NULL,
++	.wl_rf_para_num = ARRAY_SIZE(rf_para_tx_8814a),
++	.wl_rf_para_tx = rf_para_tx_8814a,
++	.wl_rf_para_rx = rf_para_rx_8814a,
++	.bt_afh_span_bw20 = 0x24,
++	.bt_afh_span_bw40 = 0x36,
++	.afh_5g_num = 0,
++	.afh_5g = NULL,
++	.coex_info_hw_regs_num = 0,
++	.coex_info_hw_regs = NULL,
++};
++EXPORT_SYMBOL(rtw8814a_hw_spec);
++
++MODULE_FIRMWARE("rtw88/rtw8814a_fw.bin");
++
++MODULE_AUTHOR("Bitterblue Smith <rtl8821cerfe2@gmail.com>");
++MODULE_DESCRIPTION("Realtek 802.11ac wireless 8814a driver");
++MODULE_LICENSE("Dual BSD/GPL");
+--- /dev/null
++++ b/drivers/net/wireless/realtek/rtw88/rtw8814a.h
+@@ -0,0 +1,62 @@
++/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
++/* Copyright(c) 2025  Realtek Corporation
++ */
++
++#ifndef __RTW8814A_H__
++#define __RTW8814A_H__
++
++struct rtw8814au_efuse {
++	u8 vid[2];			/* 0xd0 */
++	u8 pid[2];			/* 0xd2 */
++	u8 res[4];			/* 0xd4 */
++	u8 mac_addr[ETH_ALEN];		/* 0xd8 */
++} __packed;
++
++struct rtw8814ae_efuse {
++	u8 mac_addr[ETH_ALEN];		/* 0xd0 */
++	u8 vid[2];			/* 0xd6 */
++	u8 did[2];			/* 0xd8 */
++	u8 svid[2];			/* 0xda */
++	u8 smid[2];			/* 0xdc */
++} __packed;
++
++struct rtw8814a_efuse {
++	__le16 rtl_id;
++	u8 res0[0x0c];
++	u8 usb_mode;			/* 0x0e */
++	u8 res1;
++
++	/* power index for four RF paths */
++	struct rtw_txpwr_idx txpwr_idx_table[4];
++
++	u8 channel_plan;		/* 0xb8 */
++	u8 xtal_k;			/* 0xb9 */
++	u8 thermal_meter;		/* 0xba */
++	u8 iqk_lck;			/* 0xbb */
++	u8 pa_type;			/* 0xbc */
++	u8 lna_type_2g[2];		/* 0xbd */
++	u8 lna_type_5g[2];		/* 0xbf */
++	u8 rf_board_option;		/* 0xc1 */
++	u8 res2;
++	u8 rf_bt_setting;		/* 0xc3 */
++	u8 eeprom_version;		/* 0xc4 */
++	u8 eeprom_customer_id;		/* 0xc5 */
++	u8 tx_bb_swing_setting_2g;	/* 0xc6 */
++	u8 tx_bb_swing_setting_5g;	/* 0xc7 */
++	u8 res3;
++	u8 trx_antenna_option;		/* 0xc9 */
++	u8 rfe_option;			/* 0xca */
++	u8 country_code[2];		/* 0xcb */
++	u8 res4[3];
++	union {
++		struct rtw8814au_efuse u;
++		struct rtw8814ae_efuse e;
++	};
++	u8 res5[0x122];			/* 0xde */
++} __packed;
++
++static_assert(sizeof(struct rtw8814a_efuse) == 512);
++
++extern const struct rtw_chip_info rtw8814a_hw_spec;
++
++#endif
diff --git a/package/kernel/mac80211/patches/rtl/089-v6.15-wifi-rtw88-Add-rtw8814ae.c.patch b/package/kernel/mac80211/patches/rtl/089-v6.15-wifi-rtw88-Add-rtw8814ae.c.patch
new file mode 100644
index 0000000000..0aa9a90360
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/089-v6.15-wifi-rtw88-Add-rtw8814ae.c.patch
@@ -0,0 +1,50 @@
+From dad8e879310211c1e02f09c35f169388bccbfa42 Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Fri, 7 Mar 2025 02:25:09 +0200
+Subject: [PATCH] wifi: rtw88: Add rtw8814ae.c
+
+This is the entry point for the new module rtw88_8814ae.
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/74ebab2f-a23e-4d87-935f-0af2b5cba672@gmail.com
+---
+ .../net/wireless/realtek/rtw88/rtw8814ae.c    | 31 +++++++++++++++++++
+ 1 file changed, 31 insertions(+)
+ create mode 100644 drivers/net/wireless/realtek/rtw88/rtw8814ae.c
+
+--- /dev/null
++++ b/drivers/net/wireless/realtek/rtw88/rtw8814ae.c
+@@ -0,0 +1,31 @@
++// SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause
++/* Copyright(c) 2025  Realtek Corporation
++ */
++
++#include <linux/module.h>
++#include <linux/pci.h>
++#include "pci.h"
++#include "rtw8814a.h"
++
++static const struct pci_device_id rtw_8814ae_id_table[] = {
++	{
++		PCI_DEVICE(PCI_VENDOR_ID_REALTEK, 0x8813),
++		.driver_data = (kernel_ulong_t)&rtw8814a_hw_spec
++	},
++	{}
++};
++MODULE_DEVICE_TABLE(pci, rtw_8814ae_id_table);
++
++static struct pci_driver rtw_8814ae_driver = {
++	.name = "rtw_8814ae",
++	.id_table = rtw_8814ae_id_table,
++	.probe = rtw_pci_probe,
++	.remove = rtw_pci_remove,
++	.driver.pm = &rtw_pm_ops,
++	.shutdown = rtw_pci_shutdown,
++};
++module_pci_driver(rtw_8814ae_driver);
++
++MODULE_AUTHOR("Bitterblue Smith <rtl8821cerfe2@gmail.com>");
++MODULE_DESCRIPTION("Realtek 802.11ac wireless 8814ae driver");
++MODULE_LICENSE("Dual BSD/GPL");
diff --git a/package/kernel/mac80211/patches/rtl/090-v6.15-wifi-rtw88-Add-rtw8814au.c.patch b/package/kernel/mac80211/patches/rtl/090-v6.15-wifi-rtw88-Add-rtw8814au.c.patch
new file mode 100644
index 0000000000..b83174d73e
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/090-v6.15-wifi-rtw88-Add-rtw8814au.c.patch
@@ -0,0 +1,73 @@
+From bad060e8a425182809bfc2586a2e7f5ccd1a994d Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Fri, 7 Mar 2025 02:25:37 +0200
+Subject: [PATCH] wifi: rtw88: Add rtw8814au.c
+
+This is the entry point for the new module rtw88_8814au.
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/71457787-5a9e-4ead-a62c-22ca44e00b89@gmail.com
+---
+ .../net/wireless/realtek/rtw88/rtw8814au.c    | 54 +++++++++++++++++++
+ 1 file changed, 54 insertions(+)
+ create mode 100644 drivers/net/wireless/realtek/rtw88/rtw8814au.c
+
+--- /dev/null
++++ b/drivers/net/wireless/realtek/rtw88/rtw8814au.c
+@@ -0,0 +1,54 @@
++// SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause
++/* Copyright(c) 2025  Realtek Corporation
++ */
++
++#include <linux/module.h>
++#include <linux/usb.h>
++#include "main.h"
++#include "rtw8814a.h"
++#include "usb.h"
++
++static const struct usb_device_id rtw_8814au_id_table[] = {
++	{ USB_DEVICE_AND_INTERFACE_INFO(RTW_USB_VENDOR_ID_REALTEK, 0x8813, 0xff, 0xff, 0xff),
++	  .driver_info = (kernel_ulong_t)&(rtw8814a_hw_spec) },
++	{ USB_DEVICE_AND_INTERFACE_INFO(0x056e, 0x400b, 0xff, 0xff, 0xff),
++	  .driver_info = (kernel_ulong_t)&(rtw8814a_hw_spec) },
++	{ USB_DEVICE_AND_INTERFACE_INFO(0x056e, 0x400d, 0xff, 0xff, 0xff),
++	  .driver_info = (kernel_ulong_t)&(rtw8814a_hw_spec) },
++	{ USB_DEVICE_AND_INTERFACE_INFO(0x0846, 0x9054, 0xff, 0xff, 0xff),
++	  .driver_info = (kernel_ulong_t)&(rtw8814a_hw_spec) },
++	{ USB_DEVICE_AND_INTERFACE_INFO(0x0b05, 0x1817, 0xff, 0xff, 0xff),
++	  .driver_info = (kernel_ulong_t)&(rtw8814a_hw_spec) },
++	{ USB_DEVICE_AND_INTERFACE_INFO(0x0b05, 0x1852, 0xff, 0xff, 0xff),
++	  .driver_info = (kernel_ulong_t)&(rtw8814a_hw_spec) },
++	{ USB_DEVICE_AND_INTERFACE_INFO(0x0b05, 0x1853, 0xff, 0xff, 0xff),
++	  .driver_info = (kernel_ulong_t)&(rtw8814a_hw_spec) },
++	{ USB_DEVICE_AND_INTERFACE_INFO(0x0e66, 0x0026, 0xff, 0xff, 0xff),
++	  .driver_info = (kernel_ulong_t)&(rtw8814a_hw_spec) },
++	{ USB_DEVICE_AND_INTERFACE_INFO(0x2001, 0x331a, 0xff, 0xff, 0xff),
++	  .driver_info = (kernel_ulong_t)&(rtw8814a_hw_spec) },
++	{ USB_DEVICE_AND_INTERFACE_INFO(0x20f4, 0x809a, 0xff, 0xff, 0xff),
++	  .driver_info = (kernel_ulong_t)&(rtw8814a_hw_spec) },
++	{ USB_DEVICE_AND_INTERFACE_INFO(0x20f4, 0x809b, 0xff, 0xff, 0xff),
++	  .driver_info = (kernel_ulong_t)&(rtw8814a_hw_spec) },
++	{ USB_DEVICE_AND_INTERFACE_INFO(0x2357, 0x0106, 0xff, 0xff, 0xff),
++	  .driver_info = (kernel_ulong_t)&(rtw8814a_hw_spec) },
++	{ USB_DEVICE_AND_INTERFACE_INFO(0x7392, 0xa834, 0xff, 0xff, 0xff),
++	  .driver_info = (kernel_ulong_t)&(rtw8814a_hw_spec) },
++	{ USB_DEVICE_AND_INTERFACE_INFO(0x7392, 0xa833, 0xff, 0xff, 0xff),
++	  .driver_info = (kernel_ulong_t)&(rtw8814a_hw_spec) },
++	{},
++};
++MODULE_DEVICE_TABLE(usb, rtw_8814au_id_table);
++
++static struct usb_driver rtw_8814au_driver = {
++	.name = "rtw_8814au",
++	.id_table = rtw_8814au_id_table,
++	.probe = rtw_usb_probe,
++	.disconnect = rtw_usb_disconnect,
++};
++module_usb_driver(rtw_8814au_driver);
++
++MODULE_AUTHOR("Bitterblue Smith <rtl8821cerfe2@gmail.com>");
++MODULE_DESCRIPTION("Realtek 802.11ac wireless 8814au driver");
++MODULE_LICENSE("Dual BSD/GPL");
diff --git a/package/kernel/mac80211/patches/rtl/091-v6.15-wifi-rtw88-Add-__nonstring-annotations-for-untermina.patch b/package/kernel/mac80211/patches/rtl/091-v6.15-wifi-rtw88-Add-__nonstring-annotations-for-untermina.patch
new file mode 100644
index 0000000000..4bb3253d50
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/091-v6.15-wifi-rtw88-Add-__nonstring-annotations-for-untermina.patch
@@ -0,0 +1,34 @@
+From d58ad77d5cc2a6d04db622a898e54d93fc7002a2 Mon Sep 17 00:00:00 2001
+From: Kees Cook <kees@kernel.org>
+Date: Mon, 10 Mar 2025 15:22:58 -0700
+Subject: [PATCH] wifi: rtw88: Add __nonstring annotations for unterminated
+ strings
+
+When a character array without a terminating NUL character has a static
+initializer, GCC 15's -Wunterminated-string-initialization will only
+warn if the array lacks the "nonstring" attribute[1]. Mark the arrays
+with __nonstring to and correctly identify the char array as "not a C
+string" and thereby eliminate the warning.
+
+Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=117178 [1]
+Cc: Ping-Ke Shih <pkshih@realtek.com>
+Cc: Johannes Berg <johannes@sipsolutions.net>
+Cc: linux-wireless@vger.kernel.org
+Signed-off-by: Kees Cook <kees@kernel.org>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/20250310222257.work.866-kees@kernel.org
+---
+ drivers/net/wireless/realtek/rtw88/main.h | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/main.h
++++ b/drivers/net/wireless/realtek/rtw88/main.h
+@@ -835,7 +835,7 @@ struct rtw_vif {
+ };
+ 
+ struct rtw_regulatory {
+-	char alpha2[2];
++	char alpha2[2] __nonstring;
+ 	u8 txpwr_regd_2g;
+ 	u8 txpwr_regd_5g;
+ };
diff --git a/package/kernel/mac80211/patches/rtl/092-v6.15-wifi-rtw88-Enable-the-new-RTL8814AE-RTL8814AU-driver.patch b/package/kernel/mac80211/patches/rtl/092-v6.15-wifi-rtw88-Enable-the-new-RTL8814AE-RTL8814AU-driver.patch
new file mode 100644
index 0000000000..0b7d5d7204
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/092-v6.15-wifi-rtw88-Enable-the-new-RTL8814AE-RTL8814AU-driver.patch
@@ -0,0 +1,130 @@
+From deb3ddeb18652118956fb581a39ac299e1ee5623 Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Fri, 7 Mar 2025 02:26:25 +0200
+Subject: [PATCH] wifi: rtw88: Enable the new RTL8814AE/RTL8814AU drivers
+
+RTL8814A is a wifi 5 chip with 4 RF paths (chains), 3 spatial streams,
+and probably no Bluetooth.
+
+The USB-based RTL8814AU can reach 800 Mbps in the 5 GHz band in USB 3
+mode. In USB 2 mode it only uses 2 spatial streams.
+
+The PCI-based RTL8814AE is not as popular and didn't get as much
+testing so it's unclear how fast it goes. It's more like a bonus on top
+of the RTL8814AU support.
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/5795b0a7-511e-40b5-ac36-476b63f174c7@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/Kconfig  | 25 +++++++++++++++++++++
+ drivers/net/wireless/realtek/rtw88/Makefile |  9 ++++++++
+ 2 files changed, 34 insertions(+)
+
+--- a/Kconfig.local
++++ b/Kconfig.local
+@@ -1138,6 +1138,9 @@ config BACKPORTED_RTW88_8821A
+ config BACKPORTED_RTW88_8812A
+ 	tristate
+ 	default RTW88_8812A
++config BACKPORTED_RTW88_8814A
++	tristate
++	default RTW88_8814A
+ config BACKPORTED_RTW88_8822BE
+ 	tristate
+ 	default RTW88_8822BE
+@@ -1183,6 +1186,12 @@ config BACKPORTED_RTW88_8821AU
+ config BACKPORTED_RTW88_8812AU
+ 	tristate
+ 	default RTW88_8812AU
++config BACKPORTED_RTW88_8814AE
++	tristate
++	default RTW88_8814AE
++config BACKPORTED_RTW88_8814AU
++	tristate
++	default RTW88_8814AU
+ config BACKPORTED_RTW88_DEBUG
+ 	tristate
+ 	default RTW88_DEBUG
+--- a/drivers/net/wireless/realtek/rtw88/Kconfig
++++ b/drivers/net/wireless/realtek/rtw88/Kconfig
+@@ -68,6 +68,10 @@ config RTW88_8812A
+ 	depends on m
+ 	select RTW88_88XXA
+ 
++config RTW88_8814A
++	tristate
++	depends on m
++
+ config RTW88_8822BE
+ 	tristate "Realtek 8822BE PCI wireless network adapter"
+ 	depends on m
+@@ -251,6 +255,30 @@ config RTW88_8812AU
+ 
+ 	  802.11ac USB wireless network adapter
+ 
++config RTW88_8814AE
++	tristate "Realtek 8814AE PCI wireless network adapter"
++	depends on m
++	depends on PCI
++	select RTW88_CORE
++	select RTW88_PCI
++	select RTW88_8814A
++	help
++	  Select this option will enable support for 8814AE chipset
++
++	  802.11ac PCIe wireless network adapter
++
++config RTW88_8814AU
++	tristate "Realtek 8814AU USB wireless network adapter"
++	depends on m
++	depends on USB
++	select RTW88_CORE
++	select RTW88_USB
++	select RTW88_8814A
++	help
++	  Select this option will enable support for 8814AU chipset
++
++	  802.11ac USB wireless network adapter
++
+ config RTW88_DEBUG
+ 	bool "Realtek rtw88 debug support"
+ 	depends on RTW88_CORE
+--- a/drivers/net/wireless/realtek/rtw88/Makefile
++++ b/drivers/net/wireless/realtek/rtw88/Makefile
+@@ -94,6 +94,15 @@ rtw88_8821au-objs		:= rtw8821au.o
+ obj-$(CPTCFG_RTW88_8812AU)	+= rtw88_8812au.o
+ rtw88_8812au-objs		:= rtw8812au.o
+ 
++obj-$(CPTCFG_RTW88_8814A)	+= rtw88_8814a.o
++rtw88_8814a-objs		:= rtw8814a.o rtw8814a_table.o
++
++obj-$(CPTCFG_RTW88_8814AE)	+= rtw88_8814ae.o
++rtw88_8814ae-objs		:= rtw8814ae.o
++
++obj-$(CPTCFG_RTW88_8814AU)	+= rtw88_8814au.o
++rtw88_8814au-objs		:= rtw8814au.o
++
+ obj-$(CPTCFG_RTW88_PCI)		+= rtw88_pci.o
+ rtw88_pci-objs			:= pci.o
+ 
+--- a/local-symbols
++++ b/local-symbols
+@@ -375,6 +375,7 @@ RTW88_8821C=
+ RTW88_88XXA=
+ RTW88_8821A=
+ RTW88_8812A=
++RTW88_8814A=
+ RTW88_8822BE=
+ RTW88_8822BS=
+ RTW88_8822BU=
+@@ -390,6 +391,8 @@ RTW88_8821CS=
+ RTW88_8821CU=
+ RTW88_8821AU=
+ RTW88_8812AU=
++RTW88_8814AE=
++RTW88_8814AU=
+ RTW88_DEBUG=
+ RTW88_DEBUGFS=
+ RTW88_LEDS=
diff --git a/package/kernel/mac80211/patches/rtl/093-v6.16-wifi-rtw88-sdio-Remove-redundant-flush_workqueue-cal.patch b/package/kernel/mac80211/patches/rtl/093-v6.16-wifi-rtw88-sdio-Remove-redundant-flush_workqueue-cal.patch
new file mode 100644
index 0000000000..9852bdff94
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/093-v6.16-wifi-rtw88-sdio-Remove-redundant-flush_workqueue-cal.patch
@@ -0,0 +1,36 @@
+From 5c4cf36c538bb2714e43654e365cb77b19c4a93e Mon Sep 17 00:00:00 2001
+From: Chen Ni <nichen@iscas.ac.cn>
+Date: Mon, 24 Mar 2025 15:59:10 +0800
+Subject: [PATCH] wifi: rtw88: sdio: Remove redundant 'flush_workqueue()' calls
+
+'destroy_workqueue()' already drains the queue before destroying it, so
+there is no need to flush it explicitly.
+
+Remove the redundant 'flush_workqueue()' calls.
+
+This was generated with coccinelle:
+
+@@
+expression E;
+@@
+
+- flush_workqueue(E);
+  destroy_workqueue(E);
+
+Signed-off-by: Chen Ni <nichen@iscas.ac.cn>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/20250324075910.407999-1-nichen@iscas.ac.cn
+---
+ drivers/net/wireless/realtek/rtw88/sdio.c | 1 -
+ 1 file changed, 1 deletion(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/sdio.c
++++ b/drivers/net/wireless/realtek/rtw88/sdio.c
+@@ -1298,7 +1298,6 @@ static void rtw_sdio_deinit_tx(struct rt
+ 	struct rtw_sdio *rtwsdio = (struct rtw_sdio *)rtwdev->priv;
+ 	int i;
+ 
+-	flush_workqueue(rtwsdio->txwq);
+ 	destroy_workqueue(rtwsdio->txwq);
+ 	kfree(rtwsdio->tx_handler_data);
+ 
diff --git a/package/kernel/mac80211/patches/rtl/094-v6.16-wifi-rtw88-usb-Remove-redundant-flush_workqueue-call.patch b/package/kernel/mac80211/patches/rtl/094-v6.16-wifi-rtw88-usb-Remove-redundant-flush_workqueue-call.patch
new file mode 100644
index 0000000000..f819b8d955
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/094-v6.16-wifi-rtw88-usb-Remove-redundant-flush_workqueue-call.patch
@@ -0,0 +1,44 @@
+From 625fbc16524a45488f6eb8561d98b3328efe79cd Mon Sep 17 00:00:00 2001
+From: Chen Ni <nichen@iscas.ac.cn>
+Date: Mon, 24 Mar 2025 16:03:03 +0800
+Subject: [PATCH] wifi: rtw88: usb: Remove redundant 'flush_workqueue()' calls
+
+'destroy_workqueue()' already drains the queue before destroying it, so
+there is no need to flush it explicitly.
+
+Remove the redundant 'flush_workqueue()' calls.
+
+This was generated with coccinelle:
+
+@@
+expression E;
+@@
+
+- flush_workqueue(E);
+  destroy_workqueue(E);
+
+Signed-off-by: Chen Ni <nichen@iscas.ac.cn>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/20250324080303.408084-1-nichen@iscas.ac.cn
+---
+ drivers/net/wireless/realtek/rtw88/usb.c | 2 --
+ 1 file changed, 2 deletions(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/usb.c
++++ b/drivers/net/wireless/realtek/rtw88/usb.c
+@@ -952,7 +952,6 @@ static void rtw_usb_deinit_rx(struct rtw
+ 
+ 	skb_queue_purge(&rtwusb->rx_queue);
+ 
+-	flush_workqueue(rtwusb->rxwq);
+ 	destroy_workqueue(rtwusb->rxwq);
+ 
+ 	skb_queue_purge(&rtwusb->rx_free_queue);
+@@ -981,7 +980,6 @@ static void rtw_usb_deinit_tx(struct rtw
+ {
+ 	struct rtw_usb *rtwusb = rtw_get_usb_priv(rtwdev);
+ 
+-	flush_workqueue(rtwusb->txwq);
+ 	destroy_workqueue(rtwusb->txwq);
+ 	rtw_usb_tx_queue_purge(rtwusb);
+ }
diff --git a/package/kernel/mac80211/patches/rtl/095-v6.16-wifi-rtw88-usb-Enable-switching-the-RTL8814AU-to-USB.patch b/package/kernel/mac80211/patches/rtl/095-v6.16-wifi-rtw88-usb-Enable-switching-the-RTL8814AU-to-USB.patch
new file mode 100644
index 0000000000..f4d79bdae3
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/095-v6.16-wifi-rtw88-usb-Enable-switching-the-RTL8814AU-to-USB.patch
@@ -0,0 +1,32 @@
+From bf1103654df99d50724a022c8b9fca8908a86f50 Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Wed, 2 Apr 2025 18:30:02 +0300
+Subject: [PATCH] wifi: rtw88: usb: Enable switching the RTL8814AU to USB 3
+
+The Realtek wifi 5 devices which support USB 3 are weird: when first
+plugged in, they pretend to be USB 2. The driver needs to send some
+commands to the device, which make it disappear and come back as a
+USB 3 device.
+
+The method used to switch the RTL8812AU also works for the RTL8814AU.
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/d3608f70-e04f-4f6b-987a-022c8e317165@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/usb.c | 3 ++-
+ 1 file changed, 2 insertions(+), 1 deletion(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/usb.c
++++ b/drivers/net/wireless/realtek/rtw88/usb.c
+@@ -1096,7 +1096,8 @@ static int rtw_usb_switch_mode_new(struc
+ 
+ static bool rtw_usb3_chip_old(u8 chip_id)
+ {
+-	return chip_id == RTW_CHIP_TYPE_8812A;
++	return chip_id == RTW_CHIP_TYPE_8812A ||
++	       chip_id == RTW_CHIP_TYPE_8814A;
+ }
+ 
+ static bool rtw_usb3_chip_new(u8 chip_id)
diff --git a/package/kernel/mac80211/patches/rtl/096-v6.16-wifi-rtw88-usb-Enable-RX-aggregation-for-RTL8814AU.patch b/package/kernel/mac80211/patches/rtl/096-v6.16-wifi-rtw88-usb-Enable-RX-aggregation-for-RTL8814AU.patch
new file mode 100644
index 0000000000..ef5c3db77a
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/096-v6.16-wifi-rtw88-usb-Enable-RX-aggregation-for-RTL8814AU.patch
@@ -0,0 +1,28 @@
+From dcbb7bb3a364f218411761e2e5ee2f6818d9bdfc Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Wed, 2 Apr 2025 18:30:28 +0300
+Subject: [PATCH] wifi: rtw88: usb: Enable RX aggregation for RTL8814AU
+
+Let the chip transfer several frames in a single USB Request Block.
+This is supposed to improve the RX speed.
+
+It can use the same code used for RTL8822CU, RTL8822BU, and RTL8821CU.
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/672397ac-dd4d-4420-8b3e-7011578e2243@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/usb.c | 1 +
+ 1 file changed, 1 insertion(+)
+
+--- a/drivers/net/wireless/realtek/rtw88/usb.c
++++ b/drivers/net/wireless/realtek/rtw88/usb.c
+@@ -866,6 +866,7 @@ static void rtw_usb_dynamic_rx_agg(struc
+ 	case RTW_CHIP_TYPE_8822C:
+ 	case RTW_CHIP_TYPE_8822B:
+ 	case RTW_CHIP_TYPE_8821C:
++	case RTW_CHIP_TYPE_8814A:
+ 		rtw_usb_dynamic_rx_agg_v1(rtwdev, enable);
+ 		break;
+ 	case RTW_CHIP_TYPE_8821A:
diff --git a/package/kernel/mac80211/patches/rtl/097-v6.16-wifi-rtw88-Set-AMPDU-factor-to-hardware-for-RTL8814A.patch b/package/kernel/mac80211/patches/rtl/097-v6.16-wifi-rtw88-Set-AMPDU-factor-to-hardware-for-RTL8814A.patch
new file mode 100644
index 0000000000..bdac02c8c6
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/097-v6.16-wifi-rtw88-Set-AMPDU-factor-to-hardware-for-RTL8814A.patch
@@ -0,0 +1,192 @@
+From 0d2a88690e583168effb03c64fd217a323b2c444 Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Wed, 2 Apr 2025 18:31:12 +0300
+Subject: [PATCH] wifi: rtw88: Set AMPDU factor to hardware for RTL8814A
+
+Tell the chip the maximum AMPDU size supported by the AP. This greatly
+improves the TX speed of RTL8814AU in the 2.4 GHz band. Before: ~90
+Mbps. After: ~300 Mbps.
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/4edc2a63-81b3-431c-9a37-5a7d899a6cc2@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/mac80211.c |  2 ++
+ drivers/net/wireless/realtek/rtw88/main.c     | 32 +++++++++++++++++++
+ drivers/net/wireless/realtek/rtw88/main.h     |  3 ++
+ drivers/net/wireless/realtek/rtw88/rtw8703b.c |  1 +
+ drivers/net/wireless/realtek/rtw88/rtw8723d.c |  1 +
+ drivers/net/wireless/realtek/rtw88/rtw8812a.c |  1 +
+ drivers/net/wireless/realtek/rtw88/rtw8814a.c | 11 +++++++
+ drivers/net/wireless/realtek/rtw88/rtw8821a.c |  1 +
+ drivers/net/wireless/realtek/rtw88/rtw8821c.c |  1 +
+ drivers/net/wireless/realtek/rtw88/rtw8822b.c |  1 +
+ drivers/net/wireless/realtek/rtw88/rtw8822c.c |  1 +
+ 11 files changed, 55 insertions(+)
+
+--- a/drivers/net/wireless/realtek/rtw88/mac80211.c
++++ b/drivers/net/wireless/realtek/rtw88/mac80211.c
+@@ -396,6 +396,8 @@ static void rtw_ops_bss_info_changed(str
+ 			if (rtw_bf_support)
+ 				rtw_bf_assoc(rtwdev, vif, conf);
+ 
++			rtw_set_ampdu_factor(rtwdev, vif, conf);
++
+ 			rtw_fw_beacon_filter_config(rtwdev, true, vif);
+ 		} else {
+ 			rtw_leave_lps(rtwdev);
+--- a/drivers/net/wireless/realtek/rtw88/main.c
++++ b/drivers/net/wireless/realtek/rtw88/main.c
+@@ -2447,6 +2447,38 @@ void rtw_core_enable_beacon(struct rtw_d
+ 	}
+ }
+ 
++void rtw_set_ampdu_factor(struct rtw_dev *rtwdev, struct ieee80211_vif *vif,
++			  struct ieee80211_bss_conf *bss_conf)
++{
++	const struct rtw_chip_ops *ops = rtwdev->chip->ops;
++	struct ieee80211_sta *sta;
++	u8 factor = 0xff;
++
++	if (!ops->set_ampdu_factor)
++		return;
++
++	rcu_read_lock();
++
++	sta = ieee80211_find_sta(vif, bss_conf->bssid);
++	if (!sta) {
++		rcu_read_unlock();
++		rtw_warn(rtwdev, "%s: failed to find station %pM\n",
++			 __func__, bss_conf->bssid);
++		return;
++	}
++
++	if (sta->deflink.vht_cap.vht_supported)
++		factor = u32_get_bits(sta->deflink.vht_cap.cap,
++				      IEEE80211_VHT_CAP_MAX_A_MPDU_LENGTH_EXPONENT_MASK);
++	else if (sta->deflink.ht_cap.ht_supported)
++		factor = sta->deflink.ht_cap.ampdu_factor;
++
++	rcu_read_unlock();
++
++	if (factor != 0xff)
++		ops->set_ampdu_factor(rtwdev, factor);
++}
++
+ MODULE_AUTHOR("Realtek Corporation");
+ MODULE_DESCRIPTION("Realtek 802.11ac wireless core module");
+ MODULE_LICENSE("Dual BSD/GPL");
+--- a/drivers/net/wireless/realtek/rtw88/main.h
++++ b/drivers/net/wireless/realtek/rtw88/main.h
+@@ -878,6 +878,7 @@ struct rtw_chip_ops {
+ 			   u32 antenna_rx);
+ 	void (*cfg_ldo25)(struct rtw_dev *rtwdev, bool enable);
+ 	void (*efuse_grant)(struct rtw_dev *rtwdev, bool enable);
++	void (*set_ampdu_factor)(struct rtw_dev *rtwdev, u8 factor);
+ 	void (*false_alarm_statistics)(struct rtw_dev *rtwdev);
+ 	void (*phy_calibration)(struct rtw_dev *rtwdev);
+ 	void (*dpk_track)(struct rtw_dev *rtwdev);
+@@ -2272,4 +2273,6 @@ void rtw_update_channel(struct rtw_dev *
+ void rtw_core_port_switch(struct rtw_dev *rtwdev, struct ieee80211_vif *vif);
+ bool rtw_core_check_sta_active(struct rtw_dev *rtwdev);
+ void rtw_core_enable_beacon(struct rtw_dev *rtwdev, bool enable);
++void rtw_set_ampdu_factor(struct rtw_dev *rtwdev, struct ieee80211_vif *vif,
++			  struct ieee80211_bss_conf *bss_conf);
+ #endif
+--- a/drivers/net/wireless/realtek/rtw88/rtw8703b.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8703b.c
+@@ -1904,6 +1904,7 @@ static const struct rtw_chip_ops rtw8703
+ 	.set_antenna		= NULL,
+ 	.cfg_ldo25		= rtw8723x_cfg_ldo25,
+ 	.efuse_grant		= rtw8723x_efuse_grant,
++	.set_ampdu_factor	= NULL,
+ 	.false_alarm_statistics	= rtw8723x_false_alarm_statistics,
+ 	.phy_calibration	= rtw8703b_phy_calibration,
+ 	.dpk_track		= NULL,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8723d.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8723d.c
+@@ -1404,6 +1404,7 @@ static const struct rtw_chip_ops rtw8723
+ 	.set_antenna		= NULL,
+ 	.cfg_ldo25		= rtw8723x_cfg_ldo25,
+ 	.efuse_grant		= rtw8723x_efuse_grant,
++	.set_ampdu_factor	= NULL,
+ 	.false_alarm_statistics	= rtw8723x_false_alarm_statistics,
+ 	.phy_calibration	= rtw8723d_phy_calibration,
+ 	.cck_pd_set		= rtw8723d_phy_cck_pd_set,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8812a.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8812a.c
+@@ -925,6 +925,7 @@ static const struct rtw_chip_ops rtw8812
+ 	.set_tx_power_index	= rtw88xxa_set_tx_power_index,
+ 	.cfg_ldo25		= rtw8812a_cfg_ldo25,
+ 	.efuse_grant		= rtw88xxa_efuse_grant,
++	.set_ampdu_factor	= NULL,
+ 	.false_alarm_statistics	= rtw88xxa_false_alarm_statistics,
+ 	.phy_calibration	= rtw8812a_phy_calibration,
+ 	.cck_pd_set		= rtw88xxa_phy_cck_pd_set,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8814a.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8814a.c
+@@ -1332,6 +1332,16 @@ static void rtw8814a_cfg_ldo25(struct rt
+ {
+ }
+ 
++/* Without this RTL8814A sends too many frames and (some?) 11n AP
++ * can't handle it, resulting in low TX speed. Other chips seem fine.
++ */
++static void rtw8814a_set_ampdu_factor(struct rtw_dev *rtwdev, u8 factor)
++{
++	factor = min_t(u8, factor, IEEE80211_VHT_MAX_AMPDU_256K);
++
++	rtw_write32(rtwdev, REG_AMPDU_MAX_LENGTH, (8192 << factor) - 1);
++}
++
+ static void rtw8814a_false_alarm_statistics(struct rtw_dev *rtwdev)
+ {
+ 	struct rtw_dm_info *dm_info = &rtwdev->dm_info;
+@@ -2051,6 +2061,7 @@ static const struct rtw_chip_ops rtw8814
+ 	.set_antenna		= NULL,
+ 	.cfg_ldo25		= rtw8814a_cfg_ldo25,
+ 	.efuse_grant		= rtw8814a_efuse_grant,
++	.set_ampdu_factor	= rtw8814a_set_ampdu_factor,
+ 	.false_alarm_statistics	= rtw8814a_false_alarm_statistics,
+ 	.phy_calibration	= rtw8814a_phy_calibration,
+ 	.cck_pd_set		= rtw8814a_phy_cck_pd_set,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8821a.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8821a.c
+@@ -871,6 +871,7 @@ static const struct rtw_chip_ops rtw8821
+ 	.set_tx_power_index	= rtw88xxa_set_tx_power_index,
+ 	.cfg_ldo25		= rtw8821a_cfg_ldo25,
+ 	.efuse_grant		= rtw88xxa_efuse_grant,
++	.set_ampdu_factor	= NULL,
+ 	.false_alarm_statistics	= rtw88xxa_false_alarm_statistics,
+ 	.phy_calibration	= rtw8821a_phy_calibration,
+ 	.cck_pd_set		= rtw88xxa_phy_cck_pd_set,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8821c.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8821c.c
+@@ -1668,6 +1668,7 @@ static const struct rtw_chip_ops rtw8821
+ 	.set_antenna		= NULL,
+ 	.set_tx_power_index	= rtw8821c_set_tx_power_index,
+ 	.cfg_ldo25		= rtw8821c_cfg_ldo25,
++	.set_ampdu_factor	= NULL,
+ 	.false_alarm_statistics	= rtw8821c_false_alarm_statistics,
+ 	.phy_calibration	= rtw8821c_phy_calibration,
+ 	.cck_pd_set		= rtw8821c_phy_cck_pd_set,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822b.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822b.c
+@@ -2158,6 +2158,7 @@ static const struct rtw_chip_ops rtw8822
+ 	.set_tx_power_index	= rtw8822b_set_tx_power_index,
+ 	.set_antenna		= rtw8822b_set_antenna,
+ 	.cfg_ldo25		= rtw8822b_cfg_ldo25,
++	.set_ampdu_factor	= NULL,
+ 	.false_alarm_statistics	= rtw8822b_false_alarm_statistics,
+ 	.phy_calibration	= rtw8822b_phy_calibration,
+ 	.pwr_track		= rtw8822b_pwr_track,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822c.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822c.c
+@@ -4968,6 +4968,7 @@ static const struct rtw_chip_ops rtw8822
+ 	.set_tx_power_index	= rtw8822c_set_tx_power_index,
+ 	.set_antenna		= rtw8822c_set_antenna,
+ 	.cfg_ldo25		= rtw8822c_cfg_ldo25,
++	.set_ampdu_factor	= NULL,
+ 	.false_alarm_statistics	= rtw8822c_false_alarm_statistics,
+ 	.dpk_track		= rtw8822c_dpk_track,
+ 	.phy_calibration	= rtw8822c_phy_calibration,
diff --git a/package/kernel/mac80211/patches/rtl/098-v6.16-wifi-rtw88-Don-t-set-SUPPORTS_AMSDU_IN_AMPDU-for-RTL.patch b/package/kernel/mac80211/patches/rtl/098-v6.16-wifi-rtw88-Don-t-set-SUPPORTS_AMSDU_IN_AMPDU-for-RTL.patch
new file mode 100644
index 0000000000..1b030761d3
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/098-v6.16-wifi-rtw88-Don-t-set-SUPPORTS_AMSDU_IN_AMPDU-for-RTL.patch
@@ -0,0 +1,169 @@
+From b8d49bb8d16ae7dde8e05b275d6e3b8bbf27f011 Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Wed, 2 Apr 2025 18:31:36 +0300
+Subject: [PATCH] wifi: rtw88: Don't set SUPPORTS_AMSDU_IN_AMPDU for RTL8814AU
+
+RTL8814AU doesn't work well with SUPPORTS_AMSDU_IN_AMPDU. The RX speed
+is noticeably lower and the VHT RX statistics are strange. Typical
+values with SUPPORTS_AMSDU_IN_AMPDU:
+
+Reverse mode, remote host 192.168.0.1 is sending
+[  5] local 192.168.0.50 port 60710 connected to 192.168.0.1 port 5201
+[ ID] Interval           Transfer     Bitrate
+[  5]   0.00-1.00   sec  74.6 MBytes   626 Mbits/sec
+[  5]   1.00-2.00   sec  79.2 MBytes   665 Mbits/sec
+[  5]   2.00-3.00   sec  84.9 MBytes   712 Mbits/sec
+[  5]   3.00-4.00   sec  83.8 MBytes   703 Mbits/sec
+[  5]   4.00-5.00   sec  85.9 MBytes   720 Mbits/sec
+[  5]   5.00-6.00   sec  78.9 MBytes   662 Mbits/sec
+[  5]   6.00-7.00   sec  81.2 MBytes   682 Mbits/sec
+[  5]   7.00-8.00   sec  80.5 MBytes   675 Mbits/sec
+[  5]   8.00-9.00   sec  79.4 MBytes   666 Mbits/sec
+[  5]   9.00-10.00  sec  82.2 MBytes   689 Mbits/sec
+[  5]  10.00-11.00  sec  82.0 MBytes   688 Mbits/sec
+[  5]  11.00-12.00  sec  84.2 MBytes   707 Mbits/sec
+[  5]  12.00-13.00  sec  71.0 MBytes   596 Mbits/sec
+[  5]  13.00-14.00  sec  69.4 MBytes   582 Mbits/sec
+[  5]  14.00-15.00  sec  80.2 MBytes   673 Mbits/sec
+[  5]  15.00-16.00  sec  74.5 MBytes   625 Mbits/sec
+
+[Rx Counter]:
+ * CCA (CCK, OFDM, Total) = (0, 2455, 2455)
+ * False Alarm (CCK, OFDM, Total) = (0, 69, 69)
+ * CCK cnt (ok, err) = (0, 0)
+ * OFDM cnt (ok, err) = (1239, 2)
+ * HT cnt (ok, err) = (0, 0)
+ * VHT cnt (ok, err) = (21, 12109)
+
+The "VHT ok" number is not believable.
+
+And without SUPPORTS_AMSDU_IN_AMPDU:
+
+Reverse mode, remote host 192.168.0.1 is sending
+[  5] local 192.168.0.50 port 50030 connected to 192.168.0.1 port 5201
+[ ID] Interval           Transfer     Bitrate
+[  5]   0.00-1.00   sec  70.5 MBytes   591 Mbits/sec
+[  5]   1.00-2.00   sec  86.9 MBytes   729 Mbits/sec
+[  5]   2.00-3.00   sec  98.6 MBytes   827 Mbits/sec
+[  5]   3.00-4.00   sec  97.4 MBytes   817 Mbits/sec
+[  5]   4.00-5.00   sec  98.6 MBytes   827 Mbits/sec
+[  5]   5.00-6.00   sec  96.9 MBytes   813 Mbits/sec
+[  5]   6.00-7.00   sec  98.2 MBytes   824 Mbits/sec
+[  5]   7.00-8.00   sec  98.0 MBytes   822 Mbits/sec
+[  5]   8.00-9.00   sec  99.9 MBytes   838 Mbits/sec
+[  5]   9.00-10.00  sec  99.2 MBytes   833 Mbits/sec
+[  5]  10.00-11.00  sec  98.0 MBytes   822 Mbits/sec
+[  5]  11.00-12.00  sec  98.1 MBytes   823 Mbits/sec
+[  5]  12.00-13.00  sec  97.0 MBytes   814 Mbits/sec
+[  5]  13.00-14.00  sec  98.2 MBytes   824 Mbits/sec
+[  5]  14.00-15.00  sec  98.5 MBytes   826 Mbits/sec
+[  5]  15.00-16.00  sec  97.4 MBytes   817 Mbits/sec
+
+[Rx Counter]:
+ * CCA (CCK, OFDM, Total) = (0, 3860, 3860)
+ * False Alarm (CCK, OFDM, Total) = (0, 2, 2)
+ * CCK cnt (ok, err) = (0, 0)
+ * OFDM cnt (ok, err) = (1486, 0)
+ * HT cnt (ok, err) = (0, 0)
+ * VHT cnt (ok, err) = (7399, 9118)
+
+Add a new member "amsdu_in_ampdu" in struct rtw_chip_info and use it
+to set SUPPORTS_AMSDU_IN_AMPDU only for the other chips.
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/6202ccfb-feb0-4107-a08d-db2699e179f0@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/main.c     | 3 ++-
+ drivers/net/wireless/realtek/rtw88/main.h     | 1 +
+ drivers/net/wireless/realtek/rtw88/rtw8812a.c | 1 +
+ drivers/net/wireless/realtek/rtw88/rtw8814a.c | 1 +
+ drivers/net/wireless/realtek/rtw88/rtw8821a.c | 1 +
+ drivers/net/wireless/realtek/rtw88/rtw8821c.c | 1 +
+ drivers/net/wireless/realtek/rtw88/rtw8822b.c | 1 +
+ drivers/net/wireless/realtek/rtw88/rtw8822c.c | 1 +
+ 8 files changed, 9 insertions(+), 1 deletion(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/main.c
++++ b/drivers/net/wireless/realtek/rtw88/main.c
+@@ -2242,7 +2242,8 @@ int rtw_register_hw(struct rtw_dev *rtwd
+ 	ieee80211_hw_set(hw, SUPPORTS_PS);
+ 	ieee80211_hw_set(hw, SUPPORTS_DYNAMIC_PS);
+ 	ieee80211_hw_set(hw, SUPPORT_FAST_XMIT);
+-	ieee80211_hw_set(hw, SUPPORTS_AMSDU_IN_AMPDU);
++	if (rtwdev->chip->amsdu_in_ampdu)
++		ieee80211_hw_set(hw, SUPPORTS_AMSDU_IN_AMPDU);
+ 	ieee80211_hw_set(hw, HAS_RATE_CONTROL);
+ 	ieee80211_hw_set(hw, TX_AMSDU);
+ 	ieee80211_hw_set(hw, SINGLE_SCAN_ON_ALL_BANDS);
+--- a/drivers/net/wireless/realtek/rtw88/main.h
++++ b/drivers/net/wireless/realtek/rtw88/main.h
+@@ -1230,6 +1230,7 @@ struct rtw_chip_info {
+ 	u16 fw_fifo_addr[RTW_FW_FIFO_MAX];
+ 	const struct rtw_fwcd_segs *fwcd_segs;
+ 
++	bool amsdu_in_ampdu;
+ 	u8 usb_tx_agg_desc_num;
+ 	bool hw_feature_report;
+ 	u8 c2h_ra_report_size;
+--- a/drivers/net/wireless/realtek/rtw88/rtw8812a.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8812a.c
+@@ -1076,6 +1076,7 @@ const struct rtw_chip_info rtw8812a_hw_s
+ 	.rfe_defs = rtw8812a_rfe_defs,
+ 	.rfe_defs_size = ARRAY_SIZE(rtw8812a_rfe_defs),
+ 	.rx_ldpc = false,
++	.amsdu_in_ampdu = true,
+ 	.hw_feature_report = false,
+ 	.c2h_ra_report_size = 4,
+ 	.old_datarate_fb_limit = true,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8814a.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8814a.c
+@@ -2200,6 +2200,7 @@ const struct rtw_chip_info rtw8814a_hw_s
+ 	.rx_ldpc = true,
+ 	.max_power_index = 0x3f,
+ 	.ampdu_density = IEEE80211_HT_MPDU_DENSITY_2,
++	.amsdu_in_ampdu = false, /* RX speed is better without AMSDU */
+ 	.usb_tx_agg_desc_num = 3,
+ 	.hw_feature_report = false,
+ 	.c2h_ra_report_size = 6,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8821a.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8821a.c
+@@ -1176,6 +1176,7 @@ const struct rtw_chip_info rtw8821a_hw_s
+ 	.rfe_defs = rtw8821a_rfe_defs,
+ 	.rfe_defs_size = ARRAY_SIZE(rtw8821a_rfe_defs),
+ 	.rx_ldpc = false,
++	.amsdu_in_ampdu = true,
+ 	.hw_feature_report = false,
+ 	.c2h_ra_report_size = 4,
+ 	.old_datarate_fb_limit = true,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8821c.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8821c.c
+@@ -1991,6 +1991,7 @@ const struct rtw_chip_info rtw8821c_hw_s
+ 	.band = RTW_BAND_2G | RTW_BAND_5G,
+ 	.page_size = TX_PAGE_SIZE,
+ 	.dig_min = 0x1c,
++	.amsdu_in_ampdu = true,
+ 	.usb_tx_agg_desc_num = 3,
+ 	.hw_feature_report = true,
+ 	.c2h_ra_report_size = 7,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822b.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822b.c
+@@ -2532,6 +2532,7 @@ const struct rtw_chip_info rtw8822b_hw_s
+ 	.band = RTW_BAND_2G | RTW_BAND_5G,
+ 	.page_size = TX_PAGE_SIZE,
+ 	.dig_min = 0x1c,
++	.amsdu_in_ampdu = true,
+ 	.usb_tx_agg_desc_num = 3,
+ 	.hw_feature_report = true,
+ 	.c2h_ra_report_size = 7,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822c.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822c.c
+@@ -5350,6 +5350,7 @@ const struct rtw_chip_info rtw8822c_hw_s
+ 	.band = RTW_BAND_2G | RTW_BAND_5G,
+ 	.page_size = TX_PAGE_SIZE,
+ 	.dig_min = 0x20,
++	.amsdu_in_ampdu = true,
+ 	.usb_tx_agg_desc_num = 3,
+ 	.hw_feature_report = true,
+ 	.c2h_ra_report_size = 7,
diff --git a/package/kernel/mac80211/patches/rtl/099-v6.16-wifi-rtw88-Fix-the-module-names-printed-in-dmesg.patch b/package/kernel/mac80211/patches/rtl/099-v6.16-wifi-rtw88-Fix-the-module-names-printed-in-dmesg.patch
new file mode 100644
index 0000000000..5082d77c5e
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/099-v6.16-wifi-rtw88-Fix-the-module-names-printed-in-dmesg.patch
@@ -0,0 +1,230 @@
+From 581cf3a9cb61daae1009c2380b228f40177046d8 Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Wed, 2 Apr 2025 20:54:30 +0300
+Subject: [PATCH] wifi: rtw88: Fix the module names printed in dmesg
+
+The rtw88 module names all start with the "rtw88_" prefix, but the
+messages in dmesg mostly use the "rtw_" prefix. The messages from
+rtw88_8723cs don't even have the underscore.
+
+Use the KBUILD_MODNAME macro in every driver. This ensures that the
+messages in dmesg will always use the module name.
+
+Before:
+
+Mar 17 15:54:19 ideapad2 kernel: rtw_8814au 2-4:1.0: Firmware version 33.6.0, H2C version 6
+
+After:
+
+Mar 17 16:33:35 ideapad2 kernel: rtw88_8814au 2-4:1.0: Firmware version 33.6.0, H2C version 6
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/29cd29ba-bc51-4d5b-ad48-a43c6ce72d56@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/rtw8723cs.c | 2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8723de.c | 2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8723ds.c | 2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8723du.c | 2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8812au.c | 2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8814ae.c | 2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8814au.c | 2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8821au.c | 2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8821ce.c | 2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8821cs.c | 2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8821cu.c | 2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8822be.c | 2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8822bs.c | 2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8822bu.c | 2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8822ce.c | 2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8822cs.c | 2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8822cu.c | 2 +-
+ 17 files changed, 17 insertions(+), 17 deletions(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/rtw8723cs.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8723cs.c
+@@ -19,7 +19,7 @@ static const struct sdio_device_id rtw_8
+ MODULE_DEVICE_TABLE(sdio, rtw_8723cs_id_table);
+ 
+ static struct sdio_driver rtw_8723cs_driver = {
+-	.name = "rtw8723cs",
++	.name = KBUILD_MODNAME,
+ 	.id_table = rtw_8723cs_id_table,
+ 	.probe = rtw_sdio_probe,
+ 	.remove = rtw_sdio_remove,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8723de.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8723de.c
+@@ -17,7 +17,7 @@ static const struct pci_device_id rtw_87
+ MODULE_DEVICE_TABLE(pci, rtw_8723de_id_table);
+ 
+ static struct pci_driver rtw_8723de_driver = {
+-	.name = "rtw_8723de",
++	.name = KBUILD_MODNAME,
+ 	.id_table = rtw_8723de_id_table,
+ 	.probe = rtw_pci_probe,
+ 	.remove = rtw_pci_remove,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8723ds.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8723ds.c
+@@ -25,7 +25,7 @@ static const struct sdio_device_id rtw_8
+ MODULE_DEVICE_TABLE(sdio, rtw_8723ds_id_table);
+ 
+ static struct sdio_driver rtw_8723ds_driver = {
+-	.name = "rtw_8723ds",
++	.name = KBUILD_MODNAME,
+ 	.probe = rtw_sdio_probe,
+ 	.remove = rtw_sdio_remove,
+ 	.id_table = rtw_8723ds_id_table,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8723du.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8723du.c
+@@ -24,7 +24,7 @@ static int rtw8723du_probe(struct usb_in
+ }
+ 
+ static struct usb_driver rtw_8723du_driver = {
+-	.name = "rtw_8723du",
++	.name = KBUILD_MODNAME,
+ 	.id_table = rtw_8723du_id_table,
+ 	.probe = rtw8723du_probe,
+ 	.disconnect = rtw_usb_disconnect,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8812au.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8812au.c
+@@ -82,7 +82,7 @@ static const struct usb_device_id rtw_88
+ MODULE_DEVICE_TABLE(usb, rtw_8812au_id_table);
+ 
+ static struct usb_driver rtw_8812au_driver = {
+-	.name = "rtw_8812au",
++	.name = KBUILD_MODNAME,
+ 	.id_table = rtw_8812au_id_table,
+ 	.probe = rtw_usb_probe,
+ 	.disconnect = rtw_usb_disconnect,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8814ae.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8814ae.c
+@@ -17,7 +17,7 @@ static const struct pci_device_id rtw_88
+ MODULE_DEVICE_TABLE(pci, rtw_8814ae_id_table);
+ 
+ static struct pci_driver rtw_8814ae_driver = {
+-	.name = "rtw_8814ae",
++	.name = KBUILD_MODNAME,
+ 	.id_table = rtw_8814ae_id_table,
+ 	.probe = rtw_pci_probe,
+ 	.remove = rtw_pci_remove,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8814au.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8814au.c
+@@ -42,7 +42,7 @@ static const struct usb_device_id rtw_88
+ MODULE_DEVICE_TABLE(usb, rtw_8814au_id_table);
+ 
+ static struct usb_driver rtw_8814au_driver = {
+-	.name = "rtw_8814au",
++	.name = KBUILD_MODNAME,
+ 	.id_table = rtw_8814au_id_table,
+ 	.probe = rtw_usb_probe,
+ 	.disconnect = rtw_usb_disconnect,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8821au.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8821au.c
+@@ -66,7 +66,7 @@ static const struct usb_device_id rtw_88
+ MODULE_DEVICE_TABLE(usb, rtw_8821au_id_table);
+ 
+ static struct usb_driver rtw_8821au_driver = {
+-	.name = "rtw_8821au",
++	.name = KBUILD_MODNAME,
+ 	.id_table = rtw_8821au_id_table,
+ 	.probe = rtw_usb_probe,
+ 	.disconnect = rtw_usb_disconnect,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8821ce.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8821ce.c
+@@ -21,7 +21,7 @@ static const struct pci_device_id rtw_88
+ MODULE_DEVICE_TABLE(pci, rtw_8821ce_id_table);
+ 
+ static struct pci_driver rtw_8821ce_driver = {
+-	.name = "rtw_8821ce",
++	.name = KBUILD_MODNAME,
+ 	.id_table = rtw_8821ce_id_table,
+ 	.probe = rtw_pci_probe,
+ 	.remove = rtw_pci_remove,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8821cs.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8821cs.c
+@@ -20,7 +20,7 @@ static const struct sdio_device_id rtw_8
+ MODULE_DEVICE_TABLE(sdio, rtw_8821cs_id_table);
+ 
+ static struct sdio_driver rtw_8821cs_driver = {
+-	.name = "rtw_8821cs",
++	.name = KBUILD_MODNAME,
+ 	.probe = rtw_sdio_probe,
+ 	.remove = rtw_sdio_remove,
+ 	.id_table = rtw_8821cs_id_table,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8821cu.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8821cu.c
+@@ -48,7 +48,7 @@ static int rtw_8821cu_probe(struct usb_i
+ }
+ 
+ static struct usb_driver rtw_8821cu_driver = {
+-	.name = "rtw_8821cu",
++	.name = KBUILD_MODNAME,
+ 	.id_table = rtw_8821cu_id_table,
+ 	.probe = rtw_8821cu_probe,
+ 	.disconnect = rtw_usb_disconnect,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822be.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822be.c
+@@ -17,7 +17,7 @@ static const struct pci_device_id rtw_88
+ MODULE_DEVICE_TABLE(pci, rtw_8822be_id_table);
+ 
+ static struct pci_driver rtw_8822be_driver = {
+-	.name = "rtw_8822be",
++	.name = KBUILD_MODNAME,
+ 	.id_table = rtw_8822be_id_table,
+ 	.probe = rtw_pci_probe,
+ 	.remove = rtw_pci_remove,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822bs.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822bs.c
+@@ -20,7 +20,7 @@ static const struct sdio_device_id rtw_8
+ MODULE_DEVICE_TABLE(sdio, rtw_8822bs_id_table);
+ 
+ static struct sdio_driver rtw_8822bs_driver = {
+-	.name = "rtw_8822bs",
++	.name = KBUILD_MODNAME,
+ 	.probe = rtw_sdio_probe,
+ 	.remove = rtw_sdio_remove,
+ 	.id_table = rtw_8822bs_id_table,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822bu.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822bu.c
+@@ -88,7 +88,7 @@ static int rtw8822bu_probe(struct usb_in
+ }
+ 
+ static struct usb_driver rtw_8822bu_driver = {
+-	.name = "rtw_8822bu",
++	.name = KBUILD_MODNAME,
+ 	.id_table = rtw_8822bu_id_table,
+ 	.probe = rtw8822bu_probe,
+ 	.disconnect = rtw_usb_disconnect,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822ce.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822ce.c
+@@ -21,7 +21,7 @@ static const struct pci_device_id rtw_88
+ MODULE_DEVICE_TABLE(pci, rtw_8822ce_id_table);
+ 
+ static struct pci_driver rtw_8822ce_driver = {
+-	.name = "rtw_8822ce",
++	.name = KBUILD_MODNAME,
+ 	.id_table = rtw_8822ce_id_table,
+ 	.probe = rtw_pci_probe,
+ 	.remove = rtw_pci_remove,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822cs.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822cs.c
+@@ -20,7 +20,7 @@ static const struct sdio_device_id rtw_8
+ MODULE_DEVICE_TABLE(sdio, rtw_8822cs_id_table);
+ 
+ static struct sdio_driver rtw_8822cs_driver = {
+-	.name = "rtw_8822cs",
++	.name = KBUILD_MODNAME,
+ 	.probe = rtw_sdio_probe,
+ 	.remove = rtw_sdio_remove,
+ 	.id_table = rtw_8822cs_id_table,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822cu.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822cu.c
+@@ -32,7 +32,7 @@ static int rtw8822cu_probe(struct usb_in
+ }
+ 
+ static struct usb_driver rtw_8822cu_driver = {
+-	.name = "rtw_8822cu",
++	.name = KBUILD_MODNAME,
+ 	.id_table = rtw_8822cu_id_table,
+ 	.probe = rtw8822cu_probe,
+ 	.disconnect = rtw_usb_disconnect,
diff --git a/package/kernel/mac80211/patches/rtl/100-v6.16-wifi-rtw88-sdio-map-mgmt-frames-to-queue-TX_DESC_QSE.patch b/package/kernel/mac80211/patches/rtl/100-v6.16-wifi-rtw88-sdio-map-mgmt-frames-to-queue-TX_DESC_QSE.patch
new file mode 100644
index 0000000000..ae2d2f5cff
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/100-v6.16-wifi-rtw88-sdio-map-mgmt-frames-to-queue-TX_DESC_QSE.patch
@@ -0,0 +1,36 @@
+From b2effcdc237979dcc533d446a792fc54fd0e1213 Mon Sep 17 00:00:00 2001
+From: Zhen XIN <zhen.xin@nokia-sbell.com>
+Date: Thu, 10 Apr 2025 15:42:17 +0000
+Subject: [PATCH] wifi: rtw88: sdio: map mgmt frames to queue TX_DESC_QSEL_MGMT
+
+The rtw88-sdio do not work in AP mode due to the lack of TX status report
+for management frames.
+
+Map the management frames to queue TX_DESC_QSEL_MGMT, which enables the
+chip to generate TX reports for these frames
+
+Tested-on: rtl8723ds
+
+Fixes: 65371a3f14e7 ("wifi: rtw88: sdio: Add HCI implementation for SDIO based chipsets")
+Signed-off-by: Zhen XIN <zhen.xin@nokia-sbell.com>
+Reviewed-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/20250410154217.1849977-3-zhen.xin@nokia-sbell.com
+---
+ drivers/net/wireless/realtek/rtw88/sdio.c | 5 +----
+ 1 file changed, 1 insertion(+), 4 deletions(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/sdio.c
++++ b/drivers/net/wireless/realtek/rtw88/sdio.c
+@@ -718,10 +718,7 @@ static u8 rtw_sdio_get_tx_qsel(struct rt
+ 	case RTW_TX_QUEUE_H2C:
+ 		return TX_DESC_QSEL_H2C;
+ 	case RTW_TX_QUEUE_MGMT:
+-		if (rtw_chip_wcpu_11n(rtwdev))
+-			return TX_DESC_QSEL_HIGH;
+-		else
+-			return TX_DESC_QSEL_MGMT;
++		return TX_DESC_QSEL_MGMT;
+ 	case RTW_TX_QUEUE_HI0:
+ 		return TX_DESC_QSEL_HIGH;
+ 	default:
diff --git a/package/kernel/mac80211/patches/rtl/101-v6.16-wifi-rtw88-sdio-call-rtw_sdio_indicate_tx_status-unc.patch b/package/kernel/mac80211/patches/rtl/101-v6.16-wifi-rtw88-sdio-call-rtw_sdio_indicate_tx_status-unc.patch
new file mode 100644
index 0000000000..aa85137ae2
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/101-v6.16-wifi-rtw88-sdio-call-rtw_sdio_indicate_tx_status-unc.patch
@@ -0,0 +1,37 @@
+From fc5f5a0ec463ae6a07850428bd3082947e01d276 Mon Sep 17 00:00:00 2001
+From: Zhen XIN <zhen.xin@nokia-sbell.com>
+Date: Thu, 10 Apr 2025 15:42:16 +0000
+Subject: [PATCH] wifi: rtw88: sdio: call rtw_sdio_indicate_tx_status
+ unconditionally
+
+The rtw88-sdio do not work in AP mode due to the lack of TX status report
+for management frames.
+
+Make the invocation of rtw_sdio_indicate_tx_status unconditional and cover
+all packet queues
+
+Tested-on: rtl8723ds
+
+Fixes: 65371a3f14e7 ("wifi: rtw88: sdio: Add HCI implementation for SDIO based chipsets")
+Signed-off-by: Zhen XIN <zhen.xin@nokia-sbell.com>
+Reviewed-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/20250410154217.1849977-2-zhen.xin@nokia-sbell.com
+---
+ drivers/net/wireless/realtek/rtw88/sdio.c | 5 +----
+ 1 file changed, 1 insertion(+), 4 deletions(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/sdio.c
++++ b/drivers/net/wireless/realtek/rtw88/sdio.c
+@@ -1224,10 +1224,7 @@ static void rtw_sdio_process_tx_queue(st
+ 		return;
+ 	}
+ 
+-	if (queue <= RTW_TX_QUEUE_VO)
+-		rtw_sdio_indicate_tx_status(rtwdev, skb);
+-	else
+-		dev_kfree_skb_any(skb);
++	rtw_sdio_indicate_tx_status(rtwdev, skb);
+ }
+ 
+ static void rtw_sdio_tx_handler(struct work_struct *work)
diff --git a/package/kernel/mac80211/patches/rtl/102-v6.16-wifi-rtw88-do-not-ignore-hardware-read-error-during-.patch b/package/kernel/mac80211/patches/rtl/102-v6.16-wifi-rtw88-do-not-ignore-hardware-read-error-during-.patch
new file mode 100644
index 0000000000..87d72bf88b
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/102-v6.16-wifi-rtw88-do-not-ignore-hardware-read-error-during-.patch
@@ -0,0 +1,32 @@
+From 20d3c19bd8f9b498173c198eadf54580c8caa336 Mon Sep 17 00:00:00 2001
+From: Dmitry Antipov <dmantipov@yandex.ru>
+Date: Tue, 15 Apr 2025 12:07:20 +0300
+Subject: [PATCH] wifi: rtw88: do not ignore hardware read error during DPK
+
+In 'rtw8822c_dpk_cal_coef1()', do not ignore error returned
+by 'check_hw_ready()' but issue a warning to denote possible
+DPK issue. Compile tested only.
+
+Found by Linux Verification Center (linuxtesting.org) with SVACE.
+
+Fixes: 5227c2ee453d ("rtw88: 8822c: add SW DPK support")
+Suggested-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Dmitry Antipov <dmantipov@yandex.ru>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/20250415090720.194048-1-dmantipov@yandex.ru
+---
+ drivers/net/wireless/realtek/rtw88/rtw8822c.c | 3 ++-
+ 1 file changed, 2 insertions(+), 1 deletion(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822c.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822c.c
+@@ -3951,7 +3951,8 @@ static void rtw8822c_dpk_cal_coef1(struc
+ 	rtw_write32(rtwdev, REG_NCTL0, 0x00001148);
+ 	rtw_write32(rtwdev, REG_NCTL0, 0x00001149);
+ 
+-	check_hw_ready(rtwdev, 0x2d9c, MASKBYTE0, 0x55);
++	if (!check_hw_ready(rtwdev, 0x2d9c, MASKBYTE0, 0x55))
++		rtw_warn(rtwdev, "DPK stuck, performance may be suboptimal");
+ 
+ 	rtw_write8(rtwdev, 0x1b10, 0x0);
+ 	rtw_write32_mask(rtwdev, REG_NCTL0, BIT_SUBPAGE, 0x0000000c);
diff --git a/package/kernel/mac80211/patches/rtl/103-v6.16-wifi-rtw88-Fix-RX-aggregation-settings-for-RTL8723DS.patch b/package/kernel/mac80211/patches/rtl/103-v6.16-wifi-rtw88-Fix-RX-aggregation-settings-for-RTL8723DS.patch
new file mode 100644
index 0000000000..901e471508
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/103-v6.16-wifi-rtw88-Fix-RX-aggregation-settings-for-RTL8723DS.patch
@@ -0,0 +1,44 @@
+From 0ffa1ba81b35ba147c9df6206a61499a156b0128 Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Fri, 2 May 2025 14:49:01 +0300
+Subject: [PATCH] wifi: rtw88: Fix RX aggregation settings for RTL8723DS
+
+Use the same RX aggregation size and timeout used by the out-of-tree
+RTL8723DS driver. Also set mystery bit 31 of REG_RXDMA_AGG_PG_TH. This
+improves the RX speed from ~44 Mbps to ~67 Mbps.
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/4c79fdc1-54bc-4986-9931-bb3ceb418b97@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/sdio.c | 14 ++++++++++++--
+ 1 file changed, 12 insertions(+), 2 deletions(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/sdio.c
++++ b/drivers/net/wireless/realtek/rtw88/sdio.c
+@@ -677,12 +677,22 @@ static void rtw_sdio_enable_rx_aggregati
+ {
+ 	u8 size, timeout;
+ 
+-	if (rtw_chip_wcpu_11n(rtwdev)) {
++	switch (rtwdev->chip->id) {
++	case RTW_CHIP_TYPE_8703B:
++	case RTW_CHIP_TYPE_8821A:
++	case RTW_CHIP_TYPE_8812A:
+ 		size = 0x6;
+ 		timeout = 0x6;
+-	} else {
++		break;
++	case RTW_CHIP_TYPE_8723D:
++		size = 0xa;
++		timeout = 0x3;
++		rtw_write8_set(rtwdev, REG_RXDMA_AGG_PG_TH + 3, BIT(7));
++		break;
++	default:
+ 		size = 0xff;
+ 		timeout = 0x1;
++		break;
+ 	}
+ 
+ 	/* Make the firmware honor the size limit configured below */
diff --git a/package/kernel/mac80211/patches/rtl/104-v6.16-wifi-rtw88-Handle-RTL8723D-S-with-blank-efuse.patch b/package/kernel/mac80211/patches/rtl/104-v6.16-wifi-rtw88-Handle-RTL8723D-S-with-blank-efuse.patch
new file mode 100644
index 0000000000..d994a6aa69
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/104-v6.16-wifi-rtw88-Handle-RTL8723D-S-with-blank-efuse.patch
@@ -0,0 +1,198 @@
+From 2c17afde9ff6713f3e080ed1ea1a4bd7480be9aa Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Fri, 2 May 2025 14:49:34 +0300
+Subject: [PATCH] wifi: rtw88: Handle RTL8723D(S) with blank efuse
+
+Some users have RTL8723DS chips with nearly blank efuse. Currently these
+chips cannot connect when using rtw88, but they do work using the old
+out-of-tree driver.
+
+Use reasonable default values for TX power, antenna configuration, and
+crystal cap if the chip's efuse is missing these things.
+
+RTL8723D can use the same default values as RTL8703B, so simply move
+the code from rtl8703b_read_efuse() to the shared function
+__rtl8723x_read_efuse().
+
+Link: https://github.com/lwfinger/rtw88/issues/157
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/5734afe7-0870-40b2-acd4-5657a02d7c56@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/rtw8703b.c | 60 -------------------
+ drivers/net/wireless/realtek/rtw88/rtw8723x.c | 59 ++++++++++++++++++
+ 2 files changed, 59 insertions(+), 60 deletions(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/rtw8703b.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8703b.c
+@@ -519,15 +519,6 @@ static const struct rtw_rqpn rqpn_table_
+ 	 RTW_DMA_MAPPING_EXTRA, RTW_DMA_MAPPING_HIGH},
+ };
+ 
+-/* Default power index table for RTL8703B, used if EFUSE does not
+- * contain valid data. Replaces EFUSE data from offset 0x10 (start of
+- * txpwr_idx_table).
+- */
+-static const u8 rtw8703b_txpwr_idx_table[] = {
+-	0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D,
+-	0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x02
+-};
+-
+ static void try_mac_from_devicetree(struct rtw_dev *rtwdev)
+ {
+ 	struct device_node *node = rtwdev->dev->of_node;
+@@ -544,15 +535,9 @@ static void try_mac_from_devicetree(stru
+ 	}
+ }
+ 
+-#define DBG_EFUSE_FIX(rtwdev, name)					\
+-	rtw_dbg(rtwdev, RTW_DBG_EFUSE, "Fixed invalid EFUSE value: "	\
+-		# name "=0x%x\n", rtwdev->efuse.name)
+-
+ static int rtw8703b_read_efuse(struct rtw_dev *rtwdev, u8 *log_map)
+ {
+ 	struct rtw_efuse *efuse = &rtwdev->efuse;
+-	u8 *pwr = (u8 *)efuse->txpwr_idx_table;
+-	bool valid = false;
+ 	int ret;
+ 
+ 	ret = rtw8723x_read_efuse(rtwdev, log_map);
+@@ -562,51 +547,6 @@ static int rtw8703b_read_efuse(struct rt
+ 	if (!is_valid_ether_addr(efuse->addr))
+ 		try_mac_from_devicetree(rtwdev);
+ 
+-	/* If TX power index table in EFUSE is invalid, fall back to
+-	 * built-in table.
+-	 */
+-	for (int i = 0; i < ARRAY_SIZE(rtw8703b_txpwr_idx_table); i++)
+-		if (pwr[i] != 0xff) {
+-			valid = true;
+-			break;
+-		}
+-	if (!valid) {
+-		for (int i = 0; i < ARRAY_SIZE(rtw8703b_txpwr_idx_table); i++)
+-			pwr[i] = rtw8703b_txpwr_idx_table[i];
+-		rtw_dbg(rtwdev, RTW_DBG_EFUSE,
+-			"Replaced invalid EFUSE TX power index table.");
+-		rtw8723x_debug_txpwr_limit(rtwdev,
+-					   efuse->txpwr_idx_table, 2);
+-	}
+-
+-	/* Override invalid antenna settings. */
+-	if (efuse->bt_setting == 0xff) {
+-		/* shared antenna */
+-		efuse->bt_setting |= BIT(0);
+-		/* RF path A */
+-		efuse->bt_setting &= ~BIT(6);
+-		DBG_EFUSE_FIX(rtwdev, bt_setting);
+-	}
+-
+-	/* Override invalid board options: The coex code incorrectly
+-	 * assumes that if bits 6 & 7 are set the board doesn't
+-	 * support coex. Regd is also derived from rf_board_option and
+-	 * should be 0 if there's no valid data.
+-	 */
+-	if (efuse->rf_board_option == 0xff) {
+-		efuse->regd = 0;
+-		efuse->rf_board_option &= GENMASK(5, 0);
+-		DBG_EFUSE_FIX(rtwdev, rf_board_option);
+-	}
+-
+-	/* Override invalid crystal cap setting, default comes from
+-	 * vendor driver. Chip specific.
+-	 */
+-	if (efuse->crystal_cap == 0xff) {
+-		efuse->crystal_cap = 0x20;
+-		DBG_EFUSE_FIX(rtwdev, crystal_cap);
+-	}
+-
+ 	return 0;
+ }
+ 
+--- a/drivers/net/wireless/realtek/rtw88/rtw8723x.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8723x.c
+@@ -69,6 +69,9 @@ static void __rtw8723x_lck(struct rtw_de
+ #define DBG_EFUSE_2BYTE(rtwdev, map, name)			\
+ 	rtw_dbg(rtwdev, RTW_DBG_EFUSE, # name "=0x%02x%02x\n",	\
+ 		(map)->name[0], (map)->name[1])
++#define DBG_EFUSE_FIX(rtwdev, name)					\
++	rtw_dbg(rtwdev, RTW_DBG_EFUSE, "Fixed invalid EFUSE value: "	\
++		# name "=0x%x\n", rtwdev->efuse.name)
+ 
+ static void rtw8723xe_efuse_debug(struct rtw_dev *rtwdev,
+ 				  struct rtw8723x_efuse *map)
+@@ -238,10 +241,21 @@ static void rtw8723xs_efuse_parsing(stru
+ 	ether_addr_copy(efuse->addr, map->s.mac_addr);
+ }
+ 
++/* Default power index table for RTL8703B/RTL8723D, used if EFUSE does
++ * not contain valid data. Replaces EFUSE data from offset 0x10 (start
++ * of txpwr_idx_table).
++ */
++static const u8 rtw8723x_txpwr_idx_table[] = {
++	0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D,
++	0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x02
++};
++
+ static int __rtw8723x_read_efuse(struct rtw_dev *rtwdev, u8 *log_map)
+ {
+ 	struct rtw_efuse *efuse = &rtwdev->efuse;
++	u8 *pwr = (u8 *)efuse->txpwr_idx_table;
+ 	struct rtw8723x_efuse *map;
++	bool valid = false;
+ 	int i;
+ 
+ 	map = (struct rtw8723x_efuse *)log_map;
+@@ -279,6 +293,51 @@ static int __rtw8723x_read_efuse(struct
+ 		return -EOPNOTSUPP;
+ 	}
+ 
++	/* If TX power index table in EFUSE is invalid, fall back to
++	 * built-in table.
++	 */
++	for (i = 0; i < ARRAY_SIZE(rtw8723x_txpwr_idx_table); i++)
++		if (pwr[i] != 0xff) {
++			valid = true;
++			break;
++		}
++	if (!valid) {
++		for (i = 0; i < ARRAY_SIZE(rtw8723x_txpwr_idx_table); i++)
++			pwr[i] = rtw8723x_txpwr_idx_table[i];
++		rtw_dbg(rtwdev, RTW_DBG_EFUSE,
++			"Replaced invalid EFUSE TX power index table.");
++		rtw8723x_debug_txpwr_limit(rtwdev,
++					   efuse->txpwr_idx_table, 2);
++	}
++
++	/* Override invalid antenna settings. */
++	if (efuse->bt_setting == 0xff) {
++		/* shared antenna */
++		efuse->bt_setting |= BIT(0);
++		/* RF path A */
++		efuse->bt_setting &= ~BIT(6);
++		DBG_EFUSE_FIX(rtwdev, bt_setting);
++	}
++
++	/* Override invalid board options: The coex code incorrectly
++	 * assumes that if bits 6 & 7 are set the board doesn't
++	 * support coex. Regd is also derived from rf_board_option and
++	 * should be 0 if there's no valid data.
++	 */
++	if (efuse->rf_board_option == 0xff) {
++		efuse->regd = 0;
++		efuse->rf_board_option &= GENMASK(5, 0);
++		DBG_EFUSE_FIX(rtwdev, rf_board_option);
++	}
++
++	/* Override invalid crystal cap setting, default comes from
++	 * vendor driver. Chip specific.
++	 */
++	if (efuse->crystal_cap == 0xff) {
++		efuse->crystal_cap = 0x20;
++		DBG_EFUSE_FIX(rtwdev, crystal_cap);
++	}
++
+ 	return 0;
+ }
+ 
diff --git a/package/kernel/mac80211/patches/rtl/105-v6.16-wifi-rtw88-rtw8822bu-VID-PID-for-BUFFALO-WI-U2-866DM.patch b/package/kernel/mac80211/patches/rtl/105-v6.16-wifi-rtw88-rtw8822bu-VID-PID-for-BUFFALO-WI-U2-866DM.patch
new file mode 100644
index 0000000000..8321ca8c94
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/105-v6.16-wifi-rtw88-rtw8822bu-VID-PID-for-BUFFALO-WI-U2-866DM.patch
@@ -0,0 +1,27 @@
+From b7f0cc647e52296a3d4dd727b6479dcd6d7e364e Mon Sep 17 00:00:00 2001
+From: Yuuki NAGAO <wf.yn386@gmail.com>
+Date: Sat, 3 May 2025 09:32:27 +0900
+Subject: [PATCH] wifi: rtw88: rtw8822bu VID/PID for BUFFALO WI-U2-866DM
+
+Add VID/PID 0411/03d1 for recently released
+BUFFALO WI-U2-866DM USB WiFi adapter.
+
+Signed-off-by: Yuuki NAGAO <wf.yn386@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/20250503003227.6673-1-wf.yn386@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/rtw8822bu.c | 2 ++
+ 1 file changed, 2 insertions(+)
+
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822bu.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822bu.c
+@@ -77,6 +77,8 @@ static const struct usb_device_id rtw_88
+ 	  .driver_info = (kernel_ulong_t)&(rtw8822b_hw_spec) }, /* Mercusys MA30N */
+ 	{ USB_DEVICE_AND_INTERFACE_INFO(0x2001, 0x3322, 0xff, 0xff, 0xff),
+ 	  .driver_info = (kernel_ulong_t)&(rtw8822b_hw_spec) }, /* D-Link DWA-T185 rev. A1 */
++	{ USB_DEVICE_AND_INTERFACE_INFO(0x0411, 0x03d1, 0xff, 0xff, 0xff),
++	  .driver_info = (kernel_ulong_t)&(rtw8822b_hw_spec) }, /* BUFFALO WI-U2-866DM */
+ 	{},
+ };
+ MODULE_DEVICE_TABLE(usb, rtw_8822bu_id_table);
diff --git a/package/kernel/mac80211/patches/rtl/106-v6.16-wifi-rtw88-usb-Reduce-control-message-timeout-to-500.patch b/package/kernel/mac80211/patches/rtl/106-v6.16-wifi-rtw88-usb-Reduce-control-message-timeout-to-500.patch
new file mode 100644
index 0000000000..9ed1162ab8
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/106-v6.16-wifi-rtw88-usb-Reduce-control-message-timeout-to-500.patch
@@ -0,0 +1,52 @@
+From 490340faddea461319652ce36dbc7c1b4482c35e Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Sat, 10 May 2025 15:21:25 +0300
+Subject: [PATCH] wifi: rtw88: usb: Reduce control message timeout to 500 ms
+
+RTL8811AU stops responding during the firmware download on some systems:
+
+[  809.256440] rtw_8821au 5-2.1:1.0: Firmware version 42.4.0, H2C version 0
+[  812.759142] rtw_8821au 5-2.1:1.0 wlp48s0f4u2u1: renamed from wlan0
+[  837.315388] rtw_8821au 1-4:1.0: write register 0x1ef4 failed with -110
+[  867.524259] rtw_8821au 1-4:1.0: write register 0x1ef8 failed with -110
+[  868.930976] rtw_8821au 5-2.1:1.0 wlp48s0f4u2u1: entered promiscuous mode
+[  897.730952] rtw_8821au 1-4:1.0: write register 0x1efc failed with -110
+
+Each write takes 30 seconds to fail because that's the timeout currently
+used for control messages in rtw_usb_write().
+
+In this scenario the firmware download takes at least 2000 seconds.
+Because this is done from the USB probe function, the long delay makes
+other things in the system hang.
+
+Reduce the timeout to 500 ms. This is the value used by the official USB
+wifi drivers from Realtek.
+
+Of course this only makes things hang for ~30 seconds instead of ~30
+minutes. It doesn't fix the firmware download.
+
+Tested with RTL8822CU, RTL8812BU, RTL8811CU, RTL8814AU, RTL8811AU,
+RTL8812AU, RTL8821AU, RTL8723DU.
+
+Cc: stable@vger.kernel.org
+Fixes: a82dfd33d123 ("wifi: rtw88: Add common USB chip support")
+Link: https://github.com/lwfinger/rtw88/issues/344
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/1e35dd26-3f10-40b1-b2b4-f72184a26611@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/usb.c | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/usb.c
++++ b/drivers/net/wireless/realtek/rtw88/usb.c
+@@ -139,7 +139,7 @@ static void rtw_usb_write(struct rtw_dev
+ 
+ 	ret = usb_control_msg(udev, usb_sndctrlpipe(udev, 0),
+ 			      RTW_USB_CMD_REQ, RTW_USB_CMD_WRITE,
+-			      addr, 0, data, len, 30000);
++			      addr, 0, data, len, 500);
+ 	if (ret < 0 && ret != -ENODEV && count++ < 4)
+ 		rtw_err(rtwdev, "write register 0x%x failed with %d\n",
+ 			addr, ret);
diff --git a/package/kernel/mac80211/patches/rtl/107-v6.16-wifi-rtw88-usb-Upload-the-firmware-in-bigger-chunks.patch b/package/kernel/mac80211/patches/rtl/107-v6.16-wifi-rtw88-usb-Upload-the-firmware-in-bigger-chunks.patch
new file mode 100644
index 0000000000..d3d660edb9
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/107-v6.16-wifi-rtw88-usb-Upload-the-firmware-in-bigger-chunks.patch
@@ -0,0 +1,214 @@
+From 80fe0bc1659c0ccc79d082e426fa376be5df9c04 Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Sat, 10 May 2025 15:22:24 +0300
+Subject: [PATCH] wifi: rtw88: usb: Upload the firmware in bigger chunks
+
+RTL8811AU stops responding during the firmware download on some systems:
+
+[  809.256440] rtw_8821au 5-2.1:1.0: Firmware version 42.4.0, H2C version 0
+[  812.759142] rtw_8821au 5-2.1:1.0 wlp48s0f4u2u1: renamed from wlan0
+[  837.315388] rtw_8821au 1-4:1.0: write register 0x1ef4 failed with -110
+[  867.524259] rtw_8821au 1-4:1.0: write register 0x1ef8 failed with -110
+[  868.930976] rtw_8821au 5-2.1:1.0 wlp48s0f4u2u1: entered promiscuous mode
+[  897.730952] rtw_8821au 1-4:1.0: write register 0x1efc failed with -110
+
+Maybe it takes too long when writing the firmware 4 bytes at a time.
+
+Write 196 bytes at a time for RTL8821AU, RTL8811AU, and RTL8812AU,
+and 254 bytes at a time for RTL8723DU. These are the sizes used in
+their official drivers. Tested with all these chips.
+
+Cc: stable@vger.kernel.org
+Link: https://github.com/lwfinger/rtw88/issues/344
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/43f1daad-3ec0-4a3b-a50c-9cd9eb2c2f52@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/hci.h  |  8 ++++
+ drivers/net/wireless/realtek/rtw88/mac.c  | 11 +++--
+ drivers/net/wireless/realtek/rtw88/mac.h  |  2 +
+ drivers/net/wireless/realtek/rtw88/pci.c  |  2 +
+ drivers/net/wireless/realtek/rtw88/sdio.c |  2 +
+ drivers/net/wireless/realtek/rtw88/usb.c  | 55 +++++++++++++++++++++++
+ 6 files changed, 76 insertions(+), 4 deletions(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/hci.h
++++ b/drivers/net/wireless/realtek/rtw88/hci.h
+@@ -19,6 +19,8 @@ struct rtw_hci_ops {
+ 	void (*link_ps)(struct rtw_dev *rtwdev, bool enter);
+ 	void (*interface_cfg)(struct rtw_dev *rtwdev);
+ 	void (*dynamic_rx_agg)(struct rtw_dev *rtwdev, bool enable);
++	void (*write_firmware_page)(struct rtw_dev *rtwdev, u32 page,
++				    const u8 *data, u32 size);
+ 
+ 	int (*write_data_rsvd_page)(struct rtw_dev *rtwdev, u8 *buf, u32 size);
+ 	int (*write_data_h2c)(struct rtw_dev *rtwdev, u8 *buf, u32 size);
+@@ -79,6 +81,12 @@ static inline void rtw_hci_dynamic_rx_ag
+ 		rtwdev->hci.ops->dynamic_rx_agg(rtwdev, enable);
+ }
+ 
++static inline void rtw_hci_write_firmware_page(struct rtw_dev *rtwdev, u32 page,
++					       const u8 *data, u32 size)
++{
++	rtwdev->hci.ops->write_firmware_page(rtwdev, page, data, size);
++}
++
+ static inline int
+ rtw_hci_write_data_rsvd_page(struct rtw_dev *rtwdev, u8 *buf, u32 size)
+ {
+--- a/drivers/net/wireless/realtek/rtw88/mac.c
++++ b/drivers/net/wireless/realtek/rtw88/mac.c
+@@ -856,8 +856,8 @@ fwdl_ready:
+ 	}
+ }
+ 
+-static void
+-write_firmware_page(struct rtw_dev *rtwdev, u32 page, const u8 *data, u32 size)
++void rtw_write_firmware_page(struct rtw_dev *rtwdev, u32 page,
++			     const u8 *data, u32 size)
+ {
+ 	u32 val32;
+ 	u32 block_nr;
+@@ -887,6 +887,7 @@ write_firmware_page(struct rtw_dev *rtwd
+ 		rtw_write32(rtwdev, write_addr, le32_to_cpu(remain_data));
+ 	}
+ }
++EXPORT_SYMBOL(rtw_write_firmware_page);
+ 
+ static int
+ download_firmware_legacy(struct rtw_dev *rtwdev, const u8 *data, u32 size)
+@@ -904,11 +905,13 @@ download_firmware_legacy(struct rtw_dev
+ 	rtw_write8_set(rtwdev, REG_MCUFW_CTRL, BIT_FWDL_CHK_RPT);
+ 
+ 	for (page = 0; page < total_page; page++) {
+-		write_firmware_page(rtwdev, page, data, DLFW_PAGE_SIZE_LEGACY);
++		rtw_hci_write_firmware_page(rtwdev, page, data,
++					    DLFW_PAGE_SIZE_LEGACY);
+ 		data += DLFW_PAGE_SIZE_LEGACY;
+ 	}
+ 	if (last_page_size)
+-		write_firmware_page(rtwdev, page, data, last_page_size);
++		rtw_hci_write_firmware_page(rtwdev, page, data,
++					    last_page_size);
+ 
+ 	if (!check_hw_ready(rtwdev, REG_MCUFW_CTRL, BIT_FWDL_CHK_RPT, 1)) {
+ 		rtw_err(rtwdev, "failed to check download firmware report\n");
+--- a/drivers/net/wireless/realtek/rtw88/mac.h
++++ b/drivers/net/wireless/realtek/rtw88/mac.h
+@@ -34,6 +34,8 @@ int rtw_pwr_seq_parser(struct rtw_dev *r
+ 		       const struct rtw_pwr_seq_cmd * const *cmd_seq);
+ int rtw_mac_power_on(struct rtw_dev *rtwdev);
+ void rtw_mac_power_off(struct rtw_dev *rtwdev);
++void rtw_write_firmware_page(struct rtw_dev *rtwdev, u32 page,
++			     const u8 *data, u32 size);
+ int rtw_download_firmware(struct rtw_dev *rtwdev, struct rtw_fw_state *fw);
+ int rtw_mac_init(struct rtw_dev *rtwdev);
+ void rtw_mac_flush_queues(struct rtw_dev *rtwdev, u32 queues, bool drop);
+--- a/drivers/net/wireless/realtek/rtw88/pci.c
++++ b/drivers/net/wireless/realtek/rtw88/pci.c
+@@ -12,6 +12,7 @@
+ #include "fw.h"
+ #include "ps.h"
+ #include "debug.h"
++#include "mac.h"
+ 
+ static bool rtw_disable_msi;
+ static bool rtw_pci_disable_aspm;
+@@ -1602,6 +1603,7 @@ static const struct rtw_hci_ops rtw_pci_
+ 	.link_ps = rtw_pci_link_ps,
+ 	.interface_cfg = rtw_pci_interface_cfg,
+ 	.dynamic_rx_agg = NULL,
++	.write_firmware_page = rtw_write_firmware_page,
+ 
+ 	.read8 = rtw_pci_read8,
+ 	.read16 = rtw_pci_read16,
+--- a/drivers/net/wireless/realtek/rtw88/sdio.c
++++ b/drivers/net/wireless/realtek/rtw88/sdio.c
+@@ -10,6 +10,7 @@
+ #include <linux/mmc/host.h>
+ #include <linux/mmc/sdio_func.h>
+ #include "main.h"
++#include "mac.h"
+ #include "debug.h"
+ #include "fw.h"
+ #include "ps.h"
+@@ -1164,6 +1165,7 @@ static const struct rtw_hci_ops rtw_sdio
+ 	.link_ps = rtw_sdio_link_ps,
+ 	.interface_cfg = rtw_sdio_interface_cfg,
+ 	.dynamic_rx_agg = NULL,
++	.write_firmware_page = rtw_write_firmware_page,
+ 
+ 	.read8 = rtw_sdio_read8,
+ 	.read16 = rtw_sdio_read16,
+--- a/drivers/net/wireless/realtek/rtw88/usb.c
++++ b/drivers/net/wireless/realtek/rtw88/usb.c
+@@ -165,6 +165,60 @@ static void rtw_usb_write32(struct rtw_d
+ 	rtw_usb_write(rtwdev, addr, val, 4);
+ }
+ 
++static void rtw_usb_write_firmware_page(struct rtw_dev *rtwdev, u32 page,
++					const u8 *data, u32 size)
++{
++	struct rtw_usb *rtwusb = rtw_get_usb_priv(rtwdev);
++	struct usb_device *udev = rtwusb->udev;
++	u32 addr = FW_START_ADDR_LEGACY;
++	u8 *data_dup, *buf;
++	u32 n, block_size;
++	int ret;
++
++	switch (rtwdev->chip->id) {
++	case RTW_CHIP_TYPE_8723D:
++		block_size = 254;
++		break;
++	default:
++		block_size = 196;
++		break;
++	}
++
++	data_dup = kmemdup(data, size, GFP_KERNEL);
++	if (!data_dup)
++		return;
++
++	buf = data_dup;
++
++	rtw_write32_mask(rtwdev, REG_MCUFW_CTRL, BIT_ROM_PGE, page);
++
++	while (size > 0) {
++		if (size >= block_size)
++			n = block_size;
++		else if (size >= 8)
++			n = 8;
++		else
++			n = 1;
++
++		ret = usb_control_msg(udev, usb_sndctrlpipe(udev, 0),
++				      RTW_USB_CMD_REQ, RTW_USB_CMD_WRITE,
++				      addr, 0, buf, n, 500);
++		if (ret != n) {
++			if (ret != -ENODEV)
++				rtw_err(rtwdev,
++					"write 0x%x len %d failed: %d\n",
++					addr, n, ret);
++			break;
++		}
++
++		addr += n;
++		buf += n;
++		size -= n;
++	}
++
++	kfree(data_dup);
++}
++
+ static int dma_mapping_to_ep(enum rtw_dma_mapping dma_mapping)
+ {
+ 	switch (dma_mapping) {
+@@ -892,6 +946,7 @@ static const struct rtw_hci_ops rtw_usb_
+ 	.link_ps = rtw_usb_link_ps,
+ 	.interface_cfg = rtw_usb_interface_cfg,
+ 	.dynamic_rx_agg = rtw_usb_dynamic_rx_agg,
++	.write_firmware_page = rtw_usb_write_firmware_page,
+ 
+ 	.write8  = rtw_usb_write8,
+ 	.write16 = rtw_usb_write16,
diff --git a/package/kernel/mac80211/patches/rtl/108-v6.16-wifi-rtw88-Fix-the-random-error-beacon-valid-message.patch b/package/kernel/mac80211/patches/rtl/108-v6.16-wifi-rtw88-Fix-the-random-error-beacon-valid-message.patch
new file mode 100644
index 0000000000..adf585e004
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/108-v6.16-wifi-rtw88-Fix-the-random-error-beacon-valid-message.patch
@@ -0,0 +1,73 @@
+From f24d0d8c3cd7e4237f802c4d2f3bd4ac04572948 Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Sat, 10 May 2025 16:12:34 +0300
+Subject: [PATCH] wifi: rtw88: Fix the random "error beacon valid" messages for
+ USB
+
+All the USB devices have a problem in AP mode: uploading the updated
+beacon to the chip's reserved page can randomly fail:
+
+[34996.474304] rtw88_8723du 1-2:1.2: error beacon valid
+[34996.474788] rtw88_8723du 1-2:1.2: failed to download drv rsvd page
+[34999.956369] rtw88_8723du 1-2:1.2: error beacon valid
+[34999.956846] rtw88_8723du 1-2:1.2: failed to download drv rsvd page
+[34999.956855] rtw88_8723du 1-2:1.2: failed to download beacon
+[35017.978296] rtw88_8723du 1-2:1.2: error beacon valid
+[35017.978805] rtw88_8723du 1-2:1.2: failed to download drv rsvd page
+[35017.978823] rtw88_8723du 1-2:1.2: failed to download beacon
+[35023.200395] rtw88_8723du 1-2:1.2: error beacon valid
+[35023.200869] rtw88_8723du 1-2:1.2: failed to download drv rsvd page
+[35023.200875] rtw88_8723du 1-2:1.2: failed to download beacon
+[35478.680547] rtw88_8723du 1-2:1.2: error beacon valid
+[35478.681023] rtw88_8723du 1-2:1.2: failed to download drv rsvd page
+
+Disable some beacon-related hardware functions before uploading the
+beacon and enable them again after.
+
+Tested with RTL8723DU, RTL8812BU, RTL8822CE.
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/c248c40a-d432-47ed-90e0-d81ee6c32464@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/fw.c | 8 +++++++-
+ 1 file changed, 7 insertions(+), 1 deletion(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/fw.c
++++ b/drivers/net/wireless/realtek/rtw88/fw.c
+@@ -1466,7 +1466,7 @@ void rtw_add_rsvd_page_sta(struct rtw_de
+ int rtw_fw_write_data_rsvd_page(struct rtw_dev *rtwdev, u16 pg_addr,
+ 				u8 *buf, u32 size)
+ {
+-	u8 bckp[2];
++	u8 bckp[3];
+ 	u8 val;
+ 	u16 rsvd_pg_head;
+ 	u32 bcn_valid_addr;
+@@ -1478,6 +1478,8 @@ int rtw_fw_write_data_rsvd_page(struct r
+ 	if (!size)
+ 		return -EINVAL;
+ 
++	bckp[2] = rtw_read8(rtwdev, REG_BCN_CTRL);
++
+ 	if (rtw_chip_wcpu_11n(rtwdev)) {
+ 		rtw_write32_set(rtwdev, REG_DWBCN0_CTRL, BIT_BCN_VALID);
+ 	} else {
+@@ -1491,6 +1493,9 @@ int rtw_fw_write_data_rsvd_page(struct r
+ 	val |= BIT_ENSWBCN >> 8;
+ 	rtw_write8(rtwdev, REG_CR + 1, val);
+ 
++	rtw_write8(rtwdev, REG_BCN_CTRL,
++		   (bckp[2] & ~BIT_EN_BCN_FUNCTION) | BIT_DIS_TSF_UDT);
++
+ 	if (rtw_hci_type(rtwdev) == RTW_HCI_TYPE_PCIE) {
+ 		val = rtw_read8(rtwdev, REG_FWHW_TXQ_CTRL + 2);
+ 		bckp[1] = val;
+@@ -1521,6 +1526,7 @@ restore:
+ 	rsvd_pg_head = rtwdev->fifo.rsvd_boundary;
+ 	rtw_write16(rtwdev, REG_FIFOPAGE_CTRL_2,
+ 		    rsvd_pg_head | BIT_BCN_VALID_V1);
++	rtw_write8(rtwdev, REG_BCN_CTRL, bckp[2]);
+ 	if (rtw_hci_type(rtwdev) == RTW_HCI_TYPE_PCIE)
+ 		rtw_write8(rtwdev, REG_FWHW_TXQ_CTRL + 2, bckp[1]);
+ 	rtw_write8(rtwdev, REG_CR + 1, bckp[0]);
diff --git a/package/kernel/mac80211/patches/rtl/109-v6.16-wifi-rtw88-fix-the-para-buffer-size-to-avoid-reading.patch b/package/kernel/mac80211/patches/rtl/109-v6.16-wifi-rtw88-fix-the-para-buffer-size-to-avoid-reading.patch
new file mode 100644
index 0000000000..11b73128db
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/109-v6.16-wifi-rtw88-fix-the-para-buffer-size-to-avoid-reading.patch
@@ -0,0 +1,38 @@
+From 4c2c372de2e108319236203cce6de44d70ae15cd Mon Sep 17 00:00:00 2001
+From: Alexey Kodanev <aleksei.kodanev@bell-sw.com>
+Date: Tue, 13 May 2025 12:13:04 +0000
+Subject: [PATCH] wifi: rtw88: fix the 'para' buffer size to avoid reading out
+ of bounds
+
+Set the size to 6 instead of 2, since 'para' array is passed to
+'rtw_fw_bt_wifi_control(rtwdev, para[0], &para[1])', which reads
+5 bytes:
+
+void rtw_fw_bt_wifi_control(struct rtw_dev *rtwdev, u8 op_code, u8 *data)
+{
+    ...
+    SET_BT_WIFI_CONTROL_DATA1(h2c_pkt, *data);
+    SET_BT_WIFI_CONTROL_DATA2(h2c_pkt, *(data + 1));
+    ...
+    SET_BT_WIFI_CONTROL_DATA5(h2c_pkt, *(data + 4));
+
+Detected using the static analysis tool - Svace.
+Fixes: 4136214f7c46 ("rtw88: add BT co-existence support")
+Signed-off-by: Alexey Kodanev <aleksei.kodanev@bell-sw.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/20250513121304.124141-1-aleksei.kodanev@bell-sw.com
+---
+ drivers/net/wireless/realtek/rtw88/coex.c | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/coex.c
++++ b/drivers/net/wireless/realtek/rtw88/coex.c
+@@ -309,7 +309,7 @@ static void rtw_coex_tdma_timer_base(str
+ {
+ 	struct rtw_coex *coex = &rtwdev->coex;
+ 	struct rtw_coex_stat *coex_stat = &coex->stat;
+-	u8 para[2] = {0};
++	u8 para[6] = {};
+ 	u8 times;
+ 	u16 tbtt_interval = coex_stat->wl_beacon_interval;
+ 
diff --git a/package/kernel/mac80211/patches/subsys/110-mac80211_keep_keys_on_stop_ap.patch b/package/kernel/mac80211/patches/subsys/110-mac80211_keep_keys_on_stop_ap.patch
index 68534f4e7b..d6cc085722 100644
--- a/package/kernel/mac80211/patches/subsys/110-mac80211_keep_keys_on_stop_ap.patch
+++ b/package/kernel/mac80211/patches/subsys/110-mac80211_keep_keys_on_stop_ap.patch
@@ -9,9 +9,9 @@ Used for AP+STA support in OpenWrt - preserve AP mode keys across STA reconnect
 
 --- a/net/mac80211/cfg.c
 +++ b/net/mac80211/cfg.c
-@@ -1649,12 +1649,6 @@ static int ieee80211_stop_ap(struct wiph
+@@ -1677,12 +1677,6 @@ static int ieee80211_stop_ap(struct wiph
  
- 	__sta_info_flush(sdata, true, link_id);
+ 	__sta_info_flush(sdata, true, link_id, NULL);
  
 -	ieee80211_remove_link_keys(link, &keys);
 -	if (!list_empty(&keys)) {
diff --git a/package/kernel/mac80211/patches/subsys/130-disable_auto_vif.patch b/package/kernel/mac80211/patches/subsys/130-disable_auto_vif.patch
index c9496b5e70..aec9a32667 100644
--- a/package/kernel/mac80211/patches/subsys/130-disable_auto_vif.patch
+++ b/package/kernel/mac80211/patches/subsys/130-disable_auto_vif.patch
@@ -1,6 +1,6 @@
 --- a/net/mac80211/main.c
 +++ b/net/mac80211/main.c
-@@ -1583,24 +1583,6 @@ int ieee80211_register_hw(struct ieee802
+@@ -1595,24 +1595,6 @@ int ieee80211_register_hw(struct ieee802
  
  	ieee80211_check_wbrf_support(local);
  
diff --git a/package/kernel/mac80211/patches/subsys/210-ap_scan.patch b/package/kernel/mac80211/patches/subsys/210-ap_scan.patch
index ca4ac8adb6..f11a60fd4e 100644
--- a/package/kernel/mac80211/patches/subsys/210-ap_scan.patch
+++ b/package/kernel/mac80211/patches/subsys/210-ap_scan.patch
@@ -8,7 +8,7 @@ Subject: [PATCH] mac80211: allow scans in access point mode (for site survey)
 
 --- a/net/mac80211/cfg.c
 +++ b/net/mac80211/cfg.c
-@@ -2863,6 +2863,8 @@ static int ieee80211_scan(struct wiphy *
+@@ -2891,6 +2891,8 @@ static int ieee80211_scan(struct wiphy *
  		 */
  		fallthrough;
  	case NL80211_IFTYPE_AP:
diff --git a/package/kernel/mac80211/patches/subsys/220-allow-ibss-mixed.patch b/package/kernel/mac80211/patches/subsys/220-allow-ibss-mixed.patch
index 378ca275f5..ea8fb0c6b3 100644
--- a/package/kernel/mac80211/patches/subsys/220-allow-ibss-mixed.patch
+++ b/package/kernel/mac80211/patches/subsys/220-allow-ibss-mixed.patch
@@ -16,7 +16,7 @@ and we should ignore this.
 
 --- a/net/wireless/core.c
 +++ b/net/wireless/core.c
-@@ -678,21 +678,6 @@ int wiphy_verify_iface_combinations(stru
+@@ -671,21 +671,6 @@ int wiphy_verify_iface_combinations(stru
  				    c->limits[j].max > 1))
  				return -EINVAL;
  
diff --git a/package/kernel/mac80211/patches/subsys/230-avoid-crashing-missing-band.patch b/package/kernel/mac80211/patches/subsys/230-avoid-crashing-missing-band.patch
index 9e9e3844b7..e85207cb6b 100644
--- a/package/kernel/mac80211/patches/subsys/230-avoid-crashing-missing-band.patch
+++ b/package/kernel/mac80211/patches/subsys/230-avoid-crashing-missing-band.patch
@@ -18,7 +18,7 @@ Signed-off-by: David Bauer <mail@david-bauer.net>
 
 --- a/net/mac80211/sta_info.c
 +++ b/net/mac80211/sta_info.c
-@@ -2439,6 +2439,13 @@ static void sta_stats_decode_rate(struct
+@@ -2474,6 +2474,13 @@ static void sta_stats_decode_rate(struct
  
  		sband = local->hw.wiphy->bands[band];
  
diff --git a/package/kernel/mac80211/patches/subsys/301-mac80211-sta-randomize-BA-session-dialog-token-alloc.patch b/package/kernel/mac80211/patches/subsys/301-mac80211-sta-randomize-BA-session-dialog-token-alloc.patch
index edec97cce9..f7690c89c7 100644
--- a/package/kernel/mac80211/patches/subsys/301-mac80211-sta-randomize-BA-session-dialog-token-alloc.patch
+++ b/package/kernel/mac80211/patches/subsys/301-mac80211-sta-randomize-BA-session-dialog-token-alloc.patch
@@ -28,7 +28,7 @@ Signed-off-by: Johannes Berg <johannes.berg@intel.com>
 
 --- a/net/mac80211/sta_info.c
 +++ b/net/mac80211/sta_info.c
-@@ -565,6 +565,7 @@ __sta_info_alloc(struct ieee80211_sub_if
+@@ -583,6 +583,7 @@ __sta_info_alloc(struct ieee80211_sub_if
  	spin_lock_init(&sta->ps_lock);
  	INIT_WORK(&sta->drv_deliver_wk, sta_deliver_ps_frames);
  	wiphy_work_init(&sta->ampdu_mlme.work, ieee80211_ba_session_work);
diff --git a/package/kernel/mac80211/patches/subsys/305-mac80211-increase-quantum-for-airtime-scheduler.patch b/package/kernel/mac80211/patches/subsys/305-mac80211-increase-quantum-for-airtime-scheduler.patch
index 6cf46ce7e5..d329ad7b6f 100644
--- a/package/kernel/mac80211/patches/subsys/305-mac80211-increase-quantum-for-airtime-scheduler.patch
+++ b/package/kernel/mac80211/patches/subsys/305-mac80211-increase-quantum-for-airtime-scheduler.patch
@@ -23,7 +23,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  
 --- a/net/mac80211/tx.c
 +++ b/net/mac80211/tx.c
-@@ -4081,7 +4081,7 @@ struct ieee80211_txq *ieee80211_next_txq
+@@ -4083,7 +4083,7 @@ struct ieee80211_txq *ieee80211_next_txq
  
  		if (deficit < 0)
  			sta->airtime[txqi->txq.ac].deficit +=
@@ -32,7 +32,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  
  		if (deficit < 0 || !aql_check) {
  			list_move_tail(&txqi->schedule_order,
-@@ -4224,7 +4224,8 @@ bool ieee80211_txq_may_transmit(struct i
+@@ -4226,7 +4226,8 @@ bool ieee80211_txq_may_transmit(struct i
  		}
  		sta = container_of(iter->txq.sta, struct sta_info, sta);
  		if (ieee80211_sta_deficit(sta, ac) < 0)
@@ -42,7 +42,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  		list_move_tail(&iter->schedule_order, &local->active_txqs[ac]);
  	}
  
-@@ -4232,7 +4233,7 @@ bool ieee80211_txq_may_transmit(struct i
+@@ -4234,7 +4235,7 @@ bool ieee80211_txq_may_transmit(struct i
  	if (sta->airtime[ac].deficit >= 0)
  		goto out;
  
diff --git a/package/kernel/mac80211/patches/subsys/310-cfg80211-allow-grace-period-for-DFS-available-after-.patch b/package/kernel/mac80211/patches/subsys/310-cfg80211-allow-grace-period-for-DFS-available-after-.patch
index c86b836f2f..d264c33f13 100644
--- a/package/kernel/mac80211/patches/subsys/310-cfg80211-allow-grace-period-for-DFS-available-after-.patch
+++ b/package/kernel/mac80211/patches/subsys/310-cfg80211-allow-grace-period-for-DFS-available-after-.patch
@@ -11,7 +11,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
 
 --- a/include/net/cfg80211.h
 +++ b/include/net/cfg80211.h
-@@ -187,6 +187,8 @@ enum ieee80211_channel_flags {
+@@ -190,6 +190,8 @@ enum ieee80211_channel_flags {
   * @dfs_state: current state of this channel. Only relevant if radar is required
   *	on this channel.
   * @dfs_state_entered: timestamp (jiffies) when the dfs state was entered.
@@ -20,7 +20,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
   * @dfs_cac_ms: DFS CAC time in milliseconds, this is valid for DFS channels.
   * @psd: power spectral density (in dBm)
   */
-@@ -204,6 +206,7 @@ struct ieee80211_channel {
+@@ -207,6 +209,7 @@ struct ieee80211_channel {
  	int orig_mag, orig_mpwr;
  	enum nl80211_dfs_state dfs_state;
  	unsigned long dfs_state_entered;
@@ -52,7 +52,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  
 --- a/net/wireless/chan.c
 +++ b/net/wireless/chan.c
-@@ -598,6 +598,8 @@ static void cfg80211_set_chans_dfs_state
+@@ -648,6 +648,8 @@ void cfg80211_set_dfs_state(struct wiphy
  
  		c->dfs_state = dfs_state;
  		c->dfs_state_entered = jiffies;
@@ -61,8 +61,8 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  	}
  }
  
-@@ -1087,6 +1089,49 @@ static bool cfg80211_get_chans_dfs_avail
- 	return true;
+@@ -995,6 +997,53 @@ bool cfg80211_any_wiphy_oper_chan(struct
+ 	return false;
  }
  
 +static void
@@ -73,8 +73,12 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
 +	struct ieee80211_channel *c;
 +	u32 freq, start_freq, end_freq;
 +
-+	start_freq = cfg80211_get_start_freq(center_freq, bandwidth);
-+	end_freq = cfg80211_get_end_freq(center_freq, bandwidth);
++	if (bandwidth <= MHZ_TO_KHZ(20))
++		start_freq = end_freq = center_freq;
++	else {
++		start_freq = center_freq - bandwidth / 2 + MHZ_TO_KHZ(10);
++		end_freq = center_freq + bandwidth / 2 - MHZ_TO_KHZ(10);
++	}
 +
 +	/*
 +	 * Check entire range of channels for the bandwidth.
@@ -124,7 +128,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  
 --- a/net/wireless/mlme.c
 +++ b/net/wireless/mlme.c
-@@ -1031,6 +1031,8 @@ void cfg80211_dfs_channels_update_work(s
+@@ -1038,6 +1038,8 @@ void cfg80211_dfs_channels_update_work(s
  			if (c->dfs_state == NL80211_DFS_UNAVAILABLE) {
  				time_dfs_update = IEEE80211_DFS_MIN_NOP_TIME_MS;
  				radar_event = NL80211_RADAR_NOP_FINISHED;
@@ -133,7 +137,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  			} else {
  				if (regulatory_pre_cac_allowed(wiphy) ||
  				    cfg80211_any_wiphy_oper_chan(wiphy, c))
-@@ -1038,11 +1040,10 @@ void cfg80211_dfs_channels_update_work(s
+@@ -1045,11 +1047,10 @@ void cfg80211_dfs_channels_update_work(s
  
  				time_dfs_update = REG_PRE_CAC_EXPIRY_GRACE_MS;
  				radar_event = NL80211_RADAR_PRE_CAC_EXPIRED;
diff --git a/package/kernel/mac80211/patches/subsys/320-mac80211-add-AQL-support-for-broadcast-packets.patch b/package/kernel/mac80211/patches/subsys/320-mac80211-add-AQL-support-for-broadcast-packets.patch
index 9513dc14bc..6599d1b5e8 100644
--- a/package/kernel/mac80211/patches/subsys/320-mac80211-add-AQL-support-for-broadcast-packets.patch
+++ b/package/kernel/mac80211/patches/subsys/320-mac80211-add-AQL-support-for-broadcast-packets.patch
@@ -12,7 +12,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
 
 --- a/include/net/cfg80211.h
 +++ b/include/net/cfg80211.h
-@@ -3423,6 +3423,7 @@ enum wiphy_params_flags {
+@@ -3438,6 +3438,7 @@ enum wiphy_params_flags {
  /* The per TXQ device queue limit in airtime */
  #define IEEE80211_DEFAULT_AQL_TXQ_LIMIT_L	5000
  #define IEEE80211_DEFAULT_AQL_TXQ_LIMIT_H	12000
@@ -70,7 +70,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  
 --- a/net/mac80211/ieee80211_i.h
 +++ b/net/mac80211/ieee80211_i.h
-@@ -1351,10 +1351,12 @@ struct ieee80211_local {
+@@ -1360,10 +1360,12 @@ struct ieee80211_local {
  	spinlock_t handle_wake_tx_queue_lock;
  
  	u16 airtime_flags;
@@ -85,7 +85,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  	const struct ieee80211_ops *ops;
 --- a/net/mac80211/main.c
 +++ b/net/mac80211/main.c
-@@ -954,6 +954,7 @@ struct ieee80211_hw *ieee80211_alloc_hw_
+@@ -959,6 +959,7 @@ struct ieee80211_hw *ieee80211_alloc_hw_
  	spin_lock_init(&local->rx_path_lock);
  	spin_lock_init(&local->queue_stop_reason_lock);
  
@@ -95,7 +95,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  		spin_lock_init(&local->active_txq_lock[i]);
 --- a/net/mac80211/sta_info.c
 +++ b/net/mac80211/sta_info.c
-@@ -2353,13 +2353,28 @@ EXPORT_SYMBOL(ieee80211_sta_recalc_aggre
+@@ -2388,13 +2388,28 @@ EXPORT_SYMBOL(ieee80211_sta_recalc_aggre
  
  void ieee80211_sta_update_pending_airtime(struct ieee80211_local *local,
  					  struct sta_info *sta, u8 ac,
@@ -127,7 +127,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  			atomic_add(tx_airtime,
 --- a/net/mac80211/tx.c
 +++ b/net/mac80211/tx.c
-@@ -2554,7 +2554,7 @@ static u16 ieee80211_store_ack_skb(struc
+@@ -2555,7 +2555,7 @@ static u16 ieee80211_store_ack_skb(struc
  
  		spin_lock_irqsave(&local->ack_status_lock, flags);
  		id = idr_alloc(&local->ack_status_frames, ack_skb,
@@ -136,7 +136,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  		spin_unlock_irqrestore(&local->ack_status_lock, flags);
  
  		if (id >= 0) {
-@@ -3982,20 +3982,20 @@ begin:
+@@ -3984,20 +3984,20 @@ begin:
  encap_out:
  	info->control.vif = vif;
  
@@ -167,7 +167,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  	}
  
  	return skb;
-@@ -4047,6 +4047,7 @@ struct ieee80211_txq *ieee80211_next_txq
+@@ -4049,6 +4049,7 @@ struct ieee80211_txq *ieee80211_next_txq
  	struct ieee80211_txq *ret = NULL;
  	struct txq_info *txqi = NULL, *head = NULL;
  	bool found_eligible_txq = false;
@@ -175,7 +175,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  
  	spin_lock_bh(&local->active_txq_lock[ac]);
  
-@@ -4070,26 +4071,26 @@ struct ieee80211_txq *ieee80211_next_txq
+@@ -4072,26 +4073,26 @@ struct ieee80211_txq *ieee80211_next_txq
  	if (!head)
  		head = txqi;
  
@@ -214,7 +214,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  	if (txqi->schedule_round == local->schedule_round[ac])
  		goto out;
  
-@@ -4154,7 +4155,8 @@ bool ieee80211_txq_airtime_check(struct
+@@ -4156,7 +4157,8 @@ bool ieee80211_txq_airtime_check(struct
  		return true;
  
  	if (!txq->sta)
@@ -224,7 +224,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  
  	if (unlikely(txq->tid == IEEE80211_NUM_TIDS))
  		return true;
-@@ -4203,15 +4205,15 @@ bool ieee80211_txq_may_transmit(struct i
+@@ -4205,15 +4207,15 @@ bool ieee80211_txq_may_transmit(struct i
  
  	spin_lock_bh(&local->active_txq_lock[ac]);
  
@@ -245,7 +245,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  		if (iter == txqi)
 --- a/include/net/mac80211.h
 +++ b/include/net/mac80211.h
-@@ -1222,8 +1222,8 @@ struct ieee80211_tx_info {
+@@ -1237,8 +1237,8 @@ struct ieee80211_tx_info {
  	    status_data_idr:1,
  	    status_data:13,
  	    hw_queue:4,
@@ -278,7 +278,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  		rcu_read_unlock();
  	}
  
-@@ -1158,10 +1158,11 @@ void ieee80211_tx_status_ext(struct ieee
+@@ -1143,10 +1143,11 @@ void ieee80211_tx_status_ext(struct ieee
  		/* Do this here to avoid the expensive lookup of the sta
  		 * in ieee80211_report_used_skb().
  		 */
diff --git a/package/kernel/mac80211/patches/subsys/330-wifi-cfg80211-add-option-for-vif-allowed-radios.patch b/package/kernel/mac80211/patches/subsys/330-wifi-cfg80211-add-option-for-vif-allowed-radios.patch
deleted file mode 100644
index 3b09c46f28..0000000000
--- a/package/kernel/mac80211/patches/subsys/330-wifi-cfg80211-add-option-for-vif-allowed-radios.patch
+++ /dev/null
@@ -1,309 +0,0 @@
-From: Felix Fietkau <nbd@nbd.name>
-Date: Wed, 17 Jul 2024 15:43:52 +0200
-Subject: [PATCH] wifi: cfg80211: add option for vif allowed radios
-
-This allows users to prevent a vif from affecting radios other than the
-configured ones. This can be useful in cases where e.g. an AP is running
-on one radio, and triggering a scan on another radio should not disturb it.
-
-Changing the allowed radios list for a vif is supported, but only while
-it is down.
-
-While it is possible to achieve the same by always explicitly specifying
-a frequency list for scan requests and ensuring that the wrong channel/band
-is never accidentally set on an unrelated interface, this change makes
-multi-radio wiphy setups a lot easier to deal with for CLI users.
-
-By itself, this patch only enforces the radio mask for scanning requests
-and remain-on-channel. Follow-up changes build on this to limit configured
-frequencies.
-
-Signed-off-by: Felix Fietkau <nbd@nbd.name>
----
-
---- a/include/net/cfg80211.h
-+++ b/include/net/cfg80211.h
-@@ -6271,6 +6271,7 @@ enum ieee80211_ap_reg_power {
-  *	entered.
-  * @links.cac_time_ms: CAC time in ms
-  * @valid_links: bitmap describing what elements of @links are valid
-+ * @radio_mask: Bitmask of radios that this interface is allowed to operate on.
-  */
- struct wireless_dev {
- 	struct wiphy *wiphy;
-@@ -6383,6 +6384,8 @@ struct wireless_dev {
- 		unsigned int cac_time_ms;
- 	} links[IEEE80211_MLD_MAX_NUM_LINKS];
- 	u16 valid_links;
-+
-+	u32 radio_mask;
- };
- 
- static inline const u8 *wdev_address(struct wireless_dev *wdev)
-@@ -6569,6 +6572,17 @@ bool cfg80211_radio_chandef_valid(const
- 				  const struct cfg80211_chan_def *chandef);
- 
- /**
-+ * cfg80211_wdev_channel_allowed - Check if the wdev may use the channel
-+ *
-+ * @wdev: the wireless device
-+ * @chan: channel to check
-+ *
-+ * Return: whether or not the wdev may use the channel
-+ */
-+bool cfg80211_wdev_channel_allowed(struct wireless_dev *wdev,
-+				   struct ieee80211_channel *chan);
-+
-+/**
-  * ieee80211_get_response_rate - get basic rate for a given rate
-  *
-  * @sband: the band to look for rates in
---- a/include/uapi/linux/nl80211.h
-+++ b/include/uapi/linux/nl80211.h
-@@ -2868,6 +2868,9 @@ enum nl80211_commands {
-  *	nested item, it contains attributes defined in
-  *	&enum nl80211_if_combination_attrs.
-  *
-+ * @NL80211_ATTR_VIF_RADIO_MASK: Bitmask of allowed radios (u32).
-+ *	A value of 0 means all radios.
-+ *
-  * @NUM_NL80211_ATTR: total number of nl80211_attrs available
-  * @NL80211_ATTR_MAX: highest attribute number currently defined
-  * @__NL80211_ATTR_AFTER_LAST: internal use
-@@ -3416,6 +3419,8 @@ enum nl80211_attrs {
- 	NL80211_ATTR_WIPHY_RADIOS,
- 	NL80211_ATTR_WIPHY_INTERFACE_COMBINATIONS,
- 
-+	NL80211_ATTR_VIF_RADIO_MASK,
-+
- 	/* add attributes here, update the policy in nl80211.c */
- 
- 	__NL80211_ATTR_AFTER_LAST,
---- a/net/wireless/nl80211.c
-+++ b/net/wireless/nl80211.c
-@@ -829,6 +829,7 @@ static const struct nla_policy nl80211_p
- 	[NL80211_ATTR_MLO_TTLM_DLINK] = NLA_POLICY_EXACT_LEN(sizeof(u16) * 8),
- 	[NL80211_ATTR_MLO_TTLM_ULINK] = NLA_POLICY_EXACT_LEN(sizeof(u16) * 8),
- 	[NL80211_ATTR_ASSOC_SPP_AMSDU] = { .type = NLA_FLAG },
-+	[NL80211_ATTR_VIF_RADIO_MASK] = { .type = NLA_U32 },
- };
- 
- /* policy for the key attributes */
-@@ -3996,7 +3997,8 @@ static int nl80211_send_iface(struct sk_
- 	    nla_put_u32(msg, NL80211_ATTR_GENERATION,
- 			rdev->devlist_generation ^
- 			(cfg80211_rdev_list_generation << 2)) ||
--	    nla_put_u8(msg, NL80211_ATTR_4ADDR, wdev->use_4addr))
-+	    nla_put_u8(msg, NL80211_ATTR_4ADDR, wdev->use_4addr) ||
-+	    nla_put_u32(msg, NL80211_ATTR_VIF_RADIO_MASK, wdev->radio_mask))
- 		goto nla_put_failure;
- 
- 	if (rdev->ops->get_channel && !wdev->valid_links) {
-@@ -4312,6 +4314,29 @@ static int nl80211_valid_4addr(struct cf
- 	return -EOPNOTSUPP;
- }
- 
-+static int nl80211_parse_vif_radio_mask(struct genl_info *info,
-+					u32 *radio_mask)
-+{
-+	struct cfg80211_registered_device *rdev = info->user_ptr[0];
-+	struct nlattr *attr = info->attrs[NL80211_ATTR_VIF_RADIO_MASK];
-+	u32 mask, allowed;
-+
-+	if (!attr) {
-+		*radio_mask = 0;
-+		return 0;
-+	}
-+
-+	allowed = BIT(rdev->wiphy.n_radio) - 1;
-+	mask = nla_get_u32(attr);
-+	if (mask & ~allowed)
-+		return -EINVAL;
-+	if (!mask)
-+		mask = allowed;
-+	*radio_mask = mask;
-+
-+	return 1;
-+}
-+
- static int nl80211_set_interface(struct sk_buff *skb, struct genl_info *info)
- {
- 	struct cfg80211_registered_device *rdev = info->user_ptr[0];
-@@ -4319,6 +4344,8 @@ static int nl80211_set_interface(struct
- 	int err;
- 	enum nl80211_iftype otype, ntype;
- 	struct net_device *dev = info->user_ptr[1];
-+	struct wireless_dev *wdev = dev->ieee80211_ptr;
-+	u32 radio_mask = 0;
- 	bool change = false;
- 
- 	memset(&params, 0, sizeof(params));
-@@ -4332,8 +4359,6 @@ static int nl80211_set_interface(struct
- 	}
- 
- 	if (info->attrs[NL80211_ATTR_MESH_ID]) {
--		struct wireless_dev *wdev = dev->ieee80211_ptr;
--
- 		if (ntype != NL80211_IFTYPE_MESH_POINT)
- 			return -EINVAL;
- 		if (otype != NL80211_IFTYPE_MESH_POINT)
-@@ -4364,6 +4389,12 @@ static int nl80211_set_interface(struct
- 	if (err > 0)
- 		change = true;
- 
-+	err = nl80211_parse_vif_radio_mask(info, &radio_mask);
-+	if (err < 0)
-+		return err;
-+	if (err && netif_running(dev))
-+		return -EBUSY;
-+
- 	if (change)
- 		err = cfg80211_change_iface(rdev, dev, ntype, &params);
- 	else
-@@ -4372,11 +4403,11 @@ static int nl80211_set_interface(struct
- 	if (!err && params.use_4addr != -1)
- 		dev->ieee80211_ptr->use_4addr = params.use_4addr;
- 
--	if (change && !err) {
--		struct wireless_dev *wdev = dev->ieee80211_ptr;
-+	if (radio_mask)
-+		wdev->radio_mask = radio_mask;
- 
-+	if (change && !err)
- 		nl80211_notify_iface(rdev, wdev, NL80211_CMD_SET_INTERFACE);
--	}
- 
- 	return err;
- }
-@@ -4387,6 +4418,7 @@ static int _nl80211_new_interface(struct
- 	struct vif_params params;
- 	struct wireless_dev *wdev;
- 	struct sk_buff *msg;
-+	u32 radio_mask;
- 	int err;
- 	enum nl80211_iftype type = NL80211_IFTYPE_UNSPECIFIED;
- 
-@@ -4424,6 +4456,10 @@ static int _nl80211_new_interface(struct
- 	if (err < 0)
- 		return err;
- 
-+	err = nl80211_parse_vif_radio_mask(info, &radio_mask);
-+	if (err < 0)
-+		return err;
-+
- 	msg = nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);
- 	if (!msg)
- 		return -ENOMEM;
-@@ -4465,6 +4501,9 @@ static int _nl80211_new_interface(struct
- 		break;
- 	}
- 
-+	if (radio_mask)
-+		wdev->radio_mask = radio_mask;
-+
- 	if (nl80211_send_iface(msg, info->snd_portid, info->snd_seq, 0,
- 			       rdev, wdev, NL80211_CMD_NEW_INTERFACE) < 0) {
- 		nlmsg_free(msg);
-@@ -9180,6 +9219,9 @@ static bool cfg80211_off_channel_oper_al
- 
- 	lockdep_assert_wiphy(wdev->wiphy);
- 
-+	if (!cfg80211_wdev_channel_allowed(wdev, chan))
-+		return false;
-+
- 	if (!cfg80211_beaconing_iface_active(wdev))
- 		return true;
- 
-@@ -9392,7 +9434,8 @@ static int nl80211_trigger_scan(struct s
- 			}
- 
- 			/* ignore disabled channels */
--			if (chan->flags & IEEE80211_CHAN_DISABLED)
-+			if (chan->flags & IEEE80211_CHAN_DISABLED ||
-+			    !cfg80211_wdev_channel_allowed(wdev, chan))
- 				continue;
- 
- 			request->channels[i] = chan;
-@@ -9412,7 +9455,8 @@ static int nl80211_trigger_scan(struct s
- 
- 				chan = &wiphy->bands[band]->channels[j];
- 
--				if (chan->flags & IEEE80211_CHAN_DISABLED)
-+				if (chan->flags & IEEE80211_CHAN_DISABLED ||
-+				    !cfg80211_wdev_channel_allowed(wdev, chan))
- 					continue;
- 
- 				request->channels[i] = chan;
---- a/net/wireless/scan.c
-+++ b/net/wireless/scan.c
-@@ -956,7 +956,8 @@ static int cfg80211_scan_6ghz(struct cfg
- 		struct ieee80211_channel *chan =
- 			ieee80211_get_channel(&rdev->wiphy, ap->center_freq);
- 
--		if (!chan || chan->flags & IEEE80211_CHAN_DISABLED)
-+		if (!chan || chan->flags & IEEE80211_CHAN_DISABLED ||
-+		    !cfg80211_wdev_channel_allowed(rdev_req->wdev, chan))
- 			continue;
- 
- 		for (i = 0; i < rdev_req->n_channels; i++) {
-@@ -3519,9 +3520,12 @@ int cfg80211_wext_siwscan(struct net_dev
- 			continue;
- 
- 		for (j = 0; j < wiphy->bands[band]->n_channels; j++) {
-+			struct ieee80211_channel *chan;
-+
- 			/* ignore disabled channels */
--			if (wiphy->bands[band]->channels[j].flags &
--						IEEE80211_CHAN_DISABLED)
-+			chan = &wiphy->bands[band]->channels[j];
-+			if (chan->flags & IEEE80211_CHAN_DISABLED ||
-+			    !cfg80211_wdev_channel_allowed(creq->wdev, chan))
- 				continue;
- 
- 			/* If we have a wireless request structure and the
---- a/net/wireless/util.c
-+++ b/net/wireless/util.c
-@@ -2923,3 +2923,32 @@ bool cfg80211_radio_chandef_valid(const
- 	return true;
- }
- EXPORT_SYMBOL(cfg80211_radio_chandef_valid);
-+
-+bool cfg80211_wdev_channel_allowed(struct wireless_dev *wdev,
-+				   struct ieee80211_channel *chan)
-+{
-+	struct wiphy *wiphy = wdev->wiphy;
-+	const struct wiphy_radio *radio;
-+	struct cfg80211_chan_def chandef;
-+	u32 radio_mask;
-+	int i;
-+
-+	radio_mask = wdev->radio_mask;
-+	if (!wiphy->n_radio || radio_mask == BIT(wiphy->n_radio) - 1)
-+		return true;
-+
-+	cfg80211_chandef_create(&chandef, chan, NL80211_CHAN_HT20);
-+	for (i = 0; i < wiphy->n_radio; i++) {
-+		if (!(radio_mask & BIT(i)))
-+			continue;
-+
-+		radio = &wiphy->radio[i];
-+		if (!cfg80211_radio_chandef_valid(radio, &chandef))
-+			continue;
-+
-+		return true;
-+	}
-+
-+	return false;
-+}
-+EXPORT_SYMBOL(cfg80211_wdev_channel_allowed);
---- a/net/wireless/core.c
-+++ b/net/wireless/core.c
-@@ -1424,6 +1424,8 @@ void cfg80211_init_wdev(struct wireless_
- 	/* allow mac80211 to determine the timeout */
- 	wdev->ps_timeout = -1;
- 
-+	wdev->radio_mask = BIT(wdev->wiphy->n_radio) - 1;
-+
- 	if ((wdev->iftype == NL80211_IFTYPE_STATION ||
- 	     wdev->iftype == NL80211_IFTYPE_P2P_CLIENT ||
- 	     wdev->iftype == NL80211_IFTYPE_ADHOC) && !wdev->use_4addr)
diff --git a/package/kernel/mac80211/patches/subsys/331-wifi-mac80211-use-vif-radio-mask-to-limit-ibss-scan-.patch b/package/kernel/mac80211/patches/subsys/331-wifi-mac80211-use-vif-radio-mask-to-limit-ibss-scan-.patch
deleted file mode 100644
index 779857fe88..0000000000
--- a/package/kernel/mac80211/patches/subsys/331-wifi-mac80211-use-vif-radio-mask-to-limit-ibss-scan-.patch
+++ /dev/null
@@ -1,79 +0,0 @@
-From: Felix Fietkau <nbd@nbd.name>
-Date: Thu, 26 Sep 2024 14:06:11 +0200
-Subject: [PATCH] wifi: mac80211: use vif radio mask to limit ibss scan
- frequencies
-
-Reject frequencies not supported by any radio that the vif is allowed to use.
-
-Signed-off-by: Felix Fietkau <nbd@nbd.name>
----
-
---- a/net/mac80211/scan.c
-+++ b/net/mac80211/scan.c
-@@ -1176,14 +1176,14 @@ int ieee80211_request_ibss_scan(struct i
- 				unsigned int n_channels)
- {
- 	struct ieee80211_local *local = sdata->local;
--	int ret = -EBUSY, i, n_ch = 0;
-+	int i, n_ch = 0;
- 	enum nl80211_band band;
- 
- 	lockdep_assert_wiphy(local->hw.wiphy);
- 
- 	/* busy scanning */
- 	if (local->scan_req)
--		goto unlock;
-+		return -EBUSY;
- 
- 	/* fill internal scan request */
- 	if (!channels) {
-@@ -1200,7 +1200,9 @@ int ieee80211_request_ibss_scan(struct i
- 				    &local->hw.wiphy->bands[band]->channels[i];
- 
- 				if (tmp_ch->flags & (IEEE80211_CHAN_NO_IR |
--						     IEEE80211_CHAN_DISABLED))
-+						     IEEE80211_CHAN_DISABLED) ||
-+				    !cfg80211_wdev_channel_allowed(&sdata->wdev,
-+								   tmp_ch))
- 					continue;
- 
- 				local->int_scan_req->channels[n_ch] = tmp_ch;
-@@ -1209,21 +1211,23 @@ int ieee80211_request_ibss_scan(struct i
- 		}
- 
- 		if (WARN_ON_ONCE(n_ch == 0))
--			goto unlock;
-+			return -EINVAL;
- 
- 		local->int_scan_req->n_channels = n_ch;
- 	} else {
- 		for (i = 0; i < n_channels; i++) {
- 			if (channels[i]->flags & (IEEE80211_CHAN_NO_IR |
--						  IEEE80211_CHAN_DISABLED))
-+						  IEEE80211_CHAN_DISABLED) ||
-+			    !cfg80211_wdev_channel_allowed(&sdata->wdev,
-+							   channels[i]))
- 				continue;
- 
- 			local->int_scan_req->channels[n_ch] = channels[i];
- 			n_ch++;
- 		}
- 
--		if (WARN_ON_ONCE(n_ch == 0))
--			goto unlock;
-+		if (n_ch == 0)
-+			return -EINVAL;
- 
- 		local->int_scan_req->n_channels = n_ch;
- 	}
-@@ -1233,9 +1237,7 @@ int ieee80211_request_ibss_scan(struct i
- 	memcpy(local->int_scan_req->ssids[0].ssid, ssid, IEEE80211_MAX_SSID_LEN);
- 	local->int_scan_req->ssids[0].ssid_len = ssid_len;
- 
--	ret = __ieee80211_start_scan(sdata, sdata->local->int_scan_req);
-- unlock:
--	return ret;
-+	return __ieee80211_start_scan(sdata, sdata->local->int_scan_req);
- }
- 
- void ieee80211_scan_cancel(struct ieee80211_local *local)
diff --git a/package/kernel/mac80211/patches/subsys/332-wifi-mac80211-use-vif-radio-mask-to-limit-chanctx-an.patch b/package/kernel/mac80211/patches/subsys/332-wifi-mac80211-use-vif-radio-mask-to-limit-chanctx-an.patch
deleted file mode 100644
index 0c8c894eaa..0000000000
--- a/package/kernel/mac80211/patches/subsys/332-wifi-mac80211-use-vif-radio-mask-to-limit-chanctx-an.patch
+++ /dev/null
@@ -1,52 +0,0 @@
-From: Felix Fietkau <nbd@nbd.name>
-Date: Thu, 26 Sep 2024 14:07:50 +0200
-Subject: [PATCH] wifi: mac80211: use vif radio mask to limit creating chanctx
-
-Reject frequencies not supported by any radio that the vif is allowed to use.
-
-Signed-off-by: Felix Fietkau <nbd@nbd.name>
----
-
---- a/net/mac80211/chan.c
-+++ b/net/mac80211/chan.c
-@@ -1169,7 +1169,7 @@ ieee80211_replace_chanctx(struct ieee802
- static bool
- ieee80211_find_available_radio(struct ieee80211_local *local,
- 			       const struct ieee80211_chan_req *chanreq,
--			       int *radio_idx)
-+			       u32 radio_mask, int *radio_idx)
- {
- 	struct wiphy *wiphy = local->hw.wiphy;
- 	const struct wiphy_radio *radio;
-@@ -1180,6 +1180,9 @@ ieee80211_find_available_radio(struct ie
- 		return true;
- 
- 	for (i = 0; i < wiphy->n_radio; i++) {
-+		if (!(radio_mask & BIT(i)))
-+			continue;
-+
- 		radio = &wiphy->radio[i];
- 		if (!cfg80211_radio_chandef_valid(radio, &chanreq->oper))
- 			continue;
-@@ -1213,7 +1216,9 @@ int ieee80211_link_reserve_chanctx(struc
- 	new_ctx = ieee80211_find_reservation_chanctx(local, chanreq, mode);
- 	if (!new_ctx) {
- 		if (ieee80211_can_create_new_chanctx(local, -1) &&
--		    ieee80211_find_available_radio(local, chanreq, &radio_idx))
-+		    ieee80211_find_available_radio(local, chanreq,
-+						   sdata->wdev.radio_mask,
-+						   &radio_idx))
- 			new_ctx = ieee80211_new_chanctx(local, chanreq, mode,
- 							false, radio_idx);
- 		else
-@@ -1883,7 +1888,9 @@ int _ieee80211_link_use_channel(struct i
- 	/* Note: context is now reserved */
- 	if (ctx)
- 		reserved = true;
--	else if (!ieee80211_find_available_radio(local, chanreq, &radio_idx))
-+	else if (!ieee80211_find_available_radio(local, chanreq,
-+						 sdata->wdev.radio_mask,
-+						 &radio_idx))
- 		ctx = ERR_PTR(-EBUSY);
- 	else
- 		ctx = ieee80211_new_chanctx(local, chanreq, mode,
diff --git a/package/kernel/mac80211/patches/subsys/333-wifi-mac80211-remove-status-ampdu_delimiter_crc.patch b/package/kernel/mac80211/patches/subsys/333-wifi-mac80211-remove-status-ampdu_delimiter_crc.patch
deleted file mode 100644
index c0cdcdd6bc..0000000000
--- a/package/kernel/mac80211/patches/subsys/333-wifi-mac80211-remove-status-ampdu_delimiter_crc.patch
+++ /dev/null
@@ -1,67 +0,0 @@
-From: Felix Fietkau <nbd@nbd.name>
-Date: Wed, 17 Jul 2024 22:49:16 +0200
-Subject: [PATCH] wifi: mac80211: remove status->ampdu_delimiter_crc
-
-This was never used by any driver, so remove it to free up some space.
-
-Signed-off-by: Felix Fietkau <nbd@nbd.name>
----
-
---- a/include/net/mac80211.h
-+++ b/include/net/mac80211.h
-@@ -1448,8 +1448,6 @@ ieee80211_tx_info_clear_status(struct ie
-  * @RX_FLAG_AMPDU_IS_LAST: this subframe is the last subframe of the A-MPDU
-  * @RX_FLAG_AMPDU_DELIM_CRC_ERROR: A delimiter CRC error has been detected
-  *	on this subframe
-- * @RX_FLAG_AMPDU_DELIM_CRC_KNOWN: The delimiter CRC field is known (the CRC
-- *	is stored in the @ampdu_delimiter_crc field)
-  * @RX_FLAG_MIC_STRIPPED: The mic was stripped of this packet. Decryption was
-  *	done by the hardware
-  * @RX_FLAG_ONLY_MONITOR: Report frame only to monitor interfaces without
-@@ -1521,7 +1519,7 @@ enum mac80211_rx_flags {
- 	RX_FLAG_AMPDU_LAST_KNOWN	= BIT(12),
- 	RX_FLAG_AMPDU_IS_LAST		= BIT(13),
- 	RX_FLAG_AMPDU_DELIM_CRC_ERROR	= BIT(14),
--	RX_FLAG_AMPDU_DELIM_CRC_KNOWN	= BIT(15),
-+	/* one free bit at 15 */
- 	RX_FLAG_MACTIME			= BIT(16) | BIT(17),
- 	RX_FLAG_MACTIME_PLCP_START	= 1 << 16,
- 	RX_FLAG_MACTIME_START		= 2 << 16,
-@@ -1618,7 +1616,6 @@ enum mac80211_rx_encoding {
-  * @rx_flags: internal RX flags for mac80211
-  * @ampdu_reference: A-MPDU reference number, must be a different value for
-  *	each A-MPDU but the same for each subframe within one A-MPDU
-- * @ampdu_delimiter_crc: A-MPDU delimiter CRC
-  * @zero_length_psdu_type: radiotap type of the 0-length PSDU
-  * @link_valid: if the link which is identified by @link_id is valid. This flag
-  *	is set only when connection is MLO.
-@@ -1656,7 +1653,6 @@ struct ieee80211_rx_status {
- 	s8 signal;
- 	u8 chains;
- 	s8 chain_signal[IEEE80211_MAX_CHAINS];
--	u8 ampdu_delimiter_crc;
- 	u8 zero_length_psdu_type;
- 	u8 link_valid:1, link_id:4;
- };
---- a/net/mac80211/rx.c
-+++ b/net/mac80211/rx.c
-@@ -508,18 +508,13 @@ ieee80211_add_rx_radiotap_header(struct
- 			flags |= IEEE80211_RADIOTAP_AMPDU_IS_LAST;
- 		if (status->flag & RX_FLAG_AMPDU_DELIM_CRC_ERROR)
- 			flags |= IEEE80211_RADIOTAP_AMPDU_DELIM_CRC_ERR;
--		if (status->flag & RX_FLAG_AMPDU_DELIM_CRC_KNOWN)
--			flags |= IEEE80211_RADIOTAP_AMPDU_DELIM_CRC_KNOWN;
- 		if (status->flag & RX_FLAG_AMPDU_EOF_BIT_KNOWN)
- 			flags |= IEEE80211_RADIOTAP_AMPDU_EOF_KNOWN;
- 		if (status->flag & RX_FLAG_AMPDU_EOF_BIT)
- 			flags |= IEEE80211_RADIOTAP_AMPDU_EOF;
- 		put_unaligned_le16(flags, pos);
- 		pos += 2;
--		if (status->flag & RX_FLAG_AMPDU_DELIM_CRC_KNOWN)
--			*pos++ = status->ampdu_delimiter_crc;
--		else
--			*pos++ = 0;
-+		*pos++ = 0;
- 		*pos++ = 0;
- 	}
- 
diff --git a/package/kernel/mac80211/patches/subsys/334-wifi-cfg80211-pass-net_device-to-.set_monitor_channel.patch b/package/kernel/mac80211/patches/subsys/334-wifi-cfg80211-pass-net_device-to-.set_monitor_channel.patch
deleted file mode 100644
index ef8a36a9af..0000000000
--- a/package/kernel/mac80211/patches/subsys/334-wifi-cfg80211-pass-net_device-to-.set_monitor_channel.patch
+++ /dev/null
@@ -1,165 +0,0 @@
-From: Felix Fietkau <nbd@nbd.name>
-Date: Thu, 26 Sep 2024 19:52:30 +0200
-Subject: [PATCH] wifi: cfg80211: pass net_device to .set_monitor_channel
-
-Preparation for allowing multiple monitor interfaces with different channels
-on a multi-radio wiphy.
-
-Signed-off-by: Felix Fietkau <nbd@nbd.name>
----
-
---- a/drivers/net/wireless/ath/wil6210/cfg80211.c
-+++ b/drivers/net/wireless/ath/wil6210/cfg80211.c
-@@ -1493,6 +1493,7 @@ out:
- }
- 
- static int wil_cfg80211_set_channel(struct wiphy *wiphy,
-+				    struct net_device *dev,
- 				    struct cfg80211_chan_def *chandef)
- {
- 	struct wil6210_priv *wil = wiphy_to_wil(wiphy);
---- a/drivers/net/wireless/marvell/libertas/cfg.c
-+++ b/drivers/net/wireless/marvell/libertas/cfg.c
-@@ -486,6 +486,7 @@ static int lbs_add_wps_enrollee_tlv(u8 *
-  */
- 
- static int lbs_cfg_set_monitor_channel(struct wiphy *wiphy,
-+				       struct net_device *dev,
- 				       struct cfg80211_chan_def *chandef)
- {
- 	struct lbs_private *priv = wiphy_priv(wiphy);
---- a/drivers/net/wireless/microchip/wilc1000/cfg80211.c
-+++ b/drivers/net/wireless/microchip/wilc1000/cfg80211.c
-@@ -231,6 +231,7 @@ struct wilc_vif *wilc_get_wl_to_vif(stru
- }
- 
- static int set_channel(struct wiphy *wiphy,
-+		       struct net_device *dev,
- 		       struct cfg80211_chan_def *chandef)
- {
- 	struct wilc *wl = wiphy_priv(wiphy);
-@@ -1424,7 +1425,7 @@ static int start_ap(struct wiphy *wiphy,
- 	struct wilc_vif *vif = netdev_priv(dev);
- 	int ret;
- 
--	ret = set_channel(wiphy, &settings->chandef);
-+	ret = set_channel(wiphy, dev, &settings->chandef);
- 	if (ret != 0)
- 		netdev_err(dev, "Error in setting channel\n");
- 
---- a/include/net/cfg80211.h
-+++ b/include/net/cfg80211.h
-@@ -4700,6 +4700,7 @@ struct cfg80211_ops {
- 					     struct ieee80211_channel *chan);
- 
- 	int	(*set_monitor_channel)(struct wiphy *wiphy,
-+				       struct net_device *dev,
- 				       struct cfg80211_chan_def *chandef);
- 
- 	int	(*scan)(struct wiphy *wiphy,
---- a/net/mac80211/cfg.c
-+++ b/net/mac80211/cfg.c
-@@ -879,6 +879,7 @@ static int ieee80211_get_station(struct
- }
- 
- static int ieee80211_set_monitor_channel(struct wiphy *wiphy,
-+					 struct net_device *dev,
- 					 struct cfg80211_chan_def *chandef)
- {
- 	struct ieee80211_local *local = wiphy_priv(wiphy);
---- a/net/wireless/chan.c
-+++ b/net/wireless/chan.c
-@@ -1673,6 +1673,7 @@ bool cfg80211_reg_check_beaconing(struct
- EXPORT_SYMBOL(cfg80211_reg_check_beaconing);
- 
- int cfg80211_set_monitor_channel(struct cfg80211_registered_device *rdev,
-+				 struct net_device *dev,
- 				 struct cfg80211_chan_def *chandef)
- {
- 	if (!rdev->ops->set_monitor_channel)
-@@ -1680,7 +1681,7 @@ int cfg80211_set_monitor_channel(struct
- 	if (!cfg80211_has_monitors_only(rdev))
- 		return -EBUSY;
- 
--	return rdev_set_monitor_channel(rdev, chandef);
-+	return rdev_set_monitor_channel(rdev, dev, chandef);
- }
- 
- bool cfg80211_any_usable_channels(struct wiphy *wiphy,
---- a/net/wireless/core.h
-+++ b/net/wireless/core.h
-@@ -518,6 +518,7 @@ static inline unsigned int elapsed_jiffi
- }
- 
- int cfg80211_set_monitor_channel(struct cfg80211_registered_device *rdev,
-+				 struct net_device *dev,
- 				 struct cfg80211_chan_def *chandef);
- 
- int ieee80211_get_ratemask(struct ieee80211_supported_band *sband,
---- a/net/wireless/nl80211.c
-+++ b/net/wireless/nl80211.c
-@@ -3562,7 +3562,7 @@ static int __nl80211_set_channel(struct
- 	case NL80211_IFTYPE_MESH_POINT:
- 		return cfg80211_set_mesh_channel(rdev, wdev, &chandef);
- 	case NL80211_IFTYPE_MONITOR:
--		return cfg80211_set_monitor_channel(rdev, &chandef);
-+		return cfg80211_set_monitor_channel(rdev, dev, &chandef);
- 	default:
- 		break;
- 	}
---- a/net/wireless/rdev-ops.h
-+++ b/net/wireless/rdev-ops.h
-@@ -445,11 +445,12 @@ rdev_libertas_set_mesh_channel(struct cf
- 
- static inline int
- rdev_set_monitor_channel(struct cfg80211_registered_device *rdev,
-+			 struct net_device *dev,
- 			 struct cfg80211_chan_def *chandef)
- {
- 	int ret;
--	trace_rdev_set_monitor_channel(&rdev->wiphy, chandef);
--	ret = rdev->ops->set_monitor_channel(&rdev->wiphy, chandef);
-+	trace_rdev_set_monitor_channel(&rdev->wiphy, dev, chandef);
-+	ret = rdev->ops->set_monitor_channel(&rdev->wiphy, dev, chandef);
- 	trace_rdev_return_int(&rdev->wiphy, ret);
- 	return ret;
- }
---- a/net/wireless/trace.h
-+++ b/net/wireless/trace.h
-@@ -1318,19 +1318,21 @@ TRACE_EVENT(rdev_libertas_set_mesh_chann
- );
- 
- TRACE_EVENT(rdev_set_monitor_channel,
--	TP_PROTO(struct wiphy *wiphy,
-+	TP_PROTO(struct wiphy *wiphy, struct net_device *netdev,
- 		 struct cfg80211_chan_def *chandef),
--	TP_ARGS(wiphy, chandef),
-+	TP_ARGS(wiphy, netdev, chandef),
- 	TP_STRUCT__entry(
- 		WIPHY_ENTRY
-+		NETDEV_ENTRY
- 		CHAN_DEF_ENTRY
- 	),
- 	TP_fast_assign(
- 		WIPHY_ASSIGN;
-+		NETDEV_ASSIGN;
- 		CHAN_DEF_ASSIGN(chandef);
- 	),
--	TP_printk(WIPHY_PR_FMT ", " CHAN_DEF_PR_FMT,
--		  WIPHY_PR_ARG, CHAN_DEF_PR_ARG)
-+	TP_printk(WIPHY_PR_FMT ", " NETDEV_PR_FMT ", " CHAN_DEF_PR_FMT,
-+		  WIPHY_PR_ARG, NETDEV_PR_ARG, CHAN_DEF_PR_ARG)
- );
- 
- TRACE_EVENT(rdev_auth,
---- a/net/wireless/wext-compat.c
-+++ b/net/wireless/wext-compat.c
-@@ -830,7 +830,7 @@ static int cfg80211_wext_siwfreq(struct
- 			ret = -EINVAL;
- 			break;
- 		}
--		ret = cfg80211_set_monitor_channel(rdev, &chandef);
-+		ret = cfg80211_set_monitor_channel(rdev, dev, &chandef);
- 		break;
- 	case NL80211_IFTYPE_MESH_POINT:
- 		freq = cfg80211_wext_freq(wextfreq);
diff --git a/package/kernel/mac80211/patches/subsys/335-wifi-mac80211-add-flag-to-opt-out-of-virtual-monitor.patch b/package/kernel/mac80211/patches/subsys/335-wifi-mac80211-add-flag-to-opt-out-of-virtual-monitor.patch
deleted file mode 100644
index 604abfd43f..0000000000
--- a/package/kernel/mac80211/patches/subsys/335-wifi-mac80211-add-flag-to-opt-out-of-virtual-monitor.patch
+++ /dev/null
@@ -1,337 +0,0 @@
-From: Felix Fietkau <nbd@nbd.name>
-Date: Mon, 30 Sep 2024 15:09:45 +0200
-Subject: [PATCH] wifi: mac80211: add flag to opt out of virtual monitor
- support
-
-This is useful for multi-radio devices that are capable of monitoring on
-multiple channels simultanenously. When this flag is set, each monitor
-interface is passed to the driver individually and can have a configured
-channel.
-
-Signed-off-by: Felix Fietkau <nbd@nbd.name>
----
-
---- a/include/net/mac80211.h
-+++ b/include/net/mac80211.h
-@@ -2679,6 +2679,11 @@ struct ieee80211_txq {
-  *	a virtual monitor interface when monitor interfaces are the only
-  *	active interfaces.
-  *
-+ * @IEEE80211_HW_NO_VIRTUAL_MONITOR: The driver would like to be informed
-+ *	of any monitor interface, as well as their configured channel.
-+ *	This is useful for supporting multiple monitor interfaces on different
-+ *	channels.
-+ *
-  * @IEEE80211_HW_NO_AUTO_VIF: The driver would like for no wlanX to
-  *	be created.  It is expected user-space will create vifs as
-  *	desired (and thus have them named as desired).
-@@ -2838,6 +2843,7 @@ enum ieee80211_hw_flags {
- 	IEEE80211_HW_SUPPORTS_DYNAMIC_PS,
- 	IEEE80211_HW_MFP_CAPABLE,
- 	IEEE80211_HW_WANT_MONITOR_VIF,
-+	IEEE80211_HW_NO_VIRTUAL_MONITOR,
- 	IEEE80211_HW_NO_AUTO_VIF,
- 	IEEE80211_HW_SW_CRYPTO_CONTROL,
- 	IEEE80211_HW_SUPPORT_FAST_XMIT,
---- a/net/mac80211/cfg.c
-+++ b/net/mac80211/cfg.c
-@@ -105,8 +105,11 @@ static int ieee80211_set_mon_options(str
- 	}
- 
- 	/* also validate MU-MIMO change */
--	monitor_sdata = wiphy_dereference(local->hw.wiphy,
--					  local->monitor_sdata);
-+	if (ieee80211_hw_check(&local->hw, NO_VIRTUAL_MONITOR))
-+		monitor_sdata = sdata;
-+	else
-+		monitor_sdata = wiphy_dereference(local->hw.wiphy,
-+						  local->monitor_sdata);
- 
- 	if (!monitor_sdata &&
- 	    (params->vht_mumimo_groups || params->vht_mumimo_follow_addr))
-@@ -114,7 +117,9 @@ static int ieee80211_set_mon_options(str
- 
- 	/* apply all changes now - no failures allowed */
- 
--	if (monitor_sdata && ieee80211_hw_check(&local->hw, WANT_MONITOR_VIF))
-+	if (monitor_sdata &&
-+		(ieee80211_hw_check(&local->hw, WANT_MONITOR_VIF) ||
-+		 ieee80211_hw_check(&local->hw, NO_VIRTUAL_MONITOR)))
- 		ieee80211_set_mu_mimo_follow(monitor_sdata, params);
- 
- 	if (params->flags) {
-@@ -889,22 +894,25 @@ static int ieee80211_set_monitor_channel
- 
- 	lockdep_assert_wiphy(local->hw.wiphy);
- 
--	if (cfg80211_chandef_identical(&local->monitor_chanreq.oper,
--				       &chanreq.oper))
--		return 0;
-+	sdata = IEEE80211_DEV_TO_SUB_IF(dev);
-+	if (!ieee80211_hw_check(&local->hw, NO_VIRTUAL_MONITOR)) {
-+		if (cfg80211_chandef_identical(&local->monitor_chanreq.oper,
-+						   &chanreq.oper))
-+			return 0;
- 
--	sdata = wiphy_dereference(local->hw.wiphy,
--				  local->monitor_sdata);
--	if (!sdata)
--		goto done;
-+		sdata = wiphy_dereference(wiphy, local->monitor_sdata);
-+		if (!sdata)
-+			goto done;
-+	}
- 
--	if (cfg80211_chandef_identical(&sdata->vif.bss_conf.chanreq.oper,
-+	if (rcu_access_pointer(sdata->deflink.conf->chanctx_conf) &&
-+		cfg80211_chandef_identical(&sdata->vif.bss_conf.chanreq.oper,
- 				       &chanreq.oper))
- 		return 0;
- 
- 	ieee80211_link_release_channel(&sdata->deflink);
- 	ret = ieee80211_link_use_channel(&sdata->deflink, &chanreq,
--					 IEEE80211_CHANCTX_EXCLUSIVE);
-+					 IEEE80211_CHANCTX_SHARED);
- 	if (ret)
- 		return ret;
- done:
-@@ -3050,7 +3058,8 @@ static int ieee80211_set_tx_power(struct
- 	if (wdev) {
- 		sdata = IEEE80211_WDEV_TO_SUB_IF(wdev);
- 
--		if (sdata->vif.type == NL80211_IFTYPE_MONITOR) {
-+		if (sdata->vif.type == NL80211_IFTYPE_MONITOR &&
-+		    !ieee80211_hw_check(&local->hw, NO_VIRTUAL_MONITOR)) {
- 			if (!ieee80211_hw_check(&local->hw, WANT_MONITOR_VIF))
- 				return -EOPNOTSUPP;
- 
-@@ -3098,7 +3107,8 @@ static int ieee80211_set_tx_power(struct
- 	}
- 
- 	list_for_each_entry(sdata, &local->interfaces, list) {
--		if (sdata->vif.type == NL80211_IFTYPE_MONITOR) {
-+		if (sdata->vif.type == NL80211_IFTYPE_MONITOR &&
-+		    !ieee80211_hw_check(&local->hw, NO_VIRTUAL_MONITOR)) {
- 			has_monitor = true;
- 			continue;
- 		}
-@@ -3108,7 +3118,8 @@ static int ieee80211_set_tx_power(struct
- 		sdata->vif.bss_conf.txpower_type = txp_type;
- 	}
- 	list_for_each_entry(sdata, &local->interfaces, list) {
--		if (sdata->vif.type == NL80211_IFTYPE_MONITOR)
-+		if (sdata->vif.type == NL80211_IFTYPE_MONITOR &&
-+		    !ieee80211_hw_check(&local->hw, NO_VIRTUAL_MONITOR))
- 			continue;
- 		ieee80211_recalc_txpower(sdata, update_txp_type);
- 	}
-@@ -4303,7 +4314,8 @@ static int ieee80211_cfg_get_channel(str
- 	if (chanctx_conf) {
- 		*chandef = link->conf->chanreq.oper;
- 		ret = 0;
--	} else if (local->open_count > 0 &&
-+	} else if (!ieee80211_hw_check(&local->hw, NO_VIRTUAL_MONITOR) &&
-+		   local->open_count > 0 &&
- 		   local->open_count == local->monitors &&
- 		   sdata->vif.type == NL80211_IFTYPE_MONITOR) {
- 		*chandef = local->monitor_chanreq.oper;
---- a/net/mac80211/chan.c
-+++ b/net/mac80211/chan.c
-@@ -339,6 +339,10 @@ ieee80211_get_chanctx_max_required_bw(st
- 		case NL80211_IFTYPE_P2P_DEVICE:
- 		case NL80211_IFTYPE_NAN:
- 			continue;
-+		case NL80211_IFTYPE_MONITOR:
-+			WARN_ON_ONCE(!ieee80211_hw_check(&local->hw,
-+							 NO_VIRTUAL_MONITOR));
-+			fallthrough;
- 		case NL80211_IFTYPE_ADHOC:
- 		case NL80211_IFTYPE_MESH_POINT:
- 		case NL80211_IFTYPE_OCB:
-@@ -347,7 +351,6 @@ ieee80211_get_chanctx_max_required_bw(st
- 		case NL80211_IFTYPE_WDS:
- 		case NL80211_IFTYPE_UNSPECIFIED:
- 		case NUM_NL80211_IFTYPES:
--		case NL80211_IFTYPE_MONITOR:
- 		case NL80211_IFTYPE_P2P_CLIENT:
- 		case NL80211_IFTYPE_P2P_GO:
- 			WARN_ON_ONCE(1);
-@@ -956,6 +959,10 @@ void ieee80211_recalc_smps_chanctx(struc
- 			if (!link->sdata->u.mgd.associated)
- 				continue;
- 			break;
-+		case NL80211_IFTYPE_MONITOR:
-+			if (!ieee80211_hw_check(&local->hw, NO_VIRTUAL_MONITOR))
-+				continue;
-+			break;
- 		case NL80211_IFTYPE_AP:
- 		case NL80211_IFTYPE_ADHOC:
- 		case NL80211_IFTYPE_MESH_POINT:
-@@ -968,6 +975,11 @@ void ieee80211_recalc_smps_chanctx(struc
- 		if (rcu_access_pointer(link->conf->chanctx_conf) != &chanctx->conf)
- 			continue;
- 
-+		if (link->sdata->vif.type == NL80211_IFTYPE_MONITOR) {
-+			rx_chains_dynamic = rx_chains_static = local->rx_chains;
-+			break;
-+		}
-+
- 		switch (link->smps_mode) {
- 		default:
- 			WARN_ONCE(1, "Invalid SMPS mode %d\n",
---- a/net/mac80211/debugfs.c
-+++ b/net/mac80211/debugfs.c
-@@ -465,6 +465,7 @@ static const char *hw_flag_names[] = {
- 	FLAG(SUPPORTS_DYNAMIC_PS),
- 	FLAG(MFP_CAPABLE),
- 	FLAG(WANT_MONITOR_VIF),
-+	FLAG(NO_VIRTUAL_MONITOR),
- 	FLAG(NO_AUTO_VIF),
- 	FLAG(SW_CRYPTO_CONTROL),
- 	FLAG(SUPPORT_FAST_XMIT),
---- a/net/mac80211/driver-ops.c
-+++ b/net/mac80211/driver-ops.c
-@@ -65,6 +65,7 @@ int drv_add_interface(struct ieee80211_l
- 	if (WARN_ON(sdata->vif.type == NL80211_IFTYPE_AP_VLAN ||
- 		    (sdata->vif.type == NL80211_IFTYPE_MONITOR &&
- 		     !ieee80211_hw_check(&local->hw, WANT_MONITOR_VIF) &&
-+		     !ieee80211_hw_check(&local->hw, NO_VIRTUAL_MONITOR) &&
- 		     !(sdata->u.mntr.flags & MONITOR_FLAG_ACTIVE))))
- 		return -EINVAL;
- 
---- a/net/mac80211/iface.c
-+++ b/net/mac80211/iface.c
-@@ -279,8 +279,13 @@ static int _ieee80211_change_mac(struct
- 	ret = eth_mac_addr(sdata->dev, sa);
- 
- 	if (ret == 0) {
--		memcpy(sdata->vif.addr, sa->sa_data, ETH_ALEN);
--		ether_addr_copy(sdata->vif.bss_conf.addr, sdata->vif.addr);
-+		if (check_dup) {
-+			memcpy(sdata->vif.addr, sa->sa_data, ETH_ALEN);
-+			ether_addr_copy(sdata->vif.bss_conf.addr, sdata->vif.addr);
-+		} else {
-+			memset(sdata->vif.addr, 0, ETH_ALEN);
-+			memset(sdata->vif.bss_conf.addr, 0, ETH_ALEN);
-+		}
- 	}
- 
- 	/* Regardless of eth_mac_addr() return we still want to add the
-@@ -699,9 +704,11 @@ static void ieee80211_do_stop(struct iee
- 		ieee80211_recalc_idle(local);
- 		ieee80211_recalc_offload(local);
- 
--		if (!(sdata->u.mntr.flags & MONITOR_FLAG_ACTIVE))
-+		if (!(sdata->u.mntr.flags & MONITOR_FLAG_ACTIVE) &&
-+		    !ieee80211_hw_check(&local->hw, NO_VIRTUAL_MONITOR))
- 			break;
- 
-+		ieee80211_link_release_channel(&sdata->deflink);
- 		fallthrough;
- 	default:
- 		if (!going_down)
-@@ -1131,7 +1138,8 @@ int ieee80211_add_virtual_monitor(struct
- 	ASSERT_RTNL();
- 	lockdep_assert_wiphy(local->hw.wiphy);
- 
--	if (local->monitor_sdata)
-+	if (local->monitor_sdata ||
-+	    ieee80211_hw_check(&local->hw, NO_VIRTUAL_MONITOR))
- 		return 0;
- 
- 	sdata = kzalloc(sizeof(*sdata) + local->hw.vif_data_size, GFP_KERNEL);
-@@ -1193,6 +1201,9 @@ void ieee80211_del_virtual_monitor(struc
- {
- 	struct ieee80211_sub_if_data *sdata;
- 
-+	if (ieee80211_hw_check(&local->hw, NO_VIRTUAL_MONITOR))
-+		return;
-+
- 	ASSERT_RTNL();
- 	lockdep_assert_wiphy(local->hw.wiphy);
- 
-@@ -1328,7 +1339,8 @@ int ieee80211_do_open(struct wireless_de
- 			break;
- 		}
- 
--		if (sdata->u.mntr.flags & MONITOR_FLAG_ACTIVE) {
-+		if ((sdata->u.mntr.flags & MONITOR_FLAG_ACTIVE) ||
-+		    ieee80211_hw_check(&local->hw, NO_VIRTUAL_MONITOR)) {
- 			res = drv_add_interface(local, sdata);
- 			if (res)
- 				goto err_stop;
---- a/net/mac80211/rx.c
-+++ b/net/mac80211/rx.c
-@@ -840,6 +840,9 @@ ieee80211_rx_monitor(struct ieee80211_lo
- 		bool last_monitor = list_is_last(&sdata->u.mntr.list,
- 						 &local->mon_list);
- 
-+		if (ieee80211_hw_check(&local->hw, NO_VIRTUAL_MONITOR))
-+			ieee80211_handle_mu_mimo_mon(sdata, origskb, rtap_space);
-+
- 		if (!monskb)
- 			monskb = ieee80211_make_monitor_skb(local, &origskb,
- 							    rate, rtap_space,
---- a/net/mac80211/tx.c
-+++ b/net/mac80211/tx.c
-@@ -1763,7 +1763,8 @@ static bool __ieee80211_tx(struct ieee80
- 
- 	switch (sdata->vif.type) {
- 	case NL80211_IFTYPE_MONITOR:
--		if (sdata->u.mntr.flags & MONITOR_FLAG_ACTIVE) {
-+		if ((sdata->u.mntr.flags & MONITOR_FLAG_ACTIVE) ||
-+		    ieee80211_hw_check(&local->hw, NO_VIRTUAL_MONITOR)) {
- 			vif = &sdata->vif;
- 			break;
- 		}
-@@ -3952,7 +3953,8 @@ begin:
- 
- 	switch (tx.sdata->vif.type) {
- 	case NL80211_IFTYPE_MONITOR:
--		if (tx.sdata->u.mntr.flags & MONITOR_FLAG_ACTIVE) {
-+		if ((tx.sdata->u.mntr.flags & MONITOR_FLAG_ACTIVE) ||
-+		    ieee80211_hw_check(&local->hw, NO_VIRTUAL_MONITOR)) {
- 			vif = &tx.sdata->vif;
- 			break;
- 		}
---- a/net/mac80211/util.c
-+++ b/net/mac80211/util.c
-@@ -739,7 +739,8 @@ static void __iterate_interfaces(struct
- 				lockdep_is_held(&local->hw.wiphy->mtx)) {
- 		switch (sdata->vif.type) {
- 		case NL80211_IFTYPE_MONITOR:
--			if (!(sdata->u.mntr.flags & MONITOR_FLAG_ACTIVE))
-+			if (!(sdata->u.mntr.flags & MONITOR_FLAG_ACTIVE) &&
-+			    !ieee80211_hw_check(&local->hw, NO_VIRTUAL_MONITOR))
- 				continue;
- 			break;
- 		case NL80211_IFTYPE_AP_VLAN:
-@@ -1856,8 +1857,10 @@ int ieee80211_reconfig(struct ieee80211_
- 	}
- 
- 	list_for_each_entry(sdata, &local->interfaces, list) {
-+		if (sdata->vif.type == NL80211_IFTYPE_MONITOR &&
-+		    !ieee80211_hw_check(&local->hw, NO_VIRTUAL_MONITOR))
-+			continue;
- 		if (sdata->vif.type != NL80211_IFTYPE_AP_VLAN &&
--		    sdata->vif.type != NL80211_IFTYPE_MONITOR &&
- 		    ieee80211_sdata_running(sdata)) {
- 			res = drv_add_interface(local, sdata);
- 			if (WARN_ON(res))
-@@ -1870,11 +1873,14 @@ int ieee80211_reconfig(struct ieee80211_
- 	 */
- 	if (res) {
- 		list_for_each_entry_continue_reverse(sdata, &local->interfaces,
--						     list)
-+						     list) {
-+			if (sdata->vif.type == NL80211_IFTYPE_MONITOR &&
-+			    !ieee80211_hw_check(&local->hw, NO_VIRTUAL_MONITOR))
-+				continue;
- 			if (sdata->vif.type != NL80211_IFTYPE_AP_VLAN &&
--			    sdata->vif.type != NL80211_IFTYPE_MONITOR &&
- 			    ieee80211_sdata_running(sdata))
- 				drv_remove_interface(local, sdata);
-+		}
- 		ieee80211_handle_reconfig_failure(local);
- 		return res;
- 	}
diff --git a/package/kernel/mac80211/patches/subsys/336-wifi-cfg80211-add-monitor-SKIP_TX-flag.patch b/package/kernel/mac80211/patches/subsys/336-wifi-cfg80211-add-monitor-SKIP_TX-flag.patch
deleted file mode 100644
index dfc01c6c9b..0000000000
--- a/package/kernel/mac80211/patches/subsys/336-wifi-cfg80211-add-monitor-SKIP_TX-flag.patch
+++ /dev/null
@@ -1,56 +0,0 @@
-From: Felix Fietkau <nbd@nbd.name>
-Date: Mon, 30 Sep 2024 17:04:09 +0200
-Subject: [PATCH] wifi: cfg80211: add monitor SKIP_TX flag
-
-This can be used to indicate that the user is not interested in receiving
-locally sent packets on the monitor interface.
-
-Signed-off-by: Felix Fietkau <nbd@nbd.name>
----
-
---- a/include/net/cfg80211.h
-+++ b/include/net/cfg80211.h
-@@ -2272,6 +2272,7 @@ static inline int cfg80211_get_station(s
-  * @MONITOR_FLAG_OTHER_BSS: disable BSSID filtering
-  * @MONITOR_FLAG_COOK_FRAMES: report frames after processing
-  * @MONITOR_FLAG_ACTIVE: active monitor, ACKs frames on its MAC address
-+ * @MONITOR_FLAG_SKIP_TX: do not pass locally transmitted frames
-  */
- enum monitor_flags {
- 	MONITOR_FLAG_CHANGED		= BIT(__NL80211_MNTR_FLAG_INVALID),
-@@ -2281,6 +2282,7 @@ enum monitor_flags {
- 	MONITOR_FLAG_OTHER_BSS		= BIT(NL80211_MNTR_FLAG_OTHER_BSS),
- 	MONITOR_FLAG_COOK_FRAMES	= BIT(NL80211_MNTR_FLAG_COOK_FRAMES),
- 	MONITOR_FLAG_ACTIVE		= BIT(NL80211_MNTR_FLAG_ACTIVE),
-+	MONITOR_FLAG_SKIP_TX		= BIT(NL80211_MNTR_FLAG_SKIP_TX),
- };
- 
- /**
---- a/include/uapi/linux/nl80211.h
-+++ b/include/uapi/linux/nl80211.h
-@@ -4703,6 +4703,7 @@ enum nl80211_survey_info {
-  *	overrides all other flags.
-  * @NL80211_MNTR_FLAG_ACTIVE: use the configured MAC address
-  *	and ACK incoming unicast packets.
-+ * @NL80211_MNTR_FLAG_SKIP_TX: do not pass local tx packets
-  *
-  * @__NL80211_MNTR_FLAG_AFTER_LAST: internal use
-  * @NL80211_MNTR_FLAG_MAX: highest possible monitor flag
-@@ -4715,6 +4716,7 @@ enum nl80211_mntr_flags {
- 	NL80211_MNTR_FLAG_OTHER_BSS,
- 	NL80211_MNTR_FLAG_COOK_FRAMES,
- 	NL80211_MNTR_FLAG_ACTIVE,
-+	NL80211_MNTR_FLAG_SKIP_TX,
- 
- 	/* keep last */
- 	__NL80211_MNTR_FLAG_AFTER_LAST,
---- a/net/wireless/nl80211.c
-+++ b/net/wireless/nl80211.c
-@@ -4201,6 +4201,7 @@ static const struct nla_policy mntr_flag
- 	[NL80211_MNTR_FLAG_OTHER_BSS] = { .type = NLA_FLAG },
- 	[NL80211_MNTR_FLAG_COOK_FRAMES] = { .type = NLA_FLAG },
- 	[NL80211_MNTR_FLAG_ACTIVE] = { .type = NLA_FLAG },
-+	[NL80211_MNTR_FLAG_SKIP_TX] = { .type = NLA_FLAG },
- };
- 
- static int parse_monitor_flags(struct nlattr *nla, u32 *mntrflags)
diff --git a/package/kernel/mac80211/patches/subsys/337-wifi-mac80211-add-support-for-the-monitor-SKIP_TX-fl.patch b/package/kernel/mac80211/patches/subsys/337-wifi-mac80211-add-support-for-the-monitor-SKIP_TX-fl.patch
deleted file mode 100644
index d9e484eeba..0000000000
--- a/package/kernel/mac80211/patches/subsys/337-wifi-mac80211-add-support-for-the-monitor-SKIP_TX-fl.patch
+++ /dev/null
@@ -1,54 +0,0 @@
-From: Felix Fietkau <nbd@nbd.name>
-Date: Mon, 30 Sep 2024 17:05:18 +0200
-Subject: [PATCH] wifi: mac80211: add support for the monitor SKIP_TX flag
-
-Do not pass locally sent packets to monitor interfaces with this flag set.
-Skip processing tx packets on the status call entirely if no monitor
-interfaces without this flag are present.
-
-Signed-off-by: Felix Fietkau <nbd@nbd.name>
----
-
---- a/net/mac80211/ieee80211_i.h
-+++ b/net/mac80211/ieee80211_i.h
-@@ -1373,7 +1373,7 @@ struct ieee80211_local {
- 	spinlock_t queue_stop_reason_lock;
- 
- 	int open_count;
--	int monitors, cooked_mntrs;
-+	int monitors, cooked_mntrs, tx_mntrs;
- 	/* number of interfaces with corresponding FIF_ flags */
- 	int fif_fcsfail, fif_plcpfail, fif_control, fif_other_bss, fif_pspoll,
- 	    fif_probe_req;
---- a/net/mac80211/iface.c
-+++ b/net/mac80211/iface.c
-@@ -1094,6 +1094,8 @@ void ieee80211_adjust_monitor_flags(stru
- 	ADJUST(CONTROL, control);
- 	ADJUST(CONTROL, pspoll);
- 	ADJUST(OTHER_BSS, other_bss);
-+	if (!(flags & MONITOR_FLAG_SKIP_TX))
-+		local->tx_mntrs += offset;
- 
- #undef ADJUST
- }
---- a/net/mac80211/status.c
-+++ b/net/mac80211/status.c
-@@ -927,6 +927,9 @@ void ieee80211_tx_monitor(struct ieee802
- 			if (!ieee80211_sdata_running(sdata))
- 				continue;
- 
-+			if (sdata->u.mntr.flags & MONITOR_FLAG_SKIP_TX)
-+				continue;
-+
- 			if ((sdata->u.mntr.flags & MONITOR_FLAG_COOK_FRAMES) &&
- 			    !send_to_cooked)
- 				continue;
-@@ -1099,7 +1102,7 @@ static void __ieee80211_tx_status(struct
- 	 * This is a bit racy but we can avoid a lot of work
- 	 * with this test...
- 	 */
--	if (!local->monitors && (!send_to_cooked || !local->cooked_mntrs)) {
-+	if (!local->tx_mntrs && (!send_to_cooked || !local->cooked_mntrs)) {
- 		if (status->free_list)
- 			list_add_tail(&skb->list, status->free_list);
- 		else
diff --git a/package/kernel/mac80211/patches/subsys/338-wifi-mac80211-refactor-ieee80211_rx_monitor.patch b/package/kernel/mac80211/patches/subsys/338-wifi-mac80211-refactor-ieee80211_rx_monitor.patch
deleted file mode 100644
index cc976060d4..0000000000
--- a/package/kernel/mac80211/patches/subsys/338-wifi-mac80211-refactor-ieee80211_rx_monitor.patch
+++ /dev/null
@@ -1,94 +0,0 @@
-From: Felix Fietkau <nbd@nbd.name>
-Date: Wed, 2 Oct 2024 12:31:22 +0200
-Subject: [PATCH] wifi: mac80211: refactor ieee80211_rx_monitor
-
-Rework the monitor mode interface iteration to get rid of the last_monitor
-condition. Preparation for further filtering received monitor packets.
-
-Signed-off-by: Felix Fietkau <nbd@nbd.name>
----
-
---- a/net/mac80211/rx.c
-+++ b/net/mac80211/rx.c
-@@ -762,8 +762,8 @@ ieee80211_rx_monitor(struct ieee80211_lo
- 		     struct ieee80211_rate *rate)
- {
- 	struct ieee80211_rx_status *status = IEEE80211_SKB_RXCB(origskb);
--	struct ieee80211_sub_if_data *sdata;
--	struct sk_buff *monskb = NULL;
-+	struct ieee80211_sub_if_data *sdata, *prev_sdata = NULL;
-+	struct sk_buff *skb, *monskb = NULL;
- 	int present_fcs_len = 0;
- 	unsigned int rtap_space = 0;
- 	struct ieee80211_sub_if_data *monitor_sdata =
-@@ -837,8 +837,10 @@ ieee80211_rx_monitor(struct ieee80211_lo
- 	ieee80211_handle_mu_mimo_mon(monitor_sdata, origskb, rtap_space);
- 
- 	list_for_each_entry_rcu(sdata, &local->mon_list, u.mntr.list) {
--		bool last_monitor = list_is_last(&sdata->u.mntr.list,
--						 &local->mon_list);
-+		if (!prev_sdata) {
-+			prev_sdata = sdata;
-+			continue;
-+		}
- 
- 		if (ieee80211_hw_check(&local->hw, NO_VIRTUAL_MONITOR))
- 			ieee80211_handle_mu_mimo_mon(sdata, origskb, rtap_space);
-@@ -846,34 +848,34 @@ ieee80211_rx_monitor(struct ieee80211_lo
- 		if (!monskb)
- 			monskb = ieee80211_make_monitor_skb(local, &origskb,
- 							    rate, rtap_space,
--							    only_monitor &&
--							    last_monitor);
--
--		if (monskb) {
--			struct sk_buff *skb;
-+							    false);
-+		if (!monskb)
-+			continue;
- 
--			if (last_monitor) {
--				skb = monskb;
--				monskb = NULL;
--			} else {
--				skb = skb_clone(monskb, GFP_ATOMIC);
--			}
-+		skb = skb_clone(monskb, GFP_ATOMIC);
-+		if (!skb)
-+			continue;
-+
-+		skb->dev = prev_sdata->dev;
-+		dev_sw_netstats_rx_add(skb->dev, skb->len);
-+		netif_receive_skb(skb);
-+		prev_sdata = sdata;
-+	}
- 
--			if (skb) {
--				skb->dev = sdata->dev;
--				dev_sw_netstats_rx_add(skb->dev, skb->len);
--				netif_receive_skb(skb);
--			}
-+	if (prev_sdata) {
-+		if (monskb)
-+			skb = monskb;
-+		else
-+			skb = ieee80211_make_monitor_skb(local, &origskb,
-+							 rate, rtap_space,
-+							 only_monitor);
-+		if (skb) {
-+			skb->dev = prev_sdata->dev;
-+			dev_sw_netstats_rx_add(skb->dev, skb->len);
-+			netif_receive_skb(skb);
- 		}
--
--		if (last_monitor)
--			break;
- 	}
- 
--	/* this happens if last_monitor was erroneously false */
--	dev_kfree_skb(monskb);
--
--	/* ditto */
- 	if (!origskb)
- 		return NULL;
- 
diff --git a/package/kernel/mac80211/patches/subsys/339-wifi-mac80211-filter-on-monitor-interfaces-based-on-.patch b/package/kernel/mac80211/patches/subsys/339-wifi-mac80211-filter-on-monitor-interfaces-based-on-.patch
deleted file mode 100644
index 4b2c67aeba..0000000000
--- a/package/kernel/mac80211/patches/subsys/339-wifi-mac80211-filter-on-monitor-interfaces-based-on-.patch
+++ /dev/null
@@ -1,29 +0,0 @@
-From: Felix Fietkau <nbd@nbd.name>
-Date: Wed, 2 Oct 2024 12:35:13 +0200
-Subject: [PATCH] wifi: mac80211: filter on monitor interfaces based on
- configured channel
-
-When a monitor interface has an assigned channel (only happens with the
-NO_VIRTUAL_MONITOR feature), only pass packets received on that channel.
-This is useful for monitoring on multiple channels at the same time using
-multiple monitor interfaces.
-
-Signed-off-by: Felix Fietkau <nbd@nbd.name>
----
-
---- a/net/mac80211/rx.c
-+++ b/net/mac80211/rx.c
-@@ -837,6 +837,13 @@ ieee80211_rx_monitor(struct ieee80211_lo
- 	ieee80211_handle_mu_mimo_mon(monitor_sdata, origskb, rtap_space);
- 
- 	list_for_each_entry_rcu(sdata, &local->mon_list, u.mntr.list) {
-+		struct cfg80211_chan_def *chandef;
-+
-+		chandef = &sdata->vif.bss_conf.chanreq.oper;
-+		if (chandef->chan &&
-+		    chandef->chan->center_freq != status->freq)
-+			continue;
-+
- 		if (!prev_sdata) {
- 			prev_sdata = sdata;
- 			continue;
diff --git a/package/kernel/mac80211/patches/subsys/340-wifi-cfg80211-report-per-wiphy-radio-antenna-mask.patch b/package/kernel/mac80211/patches/subsys/340-wifi-cfg80211-report-per-wiphy-radio-antenna-mask.patch
deleted file mode 100644
index 178e01dc16..0000000000
--- a/package/kernel/mac80211/patches/subsys/340-wifi-cfg80211-report-per-wiphy-radio-antenna-mask.patch
+++ /dev/null
@@ -1,64 +0,0 @@
-From: Felix Fietkau <nbd@nbd.name>
-Date: Wed, 7 Aug 2024 13:31:07 +0200
-Subject: [PATCH] wifi: cfg80211: report per wiphy radio antenna mask
-
-With multi-radio devices, each radio typically gets a fixed set of antennas.
-In order to be able to disable specific antennas for some radios, user space
-needs to know which antenna mask bits are assigned to which radio.
-
-Signed-off-by: Felix Fietkau <nbd@nbd.name>
----
-
---- a/include/net/cfg80211.h
-+++ b/include/net/cfg80211.h
-@@ -5443,6 +5443,8 @@ struct wiphy_radio_freq_range {
-  * @iface_combinations: Valid interface combinations array, should not
-  *	list single interface types.
-  * @n_iface_combinations: number of entries in @iface_combinations array.
-+ *
-+ * @antenna_mask: bitmask of antennas connected to this radio.
-  */
- struct wiphy_radio {
- 	const struct wiphy_radio_freq_range *freq_range;
-@@ -5450,6 +5452,8 @@ struct wiphy_radio {
- 
- 	const struct ieee80211_iface_combination *iface_combinations;
- 	int n_iface_combinations;
-+
-+	u32 antenna_mask;
- };
- 
- #define CFG80211_HW_TIMESTAMP_ALL_PEERS	0xffff
---- a/include/uapi/linux/nl80211.h
-+++ b/include/uapi/linux/nl80211.h
-@@ -8038,6 +8038,8 @@ enum nl80211_ap_settings_flags {
-  * @NL80211_WIPHY_RADIO_ATTR_INTERFACE_COMBINATION: Supported interface
-  *	combination for this radio. Attribute may be present multiple times
-  *	and contains attributes defined in &enum nl80211_if_combination_attrs.
-+ * @NL80211_WIPHY_RADIO_ATTR_ANTENNA_MASK: bitmask (u32) of antennas
-+ *	connected to this radio.
-  *
-  * @__NL80211_WIPHY_RADIO_ATTR_LAST: Internal
-  * @NL80211_WIPHY_RADIO_ATTR_MAX: Highest attribute
-@@ -8048,6 +8050,7 @@ enum nl80211_wiphy_radio_attrs {
- 	NL80211_WIPHY_RADIO_ATTR_INDEX,
- 	NL80211_WIPHY_RADIO_ATTR_FREQ_RANGE,
- 	NL80211_WIPHY_RADIO_ATTR_INTERFACE_COMBINATION,
-+	NL80211_WIPHY_RADIO_ATTR_ANTENNA_MASK,
- 
- 	/* keep last */
- 	__NL80211_WIPHY_RADIO_ATTR_LAST,
---- a/net/wireless/nl80211.c
-+++ b/net/wireless/nl80211.c
-@@ -2431,6 +2431,11 @@ static int nl80211_put_radio(struct wiph
- 	if (nla_put_u32(msg, NL80211_WIPHY_RADIO_ATTR_INDEX, idx))
- 		goto nla_put_failure;
- 
-+	if (r->antenna_mask &&
-+	    nla_put_u32(msg, NL80211_WIPHY_RADIO_ATTR_ANTENNA_MASK,
-+			r->antenna_mask))
-+		goto nla_put_failure;
-+
- 	for (i = 0; i < r->n_freq_range; i++) {
- 		const struct wiphy_radio_freq_range *range = &r->freq_range[i];
- 
diff --git a/package/kernel/mac80211/patches/subsys/341-wifi-mac80211-fix-vif-addr-when-switching-from-monit.patch b/package/kernel/mac80211/patches/subsys/341-wifi-mac80211-fix-vif-addr-when-switching-from-monit.patch
deleted file mode 100644
index f4cfc95aa3..0000000000
--- a/package/kernel/mac80211/patches/subsys/341-wifi-mac80211-fix-vif-addr-when-switching-from-monit.patch
+++ /dev/null
@@ -1,63 +0,0 @@
-From: Felix Fietkau <nbd@nbd.name>
-Date: Fri, 15 Nov 2024 12:28:43 +0100
-Subject: [PATCH] wifi: mac80211: fix vif addr when switching from monitor
- to station
-
-Since adding support for opting out of virtual monitor support, a zero vif
-addr was used to indicate passive vs active monitor to the driver.
-This would break the vif->addr when changing the netdev mac address before
-switching the interface from monitor to sta mode.
-Fix the regression by adding a separate flag to indicate whether vif->addr
-is valid.
-
-Reported-by: syzbot+9ea265d998de25ac6a46@syzkaller.appspotmail.com
-Fixes: 9d40f7e32774 ("wifi: mac80211: add flag to opt out of virtual monitor support")
-Signed-off-by: Felix Fietkau <nbd@nbd.name>
----
-
---- a/include/net/mac80211.h
-+++ b/include/net/mac80211.h
-@@ -1972,6 +1972,8 @@ enum ieee80211_neg_ttlm_res {
-  * @neg_ttlm: negotiated TID to link mapping info.
-  *	see &struct ieee80211_neg_ttlm.
-  * @addr: address of this interface
-+ * @addr_valid: indicates if the address is actively used. Set to false for
-+ *	passive monitor interfaces, true in all other cases.
-  * @p2p: indicates whether this AP or STA interface is a p2p
-  *	interface, i.e. a GO or p2p-sta respectively
-  * @netdev_features: tx netdev features supported by the hardware for this
-@@ -2011,6 +2013,7 @@ struct ieee80211_vif {
- 	u16 valid_links, active_links, dormant_links, suspended_links;
- 	struct ieee80211_neg_ttlm neg_ttlm;
- 	u8 addr[ETH_ALEN] __aligned(2);
-+	bool addr_valid;
- 	bool p2p;
- 
- 	u8 cab_queue;
---- a/net/mac80211/iface.c
-+++ b/net/mac80211/iface.c
-@@ -279,13 +279,8 @@ static int _ieee80211_change_mac(struct
- 	ret = eth_mac_addr(sdata->dev, sa);
- 
- 	if (ret == 0) {
--		if (check_dup) {
--			memcpy(sdata->vif.addr, sa->sa_data, ETH_ALEN);
--			ether_addr_copy(sdata->vif.bss_conf.addr, sdata->vif.addr);
--		} else {
--			memset(sdata->vif.addr, 0, ETH_ALEN);
--			memset(sdata->vif.bss_conf.addr, 0, ETH_ALEN);
--		}
-+		memcpy(sdata->vif.addr, sa->sa_data, ETH_ALEN);
-+		ether_addr_copy(sdata->vif.bss_conf.addr, sdata->vif.addr);
- 	}
- 
- 	/* Regardless of eth_mac_addr() return we still want to add the
-@@ -1324,6 +1319,8 @@ int ieee80211_do_open(struct wireless_de
- 		}
- 	}
- 
-+	sdata->vif.addr_valid = sdata->vif.type != NL80211_IFTYPE_MONITOR ||
-+				(sdata->u.mntr.flags & MONITOR_FLAG_ACTIVE);
- 	switch (sdata->vif.type) {
- 	case NL80211_IFTYPE_AP_VLAN:
- 		/* no need to tell driver, but set carrier and chanctx */
diff --git a/package/kernel/mac80211/patches/subsys/350-mac80211-allow-scanning-while-on-radar-channel.patch b/package/kernel/mac80211/patches/subsys/350-mac80211-allow-scanning-while-on-radar-channel.patch
new file mode 100644
index 0000000000..4c8531d328
--- /dev/null
+++ b/package/kernel/mac80211/patches/subsys/350-mac80211-allow-scanning-while-on-radar-channel.patch
@@ -0,0 +1,372 @@
+--- a/net/mac80211/cfg.c
++++ b/net/mac80211/cfg.c
+@@ -3525,6 +3525,27 @@ static int ieee80211_set_bitrate_mask(st
+ 	return 0;
+ }
+ 
++bool ieee80211_scanning_busy(struct ieee80211_local *local,
++			     struct cfg80211_chan_def *chandef)
++{
++	struct cfg80211_scan_request *scan_req;
++	struct wiphy *wiphy = local->hw.wiphy;
++	u32 mask;
++
++	if (list_empty(&local->roc_list) && !local->scanning)
++		return false;
++
++	if (!wiphy->n_radio)
++		return true;
++
++	mask = ieee80211_offchannel_radio_mask(local);
++	scan_req = wiphy_dereference(wiphy, local->scan_req);
++	if (scan_req)
++		mask |= ieee80211_scan_req_radio_mask(local, scan_req);
++
++	return mask & ieee80211_chandef_radio_mask(local, chandef);
++}
++
+ static int ieee80211_start_radar_detection(struct wiphy *wiphy,
+ 					   struct net_device *dev,
+ 					   struct cfg80211_chan_def *chandef,
+@@ -3538,7 +3559,7 @@ static int ieee80211_start_radar_detecti
+ 
+ 	lockdep_assert_wiphy(local->hw.wiphy);
+ 
+-	if (!list_empty(&local->roc_list) || local->scanning)
++	if (ieee80211_scanning_busy(local, chandef))
+ 		return -EBUSY;
+ 
+ 	link_data = sdata_dereference(sdata->link[link_id], sdata);
+@@ -4030,7 +4051,7 @@ __ieee80211_channel_switch(struct wiphy
+ 
+ 	lockdep_assert_wiphy(local->hw.wiphy);
+ 
+-	if (!list_empty(&local->roc_list) || local->scanning)
++	if (ieee80211_scanning_busy(local, &params->chandef))
+ 		return -EBUSY;
+ 
+ 	if (sdata->wdev.links[link_id].cac_started)
+--- a/net/mac80211/chan.c
++++ b/net/mac80211/chan.c
+@@ -644,14 +644,24 @@ ieee80211_find_chanctx(struct ieee80211_
+ 	return NULL;
+ }
+ 
+-bool ieee80211_is_radar_required(struct ieee80211_local *local)
++bool ieee80211_is_radar_required(struct ieee80211_local *local, u32 radio_mask)
+ {
++	struct ieee80211_chanctx_conf *conf;
+ 	struct ieee80211_link_data *link;
+ 
+ 	lockdep_assert_wiphy(local->hw.wiphy);
+ 
+ 	for_each_sdata_link(local, link) {
+-		if (link->radar_required)
++		if (!link->radar_required)
++			continue;
++		if (!local->hw.wiphy->n_radio)
++			return true;
++
++		conf = wiphy_dereference(local->hw.wiphy, link->conf->chanctx_conf);
++		if (!conf)
++			continue;
++
++		if (conf->radio_idx >= 0 && (radio_mask & BIT(conf->radio_idx)))
+ 			return true;
+ 	}
+ 
+--- a/net/mac80211/ieee80211_i.h
++++ b/net/mac80211/ieee80211_i.h
+@@ -1958,6 +1958,12 @@ int ieee80211_mesh_finish_csa(struct iee
+ 			      u64 *changed);
+ 
+ /* scan/BSS handling */
++u32 ieee80211_scan_req_radio_mask(struct ieee80211_local *local,
++				  struct cfg80211_scan_request *req);
++bool ieee80211_scanning_busy(struct ieee80211_local *local,
++			     struct cfg80211_chan_def *chandef);
++u32 ieee80211_can_leave_ch(struct ieee80211_sub_if_data *sdata,
++			   u32 radio_mask);
+ void ieee80211_scan_work(struct wiphy *wiphy, struct wiphy_work *work);
+ int ieee80211_request_ibss_scan(struct ieee80211_sub_if_data *sdata,
+ 				const u8 *ssid, u8 ssid_len,
+@@ -1996,6 +2002,7 @@ void ieee80211_sched_scan_stopped_work(s
+ /* off-channel/mgmt-tx */
+ void ieee80211_offchannel_stop_vifs(struct ieee80211_local *local);
+ void ieee80211_offchannel_return(struct ieee80211_local *local);
++u32 ieee80211_offchannel_radio_mask(struct ieee80211_local *local);
+ void ieee80211_roc_setup(struct ieee80211_local *local);
+ void ieee80211_start_next_roc(struct ieee80211_local *local);
+ void ieee80211_reconfig_roc(struct ieee80211_local *local);
+@@ -2640,6 +2647,8 @@ bool ieee80211_chandef_s1g_oper(const st
+ 				struct cfg80211_chan_def *chandef);
+ void ieee80211_chandef_downgrade(struct cfg80211_chan_def *chandef,
+ 				 struct ieee80211_conn_settings *conn);
++u32 ieee80211_chandef_radio_mask(struct ieee80211_local *local,
++				 struct cfg80211_chan_def *chandef);
+ static inline void
+ ieee80211_chanreq_downgrade(struct ieee80211_chan_req *chanreq,
+ 			    struct ieee80211_conn_settings *conn)
+@@ -2696,7 +2705,7 @@ void ieee80211_recalc_chanctx_min_def(st
+ 				      struct ieee80211_chanctx *ctx,
+ 				      struct ieee80211_link_data *rsvd_for,
+ 				      bool check_reserved);
+-bool ieee80211_is_radar_required(struct ieee80211_local *local);
++bool ieee80211_is_radar_required(struct ieee80211_local *local, u32 radio_mask);
+ 
+ void ieee80211_dfs_cac_timer_work(struct wiphy *wiphy, struct wiphy_work *work);
+ void ieee80211_dfs_cac_cancel(struct ieee80211_local *local,
+--- a/net/mac80211/offchannel.c
++++ b/net/mac80211/offchannel.c
+@@ -168,6 +168,35 @@ void ieee80211_offchannel_return(struct
+ 					false);
+ }
+ 
++u32 ieee80211_offchannel_radio_mask(struct ieee80211_local *local)
++{
++	const struct wiphy_radio *radio;
++	struct ieee80211_roc_work *roc;
++	u32 mask = 0;
++	int r;
++
++	for (r = 0; r < local->hw.wiphy->n_radio; r++) {
++		radio = &local->hw.wiphy->radio[r];
++
++		list_for_each_entry(roc, &local->roc_list, list) {
++			struct cfg80211_chan_def chandef = {};
++
++			if (!roc->started)
++				continue;
++
++			cfg80211_chandef_create(&chandef, roc->chan,
++						NL80211_CHAN_NO_HT);
++			if (!cfg80211_radio_chandef_valid(radio, &chandef))
++				continue;
++
++			mask |= BIT(r);
++			break;
++		}
++	}
++
++	return mask;
++}
++
+ static void ieee80211_roc_notify_destroy(struct ieee80211_roc_work *roc)
+ {
+ 	/* was never transmitted */
+@@ -566,7 +595,9 @@ static int ieee80211_start_roc_work(stru
+ 				    enum ieee80211_roc_type type)
+ {
+ 	struct ieee80211_roc_work *roc, *tmp;
++	struct cfg80211_chan_def chandef = {};
+ 	bool queued = false, combine_started = true;
++	u32 radio_mask;
+ 	int ret;
+ 
+ 	lockdep_assert_wiphy(local->hw.wiphy);
+@@ -578,6 +609,12 @@ static int ieee80211_start_roc_work(stru
+ 	if (!local->emulate_chanctx && !local->ops->remain_on_channel)
+ 		return -EOPNOTSUPP;
+ 
++	cfg80211_chandef_create(&chandef, channel, NL80211_CHAN_NO_HT);
++	radio_mask = ieee80211_chandef_radio_mask(local, &chandef);
++	if (!ieee80211_can_leave_ch(sdata, radio_mask) &&
++	    !ieee80211_scanning_busy(local, &chandef))
++		return -EBUSY;
++
+ 	roc = kzalloc(sizeof(*roc), GFP_KERNEL);
+ 	if (!roc)
+ 		return -ENOMEM;
+@@ -613,8 +650,7 @@ static int ieee80211_start_roc_work(stru
+ 	}
+ 
+ 	/* if there's no need to queue, handle it immediately */
+-	if (list_empty(&local->roc_list) &&
+-	    !local->scanning && !ieee80211_is_radar_required(local)) {
++	if (list_empty(&local->roc_list) && !local->scanning) {
+ 		/* if not HW assist, just queue & schedule work */
+ 		if (!local->ops->remain_on_channel) {
+ 			list_add_tail(&roc->list, &local->roc_list);
+--- a/net/mac80211/scan.c
++++ b/net/mac80211/scan.c
+@@ -571,36 +571,83 @@ static int ieee80211_start_sw_scan(struc
+ 	return 0;
+ }
+ 
+-static bool __ieee80211_can_leave_ch(struct ieee80211_sub_if_data *sdata)
++u32 ieee80211_scan_req_radio_mask(struct ieee80211_local *local,
++				  struct cfg80211_scan_request *req)
++{
++	const struct wiphy_radio *radio;
++	u32 mask = 0;
++	int i, r;
++
++	for (r = 0; r < local->hw.wiphy->n_radio; r++) {
++		radio = &local->hw.wiphy->radio[r];
++
++		for (i = 0; i < req->n_channels; i++) {
++			struct cfg80211_chan_def chandef = {};
++
++			chandef.chan = req->channels[i];
++			cfg80211_chandef_create(&chandef, req->channels[i],
++						NL80211_CHAN_NO_HT);
++			if (!cfg80211_radio_chandef_valid(radio, &chandef))
++				continue;
++
++			mask |= BIT(r);
++			break;
++		}
++	}
++
++	return mask;
++}
++
++u32 ieee80211_can_leave_ch(struct ieee80211_sub_if_data *sdata,
++			   u32 radio_mask)
+ {
+ 	struct ieee80211_local *local = sdata->local;
+ 	struct ieee80211_sub_if_data *sdata_iter;
++	struct wiphy *wiphy = local->hw.wiphy;
++	struct ieee80211_chanctx_conf *conf;
++	struct ieee80211_link_data *link;
+ 	unsigned int link_id;
+ 
+ 	lockdep_assert_wiphy(local->hw.wiphy);
+ 
+-	if (!ieee80211_is_radar_required(local))
++	if (!ieee80211_is_radar_required(local, radio_mask))
+ 		return true;
+ 
+ 	if (!regulatory_pre_cac_allowed(local->hw.wiphy))
+ 		return false;
+ 
+ 	list_for_each_entry(sdata_iter, &local->interfaces, list) {
+-		for_each_valid_link(&sdata_iter->wdev, link_id)
+-			if (sdata_iter->wdev.links[link_id].cac_started)
++		for_each_valid_link(&sdata_iter->wdev, link_id) {
++			if (!sdata_iter->wdev.links[link_id].cac_started)
++				continue;
++
++			if (!wiphy->n_radio)
+ 				return false;
++
++			link = sdata_dereference(sdata->link[link_id], sdata);
++			if (!link)
++				continue;
++
++			conf = wiphy_dereference(wiphy, link->conf->chanctx_conf);
++			if (!conf)
++				continue;
++
++			if (conf->radio_idx >= 0 &&
++			    (radio_mask & BIT(conf->radio_idx)))
++				return false;
++		}
+ 	}
+ 
+ 	return true;
+ }
+ 
+ static bool ieee80211_can_scan(struct ieee80211_local *local,
+-			       struct ieee80211_sub_if_data *sdata)
++			       struct ieee80211_sub_if_data *sdata,
++			       u32 radio_mask)
+ {
+-	if (!__ieee80211_can_leave_ch(sdata))
+-		return false;
+-
+-	if (!list_empty(&local->roc_list))
++	if (!list_empty(&local->roc_list) &&
++	    (!local->hw.wiphy->n_radio ||
++	     (radio_mask & ieee80211_offchannel_radio_mask(local))))
+ 		return false;
+ 
+ 	if (sdata->vif.type == NL80211_IFTYPE_STATION &&
+@@ -612,15 +659,22 @@ static bool ieee80211_can_scan(struct ie
+ 
+ void ieee80211_run_deferred_scan(struct ieee80211_local *local)
+ {
++	struct ieee80211_sub_if_data *sdata;
++	struct cfg80211_scan_request *req;
++	u32 radio_mask;
++
+ 	lockdep_assert_wiphy(local->hw.wiphy);
+ 
+-	if (!local->scan_req || local->scanning)
++	req = wiphy_dereference(local->hw.wiphy, local->scan_req);
++	if (!req || local->scanning)
++		return;
++
++	radio_mask = ieee80211_scan_req_radio_mask(local, req);
++	sdata = wiphy_dereference(local->hw.wiphy, local->scan_sdata);
++	if (!ieee80211_can_leave_ch(sdata, radio_mask))
+ 		return;
+ 
+-	if (!ieee80211_can_scan(local,
+-				rcu_dereference_protected(
+-					local->scan_sdata,
+-					lockdep_is_held(&local->hw.wiphy->mtx))))
++	if (!ieee80211_can_scan(local, sdata, radio_mask))
+ 		return;
+ 
+ 	wiphy_delayed_work_queue(local->hw.wiphy, &local->scan_work,
+@@ -703,6 +757,7 @@ static int __ieee80211_start_scan(struct
+ {
+ 	struct ieee80211_local *local = sdata->local;
+ 	bool hw_scan = local->ops->hw_scan;
++	u32 radio_mask;
+ 	int rc;
+ 
+ 	lockdep_assert_wiphy(local->hw.wiphy);
+@@ -717,10 +772,11 @@ static int __ieee80211_start_scan(struct
+ 	    !(sdata->vif.active_links & BIT(req->tsf_report_link_id)))
+ 		return -EINVAL;
+ 
+-	if (!__ieee80211_can_leave_ch(sdata))
++	radio_mask = ieee80211_scan_req_radio_mask(local, req);
++	if (!ieee80211_can_leave_ch(sdata, radio_mask))
+ 		return -EBUSY;
+ 
+-	if (!ieee80211_can_scan(local, sdata)) {
++	if (!ieee80211_can_scan(local, sdata, radio_mask)) {
+ 		/* wait for the work to finish/time out */
+ 		rcu_assign_pointer(local->scan_req, req);
+ 		rcu_assign_pointer(local->scan_sdata, sdata);
+--- a/net/mac80211/util.c
++++ b/net/mac80211/util.c
+@@ -877,6 +877,23 @@ struct wireless_dev *ieee80211_vif_to_wd
+ }
+ EXPORT_SYMBOL_GPL(ieee80211_vif_to_wdev);
+ 
++u32 ieee80211_chandef_radio_mask(struct ieee80211_local *local,
++				 struct cfg80211_chan_def *chandef)
++{
++	struct wiphy *wiphy = local->hw.wiphy;
++	const struct wiphy_radio *radio;
++	u32 mask = 0;
++	int i;
++
++	for (i = 0; i < wiphy->n_radio; i++) {
++		radio = &wiphy->radio[i];
++		if (cfg80211_radio_chandef_valid(radio, chandef))
++			mask |= BIT(i);
++	}
++
++	return mask;
++}
++
+ /*
+  * Nothing should have been stuffed into the workqueue during
+  * the suspend->resume cycle. Since we can't check each caller
+--- a/net/wireless/util.c
++++ b/net/wireless/util.c
+@@ -2907,6 +2907,9 @@ bool cfg80211_radio_chandef_valid(const
+ {
+ 	u32 freq, width;
+ 
++	if (!cfg80211_chandef_valid(chandef))
++		return false;
++
+ 	freq = ieee80211_chandef_to_khz(chandef);
+ 	width = nl80211_chan_width_to_mhz(chandef->width);
+ 	if (!ieee80211_radio_freq_range_valid(radio, freq, width))
diff --git a/package/kernel/mac80211/patches/subsys/400-v6.16-wifi-mac80211-do-not-offer-a-mesh-path-if-forwarding.patch b/package/kernel/mac80211/patches/subsys/400-v6.16-wifi-mac80211-do-not-offer-a-mesh-path-if-forwarding.patch
index 7c2c0b9f3f..71ae00e016 100644
--- a/package/kernel/mac80211/patches/subsys/400-v6.16-wifi-mac80211-do-not-offer-a-mesh-path-if-forwarding.patch
+++ b/package/kernel/mac80211/patches/subsys/400-v6.16-wifi-mac80211-do-not-offer-a-mesh-path-if-forwarding.patch
@@ -27,7 +27,7 @@ Reviewed-by: Rouven Czerwinski <rouven@czerwinskis.de>
 
 --- a/net/mac80211/mesh_hwmp.c
 +++ b/net/mac80211/mesh_hwmp.c
-@@ -630,7 +630,7 @@ static void hwmp_preq_frame_process(stru
+@@ -636,7 +636,7 @@ static void hwmp_preq_frame_process(stru
  				mesh_path_add_gate(mpath);
  		}
  		rcu_read_unlock();
@@ -36,7 +36,7 @@ Reviewed-by: Rouven Czerwinski <rouven@czerwinskis.de>
  		rcu_read_lock();
  		mpath = mesh_path_lookup(sdata, target_addr);
  		if (mpath) {
-@@ -648,6 +648,8 @@ static void hwmp_preq_frame_process(stru
+@@ -654,6 +654,8 @@ static void hwmp_preq_frame_process(stru
  			}
  		}
  		rcu_read_unlock();
@@ -45,7 +45,7 @@ Reviewed-by: Rouven Czerwinski <rouven@czerwinskis.de>
  	}
  
  	if (reply) {
-@@ -665,7 +667,7 @@ static void hwmp_preq_frame_process(stru
+@@ -671,7 +673,7 @@ static void hwmp_preq_frame_process(stru
  		}
  	}
  
diff --git a/package/kernel/mt76/patches/003-wifi-mt76-link_id.patch b/package/kernel/mt76/patches/003-wifi-mt76-link_id.patch
new file mode 100644
index 0000000000..494796f979
--- /dev/null
+++ b/package/kernel/mt76/patches/003-wifi-mt76-link_id.patch
@@ -0,0 +1,34 @@
+--- a/mac80211.c
++++ b/mac80211.c
+@@ -1702,7 +1702,7 @@ s8 mt76_get_power_bound(struct mt76_phy
+ EXPORT_SYMBOL_GPL(mt76_get_power_bound);
+ 
+ int mt76_get_txpower(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+-		     int *dbm)
++		     unsigned int link_id, int *dbm)
+ {
+ 	struct mt76_phy *phy = mt76_vif_phy(hw, vif);
+ 	int n_chains, delta;
+--- a/mt76.h
++++ b/mt76.h
+@@ -1496,7 +1496,7 @@ int mt76_get_min_avg_rssi(struct mt76_de
+ s8 mt76_get_power_bound(struct mt76_phy *phy, s8 txpower);
+ 
+ int mt76_get_txpower(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+-		     int *dbm);
++		     unsigned int link_id, int *dbm);
+ int mt76_init_sar_power(struct ieee80211_hw *hw,
+ 			const struct cfg80211_sar_specs *sar);
+ int mt76_get_sar_power(struct mt76_phy *phy,
+--- a/mt7996/main.c
++++ b/mt7996/main.c
+@@ -664,7 +664,8 @@ static void mt7996_configure_filter(stru
+ }
+ 
+ static int
+-mt7996_get_txpower(struct ieee80211_hw *hw, struct ieee80211_vif *vif, int *dbm)
++mt7996_get_txpower(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
++		       unsigned int link_id, int *dbm)
+ {
+ 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+ 	struct mt7996_phy *phy = mt7996_vif_link_phy(&mvif->deflink);
diff --git a/package/kernel/mt76/patches/100-api_update.patch b/package/kernel/mt76/patches/100-api_update.patch
new file mode 100644
index 0000000000..ad3c067813
--- /dev/null
+++ b/package/kernel/mt76/patches/100-api_update.patch
@@ -0,0 +1,46 @@
+--- a/mt7915/main.c
++++ b/mt7915/main.c
+@@ -1224,9 +1224,10 @@ static void mt7915_sta_rc_work(void *dat
+ 
+ static void mt7915_sta_rc_update(struct ieee80211_hw *hw,
+ 				 struct ieee80211_vif *vif,
+-				 struct ieee80211_sta *sta,
++				 struct ieee80211_link_sta *link_sta,
+ 				 u32 changed)
+ {
++	struct ieee80211_sta *sta = link_sta->sta;
+ 	struct mt7915_phy *phy = mt7915_hw_phy(hw);
+ 	struct mt7915_dev *dev = phy->dev;
+ 	struct mt7915_sta *msta = (struct mt7915_sta *)sta->drv_priv;
+@@ -1770,7 +1771,7 @@ const struct ieee80211_ops mt7915_ops =
+ 	.stop_ap = mt7915_stop_ap,
+ 	.sta_state = mt76_sta_state,
+ 	.sta_pre_rcu_remove = mt76_sta_pre_rcu_remove,
+-	.sta_rc_update = mt7915_sta_rc_update,
++	.link_sta_rc_update = mt7915_sta_rc_update,
+ 	.set_key = mt7915_set_key,
+ 	.ampdu_action = mt7915_ampdu_action,
+ 	.set_rts_threshold = mt7915_set_rts_threshold,
+--- a/mt7996/main.c
++++ b/mt7996/main.c
+@@ -1491,9 +1491,10 @@ static void mt7996_sta_rc_work(void *dat
+ 
+ static void mt7996_sta_rc_update(struct ieee80211_hw *hw,
+ 				 struct ieee80211_vif *vif,
+-				 struct ieee80211_sta *sta,
++				 struct ieee80211_link_sta *link_sta,
+ 				 u32 changed)
+ {
++	struct ieee80211_sta *sta = link_sta->sta;
+ 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
+ 
+ 	mt7996_sta_rc_work(&changed, sta);
+@@ -1938,7 +1939,7 @@ const struct ieee80211_ops mt7996_ops =
+ 	.link_info_changed = mt7996_link_info_changed,
+ 	.sta_state = mt7996_sta_state,
+ 	.sta_pre_rcu_remove = mt76_sta_pre_rcu_remove,
+-	.sta_rc_update = mt7996_sta_rc_update,
++	.link_sta_rc_update = mt7996_sta_rc_update,
+ 	.set_key = mt7996_set_key,
+ 	.ampdu_action = mt7996_ampdu_action,
+ 	.set_rts_threshold = mt7996_set_rts_threshold,
diff --git a/package/kernel/rtl8812au-ct/patches/110-link_id.patch b/package/kernel/rtl8812au-ct/patches/110-link_id.patch
new file mode 100644
index 0000000000..70121c27be
--- /dev/null
+++ b/package/kernel/rtl8812au-ct/patches/110-link_id.patch
@@ -0,0 +1,11 @@
+--- a/os_dep/linux/ioctl_cfg80211.c
++++ b/os_dep/linux/ioctl_cfg80211.c
+@@ -3183,7 +3183,7 @@ static int cfg80211_rtw_set_txpower(stru
+ 
+ static int cfg80211_rtw_get_txpower(struct wiphy *wiphy,
+ #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,8,0))
+-                                    struct wireless_dev *wdev,
++                                    struct wireless_dev *wdev, unsigned int link_id,
+ #endif
+                                     int *dbm)
+ {
diff --git a/target/linux/ath79/dts/ar9344_mikrotik_routerboard-951ui-2hnd.dts b/target/linux/ath79/dts/ar9344_mikrotik_routerboard-951ui-2hnd.dts
index 65003cb9a1..f57695eab0 100644
--- a/target/linux/ath79/dts/ar9344_mikrotik_routerboard-951ui-2hnd.dts
+++ b/target/linux/ath79/dts/ar9344_mikrotik_routerboard-951ui-2hnd.dts
@@ -70,5 +70,8 @@
 };
 
 &wmac {
-	qca,led-pin = /bits/ 8 <11>;
+	led {
+		led-sources = <11>;
+		led-active-low;
+	};
 };
diff --git a/target/linux/generic/backport-6.6/330-v6.13-jiffies-Define-secs_to_jiffies.patch b/target/linux/generic/backport-6.6/330-v6.13-jiffies-Define-secs_to_jiffies.patch
new file mode 100644
index 0000000000..117409abfb
--- /dev/null
+++ b/target/linux/generic/backport-6.6/330-v6.13-jiffies-Define-secs_to_jiffies.patch
@@ -0,0 +1,60 @@
+From b35108a51cf7bab58d7eace1267d7965978bcdb8 Mon Sep 17 00:00:00 2001
+From: Easwar Hariharan <eahariha@linux.microsoft.com>
+Date: Wed, 30 Oct 2024 17:47:35 +0000
+Subject: [PATCH] jiffies: Define secs_to_jiffies()
+
+secs_to_jiffies() is defined in hci_event.c and cannot be reused by
+other call sites. Hoist it into the core code to allow conversion of the
+~1150 usages of msecs_to_jiffies() that either:
+
+ - use a multiplier value of 1000 or equivalently MSEC_PER_SEC, or
+ - have timeouts that are denominated in seconds (i.e. end in 000)
+
+It's implemented as a macro to allow usage in static initializers.
+
+This will also allow conversion of yet more sites that use (sec * HZ)
+directly, and improve their readability.
+
+Suggested-by: Michael Kelley <mhklinux@outlook.com>
+Signed-off-by: Easwar Hariharan <eahariha@linux.microsoft.com>
+Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
+Reviewed-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
+Link: https://lore.kernel.org/all/20241030-open-coded-timeouts-v3-1-9ba123facf88@linux.microsoft.com
+---
+ include/linux/jiffies.h   | 13 +++++++++++++
+ net/bluetooth/hci_event.c |  2 --
+ 2 files changed, 13 insertions(+), 2 deletions(-)
+
+--- a/include/linux/jiffies.h
++++ b/include/linux/jiffies.h
+@@ -523,6 +523,19 @@ static __always_inline unsigned long mse
+ 	}
+ }
+ 
++/**
++ * secs_to_jiffies: - convert seconds to jiffies
++ * @_secs: time in seconds
++ *
++ * Conversion is done by simple multiplication with HZ
++ *
++ * secs_to_jiffies() is defined as a macro rather than a static inline
++ * function so it can be used in static initializers.
++ *
++ * Return: jiffies value
++ */
++#define secs_to_jiffies(_secs) ((_secs) * HZ)
++
+ extern unsigned long __usecs_to_jiffies(const unsigned int u);
+ #if !(USEC_PER_SEC % HZ)
+ static inline unsigned long _usecs_to_jiffies(const unsigned int u)
+--- a/net/bluetooth/hci_event.c
++++ b/net/bluetooth/hci_event.c
+@@ -43,8 +43,6 @@
+ #define ZERO_KEY "\x00\x00\x00\x00\x00\x00\x00\x00" \
+ 		 "\x00\x00\x00\x00\x00\x00\x00\x00"
+ 
+-#define secs_to_jiffies(_secs) msecs_to_jiffies((_secs) * 1000)
+-
+ /* Handle HCI Event packets */
+ 
+ static void *hci_ev_skb_pull(struct hci_dev *hdev, struct sk_buff *skb,
diff --git a/target/linux/generic/backport-6.6/331-v6.14-jiffies-Cast-to-unsigned-long-in-secs_to_jiffies-con.patch b/target/linux/generic/backport-6.6/331-v6.14-jiffies-Cast-to-unsigned-long-in-secs_to_jiffies-con.patch
new file mode 100644
index 0000000000..9e15195ab5
--- /dev/null
+++ b/target/linux/generic/backport-6.6/331-v6.14-jiffies-Cast-to-unsigned-long-in-secs_to_jiffies-con.patch
@@ -0,0 +1,35 @@
+From bb2784d9ab49587ba4fbff37a319fff2924db289 Mon Sep 17 00:00:00 2001
+From: Easwar Hariharan <eahariha@linux.microsoft.com>
+Date: Thu, 30 Jan 2025 19:26:58 +0000
+Subject: [PATCH] jiffies: Cast to unsigned long in secs_to_jiffies()
+ conversion
+
+While converting users of msecs_to_jiffies(), lkp reported that some range
+checks would always be true because of the mismatch between the implied int
+value of secs_to_jiffies() vs the unsigned long return value of the
+msecs_to_jiffies() calls it was replacing.
+
+Fix this by casting the secs_to_jiffies() input value to unsigned long.
+
+Fixes: b35108a51cf7ba ("jiffies: Define secs_to_jiffies()")
+Reported-by: kernel test robot <lkp@intel.com>
+Signed-off-by: Easwar Hariharan <eahariha@linux.microsoft.com>
+Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
+Cc: stable@vger.kernel.org
+Link: https://lore.kernel.org/all/20250130192701.99626-1-eahariha@linux.microsoft.com
+Closes: https://lore.kernel.org/oe-kbuild-all/202501301334.NB6NszQR-lkp@intel.com/
+---
+ include/linux/jiffies.h | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+--- a/include/linux/jiffies.h
++++ b/include/linux/jiffies.h
+@@ -534,7 +534,7 @@ static __always_inline unsigned long mse
+  *
+  * Return: jiffies value
+  */
+-#define secs_to_jiffies(_secs) ((_secs) * HZ)
++#define secs_to_jiffies(_secs) (unsigned long)((_secs) * HZ)
+ 
+ extern unsigned long __usecs_to_jiffies(const unsigned int u);
+ #if !(USEC_PER_SEC % HZ)
diff --git a/target/linux/generic/backport-6.6/920-v6.12-clk-provide-devm_clk_get_optional_enabled_with_rate.patch b/target/linux/generic/backport-6.6/920-v6.12-clk-provide-devm_clk_get_optional_enabled_with_rate.patch
new file mode 100644
index 0000000000..4a8e5c4c6e
--- /dev/null
+++ b/target/linux/generic/backport-6.6/920-v6.12-clk-provide-devm_clk_get_optional_enabled_with_rate.patch
@@ -0,0 +1,104 @@
+From 9934a1bd45b2b03f6d1204a6ae2780d3b009799f Mon Sep 17 00:00:00 2001
+From: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
+Date: Mon, 5 Aug 2024 10:57:31 +0200
+Subject: [PATCH] clk: provide devm_clk_get_optional_enabled_with_rate()
+
+There are clock users in the kernel that can't use
+devm_clk_get_optional_enabled() as they need to set rate after getting
+the clock and before enabling it. Provide a managed helper that wraps
+these operations in the correct order.
+
+Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
+Link: https://lore.kernel.org/r/20240805-clk-new-helper-v2-1-e5fdd1e1d729@linaro.org
+Signed-off-by: Stephen Boyd <sboyd@kernel.org>
+---
+ drivers/clk/clk-devres.c | 28 ++++++++++++++++++++++++++++
+ include/linux/clk.h      | 33 +++++++++++++++++++++++++++++++++
+ 2 files changed, 61 insertions(+)
+
+--- a/drivers/clk/clk-devres.c
++++ b/drivers/clk/clk-devres.c
+@@ -99,6 +99,34 @@ struct clk *devm_clk_get_optional_enable
+ }
+ EXPORT_SYMBOL_GPL(devm_clk_get_optional_enabled);
+ 
++struct clk *devm_clk_get_optional_enabled_with_rate(struct device *dev,
++						    const char *id,
++						    unsigned long rate)
++{
++	struct clk *clk;
++	int ret;
++
++	clk = __devm_clk_get(dev, id, clk_get_optional, NULL,
++			     clk_disable_unprepare);
++	if (IS_ERR(clk))
++		return ERR_CAST(clk);
++
++	ret = clk_set_rate(clk, rate);
++	if (ret)
++		goto out_put_clk;
++
++	ret = clk_prepare_enable(clk);
++	if (ret)
++		goto out_put_clk;
++
++	return clk;
++
++out_put_clk:
++	devm_clk_put(dev, clk);
++	return ERR_PTR(ret);
++}
++EXPORT_SYMBOL_GPL(devm_clk_get_optional_enabled_with_rate);
++
+ struct clk_bulk_devres {
+ 	struct clk_bulk_data *clks;
+ 	int num_clks;
+--- a/include/linux/clk.h
++++ b/include/linux/clk.h
+@@ -608,6 +608,32 @@ struct clk *devm_clk_get_optional_prepar
+ struct clk *devm_clk_get_optional_enabled(struct device *dev, const char *id);
+ 
+ /**
++ * devm_clk_get_optional_enabled_with_rate - devm_clk_get_optional() +
++ *                                           clk_set_rate() +
++ *                                           clk_prepare_enable()
++ * @dev: device for clock "consumer"
++ * @id: clock consumer ID
++ * @rate: new clock rate
++ *
++ * Context: May sleep.
++ *
++ * Return: a struct clk corresponding to the clock producer, or
++ * valid IS_ERR() condition containing errno.  The implementation
++ * uses @dev and @id to determine the clock consumer, and thereby
++ * the clock producer.  If no such clk is found, it returns NULL
++ * which serves as a dummy clk.  That's the only difference compared
++ * to devm_clk_get_enabled().
++ *
++ * The returned clk (if valid) is prepared and enabled and rate was set.
++ *
++ * The clock will automatically be disabled, unprepared and freed
++ * when the device is unbound from the bus.
++ */
++struct clk *devm_clk_get_optional_enabled_with_rate(struct device *dev,
++						    const char *id,
++						    unsigned long rate);
++
++/**
+  * devm_get_clk_from_child - lookup and obtain a managed reference to a
+  *			     clock producer from child node.
+  * @dev: device for clock "consumer"
+@@ -948,6 +974,13 @@ static inline struct clk *devm_clk_get_o
+ {
+ 	return NULL;
+ }
++
++static inline struct clk *
++devm_clk_get_optional_enabled_with_rate(struct device *dev, const char *id,
++					unsigned long rate)
++{
++	return NULL;
++}
+ 
+ static inline int __must_check devm_clk_bulk_get(struct device *dev, int num_clks,
+ 						 struct clk_bulk_data *clks)
diff --git a/target/linux/generic/files/include/linux/ath9k_platform.h b/target/linux/generic/files/include/linux/ath9k_platform.h
deleted file mode 100644
index e210108568..0000000000
--- a/target/linux/generic/files/include/linux/ath9k_platform.h
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- * Copyright (c) 2008 Atheros Communications Inc.
- * Copyright (c) 2009 Gabor Juhos <juhosg@openwrt.org>
- * Copyright (c) 2009 Imre Kaloz <kaloz@openwrt.org>
- *
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- *
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
- * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
- * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
- * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
- */
-
-#ifndef _LINUX_ATH9K_PLATFORM_H
-#define _LINUX_ATH9K_PLATFORM_H
-
-#define ATH9K_PLAT_EEP_MAX_WORDS	2048
-
-struct ath9k_platform_data {
-	const char *eeprom_name;
-
-	u16 eeprom_data[ATH9K_PLAT_EEP_MAX_WORDS];
-	u8 *macaddr;
-
-	int led_pin;
-	u32 gpio_mask;
-	u32 gpio_val;
-
-	u32 bt_active_pin;
-	u32 bt_priority_pin;
-	u32 wlan_active_pin;
-
-	bool endian_check;
-	bool is_clk_25mhz;
-	bool tx_gain_buffalo;
-	bool disable_2ghz;
-	bool disable_5ghz;
-	bool led_active_high;
-
-	int (*get_mac_revision)(void);
-	int (*external_reset)(void);
-
-	bool use_eeprom;
-
-	int num_leds;
-	const struct gpio_led *leds;
-
-	unsigned num_btns;
-	const struct gpio_keys_button *btns;
-	unsigned btn_poll_interval;
-};
-
-#endif /* _LINUX_ATH9K_PLATFORM_H */
diff --git a/target/linux/mpc85xx/files/arch/powerpc/boot/dts/tl-wdr4900-v1.dts b/target/linux/mpc85xx/files/arch/powerpc/boot/dts/tl-wdr4900-v1.dts
index 4fd9767d2d..1f3b0dcc4a 100644
--- a/target/linux/mpc85xx/files/arch/powerpc/boot/dts/tl-wdr4900-v1.dts
+++ b/target/linux/mpc85xx/files/arch/powerpc/boot/dts/tl-wdr4900-v1.dts
@@ -349,7 +349,6 @@
 				reg = <0x0000 0 0 0 0>;
 				#gpio-cells = <2>;
 				gpio-controller;
-				qca,led-pin = /bits/ 8 <0>;
 				nvmem-cells = <&cal_caldata_1000>, <&macaddr_uboot_4fc00 0>;
 				nvmem-cell-names = "calibration", "mac-address";
 			};
@@ -380,9 +379,13 @@
 				*/
 				device-id = <0x0030>;
 				class-code = <0x028000>;
-				qca,led-pin = /bits/ 8 <0>;
 				nvmem-cells = <&cal_caldata_5000>, <&macaddr_uboot_4fc00 (-1)>;
 				nvmem-cell-names = "calibration", "mac-address";
+
+				led {
+					led-sources = <0>;
+					led-active-low;
+				};
 			};
 		};
 	};
diff --git a/target/linux/qualcommax/patches-6.6/0820-dt-bindings-net-wireless-ath11k-add-bindings-for-QCN6122.patch b/target/linux/qualcommax/patches-6.6/0820-dt-bindings-net-wireless-ath11k-add-bindings-for-QCN6122.patch
new file mode 100644
index 0000000000..d9eaf582c7
--- /dev/null
+++ b/target/linux/qualcommax/patches-6.6/0820-dt-bindings-net-wireless-ath11k-add-bindings-for-QCN6122.patch
@@ -0,0 +1,62 @@
+From: George Moussalem <george.moussalem@outlook.com>
+Date: Wed, 27 Oct 2024 16:34:11 +0400
+Subject: [PATCH] dt: bindings: net: add bindings for QCN6122
+
+QCN6122 is a PCIe based solution that is attached to and enumerated
+by the WPSS (Wireless Processor SubSystem) Q6 processor.
+
+Though it is a PCIe device, since it is not attached to APSS processor
+(Application Processor SubSystem), APSS will be unaware of such a decice
+and hence it is registered to the APSS processor as a platform device(AHB).
+Because of this hybrid nature, it is called as a hybrid bus device.
+
+As such, QCN6122 is a hybrid bus type device and follows the same codepath
+as for WCN6750.
+
+This is a reversed engineered and heavily simplified version of below
+downstream patch:
+https://git.codelinaro.org/clo/qsdk/oss/system/feeds/wlan-open/-/ \
+blob/NHSS.QSDK.12.4.5.r2/mac80211/patches/232-ath11k-qcn6122-support.patch
+
+Signed-off-by: George Moussalem <george.moussalem@outlook.com>
+---
+--- a/Documentation/devicetree/bindings/net/wireless/qcom,ath11k.yaml
++++ b/Documentation/devicetree/bindings/net/wireless/qcom,ath11k.yaml
+@@ -21,6 +21,7 @@ properties:
+       - qcom,ipq6018-wifi
+       - qcom,wcn6750-wifi
+       - qcom,ipq5018-wifi
++      - qcom,qcn6122-wifi
+ 
+   reg:
+     maxItems: 1
+@@ -258,6 +259,29 @@ allOf:
+             - description: interrupt event for ring DP20
+             - description: interrupt event for ring DP21
+             - description: interrupt event for ring DP22
++  - if:
++      properties:
++        compatible:
++          contains:
++            enum:
++              - qcom,qcn6122-wifi
++    then:
++      properties:
++        interrupts:
++          items:
++            - description: interrupt event for ring CE1
++            - description: interrupt event for ring CE2
++            - description: interrupt event for ring CE3
++            - description: interrupt event for ring CE4
++            - description: interrupt event for ring CE5
++            - description: interrupt event for ring DP1
++            - description: interrupt event for ring DP2
++            - description: interrupt event for ring DP3
++            - description: interrupt event for ring DP4
++            - description: interrupt event for ring DP5
++            - description: interrupt event for ring DP6
++            - description: interrupt event for ring DP7
++            - description: interrupt event for ring DP8
+ 
+ examples:
+   - |
-- 
2.43.0

